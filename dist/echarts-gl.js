(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("echarts"));
	else if(typeof define === 'function' && define.amd)
		define(["echarts"], factory);
	else if(typeof exports === 'object')
		exports["echarts-gl"] = factory(require("echarts"));
	else
		root["echarts-gl"] = factory(root["echarts"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);

	__webpack_require__(89);
	__webpack_require__(151);
	__webpack_require__(166);

	__webpack_require__(172);
	__webpack_require__(180);
	__webpack_require__(185);
	__webpack_require__(193);
	__webpack_require__(200);
	__webpack_require__(204);

	__webpack_require__(207);
	__webpack_require__(210);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * echarts-gl
	 * Extension pack of ECharts providing 3d plots and globe visualization
	 *
	 * Copyright (c) 2014, echarts-gl
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 *
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
	 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
	 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module echarts-gl
	 * @author Yi Shen(http://github.com/pissang)
	 */

	// PENDING Use a single canvas as layer or use image element?
	var echartsGl = {
	    version: '1.0.0',
	    dependencies: {
	        echarts: '3.4.0',
	        qtek: '0.3.0'
	    }
	};
	var echarts = __webpack_require__(2);
	var qtekVersion = __webpack_require__(3);
	var LayerGL = __webpack_require__(4);

	// Version checking
	var deps = echartsGl.dependencies;
	function versionTooOldMsg(name) {
	    throw new Error(
	        name + ' version is too old, needs ' + deps[name] + ' or higher'
	    );
	}
	function checkVersion(version, name) {
	    if ((version.replace('.', '') - 0) < (deps[name].replace('.', '') - 0)) {
	        versionTooOldMsg(name);
	    }
	    console.log('Loaded ' + name + ', version ' + version);
	}
	checkVersion(qtekVersion, 'qtek');
	checkVersion(echarts.version, 'echarts');

	function EChartsGL (zr) {
	    this._layers = {};

	    this._zr = zr;
	}

	EChartsGL.prototype.update = function (ecModel, api) {
	    var self = this;
	    var zr = api.getZr();

	    function getLayerGL(model) {
	        var zlevel = model.get('zlevel');
	        var layers = self._layers;
	        var layerGL = layers[zlevel];
	        if (!layerGL) {
	            layerGL = layers[zlevel] = new LayerGL('gl-' + zlevel, zr);

	            if (zr.painter.isSingleCanvas()) {
	                layerGL.virtual = true;
	                // If container is canvas, use image to represent LayerGL
	                // FIXME Performance
	                var img = new echarts.graphic.Image({
	                    z: 1e4,
	                    style: {
	                        image: layerGL.renderer.canvas
	                    },
	                    silent: true
	                });
	                layerGL.__hostImage = img;

	                zr.add(img);
	            }

	            zr.painter.insertLayer(zlevel, layerGL);
	        }
	        if (layerGL.__hostImage) {
	            layerGL.__hostImage.setStyle({
	                width: layerGL.renderer.getWidth(),
	                height: layerGL.renderer.getHeight()
	            });
	        }

	        return layerGL;
	    }

	    for (var zlevel in this._layers) {
	        this._layers[zlevel].removeViewsAll();
	    }

	    ecModel.eachComponent(function (componentType, componentModel) {
	        if (componentType !== 'series') {
	            var view = api.getViewOfComponentModel(componentModel);
	            var coordSys = componentModel.coordinateSystem;
	            // View with __ecgl__ flag is a echarts-gl component.
	            if (view.__ecgl__) {
	                var viewGL;
	                if (coordSys) {
	                    if (!coordSys.viewGL) {
	                        console.error('Can\'t find viewGL in coordinateSystem of component ' + componentModel.id);
	                        return;
	                    }
	                    viewGL = coordSys.viewGL;
	                }
	                else {
	                    if (!componentModel.viewGL) {
	                        console.error('Can\'t find viewGL of component ' + componentModel.id);
	                        return;
	                    }
	                    viewGL = coordSys.viewGL;
	                }

	                var viewGL = coordSys.viewGL;
	                var layerGL = getLayerGL(componentModel);

	                layerGL.addView(viewGL);

	                view.afterRender && view.afterRender(
	                    componentModel, ecModel, api, layerGL
	                );
	            }
	        }
	    });

	    ecModel.eachSeries(function (seriesModel) {
	        var chartView = api.getViewOfSeriesModel(seriesModel);
	        var coordSys = seriesModel.coordinateSystem;
	        if (chartView.__ecgl__) {
	            if ((coordSys && !coordSys.viewGL) && !chartView.viewGL) {
	                console.error('Can\'t find viewGL of series ' + chartView.id);
	                return;
	            }
	            var viewGL = (coordSys && coordSys.viewGL) || chartView.viewGL;
	            // TODO Check zlevel not same with component of coordinate system ?
	            var layerGL = getLayerGL(seriesModel);
	            layerGL.addView(viewGL);

	            chartView.afterRender && chartView.afterRender(
	                seriesModel, ecModel, api, layerGL
	            );

	            var silent = seriesModel.get('silent');
	            chartView.groupGL && chartView.groupGL.traverse(function (mesh) {
	                if (mesh.isRenderable && mesh.isRenderable()) {
	                    mesh.ignorePicking = mesh.$ignorePicking != null
	                        ? mesh.$ignorePicking : silent;
	                }
	            });
	        }
	    });
	};


	echarts.registerPostUpdate(function (ecModel, api) {
	    var zr = api.getZr();

	    var egl = zr.__egl = zr.__egl || new EChartsGL(zr);

	    egl.update(ecModel, api);
	});

	echarts.graphicGL = __webpack_require__(31);

	module.exports = EChartsGL;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	
	    module.exports = '0.3.0';


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provide WebGL layer to zrender. Which is rendered on top of qtek.
	 *
	 *
	 * Relationship between zrender, LayerGL and ViewGL(Scene, Camera, Viewport)
	 *           zrender
	 *           /     \
	 *      LayerGL   LayerGL
	 *    (renderer) (renderer)
	 *      /     \
	 *  ViewGL   ViewGL
	 *
	 * @module echarts-gl/core/LayerGL
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var echarts = __webpack_require__(2);
	var Renderer = __webpack_require__(5);
	var RayPicking = __webpack_require__(25);
	var Texture = __webpack_require__(21);

	// PENDING, qtek notifier is same with zrender Eventful
	var notifier = __webpack_require__(8);
	var requestAnimationFrame = __webpack_require__(30);

	/**
	 * @constructor
	 * @alias module:echarts-gl/core/LayerGL
	 * @param {string} id Layer ID
	 * @param {module:zrender/ZRender} zr
	 */
	var LayerGL = function (id, zr) {

	    /**
	     * Layer ID
	     * @type {string}
	     */
	    this.id = id;

	    /**
	     * @type {module:zrender/ZRender}
	     */
	    this.zr = zr;

	    /**
	     * @type {qtek.Renderer}
	     */
	    try {
	        this.renderer = new Renderer({
	            clearBit: 0,
	            devicePixelRatio: zr.painter.dpr,
	            preserveDrawingBuffer: true
	        });
	        this.renderer.resize(zr.painter.getWidth(), zr.painter.getHeight());
	    }
	    catch (e) {
	        this.renderer = null;
	        this.dom = document.createElement('div');
	        this.dom.style.cssText = 'position:absolute; left: 0; top: 0; right: 0; bottom: 0;';
	        this.dom.className = 'ecgl-nowebgl';
	        this.dom.innerHTML = 'Sorry, your browser does support WebGL';

	        console.error(e);
	        return;
	    }

	    this.onglobalout = this.onglobalout.bind(this);
	    zr.on('globalout', this.onglobalout);

	    /**
	     * Canvas dom for webgl rendering
	     * @type {HTMLCanvasElement}
	     */
	    this.dom = this.renderer.canvas;
	    var style = this.dom.style;
	    style.position = 'absolute';
	    style.left = '0';
	    style.top = '0';

	    /**
	     * @type {Array.<qtek.Scene>}
	     */
	    this.views = [];

	    this._picking = new RayPicking({
	        renderer: this.renderer
	    });

	    this._viewsToDispose = [];

	    /**
	     * Current accumulating id.
	     */
	    this._accumulatingId = 0;
	};

	/**
	 * @param {module:echarts-gl/core/ViewGL} view
	 */
	LayerGL.prototype.addView = function (view) {
	    if (view.layer === this) {
	        return;
	    }
	    // If needs to dispose in this layer. unmark it.
	    var idx = this._viewsToDispose.indexOf(view);
	    if (idx >= 0) {
	        this._viewsToDispose.splice(idx, 1);
	    }

	    this.views.push(view);

	    view.layer = this;

	    var zr = this.zr;
	    view.scene.traverse(function (node) {
	        node.__zr = zr;
	        if (node.addAnimatorsToZr) {
	            node.addAnimatorsToZr(zr);
	        }
	    });
	};

	function removeFromZr(node) {
	    var zr = node.__zr;
	    node.__zr = null;
	    if (zr && node.removeAnimatorsFromZr) {
	        node.removeAnimatorsFromZr(zr);
	    }
	}
	/**
	 * @param {module:echarts-gl/core/ViewGL} view
	 */
	LayerGL.prototype.removeView = function (view) {
	    if (view.layer !== this) {
	        return;
	    }

	    var idx = this.views.indexOf(view);
	    if (idx >= 0) {
	        this.views.splice(idx, 1);
	        view.scene.traverse(removeFromZr, this);
	        view.layer = null;

	        // Mark to dispose in this layer.
	        this._viewsToDispose.push(view);
	    }
	};

	/**
	 * Remove all views
	 */
	LayerGL.prototype.removeViewsAll = function () {
	    this.views.forEach(function (view) {
	        view.scene.traverse(removeFromZr, this);
	        view.layer = null;

	        // Mark to dispose in this layer.
	        this._viewsToDispose.push(view);
	    }, this);

	    this.views.length = 0;

	};

	/**
	 * Resize the canvas and viewport, will be invoked by zrender
	 * @param  {number} width
	 * @param  {number} height
	 */
	LayerGL.prototype.resize = function (width, height) {
	    var renderer = this.renderer;
	    renderer.resize(width, height);
	};

	/**
	 * Clear color and depth
	 * @return {[type]} [description]
	 */
	LayerGL.prototype.clear = function () {
	    var gl = this.renderer.gl;
	    gl.clearColor(0, 0, 0, 0);
	    gl.depthMask(true);
	    gl.colorMask(true, true, true, true);
	    gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
	};

	/**
	 * Clear depth
	 */
	LayerGL.prototype.clearDepth = function () {
	    var gl = this.renderer.gl;
	    gl.clear(gl.DEPTH_BUFFER_BIT);
	};

	/**
	 * Clear color
	 */
	LayerGL.prototype.clearColor = function () {
	    var gl = this.renderer.gl;
	    gl.clearColor(0, 0, 0, 0);
	    gl.clear(gl.COLOR_BUFFER_BIT);
	};

	/**
	 * Mark layer to refresh next tick
	 */
	LayerGL.prototype.needsRefresh = function () {
	    this.zr.refresh();
	};

	/**
	 * Refresh the layer, will be invoked by zrender
	 */
	LayerGL.prototype.refresh = function () {

	    for (var i = 0; i < this.views.length; i++) {
	        this.views[i].prepareRender();
	    }

	    this._doRender(false);

	    // Auto dispose unused resources on GPU, like program(shader), texture, geometry(buffers)
	    this._trackAndClean();

	    // Dispose trashed views
	    for (var i = 0; i < this._viewsToDispose.length; i++) {
	        this._viewsToDispose[i].dispose(this.renderer);
	    }
	    this._viewsToDispose.length = 0;

	    this._startAccumulating();
	};

	LayerGL.prototype._doRender = function (accumulating) {
	    this.clear();
	    this.renderer.saveViewport();
	    for (var i = 0; i < this.views.length; i++) {
	        this.views[i].render(this.renderer, accumulating);
	    }
	    this.renderer.restoreViewport();
	};

	/**
	 * Stop accumulating
	 */
	LayerGL.prototype._stopAccumulating = function () {
	    this._accumulatingId = 0;
	    clearTimeout(this._accumulatingTimeout);
	};

	var accumulatingId = 1;
	/**
	 * Start accumulating all the views.
	 * Accumulating is for antialising and have more sampling in SSAO
	 * @private
	 */
	LayerGL.prototype._startAccumulating = function () {
	    var self = this;
	    this._stopAccumulating();

	    var needsAccumulate = false;
	    for (var i = 0; i < this.views.length; i++) {
	        needsAccumulate = this.views[i].needsAccumulate() || needsAccumulate;
	    }
	    if (!needsAccumulate) {
	        return;
	    }

	    function accumulate(id) {
	        if (!self._accumulatingId || id !== self._accumulatingId) {
	            return;
	        }

	        var isFinished = true;
	        for (var i = 0; i < self.views.length; i++) {
	            isFinished = self.views[i].isAccumulateFinished() && needsAccumulate;
	        }

	        if (!isFinished) {
	            self._doRender(true);
	            requestAnimationFrame(function () {
	                accumulate(id);
	            });
	        }
	    }

	    this._accumulatingId = accumulatingId++;
	    this._accumulatingTimeout = setTimeout(function () {
	        accumulate(self._accumulatingId);
	    }, 50);
	};

	function getId(resource) {
	    return resource.__GUID__;
	}
	// configs for Auto GC for GPU resources
	// PENDING
	var MAX_SHADER_COUNT = 60;
	var MAX_GEOMETRY_COUNT = 20;
	var MAX_TEXTURE_COUNT = 20;

	function checkAndDispose(gl, resourceMap, maxCount) {
	    var count = 0;
	    // FIXME not allocate array.
	    var unused = [];
	    for (var id in resourceMap) {
	        if (!resourceMap[id].count) {
	            unused.push(resourceMap[id].target);
	        }
	        else {
	            count++;
	        }
	    }
	    for (var i = 0; i < Math.min(count - maxCount, unused.length); i++) {
	        unused[i].dispose(gl);
	    }
	}

	function addToMap(map, target) {
	    var id = getId(target);
	    map[id] = map[id] || {
	        count: 0, target: target
	    };
	    map[id].count++;
	}
	LayerGL.prototype._trackAndClean = function () {
	    var shadersMap = this._shadersMap = this._shadersMap || {};
	    var texturesMap = this._texturesMap = this._texturesMap || {};
	    var geometriesMap = this._geometriesMap = this._geometriesMap || {};

	    for (var id in shadersMap) {
	        shadersMap[id].count = 0;
	    }
	    for (var id in texturesMap) {
	        texturesMap[id].count = 0;
	    }
	    for (var id in geometriesMap) {
	        geometriesMap[id].count = 0;
	    }

	    function trackQueue(queue) {
	        for (var i = 0; i < queue.length; i++) {
	            var renderable = queue[i];
	            var geometry = renderable.geometry;
	            var material = renderable.material;
	            var shader = material.shader;
	            addToMap(geometriesMap, geometry);
	            addToMap(shadersMap, shader);

	            for (var name in material.uniforms) {
	                var val = material.uniforms[name].value;
	                if (val instanceof Texture) {
	                    addToMap(texturesMap, val);
	                }
	                else if (val instanceof Array) {
	                    for (var k = 0; k < val.length; k++) {
	                        if (val[k] instanceof Texture) {
	                            addToMap(texturesMap, val[k]);
	                        }
	                    }
	                }
	            }
	        }
	    }
	    for (var i = 0; i < this.views.length; i++) {
	        var viewGL = this.views[i];
	        var scene = viewGL.scene;

	        trackQueue(scene.opaqueQueue);
	        trackQueue(scene.transparentQueue);

	        for (var k = 0; k < scene.lights.length; k++) {
	            // Track AmbientCubemap
	            if (scene.lights[k].cubemap) {
	                addToMap(texturesMap, scene.lights[k].cubemap);
	            }
	        }
	    }
	    // Dispose those unsed resources
	    var gl = this.renderer.gl;

	    checkAndDispose(gl, shadersMap, MAX_SHADER_COUNT);
	    checkAndDispose(gl, texturesMap, MAX_TEXTURE_COUNT);
	    checkAndDispose(gl, geometriesMap, MAX_GEOMETRY_COUNT);
	};

	/**
	 * Dispose the layer
	 */
	LayerGL.prototype.dispose = function () {
	    this._stopAccumulating();
	    this.renderer.disposeScene(this.scene);

	    this.zr.off('globalout', this.onglobalout);
	};

	// Event handlers
	LayerGL.prototype.onmousedown = function (e) {
	    e = e.event;
	    var obj = this.pickObject(e.offsetX, e.offsetY);
	    if (obj) {
	        this._dispatchEvent('mousedown', e, obj);
	    }

	    this._downX = e.offsetX;
	    this._downY = e.offsetY;
	};

	LayerGL.prototype.onmousemove = function (e) {
	    e = e.event;
	    var obj = this.pickObject(e.offsetX, e.offsetY);

	    var target = obj && obj.target;
	    var lastHovered = this._hovered;
	    this._hovered = obj;

	    if (lastHovered && target !== lastHovered.target) {
	        lastHovered.relatedTarget = target;
	        this._dispatchEvent('mouseout', e, lastHovered);

	        this.zr.setCursorStyle('default');
	    }

	    this._dispatchEvent('mousemove', e, obj);

	    if (obj) {
	        this.zr.setCursorStyle('pointer');

	        if (!lastHovered || (target !== lastHovered.target)) {
	            this._dispatchEvent('mouseover', e, obj);
	        }
	    }
	};

	LayerGL.prototype.onmouseup = function (e) {
	    e = e.event;
	    var obj = this.pickObject(e.offsetX, e.offsetY);

	    this._dispatchEvent('mouseup', e, obj);

	    this._upX = e.offsetX;
	    this._upY = e.offsetY;
	};

	LayerGL.prototype.onclick = function (e) {
	    // Ignore click event if mouse moved
	    var dx = this._upX - this._downX;
	    var dy = this._upY - this._downY;
	    if (Math.sqrt(dx * dx + dy * dy) > 20) {
	        return;
	    }

	    e = e.event;
	    var obj = this.pickObject(e.offsetX, e.offsetY);

	    this._dispatchEvent('click', e, obj);

	    // Try set depth of field onclick
	    var result = this._clickToSetFocusPoint(e);
	    if (result) {
	        var success = result.view.setDOFFocusOnPoint(result.distance);
	        if (success) {
	            this.zr.refresh();
	        }
	    }
	};

	LayerGL.prototype._clickToSetFocusPoint = function (e) {
	    var renderer = this.renderer;
	    var oldViewport = renderer.viewport;
	    for (var i = this.views.length - 1; i >= 0; i--) {
	        var viewGL = this.views[i];
	        if (viewGL.hasDOF() && viewGL.containPoint(e.offsetX, e.offsetY)) {
	            this._picking.scene = viewGL.scene;
	            this._picking.camera = viewGL.camera;
	            // Only used for picking, renderer.setViewport will also invoke gl.viewport.
	            // Set directly, PENDING.
	            renderer.viewport = viewGL.viewport;
	            var result = this._picking.pick(e.offsetX, e.offsetY, true);
	            if (result) {
	                result.view = viewGL;
	                return result;
	            }
	        }
	    }
	    renderer.viewport = oldViewport;
	};

	LayerGL.prototype.onglobalout = function (e) {
	    var lastHovered = this._hovered;
	    if (lastHovered) {
	        this._dispatchEvent('mouseout', e, {
	            target: lastHovered.target
	        });
	    }
	};

	LayerGL.prototype.pickObject = function (x, y) {

	    var output = [];
	    var renderer = this.renderer;
	    var oldViewport = renderer.viewport;
	    for (var i = 0; i < this.views.length; i++) {
	        var viewGL = this.views[i];
	        if (viewGL.containPoint(x, y)) {
	            this._picking.scene = viewGL.scene;
	            this._picking.camera = viewGL.camera;
	            // Only used for picking, renderer.setViewport will also invoke gl.viewport.
	            // Set directly, PENDING.
	            renderer.viewport = viewGL.viewport;
	            this._picking.pickAll(x, y, output);
	        }
	    }
	    renderer.viewport = oldViewport;
	    output.sort(function (a, b) {
	        return a.distance - b.distance;
	    });
	    return output[0];
	};

	LayerGL.prototype._dispatchEvent = function (eveName, originalEvent, newEvent) {
	    if (!newEvent) {
	        newEvent = {};
	    }
	    var current = newEvent.target;

	    newEvent.cancelBubble = false;
	    newEvent.event = originalEvent;
	    newEvent.type = eveName;
	    newEvent.offsetX = originalEvent.offsetX;
	    newEvent.offsetY = originalEvent.offsetY;

	    while (current) {
	        current.trigger(eveName, newEvent);
	        current = current.getParent();

	        if (newEvent.cancelBubble) {
	            break;
	        }
	    }

	    this._dispatchToView(eveName, newEvent);
	};

	LayerGL.prototype._dispatchToView = function (eventName, e) {
	    for (var i = 0; i < this.views.length; i++) {
	        if (this.views[i].containPoint(e.offsetX, e.offsetY)) {
	            this.views[i].trigger(eventName, e);
	        }
	    }
	};

	echarts.util.extend(LayerGL.prototype, notifier);

	module.exports = LayerGL;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// TODO Resources like shader, texture, geometry reference management
	// Trace and find out which shader, texture, geometry can be destroyed
	//
	// TODO prez skinning


	    var Base = __webpack_require__(6);
	    var glinfo = __webpack_require__(10);
	    var glenum = __webpack_require__(11);
	    var vendor = __webpack_require__(12);
	    var BoundingBox = __webpack_require__(13);
	    var Matrix4 = __webpack_require__(16);
	    var shaderLibrary = __webpack_require__(17);
	    var Material = __webpack_require__(20);
	    var Vector2 = __webpack_require__(22);

	    // Light header
	    var Shader = __webpack_require__(18);
	    Shader['import'](__webpack_require__(23));

	    var glMatrix = __webpack_require__(15);
	    var mat4 = glMatrix.mat4;
	    var vec3 = glMatrix.vec3;

	    var mat4Create = mat4.create;

	    var glid = 0;

	    var errorShader = {};

	    /**
	     * @constructor qtek.Renderer
	     */
	    var Renderer = Base.extend(function () {
	        return /** @lends qtek.Renderer# */ {

	            /**
	             * @type {HTMLCanvasElement}
	             * @readonly
	             */
	            canvas: null,

	            /**
	             * Canvas width, set by resize method
	             * @type {number}
	             * @private
	             */
	            _width: 100,

	            /**
	             * Canvas width, set by resize method
	             * @type {number}
	             * @private
	             */
	            _height: 100,

	            /**
	             * Device pixel ratio, set by setDevicePixelRatio method
	             * Specially for high defination display
	             * @see http://www.khronos.org/webgl/wiki/HandlingHighDPI
	             * @type {number}
	             * @private
	             */
	            devicePixelRatio: window.devicePixelRatio || 1.0,

	            /**
	             * Clear color
	             * @type {number[]}
	             */
	            clearColor: [0.0, 0.0, 0.0, 0.0],

	            /**
	             * Default:
	             *     _gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT | _gl.STENCIL_BUFFER_BIT
	             * @type {number}
	             */
	            clearBit: 17664,

	            // Settings when getting context
	            // http://www.khronos.org/registry/webgl/specs/latest/#2.4

	            /**
	             * If enable alpha, default true
	             * @type {boolean}
	             */
	            alpha: true,
	            /**
	             * If enable depth buffer, default true
	             * @type {boolean}
	             */
	            depth: true,
	            /**
	             * If enable stencil buffer, default false
	             * @type {boolean}
	             */
	            stencil: false,
	            /**
	             * If enable antialias, default true
	             * @type {boolean}
	             */
	            antialias: true,
	            /**
	             * If enable premultiplied alpha, default true
	             * @type {boolean}
	             */
	            premultipliedAlpha: true,
	            /**
	             * If preserve drawing buffer, default false
	             * @type {boolean}
	             */
	            preserveDrawingBuffer: false,
	            /**
	             * If throw context error, usually turned on in debug mode
	             * @type {boolean}
	             */
	            throwError: true,
	            /**
	             * WebGL Context created from given canvas
	             * @type {WebGLRenderingContext}
	             */
	            gl: null,
	            /**
	             * Renderer viewport, read-only, can be set by setViewport method
	             * @type {Object}
	             */
	            viewport: {},

	            // Set by FrameBuffer#bind
	            __currentFrameBuffer: null,

	            _viewportStack: [],
	            _clearStack: [],

	            _sceneRendering: null
	        };
	    }, function () {

	        if (!this.canvas) {
	            this.canvas = document.createElement('canvas');
	        }
	        var canvas = this.canvas;
	        try {
	            var opts = {
	                alpha: this.alpha,
	                depth: this.depth,
	                stencil: this.stencil,
	                antialias: this.antialias,
	                premultipliedAlpha: this.premultipliedAlpha,
	                preserveDrawingBuffer: this.preserveDrawingBuffer
	            };

	            this.gl = canvas.getContext('webgl', opts)
	                || canvas.getContext('experimental-webgl', opts);

	            if (!this.gl) {
	                throw new Error();
	            }

	            if (this.gl.__GLID__ == null) {
	                // gl context is not created
	                // Otherwise is the case mutiple renderer share the same gl context
	                this.gl.__GLID__ = glid++;

	                glinfo.initialize(this.gl);
	            }

	            this.resize();
	        }
	        catch(e) {
	            throw 'Error creating WebGL Context ' + e;
	        }
	    },
	    /** @lends qtek.Renderer.prototype. **/
	    {
	        /**
	         * Resize the canvas
	         * @param {number} width
	         * @param {number} height
	         */
	        resize: function(width, height) {
	            var canvas = this.canvas;
	            // http://www.khronos.org/webgl/wiki/HandlingHighDPI
	            // set the display size of the canvas.
	            var dpr = this.devicePixelRatio;
	            if (width != null) {
	                canvas.style.width = width + 'px';
	                canvas.style.height = height + 'px';
	                // set the size of the drawingBuffer
	                canvas.width = width * dpr;
	                canvas.height = height * dpr;

	                this._width = width;
	                this._height = height;
	            }
	            else {
	                this._width = canvas.width / dpr;
	                this._height = canvas.height / dpr;
	            }

	            this.setViewport(0, 0, this._width, this._height);
	        },

	        /**
	         * Get renderer width
	         * @return {number}
	         */
	        getWidth: function () {
	            return this._width;
	        },

	        /**
	         * Get renderer height
	         * @return {number}
	         */
	        getHeight: function () {
	            return this._height;
	        },

	        /**
	         * Get viewport aspect,
	         */
	        getViewportAspect: function () {
	            var viewport = this.viewport;
	            return viewport.width / viewport.height;
	        },

	        /**
	         * Set devicePixelRatio
	         * @param {number} devicePixelRatio
	         */
	        setDevicePixelRatio: function(devicePixelRatio) {
	            this.devicePixelRatio = devicePixelRatio;
	            this.resize(this._width, this._height);
	        },

	        /**
	         * Get devicePixelRatio
	         * @param {number} devicePixelRatio
	         */
	        getDevicePixelRatio: function () {
	            return this.devicePixelRatio;
	        },

	        /**
	         * Get WebGL extionsion
	         * @return {object}
	         */
	        getExtension: function (name) {
	            return glinfo.getExtension(this.gl, name);
	        },

	        /**
	         * Set rendering viewport
	         * @param {number|Object} x
	         * @param {number} [y]
	         * @param {number} [width]
	         * @param {number} [height]
	         * @param {number} [devicePixelRatio]
	         *        Defaultly use the renderere devicePixelRatio
	         *        It needs to be 1 when setViewport is called by frameBuffer
	         *
	         * @example
	         *  setViewport(0,0,width,height,1)
	         *  setViewport({
	         *      x: 0,
	         *      y: 0,
	         *      width: width,
	         *      height: height,
	         *      devicePixelRatio: 1
	         *  })
	         */
	        setViewport: function (x, y, width, height, dpr) {

	            if (typeof x === 'object') {
	                var obj = x;

	                x = obj.x;
	                y = obj.y;
	                width = obj.width;
	                height = obj.height;
	                dpr = obj.devicePixelRatio;
	            }
	            dpr = dpr || this.devicePixelRatio;

	            this.gl.viewport(
	                x * dpr, y * dpr, width * dpr, height * dpr
	            );
	            // Use a fresh new object, not write property.
	            this.viewport = {
	                x: x,
	                y: y,
	                width: width,
	                height: height,
	                devicePixelRatio: dpr
	            };
	        },

	        /**
	         * Push current viewport into a stack
	         */
	        saveViewport: function () {
	            this._viewportStack.push(this.viewport);
	        },

	        /**
	         * Pop viewport from stack, restore in the renderer
	         */
	        restoreViewport: function () {
	            if (this._viewportStack.length > 0) {
	                this.setViewport(this._viewportStack.pop());
	            }
	        },

	        /**
	         * Push current clear into a stack
	         */
	        saveClear: function () {
	            this._clearStack.push({
	                clearBit: this.clearBit,
	                clearColor: this.clearColor
	            });
	        },

	        /**
	         * Pop clear from stack, restore in the renderer
	         */
	        restoreClear: function () {
	            if (this._clearStack.length > 0) {
	                var opt = this._clearStack.pop();
	                this.clearColor = opt.clearColor;
	                this.clearBit = opt.clearBit;
	            }
	        },

	        bindSceneRendering: function (scene) {
	            this._sceneRendering = scene;
	        },

	        // Hook before and after render each object
	        beforeRenderObject: function () {},
	        afterRenderObject: function () {},
	        /**
	         * Render the scene in camera to the screen or binded offline framebuffer
	         * @param  {qtek.Scene}       scene
	         * @param  {qtek.Camera}      camera
	         * @param  {boolean}     [notUpdateScene] If not call the scene.update methods in the rendering, default true
	         * @param  {boolean}     [preZ]           If use preZ optimization, default false
	         * @return {IRenderInfo}
	         */
	        render: function(scene, camera, notUpdateScene, preZ) {
	            var _gl = this.gl;

	            this._sceneRendering = scene;

	            var clearColor = this.clearColor;

	            if (this.clearBit) {

	                // Must set depth and color mask true before clear
	                _gl.colorMask(true, true, true, true);
	                _gl.depthMask(true);
	                var viewport = this.viewport;
	                var needsScissor = false;
	                var viewportDpr = viewport.devicePixelRatio;
	                if (viewport.width !== this._width || viewport.height !== this._height
	                    || (viewportDpr && viewportDpr !== this.devicePixelRatio)
	                    || viewport.x || viewport.y
	                ) {
	                    needsScissor = true;
	                    // http://stackoverflow.com/questions/11544608/how-to-clear-a-rectangle-area-in-webgl
	                    // Only clear the viewport
	                    _gl.enable(_gl.SCISSOR_TEST);
	                    _gl.scissor(viewport.x * viewportDpr, viewport.y * viewportDpr, viewport.width * viewportDpr, viewport.height * viewportDpr);
	                }
	                _gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
	                _gl.clear(this.clearBit);
	                if (needsScissor) {
	                    _gl.disable(_gl.SCISSOR_TEST);
	                }
	            }

	            // If the scene have been updated in the prepass like shadow map
	            // There is no need to update it again
	            if (!notUpdateScene) {
	                scene.update(false);
	            }
	            // Update if camera not mounted on the scene
	            if (!camera.getScene()) {
	                camera.update(true);
	            }

	            var opaqueQueue = scene.opaqueQueue;
	            var transparentQueue = scene.transparentQueue;
	            var sceneMaterial = scene.material;

	            scene.trigger('beforerender', this, scene, camera);
	            // Sort render queue
	            // Calculate the object depth
	            if (transparentQueue.length > 0) {
	                var worldViewMat = mat4Create();
	                var posViewSpace = vec3.create();
	                for (var i = 0; i < transparentQueue.length; i++) {
	                    var node = transparentQueue[i];
	                    mat4.multiplyAffine(worldViewMat, camera.viewMatrix._array, node.worldTransform._array);
	                    vec3.transformMat4(posViewSpace, node.position._array, worldViewMat);
	                    node.__depth = posViewSpace[2];
	                }
	            }
	            opaqueQueue.sort(this.opaqueSortFunc);
	            transparentQueue.sort(this.transparentSortFunc);

	            // Render Opaque queue
	            scene.trigger('beforerender:opaque', this, opaqueQueue);

	            // Reset the scene bounding box;
	            scene.viewBoundingBoxLastFrame.min.set(Infinity, Infinity, Infinity);
	            scene.viewBoundingBoxLastFrame.max.set(-Infinity, -Infinity, -Infinity);

	            _gl.disable(_gl.BLEND);
	            _gl.enable(_gl.DEPTH_TEST);
	            var opaqueRenderInfo = this.renderQueue(opaqueQueue, camera, sceneMaterial, preZ);

	            scene.trigger('afterrender:opaque', this, opaqueQueue, opaqueRenderInfo);
	            scene.trigger('beforerender:transparent', this, transparentQueue);

	            // Render Transparent Queue
	            _gl.enable(_gl.BLEND);
	            var transparentRenderInfo = this.renderQueue(transparentQueue, camera, sceneMaterial);

	            scene.trigger('afterrender:transparent', this, transparentQueue, transparentRenderInfo);
	            var renderInfo = {};
	            for (var name in opaqueRenderInfo) {
	                renderInfo[name] = opaqueRenderInfo[name] + transparentRenderInfo[name];
	            }

	            scene.trigger('afterrender', this, scene, camera, renderInfo);

	            // Cleanup
	            this._sceneRendering = null;
	            return renderInfo;
	        },

	        resetRenderStatus: function () {
	            this._currentShader = null;
	        },
	        /**
	         * Render a single renderable list in camera in sequence
	         * @param  {qtek.Renderable[]} queue       List of all renderables.
	         *                                         Best to be sorted by Renderer.opaqueSortFunc or Renderer.transparentSortFunc
	         * @param  {qtek.Camera}       camera
	         * @param  {qtek.Material}     [globalMaterial] globalMaterial will override the material of each renderable
	         * @param  {boolean}           [preZ]           If use preZ optimization, default false
	         * @return {IRenderInfo}
	         */
	        renderQueue: function(queue, camera, globalMaterial, preZ) {
	            var renderInfo = {
	                triangleCount: 0,
	                vertexCount: 0,
	                drawCallCount: 0,
	                meshCount: queue.length,
	                renderedMeshCount: 0
	            };

	            // Some common builtin uniforms
	            var viewport = this.viewport;
	            var vDpr = viewport.devicePixelRatio;
	            var viewportUniform = [
	                viewport.x * vDpr, viewport.y * vDpr,
	                viewport.width * vDpr, viewport.height * vDpr
	            ];
	            var windowDpr = this.devicePixelRatio;
	            var windowSizeUniform = this.__currentFrameBuffer
	                ? [this.__currentFrameBuffer.getTextureWidth(), this.__currentFrameBuffer.getTextureHeight()]
	                : [this._width * windowDpr, this._height * windowDpr];
	            // DEPRECATED
	            var viewportSizeUniform = [
	                viewportUniform[2], viewportUniform[3]
	            ];
	            var time = Date.now();

	            // Calculate view and projection matrix
	            mat4.copy(matrices.VIEW, camera.viewMatrix._array);
	            mat4.copy(matrices.PROJECTION, camera.projectionMatrix._array);
	            mat4.multiply(matrices.VIEWPROJECTION, camera.projectionMatrix._array, matrices.VIEW);
	            mat4.copy(matrices.VIEWINVERSE, camera.worldTransform._array);
	            mat4.invert(matrices.PROJECTIONINVERSE, matrices.PROJECTION);
	            mat4.invert(matrices.VIEWPROJECTIONINVERSE, matrices.VIEWPROJECTION);

	            var _gl = this.gl;
	            var scene = this._sceneRendering;

	            var prevMaterial;

	            // Status
	            var depthTest, depthMask;
	            var culling, cullFace, frontFace;

	            var culledRenderQueue;
	            if (preZ) {
	                var preZPassMaterial = new Material({
	                    shader: shaderLibrary.get('qtek.prez')
	                });
	                var preZPassShader = preZPassMaterial.shader;

	                culledRenderQueue = [];
	                preZPassShader.bind(_gl);
	                _gl.colorMask(false, false, false, false);
	                _gl.depthMask(true);
	                _gl.enable(_gl.DEPTH_TEST);
	                for (var i = 0; i < queue.length; i++) {
	                    var renderable = queue[i];
	                    var worldM = renderable.worldTransform._array;
	                    var geometry = renderable.geometry;

	                    mat4.multiplyAffine(matrices.WORLDVIEW, matrices.VIEW , worldM);

	                    if (geometry.boundingBox) {
	                        if (this.isFrustumCulled(
	                            renderable, scene, camera, matrices.WORLDVIEW, matrices.PROJECTION
	                        )) {
	                            continue;
	                        }
	                    }
	                    if (renderable.skeleton) {  // FIXME  skinned mesh
	                        continue;
	                    }

	                    mat4.multiply(matrices.WORLDVIEWPROJECTION, matrices.VIEWPROJECTION , worldM);

	                    if (renderable.cullFace !== cullFace) {
	                        cullFace = renderable.cullFace;
	                        _gl.cullFace(cullFace);
	                    }
	                    if (renderable.frontFace !== frontFace) {
	                        frontFace = renderable.frontFace;
	                        _gl.frontFace(frontFace);
	                    }
	                    if (renderable.culling !== culling) {
	                        culling = renderable.culling;
	                        culling ? _gl.enable(_gl.CULL_FACE) : _gl.disable(_gl.CULL_FACE);
	                    }

	                    var semanticInfo = preZPassShader.matrixSemantics.WORLDVIEWPROJECTION;
	                    preZPassShader.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, matrices.WORLDVIEWPROJECTION);

	                    // PENDING If invoke beforeRender hook
	                    renderable.render(_gl, preZPassMaterial.shader);
	                    culledRenderQueue.push(renderable);
	                }
	                _gl.depthFunc(_gl.LEQUAL);
	                _gl.colorMask(true, true, true, true);
	                _gl.depthMask(false);

	                // Reset current shader.
	                this._currentShader = null;
	            }
	            else {
	                culledRenderQueue = queue;
	            }

	            culling = null;
	            cullFace = null;
	            frontFace = null;

	            for (var i = 0; i < culledRenderQueue.length; i++) {
	                var renderable = culledRenderQueue[i];
	                var geometry = renderable.geometry;

	                var worldM = renderable.worldTransform._array;
	                // All matrices ralated to world matrix will be updated on demand;
	                mat4.multiplyAffine(matrices.WORLDVIEW, matrices.VIEW , worldM);
	                if (geometry.boundingBox && !preZ) {
	                    if (this.isFrustumCulled(
	                        renderable, scene, camera, matrices.WORLDVIEW, matrices.PROJECTION
	                    )) {
	                        continue;
	                    }
	                }

	                var material = globalMaterial || renderable.material;
	                // StandardMaterial needs updateShader method so shader can be created on demand.
	                if (material !== prevMaterial) {
	                    material.updateShader && material.updateShader(_gl);
	                }

	                var shader = material.shader;

	                mat4.copy(matrices.WORLD, worldM);
	                mat4.multiply(matrices.WORLDVIEWPROJECTION, matrices.VIEWPROJECTION , worldM);
	                if (shader.matrixSemantics.WORLDINVERSE ||
	                    shader.matrixSemantics.WORLDINVERSETRANSPOSE) {
	                    mat4.invert(matrices.WORLDINVERSE, worldM);
	                }
	                if (shader.matrixSemantics.WORLDVIEWINVERSE ||
	                    shader.matrixSemantics.WORLDVIEWINVERSETRANSPOSE) {
	                    mat4.invert(matrices.WORLDVIEWINVERSE, matrices.WORLDVIEW);
	                }
	                if (shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSE ||
	                    shader.matrixSemantics.WORLDVIEWPROJECTIONINVERSETRANSPOSE) {
	                    mat4.invert(matrices.WORLDVIEWPROJECTIONINVERSE, matrices.WORLDVIEWPROJECTION);
	                }

	                // FIXME Optimize for compositing.
	                // var prevShader = this._sceneRendering ? null : this._currentShader;
	                var prevShader = null;

	                // Before render hook
	                renderable.beforeRender(_gl);
	                this.beforeRenderObject(renderable, prevMaterial, prevShader);

	                var shaderChanged = !shader.isEqual(prevShader);
	                if (shaderChanged) {
	                    // Set lights number
	                    if (scene && scene.isShaderLightNumberChanged(shader)) {
	                        scene.setShaderLightNumber(shader);
	                    }
	                    var errMsg = shader.bind(_gl);
	                    if (errMsg) {

	                        if (errorShader[shader.__GUID__]) {
	                            continue;
	                        }
	                        errorShader[shader.__GUID__] = true;

	                        if (this.throwError) {
	                            throw new Error(errMsg);
	                        }
	                        else {
	                            this.trigger('error', errMsg);
	                        }
	                    }
	                    // Set some common uniforms
	                    shader.setUniformOfSemantic(_gl, 'VIEWPORT', viewportUniform);
	                    shader.setUniformOfSemantic(_gl, 'WINDOW_SIZE', windowSizeUniform);
	                    shader.setUniformOfSemantic(_gl, 'NEAR', camera.near);
	                    shader.setUniformOfSemantic(_gl, 'FAR', camera.far);
	                    shader.setUniformOfSemantic(_gl, 'DEVICEPIXELRATIO', vDpr);
	                    shader.setUniformOfSemantic(_gl, 'TIME', time);
	                    // DEPRECATED
	                    shader.setUniformOfSemantic(_gl, 'VIEWPORT_SIZE', viewportSizeUniform);

	                    // Set lights uniforms
	                    // TODO needs optimized
	                    if (scene) {
	                        scene.setLightUniforms(shader, _gl);
	                    }

	                    // Save current used shader in the renderer
	                    // ALWAYS USE RENDERER TO DRAW THE MESH
	                    // this._currentShader = shader;
	                }
	                else {
	                    shader = prevShader;
	                }

	                if (prevMaterial !== material) {
	                    if (!preZ) {
	                        if (material.depthTest !== depthTest) {
	                            material.depthTest ?
	                                _gl.enable(_gl.DEPTH_TEST) :
	                                _gl.disable(_gl.DEPTH_TEST);
	                            depthTest = material.depthTest;
	                        }
	                        if (material.depthMask !== depthMask) {
	                            _gl.depthMask(material.depthMask);
	                            depthMask = material.depthMask;
	                        }
	                    }
	                    material.bind(_gl, shader, prevMaterial, prevShader);
	                    prevMaterial = material;

	                    // TODO cache blending
	                    if (material.transparent) {
	                        if (material.blend) {
	                            material.blend(_gl);
	                        }
	                        else {    // Default blend function
	                            _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
	                            _gl.blendFuncSeparate(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
	                        }
	                    }
	                }

	                var matrixSemanticKeys = shader.matrixSemanticKeys;
	                for (var k = 0; k < matrixSemanticKeys.length; k++) {
	                    var semantic = matrixSemanticKeys[k];
	                    var semanticInfo = shader.matrixSemantics[semantic];
	                    var matrix = matrices[semantic];
	                    if (semanticInfo.isTranspose) {
	                        var matrixNoTranspose = matrices[semanticInfo.semanticNoTranspose];
	                        mat4.transpose(matrix, matrixNoTranspose);
	                    }
	                    shader.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, matrix);
	                }

	                if (renderable.cullFace !== cullFace) {
	                    cullFace = renderable.cullFace;
	                    _gl.cullFace(cullFace);
	                }
	                if (renderable.frontFace !== frontFace) {
	                    frontFace = renderable.frontFace;
	                    _gl.frontFace(frontFace);
	                }
	                if (renderable.culling !== culling) {
	                    culling = renderable.culling;
	                    culling ? _gl.enable(_gl.CULL_FACE) : _gl.disable(_gl.CULL_FACE);
	                }

	                var objectRenderInfo = renderable.render(_gl, shader);

	                if (objectRenderInfo) {
	                    renderInfo.triangleCount += objectRenderInfo.triangleCount;
	                    renderInfo.vertexCount += objectRenderInfo.vertexCount;
	                    renderInfo.drawCallCount += objectRenderInfo.drawCallCount;
	                    renderInfo.renderedMeshCount ++;
	                }

	                // After render hook
	                this.afterRenderObject(renderable, objectRenderInfo);
	                renderable.afterRender(_gl, objectRenderInfo);
	            }

	            if (preZ) {
	                // default depth func
	                _gl.depthFunc(_gl.LESS);
	            }

	            return renderInfo;
	        },

	        /**
	         * If an scene object is culled by camera frustum
	         *
	         * Object can be a renderable or a light
	         *
	         * @param {qtek.Node} Scene object
	         * @param {qtek.Camera} camera
	         * @param {Array.<number>} worldViewMat represented with array
	         * @param {Array.<number>} projectionMat represented with array
	         */
	        isFrustumCulled: (function () {
	            // Frustum culling
	            // http://www.cse.chalmers.se/~uffe/vfc_bbox.pdf
	            var cullingBoundingBox = new BoundingBox();
	            var cullingMatrix = new Matrix4();
	            return function(object, scene, camera, worldViewMat, projectionMat) {
	                // Bounding box can be a property of object(like light) or renderable.geometry
	                var geoBBox = object.boundingBox || object.geometry.boundingBox;
	                cullingMatrix._array = worldViewMat;
	                cullingBoundingBox.copy(geoBBox);
	                cullingBoundingBox.applyTransform(cullingMatrix);

	                // Passingly update the scene bounding box
	                // FIXME exclude very large mesh like ground plane or terrain ?
	                // FIXME Only rendererable which cast shadow ?

	                // FIXME boundingBox becomes much larger after transformd.
	                if (scene && object.isRenderable() && object.castShadow) {
	                    scene.viewBoundingBoxLastFrame.union(cullingBoundingBox);
	                }

	                if (object.frustumCulling)  {
	                    if (!cullingBoundingBox.intersectBoundingBox(camera.frustum.boundingBox)) {
	                        return true;
	                    }

	                    cullingMatrix._array = projectionMat;
	                    if (
	                        cullingBoundingBox.max._array[2] > 0 &&
	                        cullingBoundingBox.min._array[2] < 0
	                    ) {
	                        // Clip in the near plane
	                        cullingBoundingBox.max._array[2] = -1e-20;
	                    }

	                    cullingBoundingBox.applyProjection(cullingMatrix);

	                    var min = cullingBoundingBox.min._array;
	                    var max = cullingBoundingBox.max._array;

	                    if (
	                        max[0] < -1 || min[0] > 1
	                        || max[1] < -1 || min[1] > 1
	                        || max[2] < -1 || min[2] > 1
	                    ) {
	                        return true;
	                    }
	                }

	                return false;
	            };
	        })(),

	        /**
	         * Dispose given scene, including all geometris, textures and shaders in the scene
	         * @param {qtek.Scene} scene
	         */
	        disposeScene: function(scene) {
	            this.disposeNode(scene, true, true);
	            scene.dispose();
	        },

	        /**
	         * Dispose given node, including all geometries, textures and shaders attached on it or its descendant
	         * @param {qtek.Node} node
	         * @param {boolean} [disposeGeometry=false] If dispose the geometries used in the descendant mesh
	         * @param {boolean} [disposeTexture=false] If dispose the textures used in the descendant mesh
	         */
	        disposeNode: function(root, disposeGeometry, disposeTexture) {
	            var materials = {};
	            var _gl = this.gl;
	            // Dettached from parent
	            if (root.getParent()) {
	                root.getParent().remove(root);
	            }
	            root.traverse(function(node) {
	                if (node.geometry && disposeGeometry) {
	                    node.geometry.dispose(_gl);
	                }
	                if (node.material) {
	                    materials[node.material.__GUID__] = node.material;
	                }
	                // Particle system and AmbientCubemap light need to dispose
	                if (node.dispose) {
	                    node.dispose(_gl);
	                }
	            });
	            for (var guid in materials) {
	                var mat = materials[guid];
	                mat.dispose(_gl, disposeTexture);
	            }
	        },

	        /**
	         * Dispose given shader
	         * @param {qtek.Shader} shader
	         */
	        disposeShader: function(shader) {
	            shader.dispose(this.gl);
	        },

	        /**
	         * Dispose given geometry
	         * @param {qtek.Geometry} geometry
	         */
	        disposeGeometry: function(geometry) {
	            geometry.dispose(this.gl);
	        },

	        /**
	         * Dispose given texture
	         * @param {qtek.Texture} texture
	         */
	        disposeTexture: function(texture) {
	            texture.dispose(this.gl);
	        },

	        /**
	         * Dispose given frame buffer
	         * @param {qtek.FrameBuffer} frameBuffer
	         */
	        disposeFrameBuffer: function(frameBuffer) {
	            frameBuffer.dispose(this.gl);
	        },

	        /**
	         * Dispose renderer
	         */
	        dispose: function () {
	            glinfo.dispose(this.gl);
	        },

	        /**
	         * Convert screen coords to normalized device coordinates(NDC)
	         * Screen coords can get from mouse event, it is positioned relative to canvas element
	         * NDC can be used in ray casting with Camera.prototype.castRay methods
	         *
	         * @param  {number}       x
	         * @param  {number}       y
	         * @param  {qtek.math.Vector2} [out]
	         * @return {qtek.math.Vector2}
	         */
	        screenToNDC: function(x, y, out) {
	            if (!out) {
	                out = new Vector2();
	            }
	            // Invert y;
	            y = this._height - y;

	            var viewport = this.viewport;
	            var arr = out._array;
	            arr[0] = (x - viewport.x) / viewport.width;
	            arr[0] = arr[0] * 2 - 1;
	            arr[1] = (y - viewport.y) / viewport.height;
	            arr[1] = arr[1] * 2 - 1;

	            return out;
	        }
	    });

	    /**
	     * Opaque renderables compare function
	     * @param  {qtek.Renderable} x
	     * @param  {qtek.Renderable} y
	     * @return {boolean}
	     * @static
	     */
	    Renderer.opaqueSortFunc = Renderer.prototype.opaqueSortFunc = function(x, y) {
	        // Priority renderOrder -> shader -> material -> geometry
	        if (x.renderOrder === y.renderOrder) {
	            if (x.material.shader === y.material.shader) {
	                if (x.material === y.material) {
	                    return x.geometry.__GUID__ - y.geometry.__GUID__;
	                }
	                return x.material.__GUID__ - y.material.__GUID__;
	            }
	            return x.material.shader.__GUID__ - y.material.shader.__GUID__;
	        }
	        return x.renderOrder - y.renderOrder;
	    };

	    /**
	     * Transparent renderables compare function
	     * @param  {qtek.Renderable} a
	     * @param  {qtek.Renderable} b
	     * @return {boolean}
	     * @static
	     */
	    Renderer.transparentSortFunc = Renderer.prototype.transparentSortFunc = function(x, y) {
	        // Priority renderOrder -> depth -> shader -> material -> geometry

	        if (x.renderOrder === y.renderOrder) {
	            if (x.__depth === y.__depth) {
	                if (x.material.shader === y.material.shader) {
	                    if (x.material === y.material) {
	                        return x.geometry.__GUID__ - y.geometry.__GUID__;
	                    }
	                    return x.material.__GUID__ - y.material.__GUID__;
	                }
	                return x.material.shader.__GUID__ - y.material.shader.__GUID__;
	            }
	            // Depth is negative
	            // So farther object has smaller depth value
	            return x.__depth - y.__depth;
	        }
	        return x.renderOrder - y.renderOrder;
	    };

	    // Temporary variables
	    var matrices = {
	        WORLD: mat4Create(),
	        VIEW: mat4Create(),
	        PROJECTION: mat4Create(),
	        WORLDVIEW: mat4Create(),
	        VIEWPROJECTION: mat4Create(),
	        WORLDVIEWPROJECTION: mat4Create(),

	        WORLDINVERSE: mat4Create(),
	        VIEWINVERSE: mat4Create(),
	        PROJECTIONINVERSE: mat4Create(),
	        WORLDVIEWINVERSE: mat4Create(),
	        VIEWPROJECTIONINVERSE: mat4Create(),
	        WORLDVIEWPROJECTIONINVERSE: mat4Create(),

	        WORLDTRANSPOSE: mat4Create(),
	        VIEWTRANSPOSE: mat4Create(),
	        PROJECTIONTRANSPOSE: mat4Create(),
	        WORLDVIEWTRANSPOSE: mat4Create(),
	        VIEWPROJECTIONTRANSPOSE: mat4Create(),
	        WORLDVIEWPROJECTIONTRANSPOSE: mat4Create(),
	        WORLDINVERSETRANSPOSE: mat4Create(),
	        VIEWINVERSETRANSPOSE: mat4Create(),
	        PROJECTIONINVERSETRANSPOSE: mat4Create(),
	        WORLDVIEWINVERSETRANSPOSE: mat4Create(),
	        VIEWPROJECTIONINVERSETRANSPOSE: mat4Create(),
	        WORLDVIEWPROJECTIONINVERSETRANSPOSE: mat4Create()
	    };

	    Renderer.COLOR_BUFFER_BIT = glenum.COLOR_BUFFER_BIT;
	    Renderer.DEPTH_BUFFER_BIT = glenum.DEPTH_BUFFER_BIT;
	    Renderer.STENCIL_BUFFER_BIT = glenum.STENCIL_BUFFER_BIT;

	    module.exports = Renderer;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var extendMixin = __webpack_require__(7);
	    var notifierMixin = __webpack_require__(8);
	    var util = __webpack_require__(9);

	    /**
	     * Base class of all objects
	     * @constructor
	     * @alias qtek.core.Base
	     * @mixes qtek.core.mixin.notifier
	     */
	    var Base = function () {
	        /**
	         * @type {number}
	         */
	        this.__GUID__ = util.genGUID();
	    };

	    Base.__initializers__ = [
	        function (opts) {
	            util.extend(this, opts);
	        }
	    ];

	    util.extend(Base, extendMixin);
	    util.extend(Base.prototype, notifierMixin);

	    module.exports = Base;


/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';


	    /**
	     * Extend a sub class from base class
	     * @param {object|Function} makeDefaultOpt default option of this sub class, method of the sub can use this.xxx to access this option
	     * @param {Function} [initialize] Initialize after the sub class is instantiated
	     * @param {Object} [proto] Prototype methods/properties of the sub class
	     * @memberOf qtek.core.mixin.extend
	     * @return {Function}
	     */
	    function derive(makeDefaultOpt, initialize/*optional*/, proto/*optional*/) {

	        if (typeof initialize == 'object') {
	            proto = initialize;
	            initialize = null;
	        }

	        var _super = this;

	        var propList;
	        if (!(makeDefaultOpt instanceof Function)) {
	            // Optimize the property iterate if it have been fixed
	            propList = [];
	            for (var propName in makeDefaultOpt) {
	                if (makeDefaultOpt.hasOwnProperty(propName)) {
	                    propList.push(propName);
	                }
	            }
	        }

	        var sub = function(options) {

	            // call super constructor
	            _super.apply(this, arguments);

	            if (makeDefaultOpt instanceof Function) {
	                // Invoke makeDefaultOpt each time if it is a function, So we can make sure each
	                // property in the object will not be shared by mutiple instances
	                extend(this, makeDefaultOpt.call(this, options));
	            }
	            else {
	                extendWithPropList(this, makeDefaultOpt, propList);
	            }

	            if (this.constructor === sub) {
	                // Initialize function will be called in the order of inherit
	                var initializers = sub.__initializers__;
	                for (var i = 0; i < initializers.length; i++) {
	                    initializers[i].apply(this, arguments);
	                }
	            }
	        };
	        // save super constructor
	        sub.__super__ = _super;
	        // Initialize function will be called after all the super constructor is called
	        if (!_super.__initializers__) {
	            sub.__initializers__ = [];
	        } else {
	            sub.__initializers__ = _super.__initializers__.slice();
	        }
	        if (initialize) {
	            sub.__initializers__.push(initialize);
	        }

	        var Ctor = function() {};
	        Ctor.prototype = _super.prototype;
	        sub.prototype = new Ctor();
	        sub.prototype.constructor = sub;
	        extend(sub.prototype, proto);

	        // extend the derive method as a static method;
	        sub.extend = _super.extend;

	        // DEPCRATED
	        sub.derive = _super.extend;

	        return sub;
	    }

	    function extend(target, source) {
	        if (!source) {
	            return;
	        }
	        for (var name in source) {
	            if (source.hasOwnProperty(name)) {
	                target[name] = source[name];
	            }
	        }
	    }

	    function extendWithPropList(target, source, propList) {
	        for (var i = 0; i < propList.length; i++) {
	            var propName = propList[i];
	            target[propName] = source[propName];
	        }
	    }

	    /**
	     * @alias qtek.core.mixin.extend
	     * @mixin
	     */
	    module.exports = {

	        extend: derive,

	        // DEPCRATED
	        derive: derive
	    };


/***/ },
/* 8 */
/***/ function(module, exports) {

	

	    function Handler(action, context) {
	        this.action = action;
	        this.context = context;
	    }
	    /**
	     * @mixin
	     * @alias qtek.core.mixin.notifier
	     */
	    var notifier = {
	        /**
	         * Trigger event
	         * @param  {string} name
	         */
	        trigger: function(name) {
	            if (!this.hasOwnProperty('__handlers__')) {
	                return;
	            }
	            if (!this.__handlers__.hasOwnProperty(name)) {
	                return;
	            }

	            var hdls = this.__handlers__[name];
	            var l = hdls.length, i = -1, args = arguments;
	            // Optimize advise from backbone
	            switch (args.length) {
	                case 1:
	                    while (++i < l) {
	                        hdls[i].action.call(hdls[i].context);
	                    }
	                    return;
	                case 2:
	                    while (++i < l) {
	                        hdls[i].action.call(hdls[i].context, args[1]);
	                    }
	                    return;
	                case 3:
	                    while (++i < l) {
	                        hdls[i].action.call(hdls[i].context, args[1], args[2]);
	                    }
	                    return;
	                case 4:
	                    while (++i < l) {
	                        hdls[i].action.call(hdls[i].context, args[1], args[2], args[3]);
	                    }
	                    return;
	                case 5:
	                    while (++i < l) {
	                        hdls[i].action.call(hdls[i].context, args[1], args[2], args[3], args[4]);
	                    }
	                    return;
	                default:
	                    while (++i < l) {
	                        hdls[i].action.apply(hdls[i].context, Array.prototype.slice.call(args, 1));
	                    }
	                    return;
	            }
	        },
	        /**
	         * Register event handler
	         * @param  {string} name
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        on: function(name, action, context) {
	            if (!name || !action) {
	                return;
	            }
	            var handlers = this.__handlers__ || (this.__handlers__={});
	            if (!handlers[name]) {
	                handlers[name] = [];
	            }
	            else {
	                if (this.has(name, action)) {
	                    return;
	                }
	            }
	            var handler = new Handler(action, context || this);
	            handlers[name].push(handler);

	            return this;
	        },

	        /**
	         * Register event, event will only be triggered once and then removed
	         * @param  {string} name
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        once: function(name, action, context) {
	            if (!name || !action) {
	                return;
	            }
	            var self = this;
	            function wrapper() {
	                self.off(name, wrapper);
	                action.apply(this, arguments);
	            }
	            return this.on(name, wrapper, context);
	        },

	        /**
	         * Alias of once('before' + name)
	         * @param  {string} name
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        before: function(name, action, context) {
	            if (!name || !action) {
	                return;
	            }
	            name = 'before' + name;
	            return this.on(name, action, context);
	        },

	        /**
	         * Alias of once('after' + name)
	         * @param  {string} name
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        after: function(name, action, context) {
	            if (!name || !action) {
	                return;
	            }
	            name = 'after' + name;
	            return this.on(name, action, context);
	        },

	        /**
	         * Alias of on('success')
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        success: function(action, context) {
	            return this.once('success', action, context);
	        },

	        /**
	         * Alias of on('error')
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        error: function(action, context) {
	            return this.once('error', action, context);
	        },

	        /**
	         * Alias of on('success')
	         * @param  {Function} action
	         * @param  {Object} [context]
	         * @chainable
	         */
	        off: function(name, action) {

	            var handlers = this.__handlers__ || (this.__handlers__={});

	            if (!action) {
	                handlers[name] = [];
	                return;
	            }
	            if (handlers[name]) {
	                var hdls = handlers[name];
	                var retains = [];
	                for (var i = 0; i < hdls.length; i++) {
	                    if (action && hdls[i].action !== action) {
	                        retains.push(hdls[i]);
	                    }
	                }
	                handlers[name] = retains;
	            }

	            return this;
	        },

	        /**
	         * If registered the event handler
	         * @param  {string}  name
	         * @param  {Function}  action
	         * @return {boolean}
	         */
	        has: function(name, action) {
	            var handlers = this.__handlers__;

	            if (! handlers ||
	                ! handlers[name]) {
	                return false;
	            }
	            var hdls = handlers[name];
	            for (var i = 0; i < hdls.length; i++) {
	                if (hdls[i].action === action) {
	                    return true;
	                }
	            }
	        }
	    };

	    module.exports = notifier;


/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';


	    var guid = 0;

	    var ArrayProto = Array.prototype;
	    var nativeForEach = ArrayProto.forEach;

	    /**
	     * Util functions
	     * @namespace qtek.core.util
	     */
		var util = {

	        /**
	         * Generate GUID
	         * @return {number}
	         * @memberOf qtek.core.util
	         */
			genGUID: function() {
				return ++guid;
			},
	        /**
	         * Relative path to absolute path
	         * @param  {string} path
	         * @param  {string} basePath
	         * @return {string}
	         * @memberOf qtek.core.util
	         */
	        relative2absolute: function(path, basePath) {
	            if (!basePath || path.match(/^\//)) {
	                return path;
	            }
	            var pathParts = path.split('/');
	            var basePathParts = basePath.split('/');

	            var item = pathParts[0];
	            while(item === '.' || item === '..') {
	                if (item === '..') {
	                    basePathParts.pop();
	                }
	                pathParts.shift();
	                item = pathParts[0];
	            }
	            return basePathParts.join('/') + '/' + pathParts.join('/');
	        },

	        /**
	         * Extend target with source
	         * @param  {Object} target
	         * @param  {Object} source
	         * @return {Object}
	         * @memberOf qtek.core.util
	         */
	        extend: function(target, source) {
	            if (source) {
	                for (var name in source) {
	                    if (source.hasOwnProperty(name)) {
	                        target[name] = source[name];
	                    }
	                }
	            }
	            return target;
	        },

	        /**
	         * Extend properties to target if not exist.
	         * @param  {Object} target
	         * @param  {Object} source
	         * @return {Object}
	         * @memberOf qtek.core.util
	         */
	        defaults: function(target, source) {
	            if (source) {
	                for (var propName in source) {
	                    if (target[propName] === undefined) {
	                        target[propName] = source[propName];
	                    }
	                }
	            }
	            return target;
	        },
	        /**
	         * Extend properties with a given property list to avoid for..in.. iteration.
	         * @param  {Object} target
	         * @param  {Object} source
	         * @param  {Array.<string>} propList
	         * @return {Object}
	         * @memberOf qtek.core.util
	         */
	        extendWithPropList: function(target, source, propList) {
	            if (source) {
	                for (var i = 0; i < propList.length; i++) {
	                    var propName = propList[i];
	                    target[propName] = source[propName];
	                }
	            }
	            return target;
	        },
	        /**
	         * Extend properties to target if not exist. With a given property list avoid for..in.. iteration.
	         * @param  {Object} target
	         * @param  {Object} source
	         * @param  {Array.<string>} propList
	         * @return {Object}
	         * @memberOf qtek.core.util
	         */
	        defaultsWithPropList: function(target, source, propList) {
	            if (source) {
	                for (var i = 0; i < propList.length; i++) {
	                    var propName = propList[i];
	                    if (target[propName] == null) {
	                        target[propName] = source[propName];
	                    }
	                }
	            }
	            return target;
	        },
	        /**
	         * @param  {Object|Array} obj
	         * @param  {Function} iterator
	         * @param  {Object} [context]
	         * @memberOf qtek.core.util
	         */
	        each: function(obj, iterator, context) {
	            if (!(obj && iterator)) {
	                return;
	            }
	            if (obj.forEach && obj.forEach === nativeForEach) {
	                obj.forEach(iterator, context);
	            } else if (obj.length === + obj.length) {
	                for (var i = 0, len = obj.length; i < len; i++) {
	                    iterator.call(context, obj[i], i, obj);
	                }
	            } else {
	                for (var key in obj) {
	                    if (obj.hasOwnProperty(key)) {
	                        iterator.call(context, obj[key], key, obj);
	                    }
	                }
	            }
	        },

	        /**
	         * Is object ?
	         * @param  {}  obj
	         * @return {boolean}
	         * @memberOf qtek.core.util
	         */
	        isObject: function(obj) {
	            return obj === Object(obj);
	        },

	        /**
	         * Is array ?
	         * @param  {}  obj
	         * @return {boolean}
	         * @memberOf qtek.core.util
	         */
	        isArray: function(obj) {
	            return obj instanceof Array;
	        },

	        /**
	         * Is array like, which have a length property
	         * @param  {}  obj
	         * @return {boolean}
	         * @memberOf qtek.core.util
	         */
	        isArrayLike: function(obj) {
	            if (!obj) {
	                return false;
	            } else {
	                return obj.length === + obj.length;
	            }
	        },

	        /**
	         * @param  {} obj
	         * @return {}
	         * @memberOf qtek.core.util
	         */
	        clone: function(obj) {
	            if (!util.isObject(obj)) {
	                return obj;
	            } else if (util.isArray(obj)) {
	                return obj.slice();
	            } else if (util.isArrayLike(obj)) { // is typed array
	                var ret = new obj.constructor(obj.length);
	                for (var i = 0; i < obj.length; i++) {
	                    ret[i] = obj[i];
	                }
	                return ret;
	            } else {
	                return util.extend({}, obj);
	            }
	        }
		};

	    module.exports = util;


/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	/**
	 * @namespace qtek.core.glinfo
	 * @see http://www.khronos.org/registry/webgl/extensions/
	 */


	    var EXTENSION_LIST = [
	        'OES_texture_float',
	        'OES_texture_half_float',
	        'OES_texture_float_linear',
	        'OES_texture_half_float_linear',
	        'OES_standard_derivatives',
	        'OES_vertex_array_object',
	        'OES_element_index_uint',
	        'WEBGL_compressed_texture_s3tc',
	        'WEBGL_depth_texture',
	        'EXT_texture_filter_anisotropic',
	        'EXT_shader_texture_lod',
	        'WEBGL_draw_buffers',
	        'EXT_frag_depth'
	    ];

	    var PARAMETER_NAMES = [
	        'MAX_TEXTURE_SIZE',
	        'MAX_CUBE_MAP_TEXTURE_SIZE'
	    ];

	    var extensions = {};
	    var parameters = {};

	    var glinfo = {
	        /**
	         * Initialize all extensions and parameters in context
	         * @param  {WebGLRenderingContext} _gl
	         * @memberOf qtek.core.glinfo
	         */
	        initialize: function (_gl) {
	            var glid = _gl.__GLID__;
	            if (extensions[glid]) {
	                return;
	            }
	            extensions[glid] = {};
	            parameters[glid] = {};
	            // Get webgl extension
	            for (var i = 0; i < EXTENSION_LIST.length; i++) {
	                var extName = EXTENSION_LIST[i];

	                this._createExtension(_gl, extName);
	            }
	            // Get parameters
	            for (var i = 0; i < PARAMETER_NAMES.length; i++) {
	                var name = PARAMETER_NAMES[i];
	                parameters[glid][name] = _gl.getParameter(_gl[name]);
	            }
	        },

	        /**
	         * Get extension
	         * @param  {WebGLRenderingContext} _gl
	         * @param {string} name - Extension name, vendorless
	         * @return {WebGLExtension}
	         * @memberOf qtek.core.glinfo
	         */
	        getExtension: function (_gl, name) {
	            var glid = _gl.__GLID__;
	            if (extensions[glid]) {
	                if (typeof(extensions[glid][name]) == 'undefined') {
	                    this._createExtension(_gl, name);
	                }
	                return extensions[glid][name];
	            }
	        },

	        /**
	         * Get parameter
	         * @param {WebGLRenderingContext} _gl
	         * @param {string} name Parameter name
	         * @return {*}
	         */
	        getParameter: function (_gl, name) {
	            var glid = _gl.__GLID__;
	            if (parameters[glid]) {
	                return parameters[glid][name];
	            }
	        },

	        /**
	         * Dispose context
	         * @param  {WebGLRenderingContext} _gl
	         * @memberOf qtek.core.glinfo
	         */
	        dispose: function (_gl) {
	            delete extensions[_gl.__GLID__];
	            delete parameters[_gl.__GLID__];
	        },

	        _createExtension: function (_gl, name) {
	            var ext = _gl.getExtension(name);
	            if (!ext) {
	                ext = _gl.getExtension('MOZ_' + name);
	            }
	            if (!ext) {
	                ext = _gl.getExtension('WEBKIT_' + name);
	            }

	            extensions[_gl.__GLID__][name] = ext;
	        }
	    };

	    module.exports = glinfo;


/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * @namespace qtek.core.glenum
	 * @see http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14
	 */


	module.exports = {
	    /* ClearBufferMask */
	    DEPTH_BUFFER_BIT               : 0x00000100,
	    STENCIL_BUFFER_BIT             : 0x00000400,
	    COLOR_BUFFER_BIT               : 0x00004000,
	    
	    /* BeginMode */
	    POINTS                         : 0x0000,
	    LINES                          : 0x0001,
	    LINE_LOOP                      : 0x0002,
	    LINE_STRIP                     : 0x0003,
	    TRIANGLES                      : 0x0004,
	    TRIANGLE_STRIP                 : 0x0005,
	    TRIANGLE_FAN                   : 0x0006,
	    
	    /* AlphaFunction (not supported in ES20) */
	    /*      NEVER */
	    /*      LESS */
	    /*      EQUAL */
	    /*      LEQUAL */
	    /*      GREATER */
	    /*      NOTEQUAL */
	    /*      GEQUAL */
	    /*      ALWAYS */
	    
	    /* BlendingFactorDest */
	    ZERO                           : 0,
	    ONE                            : 1,
	    SRC_COLOR                      : 0x0300,
	    ONE_MINUS_SRC_COLOR            : 0x0301,
	    SRC_ALPHA                      : 0x0302,
	    ONE_MINUS_SRC_ALPHA            : 0x0303,
	    DST_ALPHA                      : 0x0304,
	    ONE_MINUS_DST_ALPHA            : 0x0305,
	    
	    /* BlendingFactorSrc */
	    /*      ZERO */
	    /*      ONE */
	    DST_COLOR                      : 0x0306,
	    ONE_MINUS_DST_COLOR            : 0x0307,
	    SRC_ALPHA_SATURATE             : 0x0308,
	    /*      SRC_ALPHA */
	    /*      ONE_MINUS_SRC_ALPHA */
	    /*      DST_ALPHA */
	    /*      ONE_MINUS_DST_ALPHA */
	    
	    /* BlendEquationSeparate */
	    FUNC_ADD                       : 0x8006,
	    BLEND_EQUATION                 : 0x8009,
	    BLEND_EQUATION_RGB             : 0x8009, /* same as BLEND_EQUATION */
	    BLEND_EQUATION_ALPHA           : 0x883D,
	    
	    /* BlendSubtract */
	    FUNC_SUBTRACT                  : 0x800A,
	    FUNC_REVERSE_SUBTRACT          : 0x800B,
	    
	    /* Separate Blend Functions */
	    BLEND_DST_RGB                  : 0x80C8,
	    BLEND_SRC_RGB                  : 0x80C9,
	    BLEND_DST_ALPHA                : 0x80CA,
	    BLEND_SRC_ALPHA                : 0x80CB,
	    CONSTANT_COLOR                 : 0x8001,
	    ONE_MINUS_CONSTANT_COLOR       : 0x8002,
	    CONSTANT_ALPHA                 : 0x8003,
	    ONE_MINUS_CONSTANT_ALPHA       : 0x8004,
	    BLEND_COLOR                    : 0x8005,
	    
	    /* Buffer Objects */
	    ARRAY_BUFFER                   : 0x8892,
	    ELEMENT_ARRAY_BUFFER           : 0x8893,
	    ARRAY_BUFFER_BINDING           : 0x8894,
	    ELEMENT_ARRAY_BUFFER_BINDING   : 0x8895,
	    
	    STREAM_DRAW                    : 0x88E0,
	    STATIC_DRAW                    : 0x88E4,
	    DYNAMIC_DRAW                   : 0x88E8,
	    
	    BUFFER_SIZE                    : 0x8764,
	    BUFFER_USAGE                   : 0x8765,
	    
	    CURRENT_VERTEX_ATTRIB          : 0x8626,
	    
	    /* CullFaceMode */
	    FRONT                          : 0x0404,
	    BACK                           : 0x0405,
	    FRONT_AND_BACK                 : 0x0408,
	    
	    /* DepthFunction */
	    /*      NEVER */
	    /*      LESS */
	    /*      EQUAL */
	    /*      LEQUAL */
	    /*      GREATER */
	    /*      NOTEQUAL */
	    /*      GEQUAL */
	    /*      ALWAYS */
	    
	    /* EnableCap */
	    /* TEXTURE_2D */
	    CULL_FACE                      : 0x0B44,
	    BLEND                          : 0x0BE2,
	    DITHER                         : 0x0BD0,
	    STENCIL_TEST                   : 0x0B90,
	    DEPTH_TEST                     : 0x0B71,
	    SCISSOR_TEST                   : 0x0C11,
	    POLYGON_OFFSET_FILL            : 0x8037,
	    SAMPLE_ALPHA_TO_COVERAGE       : 0x809E,
	    SAMPLE_COVERAGE                : 0x80A0,
	    
	    /* ErrorCode */
	    NO_ERROR                       : 0,
	    INVALID_ENUM                   : 0x0500,
	    INVALID_VALUE                  : 0x0501,
	    INVALID_OPERATION              : 0x0502,
	    OUT_OF_MEMORY                  : 0x0505,
	    
	    /* FrontFaceDirection */
	    CW                             : 0x0900,
	    CCW                            : 0x0901,
	    
	    /* GetPName */
	    LINE_WIDTH                     : 0x0B21,
	    ALIASED_POINT_SIZE_RANGE       : 0x846D,
	    ALIASED_LINE_WIDTH_RANGE       : 0x846E,
	    CULL_FACE_MODE                 : 0x0B45,
	    FRONT_FACE                     : 0x0B46,
	    DEPTH_RANGE                    : 0x0B70,
	    DEPTH_WRITEMASK                : 0x0B72,
	    DEPTH_CLEAR_VALUE              : 0x0B73,
	    DEPTH_FUNC                     : 0x0B74,
	    STENCIL_CLEAR_VALUE            : 0x0B91,
	    STENCIL_FUNC                   : 0x0B92,
	    STENCIL_FAIL                   : 0x0B94,
	    STENCIL_PASS_DEPTH_FAIL        : 0x0B95,
	    STENCIL_PASS_DEPTH_PASS        : 0x0B96,
	    STENCIL_REF                    : 0x0B97,
	    STENCIL_VALUE_MASK             : 0x0B93,
	    STENCIL_WRITEMASK              : 0x0B98,
	    STENCIL_BACK_FUNC              : 0x8800,
	    STENCIL_BACK_FAIL              : 0x8801,
	    STENCIL_BACK_PASS_DEPTH_FAIL   : 0x8802,
	    STENCIL_BACK_PASS_DEPTH_PASS   : 0x8803,
	    STENCIL_BACK_REF               : 0x8CA3,
	    STENCIL_BACK_VALUE_MASK        : 0x8CA4,
	    STENCIL_BACK_WRITEMASK         : 0x8CA5,
	    VIEWPORT                       : 0x0BA2,
	    SCISSOR_BOX                    : 0x0C10,
	    /*      SCISSOR_TEST */
	    COLOR_CLEAR_VALUE              : 0x0C22,
	    COLOR_WRITEMASK                : 0x0C23,
	    UNPACK_ALIGNMENT               : 0x0CF5,
	    PACK_ALIGNMENT                 : 0x0D05,
	    MAX_TEXTURE_SIZE               : 0x0D33,
	    MAX_VIEWPORT_DIMS              : 0x0D3A,
	    SUBPIXEL_BITS                  : 0x0D50,
	    RED_BITS                       : 0x0D52,
	    GREEN_BITS                     : 0x0D53,
	    BLUE_BITS                      : 0x0D54,
	    ALPHA_BITS                     : 0x0D55,
	    DEPTH_BITS                     : 0x0D56,
	    STENCIL_BITS                   : 0x0D57,
	    POLYGON_OFFSET_UNITS           : 0x2A00,
	    /*      POLYGON_OFFSET_FILL */
	    POLYGON_OFFSET_FACTOR          : 0x8038,
	    TEXTURE_BINDING_2D             : 0x8069,
	    SAMPLE_BUFFERS                 : 0x80A8,
	    SAMPLES                        : 0x80A9,
	    SAMPLE_COVERAGE_VALUE          : 0x80AA,
	    SAMPLE_COVERAGE_INVERT         : 0x80AB,
	    
	    /* GetTextureParameter */
	    /*      TEXTURE_MAG_FILTER */
	    /*      TEXTURE_MIN_FILTER */
	    /*      TEXTURE_WRAP_S */
	    /*      TEXTURE_WRAP_T */
	    
	    COMPRESSED_TEXTURE_FORMATS     : 0x86A3,
	    
	    /* HintMode */
	    DONT_CARE                      : 0x1100,
	    FASTEST                        : 0x1101,
	    NICEST                         : 0x1102,
	    
	    /* HintTarget */
	    GENERATE_MIPMAP_HINT            : 0x8192,
	    
	    /* DataType */
	    BYTE                           : 0x1400,
	    UNSIGNED_BYTE                  : 0x1401,
	    SHORT                          : 0x1402,
	    UNSIGNED_SHORT                 : 0x1403,
	    INT                            : 0x1404,
	    UNSIGNED_INT                   : 0x1405,
	    FLOAT                          : 0x1406,
	    
	    /* PixelFormat */
	    DEPTH_COMPONENT                : 0x1902,
	    ALPHA                          : 0x1906,
	    RGB                            : 0x1907,
	    RGBA                           : 0x1908,
	    LUMINANCE                      : 0x1909,
	    LUMINANCE_ALPHA                : 0x190A,
	    
	    /* PixelType */
	    /*      UNSIGNED_BYTE */
	    UNSIGNED_SHORT_4_4_4_4         : 0x8033,
	    UNSIGNED_SHORT_5_5_5_1         : 0x8034,
	    UNSIGNED_SHORT_5_6_5           : 0x8363,
	    
	    /* Shaders */
	    FRAGMENT_SHADER                  : 0x8B30,
	    VERTEX_SHADER                    : 0x8B31,
	    MAX_VERTEX_ATTRIBS               : 0x8869,
	    MAX_VERTEX_UNIFORM_VECTORS       : 0x8DFB,
	    MAX_VARYING_VECTORS              : 0x8DFC,
	    MAX_COMBINED_TEXTURE_IMAGE_UNITS : 0x8B4D,
	    MAX_VERTEX_TEXTURE_IMAGE_UNITS   : 0x8B4C,
	    MAX_TEXTURE_IMAGE_UNITS          : 0x8872,
	    MAX_FRAGMENT_UNIFORM_VECTORS     : 0x8DFD,
	    SHADER_TYPE                      : 0x8B4F,
	    DELETE_STATUS                    : 0x8B80,
	    LINK_STATUS                      : 0x8B82,
	    VALIDATE_STATUS                  : 0x8B83,
	    ATTACHED_SHADERS                 : 0x8B85,
	    ACTIVE_UNIFORMS                  : 0x8B86,
	    ACTIVE_ATTRIBUTES                : 0x8B89,
	    SHADING_LANGUAGE_VERSION         : 0x8B8C,
	    CURRENT_PROGRAM                  : 0x8B8D,
	    
	    /* StencilFunction */
	    NEVER                          : 0x0200,
	    LESS                           : 0x0201,
	    EQUAL                          : 0x0202,
	    LEQUAL                         : 0x0203,
	    GREATER                        : 0x0204,
	    NOTEQUAL                       : 0x0205,
	    GEQUAL                         : 0x0206,
	    ALWAYS                         : 0x0207,
	    
	    /* StencilOp */
	    /*      ZERO */
	    KEEP                           : 0x1E00,
	    REPLACE                        : 0x1E01,
	    INCR                           : 0x1E02,
	    DECR                           : 0x1E03,
	    INVERT                         : 0x150A,
	    INCR_WRAP                      : 0x8507,
	    DECR_WRAP                      : 0x8508,
	    
	    /* StringName */
	    VENDOR                         : 0x1F00,
	    RENDERER                       : 0x1F01,
	    VERSION                        : 0x1F02,
	    
	    /* TextureMagFilter */
	    NEAREST                        : 0x2600,
	    LINEAR                         : 0x2601,
	    
	    /* TextureMinFilter */
	    /*      NEAREST */
	    /*      LINEAR */
	    NEAREST_MIPMAP_NEAREST         : 0x2700,
	    LINEAR_MIPMAP_NEAREST          : 0x2701,
	    NEAREST_MIPMAP_LINEAR          : 0x2702,
	    LINEAR_MIPMAP_LINEAR           : 0x2703,
	    
	    /* TextureParameterName */
	    TEXTURE_MAG_FILTER             : 0x2800,
	    TEXTURE_MIN_FILTER             : 0x2801,
	    TEXTURE_WRAP_S                 : 0x2802,
	    TEXTURE_WRAP_T                 : 0x2803,
	    
	    /* TextureTarget */
	    TEXTURE_2D                     : 0x0DE1,
	    TEXTURE                        : 0x1702,
	    
	    TEXTURE_CUBE_MAP               : 0x8513,
	    TEXTURE_BINDING_CUBE_MAP       : 0x8514,
	    TEXTURE_CUBE_MAP_POSITIVE_X    : 0x8515,
	    TEXTURE_CUBE_MAP_NEGATIVE_X    : 0x8516,
	    TEXTURE_CUBE_MAP_POSITIVE_Y    : 0x8517,
	    TEXTURE_CUBE_MAP_NEGATIVE_Y    : 0x8518,
	    TEXTURE_CUBE_MAP_POSITIVE_Z    : 0x8519,
	    TEXTURE_CUBE_MAP_NEGATIVE_Z    : 0x851A,
	    MAX_CUBE_MAP_TEXTURE_SIZE      : 0x851C,
	    
	    /* TextureUnit */
	    TEXTURE0                       : 0x84C0,
	    TEXTURE1                       : 0x84C1,
	    TEXTURE2                       : 0x84C2,
	    TEXTURE3                       : 0x84C3,
	    TEXTURE4                       : 0x84C4,
	    TEXTURE5                       : 0x84C5,
	    TEXTURE6                       : 0x84C6,
	    TEXTURE7                       : 0x84C7,
	    TEXTURE8                       : 0x84C8,
	    TEXTURE9                       : 0x84C9,
	    TEXTURE10                      : 0x84CA,
	    TEXTURE11                      : 0x84CB,
	    TEXTURE12                      : 0x84CC,
	    TEXTURE13                      : 0x84CD,
	    TEXTURE14                      : 0x84CE,
	    TEXTURE15                      : 0x84CF,
	    TEXTURE16                      : 0x84D0,
	    TEXTURE17                      : 0x84D1,
	    TEXTURE18                      : 0x84D2,
	    TEXTURE19                      : 0x84D3,
	    TEXTURE20                      : 0x84D4,
	    TEXTURE21                      : 0x84D5,
	    TEXTURE22                      : 0x84D6,
	    TEXTURE23                      : 0x84D7,
	    TEXTURE24                      : 0x84D8,
	    TEXTURE25                      : 0x84D9,
	    TEXTURE26                      : 0x84DA,
	    TEXTURE27                      : 0x84DB,
	    TEXTURE28                      : 0x84DC,
	    TEXTURE29                      : 0x84DD,
	    TEXTURE30                      : 0x84DE,
	    TEXTURE31                      : 0x84DF,
	    ACTIVE_TEXTURE                 : 0x84E0,
	    
	    /* TextureWrapMode */
	    REPEAT                         : 0x2901,
	    CLAMP_TO_EDGE                  : 0x812F,
	    MIRRORED_REPEAT                : 0x8370,
	    
	    /* Uniform Types */
	    FLOAT_VEC2                     : 0x8B50,
	    FLOAT_VEC3                     : 0x8B51,
	    FLOAT_VEC4                     : 0x8B52,
	    INT_VEC2                       : 0x8B53,
	    INT_VEC3                       : 0x8B54,
	    INT_VEC4                       : 0x8B55,
	    BOOL                           : 0x8B56,
	    BOOL_VEC2                      : 0x8B57,
	    BOOL_VEC3                      : 0x8B58,
	    BOOL_VEC4                      : 0x8B59,
	    FLOAT_MAT2                     : 0x8B5A,
	    FLOAT_MAT3                     : 0x8B5B,
	    FLOAT_MAT4                     : 0x8B5C,
	    SAMPLER_2D                     : 0x8B5E,
	    SAMPLER_CUBE                   : 0x8B60,
	    
	    /* Vertex Arrays */
	    VERTEX_ATTRIB_ARRAY_ENABLED        : 0x8622,
	    VERTEX_ATTRIB_ARRAY_SIZE           : 0x8623,
	    VERTEX_ATTRIB_ARRAY_STRIDE         : 0x8624,
	    VERTEX_ATTRIB_ARRAY_TYPE           : 0x8625,
	    VERTEX_ATTRIB_ARRAY_NORMALIZED     : 0x886A,
	    VERTEX_ATTRIB_ARRAY_POINTER        : 0x8645,
	    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 0x889F,
	    
	    /* Shader Source */
	    COMPILE_STATUS                 : 0x8B81,
	    
	    /* Shader Precision-Specified Types */
	    LOW_FLOAT                      : 0x8DF0,
	    MEDIUM_FLOAT                   : 0x8DF1,
	    HIGH_FLOAT                     : 0x8DF2,
	    LOW_INT                        : 0x8DF3,
	    MEDIUM_INT                     : 0x8DF4,
	    HIGH_INT                       : 0x8DF5,
	    
	    /* Framebuffer Object. */
	    FRAMEBUFFER                    : 0x8D40,
	    RENDERBUFFER                   : 0x8D41,
	    
	    RGBA4                          : 0x8056,
	    RGB5_A1                        : 0x8057,
	    RGB565                         : 0x8D62,
	    DEPTH_COMPONENT16              : 0x81A5,
	    STENCIL_INDEX                  : 0x1901,
	    STENCIL_INDEX8                 : 0x8D48,
	    DEPTH_STENCIL                  : 0x84F9,
	    
	    RENDERBUFFER_WIDTH             : 0x8D42,
	    RENDERBUFFER_HEIGHT            : 0x8D43,
	    RENDERBUFFER_INTERNAL_FORMAT   : 0x8D44,
	    RENDERBUFFER_RED_SIZE          : 0x8D50,
	    RENDERBUFFER_GREEN_SIZE        : 0x8D51,
	    RENDERBUFFER_BLUE_SIZE         : 0x8D52,
	    RENDERBUFFER_ALPHA_SIZE        : 0x8D53,
	    RENDERBUFFER_DEPTH_SIZE        : 0x8D54,
	    RENDERBUFFER_STENCIL_SIZE      : 0x8D55,
	    
	    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           : 0x8CD0,
	    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           : 0x8CD1,
	    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         : 0x8CD2,
	    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : 0x8CD3,
	    
	    COLOR_ATTACHMENT0              : 0x8CE0,
	    DEPTH_ATTACHMENT               : 0x8D00,
	    STENCIL_ATTACHMENT             : 0x8D20,
	    DEPTH_STENCIL_ATTACHMENT       : 0x821A,
	    
	    NONE                           : 0,
	    
	    FRAMEBUFFER_COMPLETE                      : 0x8CD5,
	    FRAMEBUFFER_INCOMPLETE_ATTACHMENT         : 0x8CD6,
	    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : 0x8CD7,
	    FRAMEBUFFER_INCOMPLETE_DIMENSIONS         : 0x8CD9,
	    FRAMEBUFFER_UNSUPPORTED                   : 0x8CDD,
	    
	    FRAMEBUFFER_BINDING            : 0x8CA6,
	    RENDERBUFFER_BINDING           : 0x8CA7,
	    MAX_RENDERBUFFER_SIZE          : 0x84E8,
	    
	    INVALID_FRAMEBUFFER_OPERATION  : 0x0506,
	    
	    /* WebGL-specific enums */
	    UNPACK_FLIP_Y_WEBGL            : 0x9240,
	    UNPACK_PREMULTIPLY_ALPHA_WEBGL : 0x9241,
	    CONTEXT_LOST_WEBGL             : 0x9242,
	    UNPACK_COLORSPACE_CONVERSION_WEBGL : 0x9243,
	    BROWSER_DEFAULT_WEBGL          : 0x9244,
	};


/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';


	    var supportWebGL = true;
	    try {
	        var canvas = document.createElement('canvas');
	        var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
	        if (!gl) {
	            throw new Error();
	        }
	    } catch (e) {
	        supportWebGL = false;
	    }

	    var vendor = {};

	    /**
	     * If support WebGL
	     * @return {boolean}
	     */
	    vendor.supportWebGL = function () {
	        return supportWebGL;
	    };


	    vendor.Int8Array = typeof Int8Array == 'undefined' ? Array : Int8Array;

	    vendor.Uint8Array = typeof Uint8Array == 'undefined' ? Array : Uint8Array;

	    vendor.Uint16Array = typeof Uint16Array == 'undefined' ? Array : Uint16Array;

	    vendor.Uint32Array = typeof Uint32Array == 'undefined' ? Array : Uint32Array;

	    vendor.Int16Array = typeof Int16Array == 'undefined' ? Array : Int16Array;

	    vendor.Float32Array = typeof Float32Array == 'undefined' ? Array : Float32Array;

	    vendor.Float64Array = typeof Float64Array == 'undefined' ? Array : Float64Array;

	    module.exports = vendor;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Vector3 = __webpack_require__(14);
	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;

	    var vec3Copy = vec3.copy;
	    var vec3Set = vec3.set;

	    /**
	     * Axis aligned bounding box
	     * @constructor
	     * @alias qtek.math.BoundingBox
	     * @param {qtek.math.Vector3} [min]
	     * @param {qtek.math.Vector3} [max]
	     */
	    var BoundingBox = function (min, max) {

	        /**
	         * Minimum coords of bounding box
	         * @type {qtek.math.Vector3}
	         */
	        this.min = min || new Vector3(Infinity, Infinity, Infinity);

	        /**
	         * Maximum coords of bounding box
	         * @type {qtek.math.Vector3}
	         */
	        this.max = max || new Vector3(-Infinity, -Infinity, -Infinity);
	    };

	    BoundingBox.prototype = {

	        constructor: BoundingBox,
	        /**
	         * Update min and max coords from a vertices array
	         * @param  {array} vertices
	         */
	        updateFromVertices: function (vertices) {
	            if (vertices.length > 0) {
	                var min = this.min;
	                var max = this.max;
	                var minArr = min._array;
	                var maxArr = max._array;
	                vec3Copy(minArr, vertices[0]);
	                vec3Copy(maxArr, vertices[0]);
	                for (var i = 1; i < vertices.length; i++) {
	                    var vertex = vertices[i];

	                    if (vertex[0] < minArr[0]) { minArr[0] = vertex[0]; }
	                    if (vertex[1] < minArr[1]) { minArr[1] = vertex[1]; }
	                    if (vertex[2] < minArr[2]) { minArr[2] = vertex[2]; }

	                    if (vertex[0] > maxArr[0]) { maxArr[0] = vertex[0]; }
	                    if (vertex[1] > maxArr[1]) { maxArr[1] = vertex[1]; }
	                    if (vertex[2] > maxArr[2]) { maxArr[2] = vertex[2]; }
	                }
	                min._dirty = true;
	                max._dirty = true;
	            }
	        },

	        /**
	         * Union operation with another bounding box
	         * @param  {qtek.math.BoundingBox} bbox
	         */
	        union: function (bbox) {
	            var min = this.min;
	            var max = this.max;
	            vec3.min(min._array, min._array, bbox.min._array);
	            vec3.max(max._array, max._array, bbox.max._array);
	            min._dirty = true;
	            max._dirty = true;
	            return this;
	        },

	        /**
	         * Intersection operation with another bounding box
	         * @param  {qtek.math.BoundingBox} bbox
	         */
	        intersection: function (bbox) {
	            var min = this.min;
	            var max = this.max;
	            vec3.max(min._array, min._array, bbox.min._array);
	            vec3.min(max._array, max._array, bbox.max._array);
	            min._dirty = true;
	            max._dirty = true;
	            return this;
	        },

	        /**
	         * If intersect with another bounding box
	         * @param  {qtek.math.BoundingBox} bbox
	         * @return {boolean}
	         */
	        intersectBoundingBox: function (bbox) {
	            var _min = this.min._array;
	            var _max = this.max._array;

	            var _min2 = bbox.min._array;
	            var _max2 = bbox.max._array;

	            return ! (_min[0] > _max2[0] || _min[1] > _max2[1] || _min[2] > _max2[2]
	                || _max[0] < _min2[0] || _max[1] < _min2[1] || _max[2] < _min2[2]);
	        },

	        /**
	         * If contain another bounding box entirely
	         * @param  {qtek.math.BoundingBox} bbox
	         * @return {boolean}
	         */
	        containBoundingBox: function (bbox) {

	            var _min = this.min._array;
	            var _max = this.max._array;

	            var _min2 = bbox.min._array;
	            var _max2 = bbox.max._array;

	            return _min[0] <= _min2[0] && _min[1] <= _min2[1] && _min[2] <= _min2[2]
	                && _max[0] >= _max2[0] && _max[1] >= _max2[1] && _max[2] >= _max2[2];
	        },

	        /**
	         * If contain point entirely
	         * @param  {qtek.math.Vector3} point
	         * @return {boolean}
	         */
	        containPoint: function (p) {
	            var _min = this.min._array;
	            var _max = this.max._array;

	            var _p = p._array;

	            return _min[0] <= _p[0] && _min[1] <= _p[1] && _min[2] <= _p[2]
	                && _max[0] >= _p[0] && _max[1] >= _p[1] && _max[2] >= _p[2];
	        },

	        /**
	         * If bounding box is finite
	         */
	        isFinite: function () {
	            var _min = this.min._array;
	            var _max = this.max._array;
	            return isFinite(_min[0]) && isFinite(_min[1]) && isFinite(_min[2])
	                && isFinite(_max[0]) && isFinite(_max[1]) && isFinite(_max[2]);
	        },

	        /**
	         * Apply an affine transform matrix to the bounding box
	         * @param  {qtek.math.Matrix4} matrix
	         */
	        applyTransform: (function () {
	            // http://dev.theomader.com/transform-bounding-boxes/
	            var xa = vec3.create();
	            var xb = vec3.create();
	            var ya = vec3.create();
	            var yb = vec3.create();
	            var za = vec3.create();
	            var zb = vec3.create();

	            return function (matrix) {
	                var min = this.min._array;
	                var max = this.max._array;

	                var m = matrix._array;

	                xa[0] = m[0] * min[0]; xa[1] = m[1] * min[0]; xa[2] = m[2] * min[0];
	                xb[0] = m[0] * max[0]; xb[1] = m[1] * max[0]; xb[2] = m[2] * max[0];

	                ya[0] = m[4] * min[1]; ya[1] = m[5] * min[1]; ya[2] = m[6] * min[1];
	                yb[0] = m[4] * max[1]; yb[1] = m[5] * max[1]; yb[2] = m[6] * max[1];

	                za[0] = m[8] * min[2]; za[1] = m[9] * min[2]; za[2] = m[10] * min[2];
	                zb[0] = m[8] * max[2]; zb[1] = m[9] * max[2]; zb[2] = m[10] * max[2];

	                min[0] = Math.min(xa[0], xb[0]) + Math.min(ya[0], yb[0]) + Math.min(za[0], zb[0]) + m[12];
	                min[1] = Math.min(xa[1], xb[1]) + Math.min(ya[1], yb[1]) + Math.min(za[1], zb[1]) + m[13];
	                min[2] = Math.min(xa[2], xb[2]) + Math.min(ya[2], yb[2]) + Math.min(za[2], zb[2]) + m[14];

	                max[0] = Math.max(xa[0], xb[0]) + Math.max(ya[0], yb[0]) + Math.max(za[0], zb[0]) + m[12];
	                max[1] = Math.max(xa[1], xb[1]) + Math.max(ya[1], yb[1]) + Math.max(za[1], zb[1]) + m[13];
	                max[2] = Math.max(xa[2], xb[2]) + Math.max(ya[2], yb[2]) + Math.max(za[2], zb[2]) + m[14];

	                this.min._dirty = true;
	                this.max._dirty = true;

	                return this;
	            };
	        })(),

	        /**
	         * Apply a projection matrix to the bounding box
	         * @param  {qtek.math.Matrix4} matrix
	         */
	        applyProjection: function (matrix) {
	            var min = this.min._array;
	            var max = this.max._array;

	            var m = matrix._array;
	            // min in min z
	            var v10 = min[0];
	            var v11 = min[1];
	            var v12 = min[2];
	            // max in min z
	            var v20 = max[0];
	            var v21 = max[1];
	            var v22 = min[2];
	            // max in max z
	            var v30 = max[0];
	            var v31 = max[1];
	            var v32 = max[2];

	            if (m[15] === 1) {  // Orthographic projection
	                min[0] = m[0] * v10 + m[12];
	                min[1] = m[5] * v11 + m[13];
	                max[2] = m[10] * v12 + m[14];

	                max[0] = m[0] * v30 + m[12];
	                max[1] = m[5] * v31 + m[13];
	                min[2] = m[10] * v32 + m[14];
	            }
	            else {
	                var w = -1 / v12;
	                min[0] = m[0] * v10 * w;
	                min[1] = m[5] * v11 * w;
	                max[2] = (m[10] * v12 + m[14]) * w;

	                w = -1 / v22;
	                max[0] = m[0] * v20 * w;
	                max[1] = m[5] * v21 * w;

	                w = -1 / v32;
	                min[2] = (m[10] * v32 + m[14]) * w;
	            }
	            this.min._dirty = true;
	            this.max._dirty = true;

	            return this;
	        },

	        updateVertices: function () {
	            var vertices = this.vertices;
	            if (!vertices) {
	                // Cube vertices
	                var vertices = [];
	                for (var i = 0; i < 8; i++) {
	                    vertices[i] = vec3.fromValues(0, 0, 0);
	                }

	                /**
	                 * Eight coords of bounding box
	                 * @type {Float32Array[]}
	                 */
	                this.vertices = vertices;
	            }
	            var min = this.min._array;
	            var max = this.max._array;
	            //--- min z
	            // min x
	            vec3Set(vertices[0], min[0], min[1], min[2]);
	            vec3Set(vertices[1], min[0], max[1], min[2]);
	            // max x
	            vec3Set(vertices[2], max[0], min[1], min[2]);
	            vec3Set(vertices[3], max[0], max[1], min[2]);

	            //-- max z
	            vec3Set(vertices[4], min[0], min[1], max[2]);
	            vec3Set(vertices[5], min[0], max[1], max[2]);
	            vec3Set(vertices[6], max[0], min[1], max[2]);
	            vec3Set(vertices[7], max[0], max[1], max[2]);

	            return this;
	        },
	        /**
	         * Copy values from another bounding box
	         * @param  {qtek.math.BoundingBox} bbox
	         */
	        copy: function (bbox) {
	            var min = this.min;
	            var max = this.max;
	            vec3Copy(min._array, bbox.min._array);
	            vec3Copy(max._array, bbox.max._array);
	            min._dirty = true;
	            max._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new bounding box
	         * @return {qtek.math.BoundingBox}
	         */
	        clone: function () {
	            var boundingBox = new BoundingBox();
	            boundingBox.copy(this);
	            return boundingBox;
	        }
	    };

	    module.exports = BoundingBox;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;

	    /**
	     * @constructor
	     * @alias qtek.math.Vector3
	     * @param {number} x
	     * @param {number} y
	     * @param {number} z
	     */
	    var Vector3 = function(x, y, z) {

	        x = x || 0;
	        y = y || 0;
	        z = z || 0;

	        /**
	         * Storage of Vector3, read and write of x, y, z will change the values in _array
	         * All methods also operate on the _array instead of x, y, z components
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = vec3.fromValues(x, y, z);

	        /**
	         * Dirty flag is used by the Node to determine
	         * if the matrix is updated to latest
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Vector3.prototype = {

	        constructor : Vector3,

	        /**
	         * Add b to self
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        add: function (b) {
	            vec3.add(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x, y and z components
	         * @param  {number}  x
	         * @param  {number}  y
	         * @param  {number}  z
	         * @return {qtek.math.Vector3}
	         */
	        set: function (x, y, z) {
	            this._array[0] = x;
	            this._array[1] = y;
	            this._array[2] = z;
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x, y and z components from array
	         * @param  {Float32Array|number[]} arr
	         * @return {qtek.math.Vector3}
	         */
	        setArray: function (arr) {
	            this._array[0] = arr[0];
	            this._array[1] = arr[1];
	            this._array[2] = arr[2];

	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new Vector3
	         * @return {qtek.math.Vector3}
	         */
	        clone: function () {
	            return new Vector3(this.x, this.y, this.z);
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        copy: function (b) {
	            vec3.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Cross product of self and b, written to a Vector3 out
	         * @param  {qtek.math.Vector3} a
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        cross: function (a, b) {
	            vec3.cross(this._array, a._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for distance
	         * @param  {qtek.math.Vector3} b
	         * @return {number}
	         */
	        dist: function (b) {
	            return vec3.dist(this._array, b._array);
	        },

	        /**
	         * Distance between self and b
	         * @param  {qtek.math.Vector3} b
	         * @return {number}
	         */
	        distance: function (b) {
	            return vec3.distance(this._array, b._array);
	        },

	        /**
	         * Alias for divide
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        div: function (b) {
	            vec3.div(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Divide self by b
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        divide: function (b) {
	            vec3.divide(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Dot product of self and b
	         * @param  {qtek.math.Vector3} b
	         * @return {number}
	         */
	        dot: function (b) {
	            return vec3.dot(this._array, b._array);
	        },

	        /**
	         * Alias of length
	         * @return {number}
	         */
	        len: function () {
	            return vec3.len(this._array);
	        },

	        /**
	         * Calculate the length
	         * @return {number}
	         */
	        length: function () {
	            return vec3.length(this._array);
	        },
	        /**
	         * Linear interpolation between a and b
	         * @param  {qtek.math.Vector3} a
	         * @param  {qtek.math.Vector3} b
	         * @param  {number}  t
	         * @return {qtek.math.Vector3}
	         */
	        lerp: function (a, b, t) {
	            vec3.lerp(this._array, a._array, b._array, t);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Minimum of self and b
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        min: function (b) {
	            vec3.min(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Maximum of self and b
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        max: function (b) {
	            vec3.max(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiply
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        mul: function (b) {
	            vec3.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Mutiply self and b
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        multiply: function (b) {
	            vec3.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Negate self
	         * @return {qtek.math.Vector3}
	         */
	        negate: function () {
	            vec3.negate(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Normalize self
	         * @return {qtek.math.Vector3}
	         */
	        normalize: function () {
	            vec3.normalize(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Generate random x, y, z components with a given scale
	         * @param  {number} scale
	         * @return {qtek.math.Vector3}
	         */
	        random: function (scale) {
	            vec3.random(this._array, scale);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self
	         * @param  {number}  scale
	         * @return {qtek.math.Vector3}
	         */
	        scale: function (s) {
	            vec3.scale(this._array, this._array, s);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale b and add to self
	         * @param  {qtek.math.Vector3} b
	         * @param  {number}  scale
	         * @return {qtek.math.Vector3}
	         */
	        scaleAndAdd: function (b, s) {
	            vec3.scaleAndAdd(this._array, this._array, b._array, s);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for squaredDistance
	         * @param  {qtek.math.Vector3} b
	         * @return {number}
	         */
	        sqrDist: function (b) {
	            return vec3.sqrDist(this._array, b._array);
	        },

	        /**
	         * Squared distance between self and b
	         * @param  {qtek.math.Vector3} b
	         * @return {number}
	         */
	        squaredDistance: function (b) {
	            return vec3.squaredDistance(this._array, b._array);
	        },

	        /**
	         * Alias for squaredLength
	         * @return {number}
	         */
	        sqrLen: function () {
	            return vec3.sqrLen(this._array);
	        },

	        /**
	         * Squared length of self
	         * @return {number}
	         */
	        squaredLength: function () {
	            return vec3.squaredLength(this._array);
	        },

	        /**
	         * Alias for subtract
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        sub: function (b) {
	            vec3.sub(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Subtract b from self
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Vector3}
	         */
	        subtract: function (b) {
	            vec3.subtract(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix3 m
	         * @param  {qtek.math.Matrix3} m
	         * @return {qtek.math.Vector3}
	         */
	        transformMat3: function (m) {
	            vec3.transformMat3(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix4 m
	         * @param  {qtek.math.Matrix4} m
	         * @return {qtek.math.Vector3}
	         */
	        transformMat4: function (m) {
	            vec3.transformMat4(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Transform self with a Quaternion q
	         * @param  {qtek.math.Quaternion} q
	         * @return {qtek.math.Vector3}
	         */
	        transformQuat: function (q) {
	            vec3.transformQuat(this._array, this._array, q._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Trasnform self into projection space with m
	         * @param  {qtek.math.Matrix4} m
	         * @return {qtek.math.Vector3}
	         */
	        applyProjection: function (m) {
	            var v = this._array;
	            m = m._array;

	            // Perspective projection
	            if (m[15] === 0) {
	                var w = -1 / v[2];
	                v[0] = m[0] * v[0] * w;
	                v[1] = m[5] * v[1] * w;
	                v[2] = (m[10] * v[2] + m[14]) * w;
	            }
	            else {
	                v[0] = m[0] * v[0] + m[12];
	                v[1] = m[5] * v[1] + m[13];
	                v[2] = m[10] * v[2] + m[14];
	            }
	            this._dirty = true;

	            return this;
	        },

	        eulerFromQuat: function(q, order) {
	            Vector3.eulerFromQuat(this, q, order);
	        },

	        eulerFromMat3: function (m, order) {
	            Vector3.eulerFromMat3(this, m, order);
	        },

	        toString: function() {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    var defineProperty = Object.defineProperty;
	    // Getter and Setter
	    if (defineProperty) {

	        var proto = Vector3.prototype;
	        /**
	         * @name x
	         * @type {number}
	         * @memberOf qtek.math.Vector3
	         * @instance
	         */
	        defineProperty(proto, 'x', {
	            get: function () {
	                return this._array[0];
	            },
	            set: function (value) {
	                this._array[0] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name y
	         * @type {number}
	         * @memberOf qtek.math.Vector3
	         * @instance
	         */
	        defineProperty(proto, 'y', {
	            get: function () {
	                return this._array[1];
	            },
	            set: function (value) {
	                this._array[1] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name z
	         * @type {number}
	         * @memberOf qtek.math.Vector3
	         * @instance
	         */
	        defineProperty(proto, 'z', {
	            get: function () {
	                return this._array[2];
	            },
	            set: function (value) {
	                this._array[2] = value;
	                this._dirty = true;
	            }
	        });
	    }


	    // Supply methods that are not in place

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.add = function(out, a, b) {
	        vec3.add(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {number}  x
	     * @param  {number}  y
	     * @param  {number}  z
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.set = function(out, x, y, z) {
	        vec3.set(out._array, x, y, z);
	        out._dirty = true;
	    };

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.copy = function(out, b) {
	        vec3.copy(out._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.cross = function(out, a, b) {
	        vec3.cross(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {number}
	     */
	    Vector3.dist = function(a, b) {
	        return vec3.distance(a._array, b._array);
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {number}
	     */
	    Vector3.distance = Vector3.dist;

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.div = function(out, a, b) {
	        vec3.divide(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.divide = Vector3.div;

	    /**
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {number}
	     */
	    Vector3.dot = function(a, b) {
	        return vec3.dot(a._array, b._array);
	    };

	    /**
	     * @param  {qtek.math.Vector3} a
	     * @return {number}
	     */
	    Vector3.len = function(b) {
	        return vec3.length(b._array);
	    };

	    // Vector3.length = Vector3.len;

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @param  {number}  t
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.lerp = function(out, a, b, t) {
	        vec3.lerp(out._array, a._array, b._array, t);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.min = function(out, a, b) {
	        vec3.min(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.max = function(out, a, b) {
	        vec3.max(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.mul = function(out, a, b) {
	        vec3.multiply(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.multiply = Vector3.mul;
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.negate = function(out, a) {
	        vec3.negate(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.normalize = function(out, a) {
	        vec3.normalize(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {number}  scale
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.random = function(out, scale) {
	        vec3.random(out._array, scale);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {number}  scale
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.scale = function(out, a, scale) {
	        vec3.scale(out._array, a._array, scale);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @param  {number}  scale
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.scaleAndAdd = function(out, a, b, scale) {
	        vec3.scaleAndAdd(out._array, a._array, b._array, scale);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {number}
	     */
	    Vector3.sqrDist = function(a, b) {
	        return vec3.sqrDist(a._array, b._array);
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {number}
	     */
	    Vector3.squaredDistance = Vector3.sqrDist;
	    /**
	     * @param  {qtek.math.Vector3} a
	     * @return {number}
	     */
	    Vector3.sqrLen = function(a) {
	        return vec3.sqrLen(a._array);
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector3} a
	     * @return {number}
	     */
	    Vector3.squaredLength = Vector3.sqrLen;

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.sub = function(out, a, b) {
	        vec3.subtract(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Vector3} b
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.subtract = Vector3.sub;

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {Matrix3} m
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.transformMat3 = function(out, a, m) {
	        vec3.transformMat3(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Matrix4} m
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.transformMat4 = function(out, a, m) {
	        vec3.transformMat4(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector3} a
	     * @param  {qtek.math.Quaternion} q
	     * @return {qtek.math.Vector3}
	     */
	    Vector3.transformQuat = function(out, a, q) {
	        vec3.transformQuat(out._array, a._array, q._array);
	        out._dirty = true;
	        return out;
	    };

	    function clamp(val, min, max) {
	        return val < min ? min : (val > max ? max : val);
	    }
	    var atan2 = Math.atan2;
	    var asin = Math.asin;
	    var abs = Math.abs;
	    /**
	     * Convert quaternion to euler angle
	     * Quaternion must be normalized
	     * From three.js
	     */
	    Vector3.eulerFromQuat = function (out, q, order) {
	        out._dirty = true;
	        q = q._array;

	        var target = out._array;
	        var x = q[0], y = q[1], z = q[2], w = q[3];
	        var x2 = x * x;
	        var y2 = y * y;
	        var z2 = z * z;
	        var w2 = w * w;

	        var order = (order || 'XYZ').toUpperCase();

	        switch (order) {
	            case 'XYZ':
	                target[0] = atan2(2 * (x * w - y * z), (w2 - x2 - y2 + z2));
	                target[1] = asin(clamp(2 * (x * z + y * w), - 1, 1));
	                target[2] = atan2(2 * (z * w - x * y), (w2 + x2 - y2 - z2));
	                break;
	            case 'YXZ':
	                target[0] = asin(clamp(2 * (x * w - y * z), - 1, 1));
	                target[1] = atan2(2 * (x * z + y * w), (w2 - x2 - y2 + z2));
	                target[2] = atan2(2 * (x * y + z * w), (w2 - x2 + y2 - z2));
	                break;
	            case 'ZXY':
	                target[0] = asin(clamp(2 * (x * w + y * z), - 1, 1));
	                target[1] = atan2(2 * (y * w - z * x), (w2 - x2 - y2 + z2));
	                target[2] = atan2(2 * (z * w - x * y), (w2 - x2 + y2 - z2));
	                break;
	            case 'ZYX':
	                target[0] = atan2(2 * (x * w + z * y), (w2 - x2 - y2 + z2));
	                target[1] = asin(clamp(2 * (y * w - x * z), - 1, 1));
	                target[2] = atan2(2 * (x * y + z * w), (w2 + x2 - y2 - z2));
	                break;
	            case 'YZX':
	                target[0] = atan2(2 * (x * w - z * y), (w2 - x2 + y2 - z2));
	                target[1] = atan2(2 * (y * w - x * z), (w2 + x2 - y2 - z2));
	                target[2] = asin(clamp(2 * (x * y + z * w), - 1, 1));
	                break;
	            case 'XZY':
	                target[0] = atan2(2 * (x * w + y * z), (w2 - x2 + y2 - z2));
	                target[1] = atan2(2 * (x * z + y * w), (w2 + x2 - y2 - z2));
	                target[2] = asin(clamp(2 * (z * w - x * y), - 1, 1));
	                break;
	            default:
	                console.warn('Unkown order: ' + order);
	        }
	        return out;
	    };

	    /**
	     * Convert rotation matrix to euler angle
	     * from three.js
	     */
	    Vector3.eulerFromMat3 = function (out, m, order) {
	        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	        var te = m._array;
	        var m11 = te[0], m12 = te[3], m13 = te[6];
	        var m21 = te[1], m22 = te[4], m23 = te[7];
	        var m31 = te[2], m32 = te[5], m33 = te[8];
	        var target = out._array;

	        var order = (order || 'XYZ').toUpperCase();

	        switch (order) {
	            case 'XYZ':
	                target[1] = asin(clamp(m13, -1, 1));
	                if (abs(m13) < 0.99999) {
	                    target[0] = atan2(-m23, m33);
	                    target[2] = atan2(-m12, m11);
	                }
	                else {
	                    target[0] = atan2(m32, m22);
	                    target[2] = 0;
	                }
	                break;
	            case 'YXZ':
	                target[0] = asin(-clamp(m23, -1, 1));
	                if (abs(m23) < 0.99999) {
	                    target[1] = atan2(m13, m33);
	                    target[2] = atan2(m21, m22);
	                }
	                else {
	                    target[1] = atan2(-m31, m11);
	                    target[2] = 0;
	                }
	                break;
	            case 'ZXY':
	                target[0] = asin(clamp(m32, -1, 1));
	                if (abs(m32) < 0.99999) {
	                    target[1] = atan2(-m31, m33);
	                    target[2] = atan2(-m12, m22);
	                }
	                else {
	                    target[1] = 0;
	                    target[2] = atan2(m21, m11);
	                }
	                break;
	            case 'ZYX':
	                target[1] = asin(-clamp(m31, -1, 1));
	                if (abs(m31) < 0.99999) {
	                    target[0] = atan2(m32, m33);
	                    target[2] = atan2(m21, m11);
	                }
	                else {
	                    target[0] = 0;
	                    target[2] = atan2(-m12, m22);
	                }
	                break;
	            case 'YZX':
	                target[2] = asin(clamp(m21, -1, 1));
	                if (abs(m21) < 0.99999) {
	                    target[0] = atan2(-m23, m22);
	                    target[1] = atan2(-m31, m11);
	                }
	                else {
	                    target[0] = 0;
	                    target[1] = atan2(m13, m33);
	                }
	                break;
	            case 'XZY':
	                target[2] = asin(-clamp(m12, -1, 1));
	                if (abs(m12) < 0.99999) {
	                    target[0] = atan2(m32, m22);
	                    target[1] = atan2(m13, m11);
	                }
	                else {
	                    target[0] = atan2(-m23, m33);
	                    target[1] = 0;
	                }
	                break;
	            default:
	                console.warn('Unkown order: ' + order);
	        }
	        out._dirty = true;

	        return out;
	    };

	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.POSITIVE_X = new Vector3(1, 0, 0);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.NEGATIVE_X = new Vector3(-1, 0, 0);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.POSITIVE_Y = new Vector3(0, 1, 0);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.NEGATIVE_Y = new Vector3(0, -1, 0);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.POSITIVE_Z = new Vector3(0, 0, 1);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.NEGATIVE_Z = new Vector3(0, 0, -1);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.UP = new Vector3(0, 1, 0);
	    /**
	     * @type {qtek.math.Vector3}
	     */
	    Vector3.ZERO = new Vector3(0, 0, 0);

	    module.exports = Vector3;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview gl-matrix - High performance matrix and vector operations
	 * @author Brandon Jones
	 * @author Colin MacKenzie IV
	 * @version 2.2.2
	 */

	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


	(function(_global) {
	  "use strict";

	  var shim = {};
	  if (false) {
	    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
	      shim.exports = {};
	      define(function() {
	        return shim.exports;
	      });
	    } else {
	      // gl-matrix lives in a browser, define its namespaces in global
	      shim.exports = typeof(window) !== 'undefined' ? window : _global;
	    }
	  }
	  else {
	    // gl-matrix lives in commonjs, define its namespaces in exports
	    shim.exports = exports;
	  }

	  (function(exports) {
	    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


	if(!GLMAT_EPSILON) {
	    var GLMAT_EPSILON = 0.000001;
	}

	if(!GLMAT_ARRAY_TYPE) {
	    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
	}

	if(!GLMAT_RANDOM) {
	    var GLMAT_RANDOM = Math.random;
	}

	/**
	 * @class Common utilities
	 * @name glMatrix
	 */
	var glMatrix = {};

	/**
	 * Sets the type of array used when creating new vectors and matrices
	 *
	 * @param {Type} type Array type, such as Float32Array or Array
	 */
	glMatrix.setMatrixArrayType = function(type) {
	    GLMAT_ARRAY_TYPE = type;
	}

	if(typeof(exports) !== 'undefined') {
	    exports.glMatrix = glMatrix;
	}

	var degree = Math.PI / 180;

	/**
	* Convert Degree To Radian
	*
	* @param {Number} Angle in Degrees
	*/
	glMatrix.toRadian = function(a){
	     return a * degree;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 2 Dimensional Vector
	 * @name vec2
	 */

	var vec2 = {};

	/**
	 * Creates a new, empty vec2
	 *
	 * @returns {vec2} a new 2D vector
	 */
	vec2.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(2);
	    out[0] = 0;
	    out[1] = 0;
	    return out;
	};

	/**
	 * Creates a new vec2 initialized with values from an existing vector
	 *
	 * @param {vec2} a vector to clone
	 * @returns {vec2} a new 2D vector
	 */
	vec2.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(2);
	    out[0] = a[0];
	    out[1] = a[1];
	    return out;
	};

	/**
	 * Creates a new vec2 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @returns {vec2} a new 2D vector
	 */
	vec2.fromValues = function(x, y) {
	    var out = new GLMAT_ARRAY_TYPE(2);
	    out[0] = x;
	    out[1] = y;
	    return out;
	};

	/**
	 * Copy the values from one vec2 to another
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the source vector
	 * @returns {vec2} out
	 */
	vec2.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    return out;
	};

	/**
	 * Set the components of a vec2 to the given values
	 *
	 * @param {vec2} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @returns {vec2} out
	 */
	vec2.set = function(out, x, y) {
	    out[0] = x;
	    out[1] = y;
	    return out;
	};

	/**
	 * Adds two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    return out;
	};

	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    return out;
	};

	/**
	 * Alias for {@link vec2.subtract}
	 * @function
	 */
	vec2.sub = vec2.subtract;

	/**
	 * Multiplies two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    return out;
	};

	/**
	 * Alias for {@link vec2.multiply}
	 * @function
	 */
	vec2.mul = vec2.multiply;

	/**
	 * Divides two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    return out;
	};

	/**
	 * Alias for {@link vec2.divide}
	 * @function
	 */
	vec2.div = vec2.divide;

	/**
	 * Returns the minimum of two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    return out;
	};

	/**
	 * Returns the maximum of two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    return out;
	};

	/**
	 * Scales a vec2 by a scalar number
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec2} out
	 */
	vec2.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    return out;
	};

	/**
	 * Adds two vec2's after scaling the second operand by a scalar value
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec2} out
	 */
	vec2.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    return out;
	};

	/**
	 * Calculates the euclidian distance between two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec2.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1];
	    return Math.sqrt(x*x + y*y);
	};

	/**
	 * Alias for {@link vec2.distance}
	 * @function
	 */
	vec2.dist = vec2.distance;

	/**
	 * Calculates the squared euclidian distance between two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec2.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1];
	    return x*x + y*y;
	};

	/**
	 * Alias for {@link vec2.squaredDistance}
	 * @function
	 */
	vec2.sqrDist = vec2.squaredDistance;

	/**
	 * Calculates the length of a vec2
	 *
	 * @param {vec2} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec2.length = function (a) {
	    var x = a[0],
	        y = a[1];
	    return Math.sqrt(x*x + y*y);
	};

	/**
	 * Alias for {@link vec2.length}
	 * @function
	 */
	vec2.len = vec2.length;

	/**
	 * Calculates the squared length of a vec2
	 *
	 * @param {vec2} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec2.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1];
	    return x*x + y*y;
	};

	/**
	 * Alias for {@link vec2.squaredLength}
	 * @function
	 */
	vec2.sqrLen = vec2.squaredLength;

	/**
	 * Negates the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to negate
	 * @returns {vec2} out
	 */
	vec2.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    return out;
	};

	/**
	 * Returns the inverse of the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to invert
	 * @returns {vec2} out
	 */
	vec2.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  return out;
	};

	/**
	 * Normalize a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to normalize
	 * @returns {vec2} out
	 */
	vec2.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1];
	    var len = x*x + y*y;
	    if (len > 0) {
	        //TODO: evaluate use of glm_invsqrt here?
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	    }
	    return out;
	};

	/**
	 * Calculates the dot product of two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec2.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	};

	/**
	 * Computes the cross product of two vec2's
	 * Note that the cross product must by definition produce a 3D vector
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec3} out
	 */
	vec2.cross = function(out, a, b) {
	    var z = a[0] * b[1] - a[1] * b[0];
	    out[0] = out[1] = 0;
	    out[2] = z;
	    return out;
	};

	/**
	 * Performs a linear interpolation between two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec2} out
	 */
	vec2.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    return out;
	};

	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec2} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec2} out
	 */
	vec2.random = function (out, scale) {
	    scale = scale || 1.0;
	    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
	    out[0] = Math.cos(r) * scale;
	    out[1] = Math.sin(r) * scale;
	    return out;
	};

	/**
	 * Transforms the vec2 with a mat2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat2} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat2 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[2] * y;
	    out[1] = m[1] * x + m[3] * y;
	    return out;
	};

	/**
	 * Transforms the vec2 with a mat2d
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat2d} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat2d = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[2] * y + m[4];
	    out[1] = m[1] * x + m[3] * y + m[5];
	    return out;
	};

	/**
	 * Transforms the vec2 with a mat3
	 * 3rd vector component is implicitly '1'
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat3} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat3 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[3] * y + m[6];
	    out[1] = m[1] * x + m[4] * y + m[7];
	    return out;
	};

	/**
	 * Transforms the vec2 with a mat4
	 * 3rd vector component is implicitly '0'
	 * 4th vector component is implicitly '1'
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat4 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[4] * y + m[12];
	    out[1] = m[1] * x + m[5] * y + m[13];
	    return out;
	};

	/**
	 * Perform some operation over an array of vec2s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec2.forEach = (function() {
	    var vec = vec2.create();

	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 2;
	        }

	        if(!offset) {
	            offset = 0;
	        }

	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }

	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1];
	        }

	        return a;
	    };
	})();

	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec2} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec2.str = function (a) {
	    return 'vec2(' + a[0] + ', ' + a[1] + ')';
	};

	if(typeof(exports) !== 'undefined') {
	    exports.vec2 = vec2;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 3 Dimensional Vector
	 * @name vec3
	 */

	var vec3 = {};

	/**
	 * Creates a new, empty vec3
	 *
	 * @returns {vec3} a new 3D vector
	 */
	vec3.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(3);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    return out;
	};

	/**
	 * Creates a new vec3 initialized with values from an existing vector
	 *
	 * @param {vec3} a vector to clone
	 * @returns {vec3} a new 3D vector
	 */
	vec3.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(3);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    return out;
	};

	/**
	 * Creates a new vec3 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} a new 3D vector
	 */
	vec3.fromValues = function(x, y, z) {
	    var out = new GLMAT_ARRAY_TYPE(3);
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    return out;
	};

	/**
	 * Copy the values from one vec3 to another
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the source vector
	 * @returns {vec3} out
	 */
	vec3.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    return out;
	};

	/**
	 * Set the components of a vec3 to the given values
	 *
	 * @param {vec3} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} out
	 */
	vec3.set = function(out, x, y, z) {
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    return out;
	};

	/**
	 * Adds two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    return out;
	};

	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    return out;
	};

	/**
	 * Alias for {@link vec3.subtract}
	 * @function
	 */
	vec3.sub = vec3.subtract;

	/**
	 * Multiplies two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    out[2] = a[2] * b[2];
	    return out;
	};

	/**
	 * Alias for {@link vec3.multiply}
	 * @function
	 */
	vec3.mul = vec3.multiply;

	/**
	 * Divides two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    out[2] = a[2] / b[2];
	    return out;
	};

	/**
	 * Alias for {@link vec3.divide}
	 * @function
	 */
	vec3.div = vec3.divide;

	/**
	 * Returns the minimum of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    out[2] = Math.min(a[2], b[2]);
	    return out;
	};

	/**
	 * Returns the maximum of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    out[2] = Math.max(a[2], b[2]);
	    return out;
	};

	/**
	 * Scales a vec3 by a scalar number
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec3} out
	 */
	vec3.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    return out;
	};

	/**
	 * Adds two vec3's after scaling the second operand by a scalar value
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec3} out
	 */
	vec3.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    return out;
	};

	/**
	 * Calculates the euclidian distance between two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec3.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2];
	    return Math.sqrt(x*x + y*y + z*z);
	};

	/**
	 * Alias for {@link vec3.distance}
	 * @function
	 */
	vec3.dist = vec3.distance;

	/**
	 * Calculates the squared euclidian distance between two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec3.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2];
	    return x*x + y*y + z*z;
	};

	/**
	 * Alias for {@link vec3.squaredDistance}
	 * @function
	 */
	vec3.sqrDist = vec3.squaredDistance;

	/**
	 * Calculates the length of a vec3
	 *
	 * @param {vec3} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec3.length = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    return Math.sqrt(x*x + y*y + z*z);
	};

	/**
	 * Alias for {@link vec3.length}
	 * @function
	 */
	vec3.len = vec3.length;

	/**
	 * Calculates the squared length of a vec3
	 *
	 * @param {vec3} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec3.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    return x*x + y*y + z*z;
	};

	/**
	 * Alias for {@link vec3.squaredLength}
	 * @function
	 */
	vec3.sqrLen = vec3.squaredLength;

	/**
	 * Negates the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to negate
	 * @returns {vec3} out
	 */
	vec3.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    return out;
	};

	/**
	 * Returns the inverse of the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to invert
	 * @returns {vec3} out
	 */
	vec3.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  return out;
	};

	/**
	 * Normalize a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to normalize
	 * @returns {vec3} out
	 */
	vec3.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    var len = x*x + y*y + z*z;
	    if (len > 0) {
	        //TODO: evaluate use of glm_invsqrt here?
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	        out[2] = a[2] * len;
	    }
	    return out;
	};

	/**
	 * Calculates the dot product of two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec3.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	};

	/**
	 * Computes the cross product of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.cross = function(out, a, b) {
	    var ax = a[0], ay = a[1], az = a[2],
	        bx = b[0], by = b[1], bz = b[2];

	    out[0] = ay * bz - az * by;
	    out[1] = az * bx - ax * bz;
	    out[2] = ax * by - ay * bx;
	    return out;
	};

	/**
	 * Performs a linear interpolation between two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1],
	        az = a[2];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    out[2] = az + t * (b[2] - az);
	    return out;
	};

	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec3} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec3} out
	 */
	vec3.random = function (out, scale) {
	    scale = scale || 1.0;

	    var r = GLMAT_RANDOM() * 2.0 * Math.PI;
	    var z = (GLMAT_RANDOM() * 2.0) - 1.0;
	    var zScale = Math.sqrt(1.0-z*z) * scale;

	    out[0] = Math.cos(r) * zScale;
	    out[1] = Math.sin(r) * zScale;
	    out[2] = z * scale;
	    return out;
	};

	/**
	 * Transforms the vec3 with a mat4.
	 * 4th vector component is implicitly '1'
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec3} out
	 */
	vec3.transformMat4 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2],
	        w = m[3] * x + m[7] * y + m[11] * z + m[15];
	    w = w || 1.0;
	    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	    return out;
	};

	/**
	 * Transforms the vec3 with a mat3.
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {mat4} m the 3x3 matrix to transform with
	 * @returns {vec3} out
	 */
	vec3.transformMat3 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2];
	    out[0] = x * m[0] + y * m[3] + z * m[6];
	    out[1] = x * m[1] + y * m[4] + z * m[7];
	    out[2] = x * m[2] + y * m[5] + z * m[8];
	    return out;
	};

	/**
	 * Transforms the vec3 with a quat
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {quat} q quaternion to transform with
	 * @returns {vec3} out
	 */
	vec3.transformQuat = function(out, a, q) {
	    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

	    var x = a[0], y = a[1], z = a[2],
	        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	        iy = qw * y + qz * x - qx * z,
	        iz = qw * z + qx * y - qy * x,
	        iw = -qx * x - qy * y - qz * z;

	    // calculate result * inverse quat
	    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	    return out;
	};

	/**
	 * Rotate a 3D vector around the x-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateX = function(out, a, b, c){
	   var p = [], r=[];
	      //Translate point to the origin
	      p[0] = a[0] - b[0];
	      p[1] = a[1] - b[1];
	    p[2] = a[2] - b[2];

	      //perform rotation
	      r[0] = p[0];
	      r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
	      r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

	      //translate to correct position
	      out[0] = r[0] + b[0];
	      out[1] = r[1] + b[1];
	      out[2] = r[2] + b[2];

	    return out;
	};

	/**
	 * Rotate a 3D vector around the y-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateY = function(out, a, b, c){
	    var p = [], r=[];
	    //Translate point to the origin
	    p[0] = a[0] - b[0];
	    p[1] = a[1] - b[1];
	    p[2] = a[2] - b[2];

	    //perform rotation
	    r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
	    r[1] = p[1];
	    r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);

	    //translate to correct position
	    out[0] = r[0] + b[0];
	    out[1] = r[1] + b[1];
	    out[2] = r[2] + b[2];

	    return out;
	};

	/**
	 * Rotate a 3D vector around the z-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateZ = function(out, a, b, c){
	    var p = [], r=[];
	    //Translate point to the origin
	    p[0] = a[0] - b[0];
	    p[1] = a[1] - b[1];
	    p[2] = a[2] - b[2];

	    //perform rotation
	    r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
	    r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
	    r[2] = p[2];

	    //translate to correct position
	    out[0] = r[0] + b[0];
	    out[1] = r[1] + b[1];
	    out[2] = r[2] + b[2];

	    return out;
	};

	/**
	 * Perform some operation over an array of vec3s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec3.forEach = (function() {
	    var vec = vec3.create();

	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 3;
	        }

	        if(!offset) {
	            offset = 0;
	        }

	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }

	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
	        }

	        return a;
	    };
	})();

	/**
	 * Get the angle between two 3D vectors
	 * @param {vec3} a The first operand
	 * @param {vec3} b The second operand
	 * @returns {Number} The angle in radians
	 */
	vec3.angle = function(a, b) {

	    var tempA = vec3.fromValues(a[0], a[1], a[2]);
	    var tempB = vec3.fromValues(b[0], b[1], b[2]);

	    vec3.normalize(tempA, tempA);
	    vec3.normalize(tempB, tempB);

	    var cosine = vec3.dot(tempA, tempB);

	    if(cosine > 1.0){
	        return 0;
	    } else {
	        return Math.acos(cosine);
	    }
	};

	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec3} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec3.str = function (a) {
	    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
	};

	if(typeof(exports) !== 'undefined') {
	    exports.vec3 = vec3;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 4 Dimensional Vector
	 * @name vec4
	 */

	var vec4 = {};

	/**
	 * Creates a new, empty vec4
	 *
	 * @returns {vec4} a new 4D vector
	 */
	vec4.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(4);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    return out;
	};

	/**
	 * Creates a new vec4 initialized with values from an existing vector
	 *
	 * @param {vec4} a vector to clone
	 * @returns {vec4} a new 4D vector
	 */
	vec4.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(4);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};

	/**
	 * Creates a new vec4 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {vec4} a new 4D vector
	 */
	vec4.fromValues = function(x, y, z, w) {
	    var out = new GLMAT_ARRAY_TYPE(4);
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = w;
	    return out;
	};

	/**
	 * Copy the values from one vec4 to another
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the source vector
	 * @returns {vec4} out
	 */
	vec4.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};

	/**
	 * Set the components of a vec4 to the given values
	 *
	 * @param {vec4} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {vec4} out
	 */
	vec4.set = function(out, x, y, z, w) {
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = w;
	    return out;
	};

	/**
	 * Adds two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    return out;
	};

	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    return out;
	};

	/**
	 * Alias for {@link vec4.subtract}
	 * @function
	 */
	vec4.sub = vec4.subtract;

	/**
	 * Multiplies two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    out[2] = a[2] * b[2];
	    out[3] = a[3] * b[3];
	    return out;
	};

	/**
	 * Alias for {@link vec4.multiply}
	 * @function
	 */
	vec4.mul = vec4.multiply;

	/**
	 * Divides two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    out[2] = a[2] / b[2];
	    out[3] = a[3] / b[3];
	    return out;
	};

	/**
	 * Alias for {@link vec4.divide}
	 * @function
	 */
	vec4.div = vec4.divide;

	/**
	 * Returns the minimum of two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    out[2] = Math.min(a[2], b[2]);
	    out[3] = Math.min(a[3], b[3]);
	    return out;
	};

	/**
	 * Returns the maximum of two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    out[2] = Math.max(a[2], b[2]);
	    out[3] = Math.max(a[3], b[3]);
	    return out;
	};

	/**
	 * Scales a vec4 by a scalar number
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec4} out
	 */
	vec4.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    return out;
	};

	/**
	 * Adds two vec4's after scaling the second operand by a scalar value
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec4} out
	 */
	vec4.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    return out;
	};

	/**
	 * Calculates the euclidian distance between two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec4.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2],
	        w = b[3] - a[3];
	    return Math.sqrt(x*x + y*y + z*z + w*w);
	};

	/**
	 * Alias for {@link vec4.distance}
	 * @function
	 */
	vec4.dist = vec4.distance;

	/**
	 * Calculates the squared euclidian distance between two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec4.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2],
	        w = b[3] - a[3];
	    return x*x + y*y + z*z + w*w;
	};

	/**
	 * Alias for {@link vec4.squaredDistance}
	 * @function
	 */
	vec4.sqrDist = vec4.squaredDistance;

	/**
	 * Calculates the length of a vec4
	 *
	 * @param {vec4} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec4.length = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    return Math.sqrt(x*x + y*y + z*z + w*w);
	};

	/**
	 * Alias for {@link vec4.length}
	 * @function
	 */
	vec4.len = vec4.length;

	/**
	 * Calculates the squared length of a vec4
	 *
	 * @param {vec4} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec4.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    return x*x + y*y + z*z + w*w;
	};

	/**
	 * Alias for {@link vec4.squaredLength}
	 * @function
	 */
	vec4.sqrLen = vec4.squaredLength;

	/**
	 * Negates the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to negate
	 * @returns {vec4} out
	 */
	vec4.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] = -a[3];
	    return out;
	};

	/**
	 * Returns the inverse of the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to invert
	 * @returns {vec4} out
	 */
	vec4.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  out[3] = 1.0 / a[3];
	  return out;
	};

	/**
	 * Normalize a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to normalize
	 * @returns {vec4} out
	 */
	vec4.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    var len = x*x + y*y + z*z + w*w;
	    if (len > 0) {
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	        out[2] = a[2] * len;
	        out[3] = a[3] * len;
	    }
	    return out;
	};

	/**
	 * Calculates the dot product of two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec4.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	};

	/**
	 * Performs a linear interpolation between two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec4} out
	 */
	vec4.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1],
	        az = a[2],
	        aw = a[3];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    out[2] = az + t * (b[2] - az);
	    out[3] = aw + t * (b[3] - aw);
	    return out;
	};

	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec4} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec4} out
	 */
	vec4.random = function (out, scale) {
	    scale = scale || 1.0;

	    //TODO: This is a pretty awful way of doing this. Find something better.
	    out[0] = GLMAT_RANDOM();
	    out[1] = GLMAT_RANDOM();
	    out[2] = GLMAT_RANDOM();
	    out[3] = GLMAT_RANDOM();
	    vec4.normalize(out, out);
	    vec4.scale(out, out, scale);
	    return out;
	};

	/**
	 * Transforms the vec4 with a mat4.
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec4} out
	 */
	vec4.transformMat4 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2], w = a[3];
	    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	    return out;
	};

	/**
	 * Transforms the vec4 with a quat
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to transform
	 * @param {quat} q quaternion to transform with
	 * @returns {vec4} out
	 */
	vec4.transformQuat = function(out, a, q) {
	    var x = a[0], y = a[1], z = a[2],
	        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	        iy = qw * y + qz * x - qx * z,
	        iz = qw * z + qx * y - qy * x,
	        iw = -qx * x - qy * y - qz * z;

	    // calculate result * inverse quat
	    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	    return out;
	};

	/**
	 * Perform some operation over an array of vec4s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec4.forEach = (function() {
	    var vec = vec4.create();

	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 4;
	        }

	        if(!offset) {
	            offset = 0;
	        }

	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }

	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
	        }

	        return a;
	    };
	})();

	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec4} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec4.str = function (a) {
	    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};

	if(typeof(exports) !== 'undefined') {
	    exports.vec4 = vec4;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 2x2 Matrix
	 * @name mat2
	 */

	var mat2 = {};

	/**
	 * Creates a new identity mat2
	 *
	 * @returns {mat2} a new 2x2 matrix
	 */
	mat2.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(4);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};

	/**
	 * Creates a new mat2 initialized with values from an existing matrix
	 *
	 * @param {mat2} a matrix to clone
	 * @returns {mat2} a new 2x2 matrix
	 */
	mat2.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(4);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};

	/**
	 * Copy the values from one mat2 to another
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};

	/**
	 * Set a mat2 to the identity matrix
	 *
	 * @param {mat2} out the receiving matrix
	 * @returns {mat2} out
	 */
	mat2.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};

	/**
	 * Transpose the values of a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a1 = a[1];
	        out[1] = a[2];
	        out[2] = a1;
	    } else {
	        out[0] = a[0];
	        out[1] = a[2];
	        out[2] = a[1];
	        out[3] = a[3];
	    }

	    return out;
	};

	/**
	 * Inverts a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.invert = function(out, a) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

	        // Calculate the determinant
	        det = a0 * a3 - a2 * a1;

	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;

	    out[0] =  a3 * det;
	    out[1] = -a1 * det;
	    out[2] = -a2 * det;
	    out[3] =  a0 * det;

	    return out;
	};

	/**
	 * Calculates the adjugate of a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.adjoint = function(out, a) {
	    // Caching this value is nessecary if out == a
	    var a0 = a[0];
	    out[0] =  a[3];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] =  a0;

	    return out;
	};

	/**
	 * Calculates the determinant of a mat2
	 *
	 * @param {mat2} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat2.determinant = function (a) {
	    return a[0] * a[3] - a[2] * a[1];
	};

	/**
	 * Multiplies two mat2's
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the first operand
	 * @param {mat2} b the second operand
	 * @returns {mat2} out
	 */
	mat2.multiply = function (out, a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    out[0] = a0 * b0 + a2 * b1;
	    out[1] = a1 * b0 + a3 * b1;
	    out[2] = a0 * b2 + a2 * b3;
	    out[3] = a1 * b2 + a3 * b3;
	    return out;
	};

	/**
	 * Alias for {@link mat2.multiply}
	 * @function
	 */
	mat2.mul = mat2.multiply;

	/**
	 * Rotates a mat2 by the given angle
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2} out
	 */
	mat2.rotate = function (out, a, rad) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = a0 *  c + a2 * s;
	    out[1] = a1 *  c + a3 * s;
	    out[2] = a0 * -s + a2 * c;
	    out[3] = a1 * -s + a3 * c;
	    return out;
	};

	/**
	 * Scales the mat2 by the dimensions in the given vec2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to rotate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat2} out
	 **/
	mat2.scale = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0 * v0;
	    out[1] = a1 * v0;
	    out[2] = a2 * v1;
	    out[3] = a3 * v1;
	    return out;
	};

	/**
	 * Returns a string representation of a mat2
	 *
	 * @param {mat2} mat matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat2.str = function (a) {
	    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};

	/**
	 * Returns Frobenius norm of a mat2
	 *
	 * @param {mat2} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat2.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
	};

	/**
	 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
	 * @param {mat2} L the lower triangular matrix
	 * @param {mat2} D the diagonal matrix
	 * @param {mat2} U the upper triangular matrix
	 * @param {mat2} a the input matrix to factorize
	 */

	mat2.LDU = function (L, D, U, a) {
	    L[2] = a[2]/a[0];
	    U[0] = a[0];
	    U[1] = a[1];
	    U[3] = a[3] - L[2] * U[1];
	    return [L, D, U];
	};

	if(typeof(exports) !== 'undefined') {
	    exports.mat2 = mat2;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 2x3 Matrix
	 * @name mat2d
	 *
	 * @description
	 * A mat2d contains six elements defined as:
	 * <pre>
	 * [a, c, tx,
	 *  b, d, ty]
	 * </pre>
	 * This is a short form for the 3x3 matrix:
	 * <pre>
	 * [a, c, tx,
	 *  b, d, ty,
	 *  0, 0, 1]
	 * </pre>
	 * The last row is ignored so the array is shorter and operations are faster.
	 */

	var mat2d = {};

	/**
	 * Creates a new identity mat2d
	 *
	 * @returns {mat2d} a new 2x3 matrix
	 */
	mat2d.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(6);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	};

	/**
	 * Creates a new mat2d initialized with values from an existing matrix
	 *
	 * @param {mat2d} a matrix to clone
	 * @returns {mat2d} a new 2x3 matrix
	 */
	mat2d.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(6);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    return out;
	};

	/**
	 * Copy the values from one mat2d to another
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the source matrix
	 * @returns {mat2d} out
	 */
	mat2d.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    return out;
	};

	/**
	 * Set a mat2d to the identity matrix
	 *
	 * @param {mat2d} out the receiving matrix
	 * @returns {mat2d} out
	 */
	mat2d.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	};

	/**
	 * Inverts a mat2d
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the source matrix
	 * @returns {mat2d} out
	 */
	mat2d.invert = function(out, a) {
	    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
	        atx = a[4], aty = a[5];

	    var det = aa * ad - ab * ac;
	    if(!det){
	        return null;
	    }
	    det = 1.0 / det;

	    out[0] = ad * det;
	    out[1] = -ab * det;
	    out[2] = -ac * det;
	    out[3] = aa * det;
	    out[4] = (ac * aty - ad * atx) * det;
	    out[5] = (ab * atx - aa * aty) * det;
	    return out;
	};

	/**
	 * Calculates the determinant of a mat2d
	 *
	 * @param {mat2d} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat2d.determinant = function (a) {
	    return a[0] * a[3] - a[1] * a[2];
	};

	/**
	 * Multiplies two mat2d's
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the first operand
	 * @param {mat2d} b the second operand
	 * @returns {mat2d} out
	 */
	mat2d.multiply = function (out, a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
	    out[0] = a0 * b0 + a2 * b1;
	    out[1] = a1 * b0 + a3 * b1;
	    out[2] = a0 * b2 + a2 * b3;
	    out[3] = a1 * b2 + a3 * b3;
	    out[4] = a0 * b4 + a2 * b5 + a4;
	    out[5] = a1 * b4 + a3 * b5 + a5;
	    return out;
	};

	/**
	 * Alias for {@link mat2d.multiply}
	 * @function
	 */
	mat2d.mul = mat2d.multiply;


	/**
	 * Rotates a mat2d by the given angle
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2d} out
	 */
	mat2d.rotate = function (out, a, rad) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = a0 *  c + a2 * s;
	    out[1] = a1 *  c + a3 * s;
	    out[2] = a0 * -s + a2 * c;
	    out[3] = a1 * -s + a3 * c;
	    out[4] = a4;
	    out[5] = a5;
	    return out;
	};

	/**
	 * Scales the mat2d by the dimensions in the given vec2
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to translate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat2d} out
	 **/
	mat2d.scale = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0 * v0;
	    out[1] = a1 * v0;
	    out[2] = a2 * v1;
	    out[3] = a3 * v1;
	    out[4] = a4;
	    out[5] = a5;
	    return out;
	};

	/**
	 * Translates the mat2d by the dimensions in the given vec2
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to translate
	 * @param {vec2} v the vec2 to translate the matrix by
	 * @returns {mat2d} out
	 **/
	mat2d.translate = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0;
	    out[1] = a1;
	    out[2] = a2;
	    out[3] = a3;
	    out[4] = a0 * v0 + a2 * v1 + a4;
	    out[5] = a1 * v0 + a3 * v1 + a5;
	    return out;
	};

	/**
	 * Returns a string representation of a mat2d
	 *
	 * @param {mat2d} a matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat2d.str = function (a) {
	    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
	                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
	};

	/**
	 * Returns Frobenius norm of a mat2d
	 *
	 * @param {mat2d} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat2d.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
	};

	if(typeof(exports) !== 'undefined') {
	    exports.mat2d = mat2d;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 3x3 Matrix
	 * @name mat3
	 */

	var mat3 = {};

	/**
	 * Creates a new identity mat3
	 *
	 * @returns {mat3} a new 3x3 matrix
	 */
	mat3.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(9);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	};

	/**
	 * Copies the upper-left 3x3 values into the given mat3.
	 *
	 * @param {mat3} out the receiving 3x3 matrix
	 * @param {mat4} a   the source 4x4 matrix
	 * @returns {mat3} out
	 */
	mat3.fromMat4 = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[4];
	    out[4] = a[5];
	    out[5] = a[6];
	    out[6] = a[8];
	    out[7] = a[9];
	    out[8] = a[10];
	    return out;
	};

	/**
	 * Creates a new mat3 initialized with values from an existing matrix
	 *
	 * @param {mat3} a matrix to clone
	 * @returns {mat3} a new 3x3 matrix
	 */
	mat3.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(9);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};

	/**
	 * Copy the values from one mat3 to another
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};

	/**
	 * Set a mat3 to the identity matrix
	 *
	 * @param {mat3} out the receiving matrix
	 * @returns {mat3} out
	 */
	mat3.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	};

	/**
	 * Transpose the values of a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a01 = a[1], a02 = a[2], a12 = a[5];
	        out[1] = a[3];
	        out[2] = a[6];
	        out[3] = a01;
	        out[5] = a[7];
	        out[6] = a02;
	        out[7] = a12;
	    } else {
	        out[0] = a[0];
	        out[1] = a[3];
	        out[2] = a[6];
	        out[3] = a[1];
	        out[4] = a[4];
	        out[5] = a[7];
	        out[6] = a[2];
	        out[7] = a[5];
	        out[8] = a[8];
	    }

	    return out;
	};

	/**
	 * Inverts a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.invert = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],

	        b01 = a22 * a11 - a12 * a21,
	        b11 = -a22 * a10 + a12 * a20,
	        b21 = a21 * a10 - a11 * a20,

	        // Calculate the determinant
	        det = a00 * b01 + a01 * b11 + a02 * b21;

	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;

	    out[0] = b01 * det;
	    out[1] = (-a22 * a01 + a02 * a21) * det;
	    out[2] = (a12 * a01 - a02 * a11) * det;
	    out[3] = b11 * det;
	    out[4] = (a22 * a00 - a02 * a20) * det;
	    out[5] = (-a12 * a00 + a02 * a10) * det;
	    out[6] = b21 * det;
	    out[7] = (-a21 * a00 + a01 * a20) * det;
	    out[8] = (a11 * a00 - a01 * a10) * det;
	    return out;
	};

	/**
	 * Calculates the adjugate of a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.adjoint = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8];

	    out[0] = (a11 * a22 - a12 * a21);
	    out[1] = (a02 * a21 - a01 * a22);
	    out[2] = (a01 * a12 - a02 * a11);
	    out[3] = (a12 * a20 - a10 * a22);
	    out[4] = (a00 * a22 - a02 * a20);
	    out[5] = (a02 * a10 - a00 * a12);
	    out[6] = (a10 * a21 - a11 * a20);
	    out[7] = (a01 * a20 - a00 * a21);
	    out[8] = (a00 * a11 - a01 * a10);
	    return out;
	};

	/**
	 * Calculates the determinant of a mat3
	 *
	 * @param {mat3} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat3.determinant = function (a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8];

	    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
	};

	/**
	 * Multiplies two mat3's
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the first operand
	 * @param {mat3} b the second operand
	 * @returns {mat3} out
	 */
	mat3.multiply = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],

	        b00 = b[0], b01 = b[1], b02 = b[2],
	        b10 = b[3], b11 = b[4], b12 = b[5],
	        b20 = b[6], b21 = b[7], b22 = b[8];

	    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
	    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
	    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

	    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
	    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
	    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

	    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
	    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
	    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
	    return out;
	};

	/**
	 * Alias for {@link mat3.multiply}
	 * @function
	 */
	mat3.mul = mat3.multiply;

	/**
	 * Translate a mat3 by the given vector
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to translate
	 * @param {vec2} v vector to translate by
	 * @returns {mat3} out
	 */
	mat3.translate = function(out, a, v) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	        x = v[0], y = v[1];

	    out[0] = a00;
	    out[1] = a01;
	    out[2] = a02;

	    out[3] = a10;
	    out[4] = a11;
	    out[5] = a12;

	    out[6] = x * a00 + y * a10 + a20;
	    out[7] = x * a01 + y * a11 + a21;
	    out[8] = x * a02 + y * a12 + a22;
	    return out;
	};

	/**
	 * Rotates a mat3 by the given angle
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat3} out
	 */
	mat3.rotate = function (out, a, rad) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],

	        s = Math.sin(rad),
	        c = Math.cos(rad);

	    out[0] = c * a00 + s * a10;
	    out[1] = c * a01 + s * a11;
	    out[2] = c * a02 + s * a12;

	    out[3] = c * a10 - s * a00;
	    out[4] = c * a11 - s * a01;
	    out[5] = c * a12 - s * a02;

	    out[6] = a20;
	    out[7] = a21;
	    out[8] = a22;
	    return out;
	};

	/**
	 * Scales the mat3 by the dimensions in the given vec2
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to rotate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat3} out
	 **/
	mat3.scale = function(out, a, v) {
	    var x = v[0], y = v[1];

	    out[0] = x * a[0];
	    out[1] = x * a[1];
	    out[2] = x * a[2];

	    out[3] = y * a[3];
	    out[4] = y * a[4];
	    out[5] = y * a[5];

	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};

	/**
	 * Copies the values from a mat2d into a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat2d} a the matrix to copy
	 * @returns {mat3} out
	 **/
	mat3.fromMat2d = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = 0;

	    out[3] = a[2];
	    out[4] = a[3];
	    out[5] = 0;

	    out[6] = a[4];
	    out[7] = a[5];
	    out[8] = 1;
	    return out;
	};

	/**
	* Calculates a 3x3 matrix from the given quaternion
	*
	* @param {mat3} out mat3 receiving operation result
	* @param {quat} q Quaternion to create matrix from
	*
	* @returns {mat3} out
	*/
	mat3.fromQuat = function (out, q) {
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,

	        xx = x * x2,
	        yx = y * x2,
	        yy = y * y2,
	        zx = z * x2,
	        zy = z * y2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;

	    out[0] = 1 - yy - zz;
	    out[3] = yx - wz;
	    out[6] = zx + wy;

	    out[1] = yx + wz;
	    out[4] = 1 - xx - zz;
	    out[7] = zy - wx;

	    out[2] = zx - wy;
	    out[5] = zy + wx;
	    out[8] = 1 - xx - yy;

	    return out;
	};

	/**
	* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	*
	* @param {mat3} out mat3 receiving operation result
	* @param {mat4} a Mat4 to derive the normal matrix from
	*
	* @returns {mat3} out
	*/
	mat3.normalFromMat4 = function (out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32,

	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;

	    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

	    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

	    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

	    return out;
	};

	/**
	 * Returns a string representation of a mat3
	 *
	 * @param {mat3} mat matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat3.str = function (a) {
	    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
	                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
	                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
	};

	/**
	 * Returns Frobenius norm of a mat3
	 *
	 * @param {mat3} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat3.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
	};


	if(typeof(exports) !== 'undefined') {
	    exports.mat3 = mat3;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class 4x4 Matrix
	 * @name mat4
	 */

	var mat4 = {};

	/**
	 * Creates a new identity mat4
	 *
	 * @returns {mat4} a new 4x4 matrix
	 */
	mat4.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(16);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	};

	/**
	 * Creates a new mat4 initialized with values from an existing matrix
	 *
	 * @param {mat4} a matrix to clone
	 * @returns {mat4} a new 4x4 matrix
	 */
	mat4.clone = function(a) {
	    var out = new GLMAT_ARRAY_TYPE(16);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};

	/**
	 * Copy the values from one mat4 to another
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};

	/**
	 * Set a mat4 to the identity matrix
	 *
	 * @param {mat4} out the receiving matrix
	 * @returns {mat4} out
	 */
	mat4.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	};

	/**
	 * Transpose the values of a mat4
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a01 = a[1], a02 = a[2], a03 = a[3],
	            a12 = a[6], a13 = a[7],
	            a23 = a[11];

	        out[1] = a[4];
	        out[2] = a[8];
	        out[3] = a[12];
	        out[4] = a01;
	        out[6] = a[9];
	        out[7] = a[13];
	        out[8] = a02;
	        out[9] = a12;
	        out[11] = a[14];
	        out[12] = a03;
	        out[13] = a13;
	        out[14] = a23;
	    } else {
	        out[0] = a[0];
	        out[1] = a[4];
	        out[2] = a[8];
	        out[3] = a[12];
	        out[4] = a[1];
	        out[5] = a[5];
	        out[6] = a[9];
	        out[7] = a[13];
	        out[8] = a[2];
	        out[9] = a[6];
	        out[10] = a[10];
	        out[11] = a[14];
	        out[12] = a[3];
	        out[13] = a[7];
	        out[14] = a[11];
	        out[15] = a[15];
	    }

	    return out;
	};

	/**
	 * Inverts a mat4
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.invert = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32,

	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;

	    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
	    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
	    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
	    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
	    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
	    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
	    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

	    return out;
	};

	/**
	 * Calculates the adjugate of a mat4
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.adjoint = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

	    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
	    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
	    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
	    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
	    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
	    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
	    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
	    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
	    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
	    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
	    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
	    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
	    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
	    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
	    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
	    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
	    return out;
	};

	/**
	 * Calculates the determinant of a mat4
	 *
	 * @param {mat4} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat4.determinant = function (a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32;

	    // Calculate the determinant
	    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	};

	/**
	 * Multiplies two mat4's
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.multiply = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

	    // Cache only the current line of the second matrix
	    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

	    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
	    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

	    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
	    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

	    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
	    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	    return out;
	};

	/**
	 * Multiplies two affine mat4's
	 * Add by https://github.com/pissang
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.multiplyAffine = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[4], a11 = a[5], a12 = a[6],
	        a20 = a[8], a21 = a[9], a22 = a[10],
	        a30 = a[12], a31 = a[13], a32 = a[14];

	    // Cache only the current line of the second matrix
	    var b0  = b[0], b1 = b[1], b2 = b[2];
	    out[0] = b0*a00 + b1*a10 + b2*a20;
	    out[1] = b0*a01 + b1*a11 + b2*a21;
	    out[2] = b0*a02 + b1*a12 + b2*a22;
	    // out[3] = 0;

	    b0 = b[4]; b1 = b[5]; b2 = b[6];
	    out[4] = b0*a00 + b1*a10 + b2*a20;
	    out[5] = b0*a01 + b1*a11 + b2*a21;
	    out[6] = b0*a02 + b1*a12 + b2*a22;
	    // out[7] = 0;

	    b0 = b[8]; b1 = b[9]; b2 = b[10];
	    out[8] = b0*a00 + b1*a10 + b2*a20;
	    out[9] = b0*a01 + b1*a11 + b2*a21;
	    out[10] = b0*a02 + b1*a12 + b2*a22;
	    // out[11] = 0;

	    b0 = b[12]; b1 = b[13]; b2 = b[14];
	    out[12] = b0*a00 + b1*a10 + b2*a20 + a30;
	    out[13] = b0*a01 + b1*a11 + b2*a21 + a31;
	    out[14] = b0*a02 + b1*a12 + b2*a22 + a32;
	    // out[15] = 1;
	    return out;
	};

	/**
	 * Alias for {@link mat4.multiply}
	 * @function
	 */
	mat4.mul = mat4.multiply;

	/**
	 * Alias for {@link mat4.multiplyAffine}
	 * @function
	 */
	mat4.mulAffine = mat4.multiplyAffine;
	/**
	 * Translate a mat4 by the given vector
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to translate
	 * @param {vec3} v vector to translate by
	 * @returns {mat4} out
	 */
	mat4.translate = function (out, a, v) {
	    var x = v[0], y = v[1], z = v[2],
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23;

	    if (a === out) {
	        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
	        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
	        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
	        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	    } else {
	        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

	        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
	        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
	        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

	        out[12] = a00 * x + a10 * y + a20 * z + a[12];
	        out[13] = a01 * x + a11 * y + a21 * z + a[13];
	        out[14] = a02 * x + a12 * y + a22 * z + a[14];
	        out[15] = a03 * x + a13 * y + a23 * z + a[15];
	    }

	    return out;
	};

	/**
	 * Scales the mat4 by the dimensions in the given vec3
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {vec3} v the vec3 to scale the matrix by
	 * @returns {mat4} out
	 **/
	mat4.scale = function(out, a, v) {
	    var x = v[0], y = v[1], z = v[2];

	    out[0] = a[0] * x;
	    out[1] = a[1] * x;
	    out[2] = a[2] * x;
	    out[3] = a[3] * x;
	    out[4] = a[4] * y;
	    out[5] = a[5] * y;
	    out[6] = a[6] * y;
	    out[7] = a[7] * y;
	    out[8] = a[8] * z;
	    out[9] = a[9] * z;
	    out[10] = a[10] * z;
	    out[11] = a[11] * z;
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};

	/**
	 * Rotates a mat4 by the given angle
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @param {vec3} axis the axis to rotate around
	 * @returns {mat4} out
	 */
	mat4.rotate = function (out, a, rad, axis) {
	    var x = axis[0], y = axis[1], z = axis[2],
	        len = Math.sqrt(x * x + y * y + z * z),
	        s, c, t,
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23,
	        b00, b01, b02,
	        b10, b11, b12,
	        b20, b21, b22;

	    if (Math.abs(len) < GLMAT_EPSILON) { return null; }

	    len = 1 / len;
	    x *= len;
	    y *= len;
	    z *= len;

	    s = Math.sin(rad);
	    c = Math.cos(rad);
	    t = 1 - c;

	    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

	    // Construct the elements of the rotation matrix
	    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
	    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
	    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

	    // Perform rotation-specific matrix multiplication
	    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
	    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
	    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
	    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
	    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
	    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
	    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
	    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
	    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
	    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
	    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
	    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	    return out;
	};

	/**
	 * Rotates a matrix by the given angle around the X axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateX = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a10 = a[4],
	        a11 = a[5],
	        a12 = a[6],
	        a13 = a[7],
	        a20 = a[8],
	        a21 = a[9],
	        a22 = a[10],
	        a23 = a[11];

	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[0]  = a[0];
	        out[1]  = a[1];
	        out[2]  = a[2];
	        out[3]  = a[3];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }

	    // Perform axis-specific matrix multiplication
	    out[4] = a10 * c + a20 * s;
	    out[5] = a11 * c + a21 * s;
	    out[6] = a12 * c + a22 * s;
	    out[7] = a13 * c + a23 * s;
	    out[8] = a20 * c - a10 * s;
	    out[9] = a21 * c - a11 * s;
	    out[10] = a22 * c - a12 * s;
	    out[11] = a23 * c - a13 * s;
	    return out;
	};

	/**
	 * Rotates a matrix by the given angle around the Y axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateY = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a00 = a[0],
	        a01 = a[1],
	        a02 = a[2],
	        a03 = a[3],
	        a20 = a[8],
	        a21 = a[9],
	        a22 = a[10],
	        a23 = a[11];

	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[4]  = a[4];
	        out[5]  = a[5];
	        out[6]  = a[6];
	        out[7]  = a[7];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }

	    // Perform axis-specific matrix multiplication
	    out[0] = a00 * c - a20 * s;
	    out[1] = a01 * c - a21 * s;
	    out[2] = a02 * c - a22 * s;
	    out[3] = a03 * c - a23 * s;
	    out[8] = a00 * s + a20 * c;
	    out[9] = a01 * s + a21 * c;
	    out[10] = a02 * s + a22 * c;
	    out[11] = a03 * s + a23 * c;
	    return out;
	};

	/**
	 * Rotates a matrix by the given angle around the Z axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateZ = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a00 = a[0],
	        a01 = a[1],
	        a02 = a[2],
	        a03 = a[3],
	        a10 = a[4],
	        a11 = a[5],
	        a12 = a[6],
	        a13 = a[7];

	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[8]  = a[8];
	        out[9]  = a[9];
	        out[10] = a[10];
	        out[11] = a[11];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }

	    // Perform axis-specific matrix multiplication
	    out[0] = a00 * c + a10 * s;
	    out[1] = a01 * c + a11 * s;
	    out[2] = a02 * c + a12 * s;
	    out[3] = a03 * c + a13 * s;
	    out[4] = a10 * c - a00 * s;
	    out[5] = a11 * c - a01 * s;
	    out[6] = a12 * c - a02 * s;
	    out[7] = a13 * c - a03 * s;
	    return out;
	};

	/**
	 * Creates a matrix from a quaternion rotation and vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslation = function (out, q, v) {
	    // Quaternion math
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,

	        xx = x * x2,
	        xy = x * y2,
	        xz = x * z2,
	        yy = y * y2,
	        yz = y * z2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;

	    out[0] = 1 - (yy + zz);
	    out[1] = xy + wz;
	    out[2] = xz - wy;
	    out[3] = 0;
	    out[4] = xy - wz;
	    out[5] = 1 - (xx + zz);
	    out[6] = yz + wx;
	    out[7] = 0;
	    out[8] = xz + wy;
	    out[9] = yz - wx;
	    out[10] = 1 - (xx + yy);
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;

	    return out;
	};

	mat4.fromQuat = function (out, q) {
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,

	        xx = x * x2,
	        yx = y * x2,
	        yy = y * y2,
	        zx = z * x2,
	        zy = z * y2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;

	    out[0] = 1 - yy - zz;
	    out[1] = yx + wz;
	    out[2] = zx - wy;
	    out[3] = 0;

	    out[4] = yx - wz;
	    out[5] = 1 - xx - zz;
	    out[6] = zy + wx;
	    out[7] = 0;

	    out[8] = zx + wy;
	    out[9] = zy - wx;
	    out[10] = 1 - xx - yy;
	    out[11] = 0;

	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;

	    return out;
	};

	/**
	 * Generates a frustum matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {Number} left Left bound of the frustum
	 * @param {Number} right Right bound of the frustum
	 * @param {Number} bottom Bottom bound of the frustum
	 * @param {Number} top Top bound of the frustum
	 * @param {Number} near Near bound of the frustum
	 * @param {Number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.frustum = function (out, left, right, bottom, top, near, far) {
	    var rl = 1 / (right - left),
	        tb = 1 / (top - bottom),
	        nf = 1 / (near - far);
	    out[0] = (near * 2) * rl;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = (near * 2) * tb;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = (right + left) * rl;
	    out[9] = (top + bottom) * tb;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (far * near * 2) * nf;
	    out[15] = 0;
	    return out;
	};

	/**
	 * Generates a perspective projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} fovy Vertical field of view in radians
	 * @param {number} aspect Aspect ratio. typically viewport width/height
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.perspective = function (out, fovy, aspect, near, far) {
	    var f = 1.0 / Math.tan(fovy / 2),
	        nf = 1 / (near - far);
	    out[0] = f / aspect;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = f;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (2 * far * near) * nf;
	    out[15] = 0;
	    return out;
	};

	/**
	 * Generates a orthogonal projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} left Left bound of the frustum
	 * @param {number} right Right bound of the frustum
	 * @param {number} bottom Bottom bound of the frustum
	 * @param {number} top Top bound of the frustum
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.ortho = function (out, left, right, bottom, top, near, far) {
	    var lr = 1 / (left - right),
	        bt = 1 / (bottom - top),
	        nf = 1 / (near - far);
	    out[0] = -2 * lr;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = -2 * bt;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 2 * nf;
	    out[11] = 0;
	    out[12] = (left + right) * lr;
	    out[13] = (top + bottom) * bt;
	    out[14] = (far + near) * nf;
	    out[15] = 1;
	    return out;
	};

	/**
	 * Generates a look-at matrix with the given eye position, focal point, and up axis
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {vec3} eye Position of the viewer
	 * @param {vec3} center Point the viewer is looking at
	 * @param {vec3} up vec3 pointing up
	 * @returns {mat4} out
	 */
	mat4.lookAt = function (out, eye, center, up) {
	    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
	        eyex = eye[0],
	        eyey = eye[1],
	        eyez = eye[2],
	        upx = up[0],
	        upy = up[1],
	        upz = up[2],
	        centerx = center[0],
	        centery = center[1],
	        centerz = center[2];

	    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
	        Math.abs(eyey - centery) < GLMAT_EPSILON &&
	        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
	        return mat4.identity(out);
	    }

	    z0 = eyex - centerx;
	    z1 = eyey - centery;
	    z2 = eyez - centerz;

	    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	    z0 *= len;
	    z1 *= len;
	    z2 *= len;

	    x0 = upy * z2 - upz * z1;
	    x1 = upz * z0 - upx * z2;
	    x2 = upx * z1 - upy * z0;
	    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
	    if (!len) {
	        x0 = 0;
	        x1 = 0;
	        x2 = 0;
	    } else {
	        len = 1 / len;
	        x0 *= len;
	        x1 *= len;
	        x2 *= len;
	    }

	    y0 = z1 * x2 - z2 * x1;
	    y1 = z2 * x0 - z0 * x2;
	    y2 = z0 * x1 - z1 * x0;

	    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
	    if (!len) {
	        y0 = 0;
	        y1 = 0;
	        y2 = 0;
	    } else {
	        len = 1 / len;
	        y0 *= len;
	        y1 *= len;
	        y2 *= len;
	    }

	    out[0] = x0;
	    out[1] = y0;
	    out[2] = z0;
	    out[3] = 0;
	    out[4] = x1;
	    out[5] = y1;
	    out[6] = z1;
	    out[7] = 0;
	    out[8] = x2;
	    out[9] = y2;
	    out[10] = z2;
	    out[11] = 0;
	    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
	    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
	    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
	    out[15] = 1;

	    return out;
	};

	/**
	 * Returns a string representation of a mat4
	 *
	 * @param {mat4} mat matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat4.str = function (a) {
	    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
	                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
	                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
	                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
	};

	/**
	 * Returns Frobenius norm of a mat4
	 *
	 * @param {mat4} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat4.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
	};


	if(typeof(exports) !== 'undefined') {
	    exports.mat4 = mat4;
	}
	;
	/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification,
	are permitted provided that the following conditions are met:

	  * Redistributions of source code must retain the above copyright notice, this
	    list of conditions and the following disclaimer.
	  * Redistributions in binary form must reproduce the above copyright notice,
	    this list of conditions and the following disclaimer in the documentation
	    and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
	ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

	/**
	 * @class Quaternion
	 * @name quat
	 */

	var quat = {};

	/**
	 * Creates a new identity quat
	 *
	 * @returns {quat} a new quaternion
	 */
	quat.create = function() {
	    var out = new GLMAT_ARRAY_TYPE(4);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};

	/**
	 * Sets a quaternion to represent the shortest rotation from one
	 * vector to another.
	 *
	 * Both vectors are assumed to be unit length.
	 *
	 * @param {quat} out the receiving quaternion.
	 * @param {vec3} a the initial vector
	 * @param {vec3} b the destination vector
	 * @returns {quat} out
	 */
	quat.rotationTo = (function() {
	    var tmpvec3 = vec3.create();
	    var xUnitVec3 = vec3.fromValues(1,0,0);
	    var yUnitVec3 = vec3.fromValues(0,1,0);

	    return function(out, a, b) {
	        var dot = vec3.dot(a, b);
	        if (dot < -0.999999) {
	            vec3.cross(tmpvec3, xUnitVec3, a);
	            if (vec3.length(tmpvec3) < 0.000001)
	                vec3.cross(tmpvec3, yUnitVec3, a);
	            vec3.normalize(tmpvec3, tmpvec3);
	            quat.setAxisAngle(out, tmpvec3, Math.PI);
	            return out;
	        } else if (dot > 0.999999) {
	            out[0] = 0;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            return out;
	        } else {
	            vec3.cross(tmpvec3, a, b);
	            out[0] = tmpvec3[0];
	            out[1] = tmpvec3[1];
	            out[2] = tmpvec3[2];
	            out[3] = 1 + dot;
	            return quat.normalize(out, out);
	        }
	    };
	})();

	/**
	 * Sets the specified quaternion with values corresponding to the given
	 * axes. Each axis is a vec3 and is expected to be unit length and
	 * perpendicular to all other specified axes.
	 *
	 * @param {vec3} view  the vector representing the viewing direction
	 * @param {vec3} right the vector representing the local "right" direction
	 * @param {vec3} up    the vector representing the local "up" direction
	 * @returns {quat} out
	 */
	quat.setAxes = (function() {
	    var matr = mat3.create();

	    return function(out, view, right, up) {
	        matr[0] = right[0];
	        matr[3] = right[1];
	        matr[6] = right[2];

	        matr[1] = up[0];
	        matr[4] = up[1];
	        matr[7] = up[2];

	        matr[2] = -view[0];
	        matr[5] = -view[1];
	        matr[8] = -view[2];

	        return quat.normalize(out, quat.fromMat3(out, matr));
	    };
	})();

	/**
	 * Creates a new quat initialized with values from an existing quaternion
	 *
	 * @param {quat} a quaternion to clone
	 * @returns {quat} a new quaternion
	 * @function
	 */
	quat.clone = vec4.clone;

	/**
	 * Creates a new quat initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {quat} a new quaternion
	 * @function
	 */
	quat.fromValues = vec4.fromValues;

	/**
	 * Copy the values from one quat to another
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the source quaternion
	 * @returns {quat} out
	 * @function
	 */
	quat.copy = vec4.copy;

	/**
	 * Set the components of a quat to the given values
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {quat} out
	 * @function
	 */
	quat.set = vec4.set;

	/**
	 * Set a quat to the identity quaternion
	 *
	 * @param {quat} out the receiving quaternion
	 * @returns {quat} out
	 */
	quat.identity = function(out) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};

	/**
	 * Sets a quat from the given angle and rotation axis,
	 * then returns it.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {vec3} axis the axis around which to rotate
	 * @param {Number} rad the angle in radians
	 * @returns {quat} out
	 **/
	quat.setAxisAngle = function(out, axis, rad) {
	    rad = rad * 0.5;
	    var s = Math.sin(rad);
	    out[0] = s * axis[0];
	    out[1] = s * axis[1];
	    out[2] = s * axis[2];
	    out[3] = Math.cos(rad);
	    return out;
	};

	/**
	 * Adds two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {quat} out
	 * @function
	 */
	quat.add = vec4.add;

	/**
	 * Multiplies two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {quat} out
	 */
	quat.multiply = function(out, a, b) {
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];

	    out[0] = ax * bw + aw * bx + ay * bz - az * by;
	    out[1] = ay * bw + aw * by + az * bx - ax * bz;
	    out[2] = az * bw + aw * bz + ax * by - ay * bx;
	    out[3] = aw * bw - ax * bx - ay * by - az * bz;
	    return out;
	};

	/**
	 * Alias for {@link quat.multiply}
	 * @function
	 */
	quat.mul = quat.multiply;

	/**
	 * Scales a quat by a scalar number
	 *
	 * @param {quat} out the receiving vector
	 * @param {quat} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {quat} out
	 * @function
	 */
	quat.scale = vec4.scale;

	/**
	 * Rotates a quaternion by the given angle about the X axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateX = function (out, a, rad) {
	    rad *= 0.5;

	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = Math.sin(rad), bw = Math.cos(rad);

	    out[0] = ax * bw + aw * bx;
	    out[1] = ay * bw + az * bx;
	    out[2] = az * bw - ay * bx;
	    out[3] = aw * bw - ax * bx;
	    return out;
	};

	/**
	 * Rotates a quaternion by the given angle about the Y axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateY = function (out, a, rad) {
	    rad *= 0.5;

	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        by = Math.sin(rad), bw = Math.cos(rad);

	    out[0] = ax * bw - az * by;
	    out[1] = ay * bw + aw * by;
	    out[2] = az * bw + ax * by;
	    out[3] = aw * bw - ay * by;
	    return out;
	};

	/**
	 * Rotates a quaternion by the given angle about the Z axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateZ = function (out, a, rad) {
	    rad *= 0.5;

	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bz = Math.sin(rad), bw = Math.cos(rad);

	    out[0] = ax * bw + ay * bz;
	    out[1] = ay * bw - ax * bz;
	    out[2] = az * bw + aw * bz;
	    out[3] = aw * bw - az * bz;
	    return out;
	};

	/**
	 * Calculates the W component of a quat from the X, Y, and Z components.
	 * Assumes that quaternion is 1 unit in length.
	 * Any existing W component will be ignored.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate W component of
	 * @returns {quat} out
	 */
	quat.calculateW = function (out, a) {
	    var x = a[0], y = a[1], z = a[2];

	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
	    return out;
	};

	/**
	 * Calculates the dot product of two quat's
	 *
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {Number} dot product of a and b
	 * @function
	 */
	quat.dot = vec4.dot;

	/**
	 * Performs a linear interpolation between two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {quat} out
	 * @function
	 */
	quat.lerp = vec4.lerp;

	/**
	 * Performs a spherical linear interpolation between two quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {quat} out
	 */
	quat.slerp = function (out, a, b, t) {
	    // benchmarks:
	    //    http://jsperf.com/quaternion-slerp-implementations

	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];

	    var        omega, cosom, sinom, scale0, scale1;

	    // calc cosine
	    cosom = ax * bx + ay * by + az * bz + aw * bw;
	    // adjust signs (if necessary)
	    if ( cosom < 0.0 ) {
	        cosom = -cosom;
	        bx = - bx;
	        by = - by;
	        bz = - bz;
	        bw = - bw;
	    }
	    // calculate coefficients
	    if ( (1.0 - cosom) > 0.000001 ) {
	        // standard case (slerp)
	        omega  = Math.acos(cosom);
	        sinom  = Math.sin(omega);
	        scale0 = Math.sin((1.0 - t) * omega) / sinom;
	        scale1 = Math.sin(t * omega) / sinom;
	    } else {
	        // "from" and "to" quaternions are very close
	        //  ... so we can do a linear interpolation
	        scale0 = 1.0 - t;
	        scale1 = t;
	    }
	    // calculate final values
	    out[0] = scale0 * ax + scale1 * bx;
	    out[1] = scale0 * ay + scale1 * by;
	    out[2] = scale0 * az + scale1 * bz;
	    out[3] = scale0 * aw + scale1 * bw;

	    return out;
	};

	/**
	 * Calculates the inverse of a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate inverse of
	 * @returns {quat} out
	 */
	quat.invert = function(out, a) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
	        invDot = dot ? 1.0/dot : 0;

	    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

	    out[0] = -a0*invDot;
	    out[1] = -a1*invDot;
	    out[2] = -a2*invDot;
	    out[3] = a3*invDot;
	    return out;
	};

	/**
	 * Calculates the conjugate of a quat
	 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate conjugate of
	 * @returns {quat} out
	 */
	quat.conjugate = function (out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] = a[3];
	    return out;
	};

	/**
	 * Calculates the length of a quat
	 *
	 * @param {quat} a vector to calculate length of
	 * @returns {Number} length of a
	 * @function
	 */
	quat.length = vec4.length;

	/**
	 * Alias for {@link quat.length}
	 * @function
	 */
	quat.len = quat.length;

	/**
	 * Calculates the squared length of a quat
	 *
	 * @param {quat} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 * @function
	 */
	quat.squaredLength = vec4.squaredLength;

	/**
	 * Alias for {@link quat.squaredLength}
	 * @function
	 */
	quat.sqrLen = quat.squaredLength;

	/**
	 * Normalize a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quaternion to normalize
	 * @returns {quat} out
	 * @function
	 */
	quat.normalize = vec4.normalize;

	/**
	 * Creates a quaternion from the given 3x3 rotation matrix.
	 *
	 * NOTE: The resultant quaternion is not normalized, so you should be sure
	 * to renormalize the quaternion yourself where necessary.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {mat3} m rotation matrix
	 * @returns {quat} out
	 * @function
	 */
	quat.fromMat3 = function(out, m) {
	    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
	    // article "Quaternion Calculus and Fast Animation".
	    var fTrace = m[0] + m[4] + m[8];
	    var fRoot;

	    if ( fTrace > 0.0 ) {
	        // |w| > 1/2, may as well choose w > 1/2
	        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
	        out[3] = 0.5 * fRoot;
	        fRoot = 0.5/fRoot;  // 1/(4w)
	        out[0] = (m[5]-m[7])*fRoot;
	        out[1] = (m[6]-m[2])*fRoot;
	        out[2] = (m[1]-m[3])*fRoot;
	    } else {
	        // |w| <= 1/2
	        var i = 0;
	        if ( m[4] > m[0] )
	          i = 1;
	        if ( m[8] > m[i*3+i] )
	          i = 2;
	        var j = (i+1)%3;
	        var k = (i+2)%3;

	        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
	        out[i] = 0.5 * fRoot;
	        fRoot = 0.5 / fRoot;
	        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
	        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
	        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
	    }

	    return out;
	};

	/**
	 * Returns a string representation of a quatenion
	 *
	 * @param {quat} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	quat.str = function (a) {
	    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};

	if(typeof(exports) !== 'undefined') {
	    exports.quat = quat;
	}
	;













	  })(shim.exports);
	})(this);

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var Vector3 = __webpack_require__(14);
	    var mat4 = glMatrix.mat4;
	    var vec3 = glMatrix.vec3;
	    var mat3 = glMatrix.mat3;
	    var quat = glMatrix.quat;

	    /**
	     * @constructor
	     * @alias qtek.math.Matrix4
	     */
	    var Matrix4 = function() {

	        this._axisX = new Vector3();
	        this._axisY = new Vector3();
	        this._axisZ = new Vector3();

	        /**
	         * Storage of Matrix4
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = mat4.create();

	        /**
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Matrix4.prototype = {

	        constructor: Matrix4,

	        /**
	         * Set components from array
	         * @param  {Float32Array|number[]} arr
	         */
	        setArray: function (arr) {
	            for (var i = 0; i < this._array.length; i++) {
	                this._array[i] = arr[i];
	            }
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Calculate the adjugate of self, in-place
	         * @return {qtek.math.Matrix4}
	         */
	        adjoint: function() {
	            mat4.adjoint(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new Matrix4
	         * @return {qtek.math.Matrix4}
	         */
	        clone: function() {
	            return (new Matrix4()).copy(this);
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Matrix4} b
	         * @return {qtek.math.Matrix4}
	         */
	        copy: function(a) {
	            mat4.copy(this._array, a._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculate matrix determinant
	         * @return {number}
	         */
	        determinant: function() {
	            return mat4.determinant(this._array);
	        },

	        /**
	         * Set upper 3x3 part from quaternion
	         * @param  {qtek.math.Quaternion} q
	         * @return {qtek.math.Matrix4}
	         */
	        fromQuat: function(q) {
	            mat4.fromQuat(this._array, q._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set from a quaternion rotation and a vector translation
	         * @param  {qtek.math.Quaternion} q
	         * @param  {qtek.math.Vector3} v
	         * @return {qtek.math.Matrix4}
	         */
	        fromRotationTranslation: function(q, v) {
	            mat4.fromRotationTranslation(this._array, q._array, v._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set from Matrix2d, it is used when converting a 2d shape to 3d space.
	         * In 3d space it is equivalent to ranslate on xy plane and rotate about z axis
	         * @param  {qtek.math.Matrix2d} m2d
	         * @return {qtek.math.Matrix4}
	         */
	        fromMat2d: function(m2d) {
	            Matrix4.fromMat2d(this, m2d);
	            return this;
	        },

	        /**
	         * Set from frustum bounds
	         * @param  {number} left
	         * @param  {number} right
	         * @param  {number} bottom
	         * @param  {number} top
	         * @param  {number} near
	         * @param  {number} far
	         * @return {qtek.math.Matrix4}
	         */
	        frustum: function (left, right, bottom, top, near, far) {
	            mat4.frustum(this._array, left, right, bottom, top, near, far);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set to a identity matrix
	         * @return {qtek.math.Matrix4}
	         */
	        identity: function() {
	            mat4.identity(this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Invert self
	         * @return {qtek.math.Matrix4}
	         */
	        invert: function() {
	            mat4.invert(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set as a matrix with the given eye position, focal point, and up axis
	         * @param  {qtek.math.Vector3} eye
	         * @param  {qtek.math.Vector3} center
	         * @param  {qtek.math.Vector3} up
	         * @return {qtek.math.Matrix4}
	         */
	        lookAt: function(eye, center, up) {
	            mat4.lookAt(this._array, eye._array, center._array, up._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for mutiply
	         * @param  {qtek.math.Matrix4} b
	         * @return {qtek.math.Matrix4}
	         */
	        mul: function(b) {
	            mat4.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiplyLeft
	         * @param  {qtek.math.Matrix4} a
	         * @return {qtek.math.Matrix4}
	         */
	        mulLeft: function(a) {
	            mat4.mul(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply self and b
	         * @param  {qtek.math.Matrix4} b
	         * @return {qtek.math.Matrix4}
	         */
	        multiply: function(b) {
	            mat4.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply a and self, a is on the left
	         * @param  {qtek.math.Matrix3} a
	         * @return {qtek.math.Matrix3}
	         */
	        multiplyLeft: function(a) {
	            mat4.multiply(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set as a orthographic projection matrix
	         * @param  {number} left
	         * @param  {number} right
	         * @param  {number} bottom
	         * @param  {number} top
	         * @param  {number} near
	         * @param  {number} far
	         * @return {qtek.math.Matrix4}
	         */
	        ortho: function(left, right, bottom, top, near, far) {
	            mat4.ortho(this._array, left, right, bottom, top, near, far);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Set as a perspective projection matrix
	         * @param  {number} fovy
	         * @param  {number} aspect
	         * @param  {number} near
	         * @param  {number} far
	         * @return {qtek.math.Matrix4}
	         */
	        perspective: function(fovy, aspect, near, far) {
	            mat4.perspective(this._array, fovy, aspect, near, far);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by rad about axis.
	         * Equal to right-multiply a rotaion matrix
	         * @param  {number}   rad
	         * @param  {qtek.math.Vector3} axis
	         * @return {qtek.math.Matrix4}
	         */
	        rotate: function(rad, axis) {
	            mat4.rotate(this._array, this._array, rad, axis._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian about X axis.
	         * Equal to right-multiply a rotaion matrix
	         * @param {number} rad
	         * @return {qtek.math.Matrix4}
	         */
	        rotateX: function(rad) {
	            mat4.rotateX(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian about Y axis.
	         * Equal to right-multiply a rotaion matrix
	         * @param {number} rad
	         * @return {qtek.math.Matrix4}
	         */
	        rotateY: function(rad) {
	            mat4.rotateY(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian about Z axis.
	         * Equal to right-multiply a rotaion matrix
	         * @param {number} rad
	         * @return {qtek.math.Matrix4}
	         */
	        rotateZ: function(rad) {
	            mat4.rotateZ(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self by s
	         * Equal to right-multiply a scale matrix
	         * @param  {qtek.math.Vector3}  s
	         * @return {qtek.math.Matrix4}
	         */
	        scale: function(v) {
	            mat4.scale(this._array, this._array, v._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Translate self by v.
	         * Equal to right-multiply a translate matrix
	         * @param  {qtek.math.Vector3}  v
	         * @return {qtek.math.Matrix4}
	         */
	        translate: function(v) {
	            mat4.translate(this._array, this._array, v._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transpose self, in-place.
	         * @return {qtek.math.Matrix2}
	         */
	        transpose: function() {
	            mat4.transpose(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Decompose a matrix to SRT
	         * @param {qtek.math.Vector3} [scale]
	         * @param {qtek.math.Quaternion} rotation
	         * @param {qtek.math.Vector} position
	         * @see http://msdn.microsoft.com/en-us/library/microsoft.xna.framework.matrix.decompose.aspx
	         */
	        decomposeMatrix: (function() {

	            var x = vec3.create();
	            var y = vec3.create();
	            var z = vec3.create();

	            var m3 = mat3.create();

	            return function(scale, rotation, position) {

	                var el = this._array;
	                vec3.set(x, el[0], el[1], el[2]);
	                vec3.set(y, el[4], el[5], el[6]);
	                vec3.set(z, el[8], el[9], el[10]);

	                var sx = vec3.length(x);
	                var sy = vec3.length(y);
	                var sz = vec3.length(z);
	                if (scale) {
	                    scale.x = sx;
	                    scale.y = sy;
	                    scale.z = sz;
	                    scale._dirty = true;
	                }

	                position.set(el[12], el[13], el[14]);

	                mat3.fromMat4(m3, el);
	                // Not like mat4, mat3 in glmatrix seems to be row-based
	                // Seems fixed in gl-matrix 2.2.2
	                // https://github.com/toji/gl-matrix/issues/114
	                // mat3.transpose(m3, m3);

	                m3[0] /= sx;
	                m3[1] /= sx;
	                m3[2] /= sx;

	                m3[3] /= sy;
	                m3[4] /= sy;
	                m3[5] /= sy;

	                m3[6] /= sz;
	                m3[7] /= sz;
	                m3[8] /= sz;

	                quat.fromMat3(rotation._array, m3);
	                quat.normalize(rotation._array, rotation._array);

	                rotation._dirty = true;
	                position._dirty = true;
	            };
	        })(),

	        toString: function() {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    var defineProperty = Object.defineProperty;

	    if (defineProperty) {
	        var proto = Matrix4.prototype;
	        /**
	         * Z Axis of local transform
	         * @name z
	         * @type {qtek.math.Vector3}
	         * @memberOf qtek.math.Matrix4
	         * @instance
	         */
	        defineProperty(proto, 'z', {
	            get: function () {
	                var el = this._array;
	                this._axisZ.set(el[8], el[9], el[10]);
	                return this._axisZ;
	            },
	            set: function (v) {
	                // TODO Here has a problem
	                // If only set an item of vector will not work
	                var el = this._array;
	                v = v._array;
	                el[8] = v[0];
	                el[9] = v[1];
	                el[10] = v[2];

	                this._dirty = true;
	            }
	        });

	        /**
	         * Y Axis of local transform
	         * @name y
	         * @type {qtek.math.Vector3}
	         * @memberOf qtek.math.Matrix4
	         * @instance
	         */
	        defineProperty(proto, 'y', {
	            get: function () {
	                var el = this._array;
	                this._axisY.set(el[4], el[5], el[6]);
	                return this._axisY;
	            },
	            set: function (v) {
	                var el = this._array;
	                v = v._array;
	                el[4] = v[0];
	                el[5] = v[1];
	                el[6] = v[2];

	                this._dirty = true;
	            }
	        });

	        /**
	         * X Axis of local transform
	         * @name x
	         * @type {qtek.math.Vector3}
	         * @memberOf qtek.math.Matrix4
	         * @instance
	         */
	        defineProperty(proto, 'x', {
	            get: function () {
	                var el = this._array;
	                this._axisX.set(el[0], el[1], el[2]);
	                return this._axisX;
	            },
	            set: function (v) {
	                var el = this._array;
	                v = v._array;
	                el[0] = v[0];
	                el[1] = v[1];
	                el[2] = v[2];

	                this._dirty = true;
	            }
	        })
	    }

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.adjoint = function(out, a) {
	        mat4.adjoint(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.copy = function(out, a) {
	        mat4.copy(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} a
	     * @return {number}
	     */
	    Matrix4.determinant = function(a) {
	        return mat4.determinant(a._array);
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.identity = function(out) {
	        mat4.identity(out._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {number}  left
	     * @param  {number}  right
	     * @param  {number}  bottom
	     * @param  {number}  top
	     * @param  {number}  near
	     * @param  {number}  far
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.ortho = function(out, left, right, bottom, top, near, far) {
	        mat4.ortho(out._array, left, right, bottom, top, near, far);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {number}  fovy
	     * @param  {number}  aspect
	     * @param  {number}  near
	     * @param  {number}  far
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.perspective = function(out, fovy, aspect, near, far) {
	        mat4.perspective(out._array, fovy, aspect, near, far);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Vector3} eye
	     * @param  {qtek.math.Vector3} center
	     * @param  {qtek.math.Vector3} up
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.lookAt = function(out, eye, center, up) {
	        mat4.lookAt(out._array, eye._array, center._array, up._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.invert = function(out, a) {
	        mat4.invert(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {qtek.math.Matrix4} b
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.mul = function(out, a, b) {
	        mat4.mul(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {qtek.math.Matrix4} b
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.multiply = Matrix4.mul;

	    /**
	     * @param  {qtek.math.Matrix4}    out
	     * @param  {qtek.math.Quaternion} q
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.fromQuat = function(out, q) {
	        mat4.fromQuat(out._array, q._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4}    out
	     * @param  {qtek.math.Quaternion} q
	     * @param  {qtek.math.Vector3}    v
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.fromRotationTranslation = function(out, q, v) {
	        mat4.fromRotationTranslation(out._array, q._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} m4
	     * @param  {qtek.math.Matrix2d} m2d
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.fromMat2d = function(m4, m2d) {
	        m4._dirty = true;
	        var m2d = m2d._array;
	        var m4 = m4._array;

	        m4[0] = m2d[0];
	        m4[4] = m2d[2];
	        m4[12] = m2d[4];

	        m4[1] = m2d[1];
	        m4[5] = m2d[3];
	        m4[13] = m2d[5];

	        return m4;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {number}  rad
	     * @param  {qtek.math.Vector3} axis
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.rotate = function(out, a, rad, axis) {
	        mat4.rotate(out._array, a._array, rad, axis._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {number}  rad
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.rotateX = function(out, a, rad) {
	        mat4.rotateX(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {number}  rad
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.rotateY = function(out, a, rad) {
	        mat4.rotateY(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {number}  rad
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.rotateZ = function(out, a, rad) {
	        mat4.rotateZ(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {qtek.math.Vector3} v
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.scale = function(out, a, v) {
	        mat4.scale(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.transpose = function(out, a) {
	        mat4.transpose(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix4} out
	     * @param  {qtek.math.Matrix4} a
	     * @param  {qtek.math.Vector3} v
	     * @return {qtek.math.Matrix4}
	     */
	    Matrix4.translate = function(out, a, v) {
	        mat4.translate(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    module.exports = Matrix4;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @export{Object} library
	 */


	    var Shader = __webpack_require__(18);
	    var util = __webpack_require__(9);

	    var _library = {};

	    /**
	     * @export qtek.shader.library~Libaray
	     */
	    function ShaderLibrary () {
	        this._pool = {};
	    }

	    /**
	     * ### Builin shaders
	     * + qtek.standard
	     * + qtek.basic
	     * + qtek.lambert
	     * + qtek.phong
	     * + qtek.wireframe
	     *
	     * @namespace qtek.shader.library
	     */
	    /**
	     *
	     * Get shader from library. use shader name and option as hash key.
	     *
	     * @param {string} name
	     * @param {Object|string|Array.<string>} [option]
	     * @return {qtek.Shader}
	     *
	     * @example
	     *     qtek.shader.library.get('qtek.phong', 'diffuseMap', 'normalMap');
	     *     qtek.shader.library.get('qtek.phong', ['diffuseMap', 'normalMap']);
	     *     qtek.shader.library.get('qtek.phong', {
	     *         textures: ['diffuseMap'],
	     *         vertexDefines: {},
	     *         fragmentDefines: {}
	     *     })
	     */
	    ShaderLibrary.prototype.get = function(name, option) {
	        var enabledTextures = [];
	        var vertexDefines = {};
	        var fragmentDefines = {};
	        if (typeof(option) === 'string') {
	            enabledTextures = Array.prototype.slice.call(arguments, 1);
	        }
	        else if (Object.prototype.toString.call(option) == '[object Object]') {
	            enabledTextures = option.textures || [];
	            vertexDefines = option.vertexDefines || {};
	            fragmentDefines = option.fragmentDefines || {};
	        }
	        else if (option instanceof Array) {
	            enabledTextures = option;
	        }
	        var vertexDefineKeys = Object.keys(vertexDefines);
	        var fragmentDefineKeys = Object.keys(fragmentDefines);
	        enabledTextures.sort();
	        vertexDefineKeys.sort();
	        fragmentDefineKeys.sort();

	        var keyArr = [name];
	        keyArr = keyArr.concat(enabledTextures);
	        for (var i = 0; i < vertexDefineKeys.length; i++) {
	            keyArr.push(
	                vertexDefineKeys[i],
	                vertexDefines[vertexDefineKeys[i]]
	            );
	        }
	        for (var i = 0; i < fragmentDefineKeys.length; i++) {
	            keyArr.push(
	                fragmentDefineKeys[i],
	                fragmentDefines[fragmentDefineKeys[i]]
	            );
	        }
	        var key = keyArr.join('_');

	        if (this._pool[key]) {
	            return this._pool[key];
	        }
	        else {
	            var source = _library[name];
	            if (!source) {
	                console.error('Shader "' + name + '"' + ' is not in the library');
	                return;
	            }
	            var shader = new Shader({
	                'vertex': source.vertex,
	                'fragment': source.fragment
	            });
	            for (var i = 0; i < enabledTextures.length; i++) {
	                shader.enableTexture(enabledTextures[i]);
	            }
	            for (var name in vertexDefines) {
	                shader.define('vertex', name, vertexDefines[name]);
	            }
	            for (var name in fragmentDefines) {
	                shader.define('fragment', name, fragmentDefines[name]);
	            }
	            this._pool[key] = shader;
	            return shader;
	        }
	    };

	    /**
	     * Clear shaders
	     */
	    ShaderLibrary.prototype.clear = function() {
	        this._pool = {};
	    };

	    /**
	     * @memberOf qtek.shader.library
	     * @param  {string} name
	     * @param  {string} vertex - Vertex shader code
	     * @param  {string} fragment - Fragment shader code
	     */
	    function template(name, vertex, fragment) {
	        _library[name] = {
	            vertex: vertex,
	            fragment: fragment
	        };
	    }

	    var defaultLibrary = new ShaderLibrary();

	    module.exports = {
	        createLibrary: function () {
	            return new ShaderLibrary();
	        },
	        get: function () {
	            return defaultLibrary.get.apply(defaultLibrary, arguments);
	        },
	        template: template,
	        clear: function () {
	            return defaultLibrary.clear();
	        }
	    };


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Mainly do the parse and compile of shader string
	 * Support shader code chunk import and export
	 * Support shader semantics
	 * http://www.nvidia.com/object/using_sas.html
	 * https://github.com/KhronosGroup/collada2json/issues/45
	 *
	 * TODO: Use etpl or other string template engine
	 */


	    var Base = __webpack_require__(6);
	    var util = __webpack_require__(9);
	    var Cache = __webpack_require__(19);
	    var vendor = __webpack_require__(12);
	    var glMatrix = __webpack_require__(15);
	    var glInfo = __webpack_require__(10);
	    var mat2 = glMatrix.mat2;
	    var mat3 = glMatrix.mat3;
	    var mat4 = glMatrix.mat4;

	    var uniformRegex = /uniform\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\s+([\w\,]+)?(\[.*?\])?\s*(:\s*([\S\s]+?))?;/g;
	    var attributeRegex = /attribute\s+(float|int|vec2|vec3|vec4)\s+(\w*)\s*(:\s*(\w+))?;/g;
	    var defineRegex = /#define\s+(\w+)?(\s+[\w-.]+)?\s*;?\s*\n/g;
	    var loopRegex = /for\s*?\(int\s*?_idx_\s*\=\s*([\w-]+)\;\s*_idx_\s*<\s*([\w-]+);\s*_idx_\s*\+\+\s*\)\s*\{\{([\s\S]+?)(?=\}\})\}\}/g;

	    var uniformTypeMap = {
	        'bool': '1i',
	        'int': '1i',
	        'sampler2D': 't',
	        'samplerCube': 't',
	        'float': '1f',
	        'vec2': '2f',
	        'vec3': '3f',
	        'vec4': '4f',
	        'ivec2': '2i',
	        'ivec3': '3i',
	        'ivec4': '4i',
	        'mat2': 'm2',
	        'mat3': 'm3',
	        'mat4': 'm4'
	    };

	    var uniformValueConstructor = {
	        'bool': function () {return true;},
	        'int': function () {return 0;},
	        'float': function () {return 0;},
	        'sampler2D': function () {return null;},
	        'samplerCube': function () {return null;},

	        'vec2': function () {return [0, 0];},
	        'vec3': function () {return [0, 0, 0];},
	        'vec4': function () {return [0, 0, 0, 0];},

	        'ivec2': function () {return [0, 0];},
	        'ivec3': function () {return [0, 0, 0];},
	        'ivec4': function () {return [0, 0, 0, 0];},

	        'mat2': function () {return mat2.create();},
	        'mat3': function () {return mat3.create();},
	        'mat4': function () {return mat4.create();},

	        'array': function () {return [];}
	    };

	    var attribSemantics = [
	        'POSITION',
	        'NORMAL',
	        'BINORMAL',
	        'TANGENT',
	        'TEXCOORD',
	        'TEXCOORD_0',
	        'TEXCOORD_1',
	        'COLOR',
	        // Skinning
	        // https://github.com/KhronosGroup/glTF/blob/master/specification/README.md#semantics
	        'JOINT',
	        'WEIGHT'
	    ];
	    var uniformSemantics = [
	        'SKIN_MATRIX',
	        // Information about viewport
	        'VIEWPORT_SIZE',
	        'VIEWPORT',
	        'DEVICEPIXELRATIO',
	        // Window size for window relative coordinate
	        // https://www.opengl.org/sdk/docs/man/html/gl_FragCoord.xhtml
	        'WINDOW_SIZE',
	        // Infomation about camera
	        'NEAR',
	        'FAR',
	        // Time
	        'TIME'
	    ];
	    var matrixSemantics = [
	        'WORLD',
	        'VIEW',
	        'PROJECTION',
	        'WORLDVIEW',
	        'VIEWPROJECTION',
	        'WORLDVIEWPROJECTION',
	        'WORLDINVERSE',
	        'VIEWINVERSE',
	        'PROJECTIONINVERSE',
	        'WORLDVIEWINVERSE',
	        'VIEWPROJECTIONINVERSE',
	        'WORLDVIEWPROJECTIONINVERSE',
	        'WORLDTRANSPOSE',
	        'VIEWTRANSPOSE',
	        'PROJECTIONTRANSPOSE',
	        'WORLDVIEWTRANSPOSE',
	        'VIEWPROJECTIONTRANSPOSE',
	        'WORLDVIEWPROJECTIONTRANSPOSE',
	        'WORLDINVERSETRANSPOSE',
	        'VIEWINVERSETRANSPOSE',
	        'PROJECTIONINVERSETRANSPOSE',
	        'WORLDVIEWINVERSETRANSPOSE',
	        'VIEWPROJECTIONINVERSETRANSPOSE',
	        'WORLDVIEWPROJECTIONINVERSETRANSPOSE'
	    ];

	    // Enable attribute operation is global to all programs
	    // Here saved the list of all enabled attribute index
	    // http://www.mjbshaw.com/2013/03/webgl-fixing-invalidoperation.html
	    var enabledAttributeList = {};

	    var SHADER_STATE_TO_ENABLE = 1;
	    var SHADER_STATE_KEEP_ENABLE = 2;
	    var SHADER_STATE_PENDING = 3;

	    /**
	     * @constructor qtek.Shader
	     * @extends qtek.core.Base
	     *
	     * @example
	     *     // Create a phong shader
	     *     var shader = new qtek.Shader({
	     *         vertex: qtek.Shader.source('qtek.phong.vertex'),
	     *         fragment: qtek.Shader.source('qtek.phong.fragment')
	     *     });
	     *     // Enable diffuse texture
	     *     shader.enableTexture('diffuseMap');
	     *     // Use alpha channel in diffuse texture
	     *     shader.define('fragment', 'DIFFUSEMAP_ALPHA_ALPHA');
	     */
	    var Shader = Base.extend(function () {
	        return /** @lends qtek.Shader# */ {
	            /**
	             * Vertex shader code
	             * @type {string}
	             */
	            vertex: '',

	            /**
	             * Fragment shader code
	             * @type {string}
	             */
	            fragment: '',


	            // FIXME mediump is toooooo low for depth on mobile
	            precision: 'highp',

	            // Properties follow will be generated by the program
	            attribSemantics: {},
	            matrixSemantics: {},
	            uniformSemantics: {},
	            matrixSemanticKeys: [],

	            uniformTemplates: {},
	            attributeTemplates: {},

	            /**
	             * Custom defined values in the vertex shader
	             * @type {Object}
	             */
	            vertexDefines: {},
	            /**
	             * Custom defined values in the vertex shader
	             * @type {Object}
	             */
	            fragmentDefines: {},

	            /**
	             * Enabled extensions
	             * @type {Array.<string>}
	             */
	            extensions: [
	                'OES_standard_derivatives',
	                'EXT_shader_texture_lod'
	            ],

	            /**
	             * Used light group. default is all zero
	             */
	            lightGroup: 0,

	            // Defines the each type light number in the scene
	            // AMBIENT_LIGHT
	            // AMBIENT_SH_LIGHT
	            // AMBIENT_CUBEMAP_LIGHT
	            // POINT_LIGHT
	            // SPOT_LIGHT
	            // AREA_LIGHT
	            lightNumber: {},

	            _textureSlot: 0,

	            _attacheMaterialNumber: 0,

	            _uniformList: [],
	            // {
	            //  enabled: true
	            //  shaderType: "vertex",
	            // }
	            _textureStatus: {},

	            _vertexProcessed: '',
	            _fragmentProcessed: '',

	            _currentLocationsMap: {}
	        };
	    }, function () {

	        this._cache = new Cache();

	        // All context use same code
	        this._codeDirty = true;

	        this._updateShaderString();
	    },
	    /** @lends qtek.Shader.prototype */
	    {
	        isEqual: function (otherShader) {
	            if (!otherShader) {
	                return false;
	            }
	            if (this === otherShader) {
	                if (this._codeDirty) {
	                    // Still needs update and rebind.
	                    return false;
	                }
	                return true;
	            }
	            if (otherShader._codeDirty) {
	                otherShader._updateShaderString();
	            }
	            if (this._codeDirty) {
	                this._updateShaderString();
	            }
	            return !(otherShader._vertexProcessed !== this._vertexProcessed
	                || otherShader._fragmentProcessed !== this._fragmentProcessed);
	        },
	        /**
	         * Set vertex shader code
	         * @param {string} str
	         */
	        setVertex: function (str) {
	            this.vertex = str;
	            this._updateShaderString();
	            this.dirty();
	        },

	        /**
	         * Set fragment shader code
	         * @param {string} str
	         */
	        setFragment: function (str) {
	            this.fragment = str;
	            this._updateShaderString();
	            this.dirty();
	        },

	        /**
	         * Bind shader program
	         * Return true or error msg if error happened
	         * @param {WebGLRenderingContext} _gl
	         */
	        bind: function (_gl) {
	            var cache = this._cache;
	            cache.use(_gl.__GLID__, getCacheSchema);

	            this._currentLocationsMap = cache.get('locations');

	            // Reset slot
	            this._textureSlot = 0;

	            if (this._codeDirty) {
	                // PENDING
	                // var availableExts = [];
	                // var extensions = this.extensions;
	                // for (var i = 0; i < extensions.length; i++) {
	                //     if (glInfo.getExtension(_gl, extensions[i])) {
	                //         availableExts.push(extensions[i]);
	                //     }
	                // }
	                this._updateShaderString();
	            }

	            if (cache.isDirty('program')) {
	                var errMsg = this._buildProgram(_gl, this._vertexProcessed, this._fragmentProcessed);
	                cache.fresh('program');

	                if (errMsg) {
	                    return errMsg;
	                }
	            }

	            _gl.useProgram(cache.get('program'));
	        },

	        /**
	         * Mark dirty and update program in next frame
	         */
	        dirty: function () {
	            var cache = this._cache;
	            this._codeDirty = true;
	            cache.dirtyAll('program');
	            for (var i = 0; i < cache._caches.length; i++) {
	                if (cache._caches[i]) {
	                    var context = cache._caches[i];
	                    context['locations'] = {};
	                    context['attriblocations'] = {};
	                }
	            }
	        },

	        _updateShaderString: function (extensions) {

	            if (this.vertex !== this._vertexPrev ||
	                this.fragment !== this._fragmentPrev
	            ) {

	                this._parseImport();

	                this.attribSemantics = {};
	                this.matrixSemantics = {};
	                this._textureStatus = {};

	                this._parseUniforms();
	                this._parseAttributes();
	                this._parseDefines();

	                this._vertexPrev = this.vertex;
	                this._fragmentPrev = this.fragment;
	            }

	            this._addDefineExtensionAndPrecision(extensions);

	            this._vertexProcessed = this._unrollLoop(this._vertexProcessed, this.vertexDefines);
	            this._fragmentProcessed = this._unrollLoop(this._fragmentProcessed, this.fragmentDefines);

	            this._codeDirty = false;
	        },

	        /**
	         * Add a #define micro in shader code
	         * @param  {string} shaderType Can be vertex, fragment or both
	         * @param  {string} symbol
	         * @param  {number} [val]
	         */
	        define: function (shaderType, symbol, val) {
	            var vertexDefines = this.vertexDefines;
	            var fragmentDefines = this.fragmentDefines;
	            if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both'
	                && arguments.length < 3
	            ) {
	                // shaderType default to be 'both'
	                val = symbol;
	                symbol = shaderType;
	                shaderType = 'both';
	            }
	            val = val != null ? val : null;
	            if (shaderType === 'vertex' || shaderType === 'both') {
	                if (vertexDefines[symbol] !== val) {
	                    vertexDefines[symbol] = val;
	                    // Mark as dirty
	                    this.dirty();
	                }
	            }
	            if (shaderType === 'fragment' || shaderType === 'both') {
	                if (fragmentDefines[symbol] !== val) {
	                    fragmentDefines[symbol] = val;
	                    if (shaderType !== 'both') {
	                        this.dirty();
	                    }
	                }
	            }
	        },

	        /**
	         * @param  {string} shaderType Can be vertex, fragment or both
	         * @param  {string} symbol
	         */
	        unDefine: function (shaderType, symbol) {
	            if (shaderType !== 'vertex' && shaderType !== 'fragment' && shaderType !== 'both'
	                && arguments.length < 2
	            ) {
	                // shaderType default to be 'both'
	                symbol = shaderType;
	                shaderType = 'both';
	            }
	            if (shaderType === 'vertex' || shaderType === 'both') {
	                if (this.isDefined('vertex', symbol)) {
	                    delete this.vertexDefines[symbol];
	                    // Mark as dirty
	                    this.dirty();
	                }
	            }
	            if (shaderType === 'fragment' || shaderType === 'both') {
	                if (this.isDefined('fragment', symbol)) {
	                    delete this.fragmentDefines[symbol];
	                    if (shaderType !== 'both') {
	                        this.dirty();
	                    }
	                }
	            }
	        },

	        /**
	         * @param  {string} shaderType Can be vertex, fragment or both
	         * @param  {string} symbol
	         */
	        isDefined: function (shaderType, symbol) {
	            switch(shaderType) {
	                case 'vertex':
	                    return this.vertexDefines[symbol] !== undefined;
	                case 'fragment':
	                    return this.fragmentDefines[symbol] !== undefined;
	            }
	        },
	        /**
	         * @param  {string} shaderType Can be vertex, fragment or both
	         * @param  {string} symbol
	         */
	        getDefine: function (shaderType, symbol) {
	            switch(shaderType) {
	                case 'vertex':
	                    return this.vertexDefines[symbol];
	                case 'fragment':
	                    return this.fragmentDefines[symbol];
	            }
	        },
	        /**
	         * Enable a texture, actually it will add a #define micro in the shader code
	         * For example, if texture symbol is diffuseMap, it will add a line `#define DIFFUSEMAP_ENABLED` in the shader code
	         * @param  {string} symbol
	         */
	        enableTexture: function (symbol) {
	            if (symbol instanceof Array) {
	                for (var i = 0; i < symbol.length; i++) {
	                    this.enableTexture(symbol[i]);
	                }
	                return;
	            }

	            var status = this._textureStatus[symbol];
	            if (status) {
	                var isEnabled = status.enabled;
	                if (!isEnabled) {
	                    status.enabled = true;
	                    this.dirty();
	                }
	            }
	        },
	        /**
	         * Enable all textures used in the shader
	         */
	        enableTexturesAll: function () {
	            var textureStatus = this._textureStatus;
	            for (var symbol in textureStatus) {
	                textureStatus[symbol].enabled = true;
	            }

	            this.dirty();
	        },
	        /**
	         * Disable a texture, it remove a #define micro in the shader
	         * @param  {string} symbol
	         */
	        disableTexture: function (symbol) {
	            if (symbol instanceof Array) {
	                for (var i = 0; i < symbol.length; i++) {
	                    this.disableTexture(symbol[i]);
	                }
	                return;
	            }

	            var status = this._textureStatus[symbol];
	            if (status) {
	                var isDisabled = ! status.enabled;
	                if (!isDisabled) {
	                    status.enabled = false;
	                    this.dirty();
	                }
	            }
	        },
	        /**
	         * Disable all textures used in the shader
	         */
	        disableTexturesAll: function () {
	            var textureStatus = this._textureStatus;
	            for (var symbol in textureStatus) {
	                textureStatus[symbol].enabled = false;
	            }

	            this.dirty();
	        },
	        /**
	         * @param  {string}  symbol
	         * @return {boolean}
	         */
	        isTextureEnabled: function (symbol) {
	            var textureStatus = this._textureStatus;
	            return textureStatus[symbol]
	                && textureStatus[symbol].enabled;
	        },

	        getEnabledTextures: function () {
	            var enabledTextures = [];
	            var textureStatus = this._textureStatus;
	            for (var symbol in textureStatus) {
	                if (textureStatus[symbol].enabled) {
	                    enabledTextures.push(symbol);
	                }
	            }
	            return enabledTextures;
	        },

	        hasUniform: function (symbol) {
	            var location = this._currentLocationsMap[symbol];
	            return location !== null && location !== undefined;
	        },

	        currentTextureSlot: function () {
	            return this._textureSlot;
	        },

	        resetTextureSlot: function (slot) {
	            this._textureSlot = slot || 0;
	        },

	        useCurrentTextureSlot: function (_gl, texture) {
	            var textureSlot = this._textureSlot;

	            this.useTextureSlot(_gl, texture, textureSlot);

	            this._textureSlot++;

	            return textureSlot;
	        },

	        useTextureSlot: function (_gl, texture, slot) {
	            if (texture) {
	                _gl.activeTexture(_gl.TEXTURE0 + slot);
	                // Maybe texture is not loaded yet;
	                if (texture.isRenderable()) {
	                    texture.bind(_gl);
	                }
	                else {
	                    // Bind texture to null
	                    texture.unbind(_gl);
	                }
	            }
	        },

	        setUniform: function (_gl, type, symbol, value) {
	            var locationMap = this._currentLocationsMap;
	            var location = locationMap[symbol];
	            // Uniform is not existed in the shader
	            if (location === null || location === undefined) {
	                return false;
	            }
	            switch (type) {
	                case 'm4':
	                    // The matrix must be created by glmatrix and can pass it directly.
	                    _gl.uniformMatrix4fv(location, false, value);
	                    break;
	                case '2i':
	                    _gl.uniform2i(location, value[0], value[1]);
	                    break;
	                case '2f':
	                    _gl.uniform2f(location, value[0], value[1]);
	                    break;
	                case '3i':
	                    _gl.uniform3i(location, value[0], value[1], value[2]);
	                    break;
	                case '3f':
	                    _gl.uniform3f(location, value[0], value[1], value[2]);
	                    break;
	                case '4i':
	                    _gl.uniform4i(location, value[0], value[1], value[2], value[3]);
	                    break;
	                case '4f':
	                    _gl.uniform4f(location, value[0], value[1], value[2], value[3]);
	                    break;
	                case '1i':
	                    _gl.uniform1i(location, value);
	                    break;
	                case '1f':
	                    _gl.uniform1f(location, value);
	                    break;
	                case '1fv':
	                    _gl.uniform1fv(location, value);
	                    break;
	                case '1iv':
	                    _gl.uniform1iv(location, value);
	                    break;
	                case '2iv':
	                    _gl.uniform2iv(location, value);
	                    break;
	                case '2fv':
	                    _gl.uniform2fv(location, value);
	                    break;
	                case '3iv':
	                    _gl.uniform3iv(location, value);
	                    break;
	                case '3fv':
	                    _gl.uniform3fv(location, value);
	                    break;
	                case '4iv':
	                    _gl.uniform4iv(location, value);
	                    break;
	                case '4fv':
	                    _gl.uniform4fv(location, value);
	                    break;
	                case 'm2':
	                case 'm2v':
	                    _gl.uniformMatrix2fv(location, false, value);
	                    break;
	                case 'm3':
	                case 'm3v':
	                    _gl.uniformMatrix3fv(location, false, value);
	                    break;
	                case 'm4v':
	                    // Raw value
	                    if (value instanceof Array) {
	                        var array = new vendor.Float32Array(value.length * 16);
	                        var cursor = 0;
	                        for (var i = 0; i < value.length; i++) {
	                            var item = value[i];
	                            for (var j = 0; j < 16; j++) {
	                                array[cursor++] = item[j];
	                            }
	                        }
	                        _gl.uniformMatrix4fv(location, false, array);
	                    }
	                    else if (value instanceof vendor.Float32Array) {   // ArrayBufferView
	                        _gl.uniformMatrix4fv(location, false, value);
	                    }
	                    break;
	            }
	            return true;
	        },

	        setUniformOfSemantic: function (_gl, semantic, val) {
	            var semanticInfo = this.uniformSemantics[semantic];
	            if (semanticInfo) {
	                return this.setUniform(_gl, semanticInfo.type, semanticInfo.symbol, val);
	            }
	            return false;
	        },

	        // Enable the attributes passed in and disable the rest
	        // Example Usage:
	        // enableAttributes(_gl, ["position", "texcoords"])
	        enableAttributes: function (_gl, attribList, vao) {

	            var program = this._cache.get('program');

	            var locationMap = this._cache.get('attriblocations');

	            var enabledAttributeListInContext;
	            if (vao) {
	                enabledAttributeListInContext = vao.__enabledAttributeList;
	            }
	            else {
	                enabledAttributeListInContext = enabledAttributeList[_gl.__GLID__];
	            }
	            if (! enabledAttributeListInContext) {
	                // In vertex array object context
	                // PENDING Each vao object needs to enable attributes again?
	                if (vao) {
	                    enabledAttributeListInContext
	                        = vao.__enabledAttributeList
	                        = [];
	                }
	                else {
	                    enabledAttributeListInContext
	                        = enabledAttributeList[_gl.__GLID__]
	                        = [];
	                }
	            }
	            var locationList = [];
	            for (var i = 0; i < attribList.length; i++) {
	                var symbol = attribList[i];
	                if (!this.attributeTemplates[symbol]) {
	                    locationList[i] = -1;
	                    continue;
	                }
	                var location = locationMap[symbol];
	                if (location === undefined) {
	                    location = _gl.getAttribLocation(program, symbol);
	                    // Attrib location is a number from 0 to ...
	                    if (location === -1) {
	                        locationList[i] = -1;
	                        continue;
	                    }
	                    locationMap[symbol] = location;
	                }
	                locationList[i] = location;

	                if (!enabledAttributeListInContext[location]) {
	                    enabledAttributeListInContext[location] = SHADER_STATE_TO_ENABLE;
	                }
	                else {
	                    enabledAttributeListInContext[location] = SHADER_STATE_KEEP_ENABLE;
	                }
	            }

	            for (var i = 0; i < enabledAttributeListInContext.length; i++) {
	                switch(enabledAttributeListInContext[i]){
	                    case SHADER_STATE_TO_ENABLE:
	                        _gl.enableVertexAttribArray(i);
	                        enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
	                        break;
	                    case SHADER_STATE_KEEP_ENABLE:
	                        enabledAttributeListInContext[i] = SHADER_STATE_PENDING;
	                        break;
	                    // Expired
	                    case SHADER_STATE_PENDING:
	                        _gl.disableVertexAttribArray(i);
	                        enabledAttributeListInContext[i] = 0;
	                        break;
	                }
	            }

	            return locationList;
	        },

	        _parseImport: function () {

	            this._vertexProcessedWithoutDefine = Shader.parseImport(this.vertex);
	            this._fragmentProcessedWithoutDefine = Shader.parseImport(this.fragment);

	        },

	        _addDefineExtensionAndPrecision: function (extensions) {

	            extensions = extensions || this.extensions;
	            // Extension declaration must before all non-preprocessor codes
	            // TODO vertex ? extension enum ?
	            var extensionStr = [];
	            for (var i = 0; i < extensions.length; i++) {
	                extensionStr.push('#extension GL_' + extensions[i] + ' : enable');
	            }

	            // Add defines
	            // VERTEX
	            var defineStr = this._getDefineStr(this.vertexDefines);
	            this._vertexProcessed = defineStr + '\n' + this._vertexProcessedWithoutDefine;

	            // FRAGMENT
	            var defineStr = this._getDefineStr(this.fragmentDefines);
	            var code = defineStr + '\n' + this._fragmentProcessedWithoutDefine;

	            // Add precision
	            this._fragmentProcessed = extensionStr.join('\n') + '\n'
	                + ['precision', this.precision, 'float'].join(' ') + ';\n'
	                + ['precision', this.precision, 'int'].join(' ') + ';\n'
	                // depth texture may have precision problem on iOS device.
	                + ['precision', this.precision, 'sampler2D'].join(' ') + ';\n'
	                + code;
	        },

	        _getDefineStr: function (defines) {

	            var lightNumber = this.lightNumber;
	            var textureStatus = this._textureStatus;
	            var defineStr = [];
	            for (var lightType in lightNumber) {
	                var count = lightNumber[lightType];
	                if (count > 0) {
	                    defineStr.push('#define ' + lightType.toUpperCase() + '_COUNT ' + count);
	                }
	            }
	            for (var symbol in textureStatus) {
	                var status = textureStatus[symbol];
	                if (status.enabled) {
	                    defineStr.push('#define ' + symbol.toUpperCase() + '_ENABLED');
	                }
	            }
	            // Custom Defines
	            for (var symbol in defines) {
	                var value = defines[symbol];
	                if (value === null) {
	                    defineStr.push('#define ' + symbol);
	                }
	                else{
	                    defineStr.push('#define ' + symbol + ' ' + value.toString());
	                }
	            }
	            return defineStr.join('\n');
	        },

	        _unrollLoop: function (shaderStr, defines) {
	            // Loop unroll from three.js, https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLProgram.js#L175
	            // In some case like shadowMap in loop use 'i' to index value much slower.

	            // Loop use _idx_ and increased with _idx_++ will be unrolled
	            // Use {{ }} to match the pair so the if statement will not be affected
	            // Write like following
	            // for (int _idx_ = 0; _idx_ < 4; _idx_++) {{
	            //     vec3 color = texture2D(textures[_idx_], uv).rgb;
	            // }}
	            function replace(match, start, end, snippet) {
	                var unroll = '';
	                // Try to treat as define
	                if (isNaN(start)) {
	                    if (start in defines) {
	                        start = defines[start];
	                    }
	                    else {
	                        start = lightNumberDefines[start];
	                    }
	                }
	                if (isNaN(end)) {
	                    if (end in defines) {
	                        end = defines[end];
	                    }
	                    else {
	                        end = lightNumberDefines[end];
	                    }
	                }
	                // TODO Error checking

	                for (var idx = parseInt(start); idx < parseInt(end); idx++) {
	                    // PENDING Add scope?
	                    unroll += '{'
	                        + snippet
	                            .replace(/float\s*\(\s*_idx_\s*\)/g, idx.toFixed(1))
	                            .replace(/_idx_/g, idx)
	                    + '}';
	                }

	                return unroll;
	            }

	            var lightNumberDefines = {};
	            for (var lightType in this.lightNumber) {
	                lightNumberDefines[lightType + '_COUNT'] = this.lightNumber[lightType];
	            }
	            return shaderStr.replace(loopRegex, replace);
	        },

	        _parseUniforms: function () {
	            var uniforms = {};
	            var self = this;
	            var shaderType = 'vertex';
	            this._uniformList = [];

	            this._vertexProcessedWithoutDefine = this._vertexProcessedWithoutDefine.replace(uniformRegex, _uniformParser);
	            shaderType = 'fragment';
	            this._fragmentProcessedWithoutDefine = this._fragmentProcessedWithoutDefine.replace(uniformRegex, _uniformParser);

	            self.matrixSemanticKeys = Object.keys(this.matrixSemantics);

	            function _uniformParser(str, type, symbol, isArray, semanticWrapper, semantic) {
	                if (type && symbol) {
	                    var uniformType = uniformTypeMap[type];
	                    var isConfigurable = true;
	                    var defaultValueFunc;
	                    if (uniformType) {
	                        self._uniformList.push(symbol);
	                        if (type === 'sampler2D' || type === 'samplerCube') {
	                            // Texture is default disabled
	                            self._textureStatus[symbol] = {
	                                enabled: false,
	                                shaderType: shaderType
	                            };
	                        }
	                        if (isArray) {
	                            uniformType += 'v';
	                        }
	                        if (semantic) {
	                            // This case is only for SKIN_MATRIX
	                            // TODO
	                            if (attribSemantics.indexOf(semantic) >= 0) {
	                                self.attribSemantics[semantic] = {
	                                    symbol: symbol,
	                                    type: uniformType
	                                };
	                                isConfigurable = false;
	                            }
	                            else if (matrixSemantics.indexOf(semantic) >= 0) {
	                                var isTranspose = false;
	                                var semanticNoTranspose = semantic;
	                                if (semantic.match(/TRANSPOSE$/)) {
	                                    isTranspose = true;
	                                    semanticNoTranspose = semantic.slice(0, -9);
	                                }
	                                self.matrixSemantics[semantic] = {
	                                    symbol: symbol,
	                                    type: uniformType,
	                                    isTranspose: isTranspose,
	                                    semanticNoTranspose: semanticNoTranspose
	                                };
	                                isConfigurable = false;
	                            }
	                            else if (uniformSemantics.indexOf(semantic) >= 0) {
	                                self.uniformSemantics[semantic] = {
	                                    symbol: symbol,
	                                    type: uniformType
	                                };
	                                isConfigurable = false;
	                            }
	                            else {
	                                // The uniform is not configurable, which means it will not appear
	                                // in the material uniform properties
	                                if (semantic === 'unconfigurable') {
	                                    isConfigurable = false;
	                                }
	                                else {
	                                    // Uniform have a defalut value, like
	                                    // uniform vec3 color: [1, 1, 1];
	                                    defaultValueFunc = self._parseDefaultValue(type, semantic);
	                                    if (!defaultValueFunc) {
	                                        throw new Error('Unkown semantic "' + semantic + '"');
	                                    }
	                                    else {
	                                        semantic = '';
	                                    }
	                                }
	                            }
	                        }

	                        if (isConfigurable) {
	                            uniforms[symbol] = {
	                                type: uniformType,
	                                value: isArray ? uniformValueConstructor['array'] : (defaultValueFunc || uniformValueConstructor[type]),
	                                semantic: semantic || null
	                            };
	                        }
	                    }
	                    return ['uniform', type, symbol, isArray].join(' ') + ';\n';
	                }
	            }

	            this.uniformTemplates = uniforms;
	        },

	        _parseDefaultValue: function (type, str) {
	            var arrayRegex = /\[\s*(.*)\s*\]/;
	            if (type === 'vec2' || type === 'vec3' || type === 'vec4') {
	                var arrayStr = arrayRegex.exec(str)[1];
	                if (arrayStr) {
	                    var arr = arrayStr.split(/\s*,\s*/);
	                    return function () {
	                        return new vendor.Float32Array(arr);
	                    };
	                }
	                else {
	                    // Invalid value
	                    return;
	                }
	            }
	            else if (type === 'bool') {
	                return function () {
	                    return str.toLowerCase() === 'true' ? true : false;
	                };
	            }
	            else if (type === 'float') {
	                return function () {
	                    return parseFloat(str);
	                };
	            }
	            else if (type === 'int') {
	                return function () {
	                    return parseInt(str);
	                };
	            }
	        },

	        // Create a new uniform instance for material
	        createUniforms: function () {
	            var uniforms = {};

	            for (var symbol in this.uniformTemplates){
	                var uniformTpl = this.uniformTemplates[symbol];
	                uniforms[symbol] = {
	                    type: uniformTpl.type,
	                    value: uniformTpl.value()
	                };
	            }

	            return uniforms;
	        },

	        // Attached to material
	        attached: function () {
	            this._attacheMaterialNumber++;
	        },

	        // Detached to material
	        detached: function () {
	            this._attacheMaterialNumber--;
	        },

	        isAttachedToAny: function () {
	            return this._attacheMaterialNumber !== 0;
	        },

	        _parseAttributes: function () {
	            var attributes = {};
	            var self = this;
	            this._vertexProcessedWithoutDefine = this._vertexProcessedWithoutDefine.replace(
	                attributeRegex, _attributeParser
	            );

	            function _attributeParser(str, type, symbol, semanticWrapper, semantic) {
	                if (type && symbol) {
	                    var size = 1;
	                    switch (type) {
	                        case 'vec4':
	                            size = 4;
	                            break;
	                        case 'vec3':
	                            size = 3;
	                            break;
	                        case 'vec2':
	                            size = 2;
	                            break;
	                        case 'float':
	                            size = 1;
	                            break;
	                    }

	                    attributes[symbol] = {
	                        // Can only be float
	                        type: 'float',
	                        size: size,
	                        semantic: semantic || null
	                    };

	                    if (semantic) {
	                        if (attribSemantics.indexOf(semantic) < 0) {
	                            throw new Error('Unkown semantic "' + semantic + '"');
	                        }
	                        else {
	                            self.attribSemantics[semantic] = {
	                                symbol: symbol,
	                                type: type
	                            };
	                        }
	                    }
	                }

	                return ['attribute', type, symbol].join(' ') + ';\n';
	            }

	            this.attributeTemplates = attributes;
	        },

	        _parseDefines: function () {
	            var self = this;
	            var shaderType = 'vertex';
	            this._vertexProcessedWithoutDefine = this._vertexProcessedWithoutDefine.replace(defineRegex, _defineParser);
	            shaderType = 'fragment';
	            this._fragmentProcessedWithoutDefine = this._fragmentProcessedWithoutDefine.replace(defineRegex, _defineParser);

	            function _defineParser(str, symbol, value) {
	                var defines = shaderType === 'vertex' ? self.vertexDefines : self.fragmentDefines;
	                if (!defines[symbol]) { // Haven't been defined by user
	                    if (value == 'false') {
	                        defines[symbol] = false;
	                    }
	                    else if (value == 'true') {
	                        defines[symbol] = true;
	                    }
	                    else {
	                        defines[symbol] = value ? parseFloat(value) : null;
	                    }
	                }
	                return '';
	            }
	        },

	        // Return true or error msg if error happened
	        _buildProgram: function (_gl, vertexShaderString, fragmentShaderString) {
	            var cache = this._cache;
	            if (cache.get('program')) {
	                _gl.deleteProgram(cache.get('program'));
	            }
	            var program = _gl.createProgram();

	            var vertexShader = _gl.createShader(_gl.VERTEX_SHADER);
	            _gl.shaderSource(vertexShader, vertexShaderString);
	            _gl.compileShader(vertexShader);

	            var fragmentShader = _gl.createShader(_gl.FRAGMENT_SHADER);
	            _gl.shaderSource(fragmentShader, fragmentShaderString);
	            _gl.compileShader(fragmentShader);

	            var msg = checkShaderErrorMsg(_gl, vertexShader, vertexShaderString);
	            if (msg) {
	                return msg;
	            }
	            msg = checkShaderErrorMsg(_gl, fragmentShader, fragmentShaderString);
	            if (msg) {
	                return msg;
	            }

	            _gl.attachShader(program, vertexShader);
	            _gl.attachShader(program, fragmentShader);
	            // Force the position bind to location 0;
	            if (this.attribSemantics['POSITION']) {
	                _gl.bindAttribLocation(program, 0, this.attribSemantics['POSITION'].symbol);
	            }
	            else {
	                // Else choose an attribute and bind to location 0;
	                var keys = Object.keys(this.attributeTemplates);
	                _gl.bindAttribLocation(program, 0, keys[0]);
	            }

	            _gl.linkProgram(program);

	            if (!_gl.getProgramParameter(program, _gl.LINK_STATUS)) {
	                return 'Could not link program\n' + 'VALIDATE_STATUS: ' + _gl.getProgramParameter(program, _gl.VALIDATE_STATUS) + ', gl error [' + _gl.getError() + ']';
	            }

	            // Cache uniform locations
	            for (var i = 0; i < this._uniformList.length; i++) {
	                var uniformSymbol = this._uniformList[i];
	                var locationMap = cache.get('locations');
	                locationMap[uniformSymbol] = _gl.getUniformLocation(program, uniformSymbol);
	            }

	            _gl.deleteShader(vertexShader);
	            _gl.deleteShader(fragmentShader);

	            cache.put('program', program);
	        },

	        /**
	         * Clone a new shader
	         * @return {qtek.Shader}
	         */
	        clone: function () {
	            var shader = new Shader({
	                vertex: this.vertex,
	                fragment: this.fragment,
	                vertexDefines: util.clone(this.vertexDefines),
	                fragmentDefines: util.clone(this.fragmentDefines)
	            });
	            for (var name in this._textureStatus) {
	                shader._textureStatus[name] = util.clone(this._textureStatus[name]);
	            }
	            return shader;
	        },
	        /**
	         * Dispose given context
	         * @param  {WebGLRenderingContext} _gl
	         */
	        dispose: function (_gl) {
	            var cache = this._cache;

	            cache.use(_gl.__GLID__);
	            var program = cache.get('program');
	            if (program) {
	                _gl.deleteProgram(program);
	            }
	            cache.deleteContext(_gl.__GLID__);

	            this._locations = {};
	        }
	    });

	    function getCacheSchema() {
	        return {
	            locations: {},
	            attriblocations: {}
	        };
	    }

	    // Return true or error msg if error happened
	    function checkShaderErrorMsg(_gl, shader, shaderString) {
	        if (!_gl.getShaderParameter(shader, _gl.COMPILE_STATUS)) {
	            return [_gl.getShaderInfoLog(shader), addLineNumbers(shaderString)].join('\n');
	        }
	    }

	    // some util functions
	    function addLineNumbers(string) {
	        var chunks = string.split('\n');
	        for (var i = 0, il = chunks.length; i < il; i ++) {
	            // Chrome reports shader errors on lines
	            // starting counting from 1
	            chunks[i] = (i + 1) + ': ' + chunks[i];
	        }
	        return chunks.join('\n');
	    }

	    var importRegex = /(@import)\s*([0-9a-zA-Z_\-\.]*)/g;
	    Shader.parseImport = function (shaderStr) {
	        shaderStr = shaderStr.replace(importRegex, function (str, importSymbol, importName) {
	            var str = Shader.source(importName);
	            if (str) {
	                // Recursively parse
	                return Shader.parseImport(str);
	            }
	            else {
	                console.error('Shader chunk "' + importName + '" not existed in library');
	                return '';
	            }
	        });
	        return shaderStr;
	    };

	    var exportRegex = /(@export)\s*([0-9a-zA-Z_\-\.]*)\s*\n([\s\S]*?)@end/g;

	    /**
	     * Import shader source
	     * @param  {string} shaderStr
	     * @memberOf qtek.Shader
	     */
	    Shader['import'] = function (shaderStr) {
	        shaderStr.replace(exportRegex, function (str, exportSymbol, exportName, code) {
	            var code = code.replace(/(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+\x24)/g, '');
	            if (code) {
	                var parts = exportName.split('.');
	                var obj = Shader.codes;
	                var i = 0;
	                var key;
	                while (i < parts.length - 1) {
	                    key = parts[i++];
	                    if (!obj[key]) {
	                        obj[key] = {};
	                    }
	                    obj = obj[key];
	                }
	                key = parts[i];
	                obj[key] = code;
	            }
	            return code;
	        });
	    };

	    /**
	     * Library to store all the loaded shader codes
	     * @type {Object}
	     * @readOnly
	     * @memberOf qtek.Shader
	     */
	    Shader.codes = {};

	    /**
	     * Get shader source
	     * @param  {string} name
	     * @return {string}
	     * @memberOf qtek.Shader
	     */
	    Shader.source = function (name) {
	        var parts = name.split('.');
	        var obj = Shader.codes;
	        var i = 0;
	        while (obj && i < parts.length) {
	            var key = parts[i++];
	            obj = obj[key];
	        }
	        if (typeof obj !== 'string') {
	            // FIXME Use default instead
	            console.error('Shader "' + name + '" not existed in library');
	            return '';
	        }
	        return obj;
	    };

	    module.exports = Shader;


/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';


	    var DIRTY_PREFIX = '__dt__';

	    var Cache = function () {

	        this._contextId = 0;

	        this._caches = [];

	        this._context = {};
	    };

	    Cache.prototype = {

	        use: function (contextId, documentSchema) {
	            var caches = this._caches;
	            if (!caches[contextId]) {
	                caches[contextId] = {};

	                if (documentSchema) {
	                    caches[contextId] = documentSchema();
	                }
	            }
	            this._contextId = contextId;

	            this._context = caches[contextId];
	        },

	        put: function (key, value) {
	            this._context[key] = value;
	        },

	        get: function (key) {
	            return this._context[key];
	        },

	        dirty: function (field) {
	            field = field || '';
	            var key = DIRTY_PREFIX + field;
	            this.put(key, true);
	        },

	        dirtyAll: function (field) {
	            field = field || '';
	            var key = DIRTY_PREFIX + field;
	            var caches = this._caches;
	            for (var i = 0; i < caches.length; i++) {
	                if (caches[i]) {
	                    caches[i][key] = true;
	                }
	            }
	        },

	        fresh: function (field) {
	            field = field || '';
	            var key = DIRTY_PREFIX + field;
	            this.put(key, false);
	        },

	        freshAll: function (field) {
	            field = field || '';
	            var key = DIRTY_PREFIX + field;
	            var caches = this._caches;
	            for (var i = 0; i < caches.length; i++) {
	                if (caches[i]) {
	                    caches[i][key] = false;
	                }
	            }
	        },

	        isDirty: function (field) {
	            field = field || '';
	            var key = DIRTY_PREFIX + field;
	            var context = this._context;
	            return  !context.hasOwnProperty(key)
	                || context[key] === true;
	        },

	        deleteContext: function (contextId) {
	            delete this._caches[contextId];
	            this._context = {};
	        },

	        delete: function (key) {
	            delete this._context[key];
	        },

	        clearAll: function () {
	            this._caches = {};
	        },

	        getContext: function () {
	            return this._context;
	        },

	        eachContext : function (cb, context) {
	            var keys = Object.keys(this._caches);
	            keys.forEach(function (key) {
	                cb && cb.call(context, key);
	            });
	        },

	        miss: function (key) {
	            return ! this._context.hasOwnProperty(key);
	        }
	    };

	    Cache.prototype.constructor = Cache;

	    module.exports = Cache;



/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var Texture = __webpack_require__(21);

	    /**
	     * @constructor qtek.Material
	     * @extends qtek.core.Base
	     */
	    var Material = Base.extend(
	    /** @lends qtek.Material# */
	    {
	        /**
	         * @type {string}
	         */
	        name: '',

	        /**
	         * @type {Object}
	         */
	        // uniforms: null,

	        /**
	         * @type {qtek.Shader}
	         */
	        // shader: null,

	        /**
	         * @type {boolean}
	         */
	        depthTest: true,

	        /**
	         * @type {boolean}
	         */
	        depthMask: true,

	        /**
	         * @type {boolean}
	         */
	        transparent: false,
	        /**
	         * Blend func is a callback function when the material
	         * have custom blending
	         * The gl context will be the only argument passed in tho the
	         * blend function
	         * Detail of blend function in WebGL:
	         * http://www.khronos.org/registry/gles/specs/2.0/es_full_spec_2.0.25.pdf
	         *
	         * Example :
	         * function(_gl) {
	         *  _gl.blendEquation(_gl.FUNC_ADD);
	         *  _gl.blendFunc(_gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA);
	         * }
	         */
	        blend: null,

	        // shadowTransparentMap : null

	        _enabledUniforms: null,
	    }, function () {
	        if (!this.name) {
	            this.name = 'MATERIAL_' + this.__GUID__;
	        }
	        if (this.shader) {
	            this.attachShader(this.shader);
	        }
	        if (!this.uniforms) {
	            this.uniforms = {};
	        }
	    },
	    /** @lends qtek.Material.prototype */
	    {

	        /**
	         * @param  {WebGLRenderingContext} _gl
	         * @param  {qtek.Shader} [shader]
	         * @param  {qtek.Material} [prevMaterial]
	         * @param  {qtek.Shader} [prevShader]
	         * @return {Object}
	         */
	        bind: function(_gl, shader, prevMaterial, prevShader) {

	            // May use shader of other material if shader code are same
	            var shader = shader || this.shader;

	            var sameShader = prevShader === shader;

	            var currentTextureSlot = shader.currentTextureSlot();
	            // Set uniforms
	            for (var u = 0; u < this._enabledUniforms.length; u++) {
	                var symbol = this._enabledUniforms[u];
	                var uniform = this.uniforms[symbol];
	                var uniformValue = uniform.value;
	                // When binding two materials with the same shader
	                // Many uniforms will be be set twice even if they have the same value
	                // So add a evaluation to see if the uniform is really needed to be set
	                if (prevMaterial && sameShader) {
	                    if (prevMaterial.uniforms[symbol].value === uniformValue) {
	                        continue;
	                    }
	                }

	                if (uniformValue === undefined) {
	                    console.warn('Uniform value "' + symbol + '" is undefined');
	                    continue;
	                }
	                else if (uniformValue === null) {
	                    // FIXME Assume material with same shader have same order uniforms
	                    // Or if different material use same textures,
	                    // the slot will be different and still skipped because optimization
	                    if (uniform.type === 't') {
	                        var slot = shader.currentTextureSlot();
	                        var res = shader.setUniform(_gl, '1i', symbol, slot);
	                        if (res) { // Texture is enabled
	                            // Still occupy the slot to make sure same texture in different materials have same slot.
	                            shader.useCurrentTextureSlot(_gl, null);
	                        }
	                    }
	                    continue;
	                }
	                else if (uniformValue instanceof Array
	                    && !uniformValue.length) {
	                    continue;
	                }
	                else if (uniformValue instanceof Texture) {
	                    var slot = shader.currentTextureSlot();
	                    var res = shader.setUniform(_gl, '1i', symbol, slot);
	                    if (!res) { // Texture is not enabled
	                        continue;
	                    }
	                    shader.useCurrentTextureSlot(_gl, uniformValue);
	                }
	                else if (uniformValue instanceof Array) {
	                    if (uniformValue.length === 0) {
	                        continue;
	                    }
	                    // Texture Array
	                    var exampleValue = uniformValue[0];

	                    if (exampleValue instanceof Texture) {
	                        if (!shader.hasUniform(symbol)) {
	                            continue;
	                        }

	                        var arr = [];
	                        for (var i = 0; i < uniformValue.length; i++) {
	                            var texture = uniformValue[i];

	                            var slot = shader.currentTextureSlot();
	                            arr.push(slot);

	                            shader.useCurrentTextureSlot(_gl, texture);
	                        }

	                        shader.setUniform(_gl, '1iv', symbol, arr);
	                    }
	                    else {
	                        shader.setUniform(_gl, uniform.type, symbol, uniformValue);
	                    }
	                }
	                else{
	                    shader.setUniform(_gl, uniform.type, symbol, uniformValue);
	                }
	            }
	            // Texture slot maybe used out of material.
	            shader.resetTextureSlot(currentTextureSlot);
	        },

	        /**
	         * @param {string} symbol
	         * @param {number|array|qtek.Texture|ArrayBufferView} value
	         */
	        setUniform: function (symbol, value) {
	            if (value === undefined) {
	                console.warn('Uniform value "' + symbol + '" is undefined');
	            }
	            var uniform = this.uniforms[symbol];
	            if (uniform) {
	                uniform.value = value;
	            }
	        },

	        /**
	         * @param {Object} obj
	         */
	        setUniforms: function(obj) {
	            for (var key in obj) {
	                var val = obj[key];
	                this.setUniform(key, val);
	            }
	        },

	        /**
	         * Enable a uniform
	         * It only have effect on the uniform exists in shader.
	         * @param  {string} symbol
	         */
	        // enableUniform: function (symbol) {
	        //     if (this.uniforms[symbol] && !this.isUniformEnabled(symbol)) {
	        //         this._enabledUniforms.push(symbol);
	        //     }
	        // },

	        // /**
	        //  * Disable a uniform
	        //  * It will not affect the uniform state in the shader. Because the shader uniforms is parsed from shader code with naive regex. When using micro to disable some uniforms in the shader. It will still try to set these uniforms in each rendering pass. We can disable these uniforms manually if we need this bit performance improvement. Mostly we can simply ignore it.
	        //  * @param  {string} symbol
	        //  */
	        // disableUniform: function (symbol) {
	        //     var idx = this._enabledUniforms.indexOf(symbol);
	        //     if (idx >= 0) {
	        //         this._enabledUniforms.splice(idx, 1);
	        //     }
	        // },

	        /**
	         * @param  {string}  symbol
	         * @return {boolean}
	         */
	        isUniformEnabled: function (symbol) {
	            return this._enabledUniforms.indexOf(symbol) >= 0;
	        },

	        /**
	         * Alias of setUniform and setUniforms
	         * @param {object|string} symbol
	         * @param {number|array|qtek.Texture|ArrayBufferView} [value]
	         */
	        set: function (symbol, value) {
	            if (typeof(symbol) === 'object') {
	                for (var key in symbol) {
	                    var val = symbol[key];
	                    this.set(key, val);
	                }
	            }
	            else {
	                var uniform = this.uniforms[symbol];
	                if (uniform) {
	                    uniform.value = value;
	                }
	            }
	        },
	        /**
	         * Get uniform value
	         * @param  {string} symbol
	         * @return {number|array|qtek.Texture|ArrayBufferView}
	         */
	        get: function (symbol) {
	            var uniform = this.uniforms[symbol];
	            if (uniform) {
	                return uniform.value;
	            }
	        },
	        /**
	         * Attach a shader instance
	         * @param  {qtek.Shader} shader
	         * @param  {boolean} keepUniform If try to keep uniform value
	         */
	        attachShader: function(shader, keepUniform) {
	            if (this.shader) {
	                this.shader.detached();
	            }

	            var originalUniforms = this.uniforms;

	            // Ignore if uniform can use in shader.
	            this.uniforms = shader.createUniforms();
	            this.shader = shader;

	            var uniforms = this.uniforms;
	            this._enabledUniforms = Object.keys(uniforms);
	            // Make sure uniforms are set in same order to avoid texture slot wrong
	            this._enabledUniforms.sort();

	            if (keepUniform) {
	                for (var symbol in originalUniforms) {
	                    if (uniforms[symbol]) {
	                        uniforms[symbol].value = originalUniforms[symbol].value;
	                    }
	                }
	            }

	            shader.attached();
	        },

	        /**
	         * Detach a shader instance
	         */
	        detachShader: function() {
	            this.shader.detached();
	            this.shader = null;
	            this.uniforms = {};
	        },

	        /**
	         * Clone a new material and keep uniforms, shader will not be cloned
	         * @return {qtek.Material}
	         */
	        clone: function () {
	            var material = new this.constructor({
	                name: this.name,
	                shader: this.shader
	            });
	            for (var symbol in this.uniforms) {
	                material.uniforms[symbol].value = this.uniforms[symbol].value;
	            }
	            material.depthTest = this.depthTest;
	            material.depthMask = this.depthMask;
	            material.transparent = this.transparent;
	            material.blend = this.blend;

	            return material;
	        },

	        /**
	         * Dispose material, if material shader is not attached to any other materials
	         * Shader will also be disposed
	         * @param {WebGLRenderingContext} gl
	         * @param {boolean} [disposeTexture=false] If dispose the textures used in the material
	         */
	        dispose: function(_gl, disposeTexture) {
	            if (disposeTexture) {
	                for (var name in this.uniforms) {
	                    var val = this.uniforms[name].value;
	                    if (!val) {
	                        continue;
	                    }
	                    if (val instanceof Texture) {
	                        val.dispose(_gl);
	                    }
	                    else if (val instanceof Array) {
	                        for (var i = 0; i < val.length; i++) {
	                            if (val[i] instanceof Texture) {
	                                val[i].dispose(_gl);
	                            }
	                        }
	                    }
	                }
	            }
	            var shader = this.shader;
	            if (shader) {
	                this.detachShader();
	                if (!shader.isAttachedToAny()) {
	                    shader.dispose(_gl);
	                }
	            }
	        }
	    });

	    module.exports = Material;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Base class for all textures like compressed texture, texture2d, texturecube
	 * TODO mapping
	 */


	    var Base = __webpack_require__(6);
	    var glenum = __webpack_require__(11);
	    var Cache = __webpack_require__(19);

	    /**
	     * @constructor qtek.Texture
	     * @extends qtek.core.Base
	     */
	    var Texture = Base.extend(
	    /** @lends qtek.Texture# */
	    {
	        /**
	         * Texture width, only needed when the texture is used as a render target
	         * @type {number}
	         */
	        width: 512,
	        /**
	         * Texture height, only needed when the texture is used as a render target
	         * @type {number}
	         */
	        height: 512,
	        /**
	         * Texel data type
	         * @type {number}
	         */
	        type: glenum.UNSIGNED_BYTE,
	        /**
	         * Format of texel data
	         * @type {number}
	         */
	        format: glenum.RGBA,
	        /**
	         * @type {number}
	         */
	        wrapS: glenum.CLAMP_TO_EDGE,
	        /**
	         * @type {number}
	         */
	        wrapT: glenum.CLAMP_TO_EDGE,
	        /**
	         * @type {number}
	         */
	        minFilter: glenum.LINEAR_MIPMAP_LINEAR,
	        /**
	         * @type {number}
	         */
	        magFilter: glenum.LINEAR,
	        /**
	         * @type {boolean}
	         */
	        useMipmap: true,

	        /**
	         * Anisotropic filtering, enabled if value is larger than 1
	         * @see http://blog.tojicode.com/2012/03/anisotropic-filtering-in-webgl.html
	         * @type {number}
	         */
	        anisotropic: 1,
	        // pixelStorei parameters, not available when texture is used as render target
	        // http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml
	        /**
	         * @type {boolean}
	         */
	        flipY: true,
	        /**
	         * @type {number}
	         */
	        unpackAlignment: 4,
	        /**
	         * @type {boolean}
	         */
	        premultiplyAlpha: false,

	        /**
	         * Dynamic option for texture like video
	         * @type {boolean}
	         */
	        dynamic: false,

	        NPOT: false
	    }, function () {
	        this._cache = new Cache();
	    },
	    /** @lends qtek.Texture.prototype */
	    {

	        getWebGLTexture: function (_gl) {
	            var cache = this._cache;
	            cache.use(_gl.__GLID__);

	            if (cache.miss('webgl_texture')) {
	                // In a new gl context, create new texture and set dirty true
	                cache.put('webgl_texture', _gl.createTexture());
	            }
	            if (this.dynamic) {
	                this.update(_gl);
	            }
	            else if (cache.isDirty()) {
	                this.update(_gl);
	                cache.fresh();
	            }

	            return cache.get('webgl_texture');
	        },

	        bind: function () {},
	        unbind: function () {},

	        /**
	         * Mark texture is dirty and update in the next frame
	         */
	        dirty: function () {
	            this._cache.dirtyAll();
	        },

	        update: function (_gl) {},

	        // Update the common parameters of texture
	        beforeUpdate: function (_gl) {
	            _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, this.flipY);
	            _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
	            _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, this.unpackAlignment);

	            this.fallBack();
	        },

	        fallBack: function () {
	            // Use of none-power of two texture
	            // http://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences

	            var isPowerOfTwo = this.isPowerOfTwo();

	            if (this.format === glenum.DEPTH_COMPONENT) {
	                this.useMipmap = false;
	            }

	            if (!isPowerOfTwo || !this.useMipmap) {
	                // none-power of two flag
	                this.NPOT = true;
	                // Save the original value for restore
	                this._minFilterOriginal = this.minFilter;
	                this._magFilterOriginal = this.magFilter;
	                this._wrapSOriginal = this.wrapS;
	                this._wrapTOriginal = this.wrapT;

	                if (this.minFilter == glenum.NEAREST_MIPMAP_NEAREST ||
	                    this.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {
	                    this.minFilter = glenum.NEAREST;
	                } else if (
	                    this.minFilter == glenum.LINEAR_MIPMAP_LINEAR ||
	                    this.minFilter == glenum.LINEAR_MIPMAP_NEAREST
	                ) {
	                    this.minFilter = glenum.LINEAR;
	                }

	                this.wrapS = glenum.CLAMP_TO_EDGE;
	                this.wrapT = glenum.CLAMP_TO_EDGE;
	            }
	            else {
	                this.NPOT = false;
	                if (this._minFilterOriginal) {
	                    this.minFilter = this._minFilterOriginal;
	                }
	                if (this._magFilterOriginal) {
	                    this.magFilter = this._magFilterOriginal;
	                }
	                if (this._wrapSOriginal) {
	                    this.wrapS = this._wrapSOriginal;
	                }
	                if (this._wrapTOriginal) {
	                    this.wrapT = this._wrapTOriginal;
	                }
	            }

	        },

	        nextHighestPowerOfTwo: function (x) {
	            --x;
	            for (var i = 1; i < 32; i <<= 1) {
	                x = x | x >> i;
	            }
	            return x + 1;
	        },
	        /**
	         * @param  {WebGLRenderingContext} _gl
	         */
	        dispose: function (_gl) {

	            var cache = this._cache;

	            cache.use(_gl.__GLID__);

	            var webglTexture = cache.get('webgl_texture');
	            if (webglTexture){
	                _gl.deleteTexture(webglTexture);
	            }
	            cache.deleteContext(_gl.__GLID__);

	        },
	        /**
	         * Test if image of texture is valid and loaded.
	         * @return {boolean}
	         */
	        isRenderable: function () {},

	        isPowerOfTwo: function () {}
	    });

	    /* DataType */
	    Texture.BYTE = glenum.BYTE;
	    Texture.UNSIGNED_BYTE = glenum.UNSIGNED_BYTE;
	    Texture.SHORT = glenum.SHORT;
	    Texture.UNSIGNED_SHORT = glenum.UNSIGNED_SHORT;
	    Texture.INT = glenum.INT;
	    Texture.UNSIGNED_INT = glenum.UNSIGNED_INT;
	    Texture.FLOAT = glenum.FLOAT;
	    Texture.HALF_FLOAT = 0x8D61;

	    // ext.UNSIGNED_INT_24_8_WEBGL for WEBGL_depth_texture extension
	    Texture.UNSIGNED_INT_24_8_WEBGL = 34042;

	    /* PixelFormat */
	    Texture.DEPTH_COMPONENT = glenum.DEPTH_COMPONENT;
	    Texture.DEPTH_STENCIL = glenum.DEPTH_STENCIL;
	    Texture.ALPHA = glenum.ALPHA;
	    Texture.RGB = glenum.RGB;
	    Texture.RGBA = glenum.RGBA;
	    Texture.LUMINANCE = glenum.LUMINANCE;
	    Texture.LUMINANCE_ALPHA = glenum.LUMINANCE_ALPHA;

	    /* Compressed Texture */
	    Texture.COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
	    Texture.COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
	    Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
	    Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

	    /* TextureMagFilter */
	    Texture.NEAREST = glenum.NEAREST;
	    Texture.LINEAR = glenum.LINEAR;

	    /* TextureMinFilter */
	    /*      NEAREST */
	    /*      LINEAR */
	    Texture.NEAREST_MIPMAP_NEAREST = glenum.NEAREST_MIPMAP_NEAREST;
	    Texture.LINEAR_MIPMAP_NEAREST = glenum.LINEAR_MIPMAP_NEAREST;
	    Texture.NEAREST_MIPMAP_LINEAR = glenum.NEAREST_MIPMAP_LINEAR;
	    Texture.LINEAR_MIPMAP_LINEAR = glenum.LINEAR_MIPMAP_LINEAR;

	    /* TextureParameterName */
	    // Texture.TEXTURE_MAG_FILTER = glenum.TEXTURE_MAG_FILTER;
	    // Texture.TEXTURE_MIN_FILTER = glenum.TEXTURE_MIN_FILTER;

	    /* TextureWrapMode */
	    Texture.REPEAT = glenum.REPEAT;
	    Texture.CLAMP_TO_EDGE = glenum.CLAMP_TO_EDGE;
	    Texture.MIRRORED_REPEAT = glenum.MIRRORED_REPEAT;


	    module.exports = Texture;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var vec2 = glMatrix.vec2;

	    /**
	     * @constructor
	     * @alias qtek.math.Vector2
	     * @param {number} x
	     * @param {number} y
	     */
	    var Vector2 = function(x, y) {

	        x = x || 0;
	        y = y || 0;

	        /**
	         * Storage of Vector2, read and write of x, y will change the values in _array
	         * All methods also operate on the _array instead of x, y components
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = vec2.fromValues(x, y);

	        /**
	         * Dirty flag is used by the Node to determine
	         * if the matrix is updated to latest
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Vector2.prototype = {

	        constructor: Vector2,

	        /**
	         * Add b to self
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        add: function(b) {
	            vec2.add(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x and y components
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {qtek.math.Vector2}
	         */
	        set: function(x, y) {
	            this._array[0] = x;
	            this._array[1] = y;
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x and y components from array
	         * @param  {Float32Array|number[]} arr
	         * @return {qtek.math.Vector2}
	         */
	        setArray: function(arr) {
	            this._array[0] = arr[0];
	            this._array[1] = arr[1];

	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new Vector2
	         * @return {qtek.math.Vector2}
	         */
	        clone: function() {
	            return new Vector2(this.x, this.y);
	        },

	        /**
	         * Copy x, y from b
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        copy: function(b) {
	            vec2.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Cross product of self and b, written to a Vector3 out
	         * @param  {qtek.math.Vector3} out
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        cross: function(out, b) {
	            vec2.cross(out._array, this._array, b._array);
	            out._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for distance
	         * @param  {qtek.math.Vector2} b
	         * @return {number}
	         */
	        dist: function(b) {
	            return vec2.dist(this._array, b._array);
	        },

	        /**
	         * Distance between self and b
	         * @param  {qtek.math.Vector2} b
	         * @return {number}
	         */
	        distance: function(b) {
	            return vec2.distance(this._array, b._array);
	        },

	        /**
	         * Alias for divide
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        div: function(b) {
	            vec2.div(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Divide self by b
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        divide: function(b) {
	            vec2.divide(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Dot product of self and b
	         * @param  {qtek.math.Vector2} b
	         * @return {number}
	         */
	        dot: function(b) {
	            return vec2.dot(this._array, b._array);
	        },

	        /**
	         * Alias of length
	         * @return {number}
	         */
	        len: function() {
	            return vec2.len(this._array);
	        },

	        /**
	         * Calculate the length
	         * @return {number}
	         */
	        length: function() {
	            return vec2.length(this._array);
	        },

	        /**
	         * Linear interpolation between a and b
	         * @param  {qtek.math.Vector2} a
	         * @param  {qtek.math.Vector2} b
	         * @param  {number}  t
	         * @return {qtek.math.Vector2}
	         */
	        lerp: function(a, b, t) {
	            vec2.lerp(this._array, a._array, b._array, t);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Minimum of self and b
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        min: function(b) {
	            vec2.min(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Maximum of self and b
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        max: function(b) {
	            vec2.max(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiply
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        mul: function(b) {
	            vec2.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Mutiply self and b
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        multiply: function(b) {
	            vec2.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Negate self
	         * @return {qtek.math.Vector2}
	         */
	        negate: function() {
	            vec2.negate(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Normalize self
	         * @return {qtek.math.Vector2}
	         */
	        normalize: function() {
	            vec2.normalize(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Generate random x, y components with a given scale
	         * @param  {number} scale
	         * @return {qtek.math.Vector2}
	         */
	        random: function(scale) {
	            vec2.random(this._array, scale);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self
	         * @param  {number}  scale
	         * @return {qtek.math.Vector2}
	         */
	        scale: function(s) {
	            vec2.scale(this._array, this._array, s);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale b and add to self
	         * @param  {qtek.math.Vector2} b
	         * @param  {number}  scale
	         * @return {qtek.math.Vector2}
	         */
	        scaleAndAdd: function(b, s) {
	            vec2.scaleAndAdd(this._array, this._array, b._array, s);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for squaredDistance
	         * @param  {qtek.math.Vector2} b
	         * @return {number}
	         */
	        sqrDist: function(b) {
	            return vec2.sqrDist(this._array, b._array);
	        },

	        /**
	         * Squared distance between self and b
	         * @param  {qtek.math.Vector2} b
	         * @return {number}
	         */
	        squaredDistance: function(b) {
	            return vec2.squaredDistance(this._array, b._array);
	        },

	        /**
	         * Alias for squaredLength
	         * @return {number}
	         */
	        sqrLen: function() {
	            return vec2.sqrLen(this._array);
	        },

	        /**
	         * Squared length of self
	         * @return {number}
	         */
	        squaredLength: function() {
	            return vec2.squaredLength(this._array);
	        },

	        /**
	         * Alias for subtract
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        sub: function(b) {
	            vec2.sub(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Subtract b from self
	         * @param  {qtek.math.Vector2} b
	         * @return {qtek.math.Vector2}
	         */
	        subtract: function(b) {
	            vec2.subtract(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix2 m
	         * @param  {qtek.math.Matrix2} m
	         * @return {qtek.math.Vector2}
	         */
	        transformMat2: function(m) {
	            vec2.transformMat2(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix2d m
	         * @param  {qtek.math.Matrix2d} m
	         * @return {qtek.math.Vector2}
	         */
	        transformMat2d: function(m) {
	            vec2.transformMat2d(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix3 m
	         * @param  {qtek.math.Matrix3} m
	         * @return {qtek.math.Vector2}
	         */
	        transformMat3: function(m) {
	            vec2.transformMat3(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix4 m
	         * @param  {qtek.math.Matrix4} m
	         * @return {qtek.math.Vector2}
	         */
	        transformMat4: function(m) {
	            vec2.transformMat4(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        toString: function() {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    // Getter and Setter
	    if (Object.defineProperty) {

	        var proto = Vector2.prototype;
	        /**
	         * @name x
	         * @type {number}
	         * @memberOf qtek.math.Vector2
	         * @instance
	         */
	        Object.defineProperty(proto, 'x', {
	            get: function () {
	                return this._array[0];
	            },
	            set: function (value) {
	                this._array[0] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name y
	         * @type {number}
	         * @memberOf qtek.math.Vector2
	         * @instance
	         */
	        Object.defineProperty(proto, 'y', {
	            get: function () {
	                return this._array[1];
	            },
	            set: function (value) {
	                this._array[1] = value;
	                this._dirty = true;
	            }
	        });
	    }

	    // Supply methods that are not in place

	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.add = function(out, a, b) {
	        vec2.add(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.set = function(out, x, y) {
	        vec2.set(out._array, x, y);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.copy = function(out, b) {
	        vec2.copy(out._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector3} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.cross = function(out, a, b) {
	        vec2.cross(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {number}
	     */
	    Vector2.dist = function(a, b) {
	        return vec2.distance(a._array, b._array);
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {number}
	     */
	    Vector2.distance = Vector2.dist;
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.div = function(out, a, b) {
	        vec2.divide(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.divide = Vector2.div;
	    /**
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {number}
	     */
	    Vector2.dot = function(a, b) {
	        return vec2.dot(a._array, b._array);
	    };

	    /**
	     * @param  {qtek.math.Vector2} a
	     * @return {number}
	     */
	    Vector2.len = function(b) {
	        return vec2.length(b._array);
	    };

	    // Vector2.length = Vector2.len;

	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @param  {number}  t
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.lerp = function(out, a, b, t) {
	        vec2.lerp(out._array, a._array, b._array, t);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.min = function(out, a, b) {
	        vec2.min(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.max = function(out, a, b) {
	        vec2.max(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.mul = function(out, a, b) {
	        vec2.multiply(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.multiply = Vector2.mul;
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.negate = function(out, a) {
	        vec2.negate(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.normalize = function(out, a) {
	        vec2.normalize(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {number}  scale
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.random = function(out, scale) {
	        vec2.random(out._array, scale);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {number}  scale
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.scale = function(out, a, scale) {
	        vec2.scale(out._array, a._array, scale);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @param  {number}  scale
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.scaleAndAdd = function(out, a, b, scale) {
	        vec2.scaleAndAdd(out._array, a._array, b._array, scale);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {number}
	     */
	    Vector2.sqrDist = function(a, b) {
	        return vec2.sqrDist(a._array, b._array);
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {number}
	     */
	    Vector2.squaredDistance = Vector2.sqrDist;

	    /**
	     * @param  {qtek.math.Vector2} a
	     * @return {number}
	     */
	    Vector2.sqrLen = function(a) {
	        return vec2.sqrLen(a._array);
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector2} a
	     * @return {number}
	     */
	    Vector2.squaredLength = Vector2.sqrLen;

	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.sub = function(out, a, b) {
	        vec2.subtract(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Vector2} b
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.subtract = Vector2.sub;
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Matrix2} m
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.transformMat2 = function(out, a, m) {
	        vec2.transformMat2(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2}  out
	     * @param  {qtek.math.Vector2}  a
	     * @param  {qtek.math.Matrix2d} m
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.transformMat2d = function(out, a, m) {
	        vec2.transformMat2d(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {Matrix3} m
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.transformMat3 = function(out, a, m) {
	        vec2.transformMat3(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {qtek.math.Vector2} out
	     * @param  {qtek.math.Vector2} a
	     * @param  {qtek.math.Matrix4} m
	     * @return {qtek.math.Vector2}
	     */
	    Vector2.transformMat4 = function(out, a, m) {
	        vec2.transformMat4(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };

	    module.exports = Vector2;



/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	
	    var uniformVec3Prefix = 'uniform vec3 ';
	    var uniformFloatPrefix = 'uniform float ';
	    var exportHeaderPrefix = '@export qtek.header.';
	    var exportEnd = '@end';
	    var unconfigurable = ':unconfigurable;';
	    module.exports = [
	        exportHeaderPrefix + 'directional_light',
	        uniformVec3Prefix + 'directionalLightDirection[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
	        uniformVec3Prefix + 'directionalLightColor[DIRECTIONAL_LIGHT_COUNT]' + unconfigurable,
	        exportEnd,

	        exportHeaderPrefix + 'ambient_light',
	        uniformVec3Prefix + 'ambientLightColor[AMBIENT_LIGHT_COUNT]' + unconfigurable,
	        exportEnd,

	        exportHeaderPrefix + 'ambient_sh_light',
	        uniformVec3Prefix + 'ambientSHLightColor[AMBIENT_SH_LIGHT_COUNT]' + unconfigurable,
	        uniformVec3Prefix + 'ambientSHLightCoefficients[AMBIENT_SH_LIGHT_COUNT * 9]' + unconfigurable,
	        __webpack_require__(24),
	        exportEnd,

	        exportHeaderPrefix + 'ambient_cubemap_light',
	        uniformVec3Prefix + 'ambientCubemapLightColor[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
	        'uniform samplerCube ambientCubemapLightCubemap[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
	        'uniform sampler2D ambientCubemapLightBRDFLookup[AMBIENT_CUBEMAP_LIGHT_COUNT]' + unconfigurable,
	        exportEnd,

	        exportHeaderPrefix + 'point_light',
	        uniformVec3Prefix + 'pointLightPosition[POINT_LIGHT_COUNT]' + unconfigurable,
	        uniformFloatPrefix + 'pointLightRange[POINT_LIGHT_COUNT]' + unconfigurable,
	        uniformVec3Prefix + 'pointLightColor[POINT_LIGHT_COUNT]' + unconfigurable,
	        exportEnd,

	        exportHeaderPrefix + 'spot_light',
	        uniformVec3Prefix + 'spotLightPosition[SPOT_LIGHT_COUNT]' + unconfigurable,
	        uniformVec3Prefix + 'spotLightDirection[SPOT_LIGHT_COUNT]' + unconfigurable,
	        uniformFloatPrefix + 'spotLightRange[SPOT_LIGHT_COUNT]' + unconfigurable,
	        uniformFloatPrefix + 'spotLightUmbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
	        uniformFloatPrefix + 'spotLightPenumbraAngleCosine[SPOT_LIGHT_COUNT]' + unconfigurable,
	        uniformFloatPrefix + 'spotLightFalloffFactor[SPOT_LIGHT_COUNT]' + unconfigurable,
	        uniformVec3Prefix + 'spotLightColor[SPOT_LIGHT_COUNT]' + unconfigurable,
	        exportEnd
	    ].join('\n');


/***/ },
/* 24 */
/***/ function(module, exports) {

	
	module.exports = "vec3 calcAmbientSHLight(int idx, vec3 N) {\n    int offset = 9 * idx;\n\n        return ambientSHLightCoefficients[0]\n        + ambientSHLightCoefficients[1] * N.x\n        + ambientSHLightCoefficients[2] * N.y\n        + ambientSHLightCoefficients[3] * N.z\n        + ambientSHLightCoefficients[4] * N.x * N.z\n        + ambientSHLightCoefficients[5] * N.z * N.y\n        + ambientSHLightCoefficients[6] * N.y * N.x\n        + ambientSHLightCoefficients[7] * (3.0 * N.z * N.z - 1.0)\n        + ambientSHLightCoefficients[8] * (N.x * N.x - N.y * N.y);\n}";


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Base = __webpack_require__(6);
	    var Ray = __webpack_require__(26);
	    var Vector2 = __webpack_require__(22);
	    var Vector3 = __webpack_require__(14);
	    var Matrix4 = __webpack_require__(16);
	    var Renderable = __webpack_require__(27);
	    var glenum = __webpack_require__(11);

	    /**
	     * @constructor qtek.picking.RayPicking
	     * @extends qtek.core.Base
	     */
	    var RayPicking = Base.extend(
	    /** @lends qtek.picking.RayPicking# */
	    {
	        /**
	         * Target scene
	         * @type {qtek.Scene}
	         */
	        scene: null,
	        /**
	         * Target camera
	         * @type {qtek.Camera}
	         */
	        camera: null,
	        /**
	         * Target renderer
	         * @type {qtek.Renderer}
	         */
	        renderer: null
	    }, function () {
	        this._ray = new Ray();
	        this._ndc = new Vector2();
	    },
	    /** @lends qtek.picking.RayPicking.prototype */
	    {

	        /**
	         * Pick the nearest intersection object in the scene
	         * @param  {number} x Mouse position x
	         * @param  {number} y Mouse position y
	         * @param  {boolean} [forcePickAll=false] ignore ignorePicking
	         * @return {qtek.picking.RayPicking~Intersection}
	         */
	        pick: function (x, y, forcePickAll) {
	            var out = this.pickAll(x, y, [], forcePickAll);
	            return out[0] || null;
	        },

	        /**
	         * Pick all intersection objects, wich will be sorted from near to far
	         * @param  {number} x Mouse position x
	         * @param  {number} y Mouse position y
	         * @param  {Array} [output]
	         * @param  {boolean} [forcePickAll=false] ignore ignorePicking
	         * @return {Array.<qtek.picking.RayPicking~Intersection>}
	         */
	        pickAll: function (x, y, output, forcePickAll) {
	            this.renderer.screenToNDC(x, y, this._ndc);
	            this.camera.castRay(this._ndc, this._ray);

	            output = output || [];

	            this._intersectNode(this.scene, output, forcePickAll || false);

	            output.sort(this._intersectionCompareFunc);

	            return output;
	        },

	        _intersectNode: function (node, out, forcePickAll) {
	            if ((node instanceof Renderable) && node.isRenderable()) {
	                if ((!node.ignorePicking || forcePickAll)
	                    && (
	                        // Only triangle mesh support ray picking
	                        (node.mode === glenum.TRIANGLES && node.geometry.isUseIndices())
	                        // Or if geometry has it's own pickByRay, pick, implementation
	                        || node.geometry.pickByRay
	                        || node.geometry.pick
	                    )
	                ) {
	                    this._intersectRenderable(node, out);
	                }
	            }
	            for (var i = 0; i < node._children.length; i++) {
	                this._intersectNode(node._children[i], out, forcePickAll);
	            }
	        },

	        _intersectRenderable: (function () {

	            var v1 = new Vector3();
	            var v2 = new Vector3();
	            var v3 = new Vector3();
	            var ray = new Ray();
	            var worldInverse = new Matrix4();

	            return function (renderable, out) {

	                ray.copy(this._ray);
	                Matrix4.invert(worldInverse, renderable.worldTransform);

	                ray.applyTransform(worldInverse);

	                var geometry = renderable.geometry;
	                if (geometry.boundingBox) {
	                    if (!ray.intersectBoundingBox(geometry.boundingBox)) {
	                        return;
	                    }
	                }
	                // Use user defined picking algorithm
	                if (geometry.pick) {
	                    geometry.pick(
	                        this._ndc.x, this._ndc.y,
	                        this.renderer,
	                        this.camera,
	                        renderable, out
	                    );
	                    return;
	                }
	                // Use user defined ray picking algorithm
	                else if (geometry.pickByRay) {
	                    geometry.pickByRay(ray, renderable, out);
	                    return;
	                }

	                var cullBack = (renderable.cullFace === glenum.BACK && renderable.frontFace === glenum.CCW)
	                            || (renderable.cullFace === glenum.FRONT && renderable.frontFace === glenum.CW);

	                var point;
	                var indices = geometry.indices;
	                var positionsAttr = geometry.attributes.position;
	                for (var i = 0; i < indices.length; i += 3) {
	                    var i1 = indices[i];
	                    var i2 = indices[i + 1];
	                    var i3 = indices[i + 2];
	                    positionsAttr.get(i1, v1._array);
	                    positionsAttr.get(i2, v2._array);
	                    positionsAttr.get(i3, v3._array);

	                    if (cullBack) {
	                        point = ray.intersectTriangle(v1, v2, v3, renderable.culling);
	                    }
	                    else {
	                        point = ray.intersectTriangle(v1, v3, v2, renderable.culling);
	                    }
	                    if (point) {
	                        var pointW = new Vector3();
	                        Vector3.transformMat4(pointW, point, renderable.worldTransform);
	                        out.push(new RayPicking.Intersection(
	                            point, pointW, renderable, [i1, i2, i3], i / 3,
	                            Vector3.dist(pointW, this._ray.origin)
	                        ));
	                    }
	                }
	            };
	        })(),

	        _intersectionCompareFunc: function (a, b) {
	            return a.distance - b.distance;
	        }
	    });

	    /**
	     * @constructor qtek.picking.RayPicking~Intersection
	     * @param {qtek.math.Vector3} point
	     * @param {qtek.math.Vector3} pointWorld
	     * @param {qtek.Node} target
	     * @param {Array.<number>} triangle
	     * @param {number} triangleIndex
	     * @param {number} distance
	     */
	    RayPicking.Intersection = function (point, pointWorld, target, triangle, triangleIndex, distance) {
	        /**
	         * Intersection point in local transform coordinates
	         * @type {qtek.math.Vector3}
	         */
	        this.point = point;
	        /**
	         * Intersection point in world transform coordinates
	         * @type {qtek.math.Vector3}
	         */
	        this.pointWorld = pointWorld;
	        /**
	         * Intersection scene node
	         * @type {qtek.Node}
	         */
	        this.target = target;
	        /**
	         * Intersection triangle, which is an array of vertex index
	         * @type {Array.<number>}
	         */
	        this.triangle = triangle;
	        /**
	         * Index of intersection triangle.
	         */
	        this.triangleIndex = triangleIndex;
	        /**
	         * Distance from intersection point to ray origin
	         * @type {number}
	         */
	        this.distance = distance;
	    };

	    module.exports = RayPicking;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Vector3 = __webpack_require__(14);
	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;

	    var EPSILON = 1e-5;

	    /**
	     * @constructor
	     * @alias qtek.math.Ray
	     * @param {qtek.math.Vector3} [origin]
	     * @param {qtek.math.Vector3} [direction]
	     */
	    var Ray = function(origin, direction) {
	        /**
	         * @type {qtek.math.Vector3}
	         */
	        this.origin = origin || new Vector3();
	        /**
	         * @type {qtek.math.Vector3}
	         */
	        this.direction = direction || new Vector3();
	    };

	    Ray.prototype = {

	        constructor: Ray,

	        // http://www.siggraph.org/education/materials/HyperGraph/raytrace/rayplane_intersection.htm
	        /**
	         * Calculate intersection point between ray and a give plane
	         * @param  {qtek.math.Plane} plane
	         * @param  {qtek.math.Vector3} [out]
	         * @return {qtek.math.Vector3}
	         */
	        intersectPlane: function(plane, out) {
	            var pn = plane.normal._array;
	            var d = plane.distance;
	            var ro = this.origin._array;
	            var rd = this.direction._array;

	            var divider = vec3.dot(pn, rd);
	            // ray is parallel to the plane
	            if (divider === 0) {
	                return null;
	            }
	            if (!out) {
	                out = new Vector3();
	            }
	            var t = (vec3.dot(pn, ro) - d) / divider;
	            vec3.scaleAndAdd(out._array, ro, rd, -t);
	            out._dirty = true;
	            return out;
	        },

	        /**
	         * Mirror the ray against plane
	         * @param  {qtek.math.Plane} plane
	         */
	        mirrorAgainstPlane: function(plane) {
	            // Distance to plane
	            var d = vec3.dot(plane.normal._array, this.direction._array);
	            vec3.scaleAndAdd(this.direction._array, this.direction._array, plane.normal._array, -d * 2);
	            this.direction._dirty = true;
	        },

	        distanceToPoint: (function () {
	            var v = vec3.create();
	            return function (point) {
	                vec3.sub(v, point, this.origin._array);
	                // Distance from projection point to origin
	                var b = vec3.dot(v, this.direction._array);
	                if (b < 0) {
	                    return vec3.distance(this.origin._array, point);
	                }
	                // Squared distance from center to origin
	                var c2 = vec3.lenSquared(v);
	                // Squared distance from center to projection point
	                return Math.sqrt(c2 - b * b);
	            };
	        })(),

	        /**
	         * Calculate intersection point between ray and sphere
	         * @param  {qtek.math.Vector3} center
	         * @param  {number} radius
	         * @param  {qtek.math.Vector3} out
	         * @return {qtek.math.Vector3}
	         */
	        intersectSphere: (function () {
	            var v = vec3.create();
	            return function (center, radius, out) {
	                var origin = this.origin._array;
	                var direction = this.direction._array;
	                center = center._array;
	                vec3.sub(v, center, origin);
	                // Distance from projection point to origin
	                var b = vec3.dot(v, direction);
	                // Squared distance from center to origin
	                var c2 = vec3.squaredLength(v);
	                // Squared distance from center to projection point
	                var d2 = c2 - b * b;

	                var r2 = radius * radius;
	                // No intersection
	                if (d2 > r2) {
	                    return;
	                }

	                var a = Math.sqrt(r2 - d2);
	                // First intersect point
	                var t0 = b - a;
	                // Second intersect point
	                var t1 = b + a;

	                if (!out) {
	                    out = new Vector3();
	                }
	                if (t0 < 0) {
	                    if (t1 < 0) {
	                        return null;
	                    }
	                    else {
	                        vec3.scaleAndAdd(out._array, origin, direction, t1);
	                        return out;
	                    }
	                }
	                else {
	                    vec3.scaleAndAdd(out._array, origin, direction, t0);
	                    return out;
	                }
	            };
	        })(),

	        // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
	        /**
	         * Calculate intersection point between ray and bounding box
	         * @param {qtek.math.BoundingBox} bbox
	         * @param {qtek.math.Vector3}
	         * @return {qtek.math.Vector3}
	         */
	        intersectBoundingBox: function(bbox, out) {
	            var dir = this.direction._array;
	            var origin = this.origin._array;
	            var min = bbox.min._array;
	            var max = bbox.max._array;

	            var invdirx = 1 / dir[0];
	            var invdiry = 1 / dir[1];
	            var invdirz = 1 / dir[2];

	            var tmin, tmax, tymin, tymax, tzmin, tzmax;
	            if (invdirx >= 0) {
	                tmin = (min[0] - origin[0]) * invdirx;
	                tmax = (max[0] - origin[0]) * invdirx;
	            }
	            else {
	                tmax = (min[0] - origin[0]) * invdirx;
	                tmin = (max[0] - origin[0]) * invdirx;
	            }
	            if (invdiry >= 0) {
	                tymin = (min[1] - origin[1]) * invdiry;
	                tymax = (max[1] - origin[1]) * invdiry;
	            }
	            else {
	                tymax = (min[1] - origin[1]) * invdiry;
	                tymin = (max[1] - origin[1]) * invdiry;
	            }

	            if ((tmin > tymax) || (tymin > tmax)) {
	                return null;
	            }

	            if (tymin > tmin || tmin !== tmin) {
	                tmin = tymin;
	            }
	            if (tymax < tmax || tmax !== tmax) {
	                tmax = tymax;
	            }

	            if (invdirz >= 0) {
	                tzmin = (min[2] - origin[2]) * invdirz;
	                tzmax = (max[2] - origin[2]) * invdirz;
	            }
	            else {
	                tzmax = (min[2] - origin[2]) * invdirz;
	                tzmin = (max[2] - origin[2]) * invdirz;
	            }

	            if ((tmin > tzmax) || (tzmin > tmax)) {
	                return null;
	            }

	            if (tzmin > tmin || tmin !== tmin) {
	                tmin = tzmin;
	            }
	            if (tzmax < tmax || tmax !== tmax) {
	                tmax = tzmax;
	            }
	            if (tmax < 0) {
	                return null;
	            }

	            var t = tmin >= 0 ? tmin : tmax;

	            if (!out) {
	                out = new Vector3();
	            }
	            vec3.scaleAndAdd(out._array, origin, dir, t);
	            return out;
	        },

	        // http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
	        /**
	         * Calculate intersection point between ray and three triangle vertices
	         * @param {qtek.math.Vector3} a
	         * @param {qtek.math.Vector3} b
	         * @param {qtek.math.Vector3} c
	         * @param {boolean}           singleSided, CW triangle will be ignored
	         * @param {qtek.math.Vector3} [out]
	         * @param {qtek.math.Vector3} [barycenteric] barycentric coords
	         * @return {qtek.math.Vector3}
	         */
	        intersectTriangle: (function() {

	            var eBA = vec3.create();
	            var eCA = vec3.create();
	            var AO = vec3.create();
	            var vCross = vec3.create();

	            return function (a, b, c, singleSided, out, barycenteric) {
	                var dir = this.direction._array;
	                var origin = this.origin._array;
	                a = a._array;
	                b = b._array;
	                c = c._array;

	                vec3.sub(eBA, b, a);
	                vec3.sub(eCA, c, a);

	                vec3.cross(vCross, eCA, dir);

	                var det = vec3.dot(eBA, vCross);

	                if (singleSided) {
	                    if (det > -EPSILON) {
	                        return null;
	                    }
	                }
	                else {
	                    if (det > -EPSILON && det < EPSILON) {
	                        return null;
	                    }
	                }

	                vec3.sub(AO, origin, a);
	                var u = vec3.dot(vCross, AO) / det;
	                if (u < 0 || u > 1) {
	                    return null;
	                }

	                vec3.cross(vCross, eBA, AO);
	                var v = vec3.dot(dir, vCross) / det;

	                if (v < 0 || v > 1 || (u + v > 1)) {
	                    return null;
	                }

	                vec3.cross(vCross, eBA, eCA);
	                var t = -vec3.dot(AO, vCross) / det;

	                if (t < 0) {
	                    return null;
	                }

	                if (!out) {
	                    out = new Vector3();
	                }
	                if (barycenteric) {
	                    Vector3.set(barycenteric, (1 - u - v), u, v);
	                }
	                vec3.scaleAndAdd(out._array, origin, dir, t);

	                return out;
	            };
	        })(),

	        /**
	         * Apply an affine transform matrix to the ray
	         * @return {qtek.math.Matrix4} matrix
	         */
	        applyTransform: function(matrix) {
	            Vector3.add(this.direction, this.direction, this.origin);
	            Vector3.transformMat4(this.origin, this.origin, matrix);
	            Vector3.transformMat4(this.direction, this.direction, matrix);

	            Vector3.sub(this.direction, this.direction, this.origin);
	            Vector3.normalize(this.direction, this.direction);
	        },

	        /**
	         * Copy values from another ray
	         * @param {qtek.math.Ray} ray
	         */
	        copy: function(ray) {
	            Vector3.copy(this.origin, ray.origin);
	            Vector3.copy(this.direction, ray.direction);
	        },

	        /**
	         * Clone a new ray
	         * @return {qtek.math.Ray}
	         */
	        clone: function() {
	            var ray = new Ray();
	            ray.copy(this);
	            return ray;
	        }
	    };

	    module.exports = Ray;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Node = __webpack_require__(28);
	    var glenum = __webpack_require__(11);
	    var glinfo = __webpack_require__(10);

	    // Cache
	    var prevDrawID = 0;
	    var prevDrawIndicesBuffer = null;
	    var prevDrawIsUseIndices = true;

	    var currentDrawID;

	    var RenderInfo = function() {
	        this.triangleCount = 0;
	        this.vertexCount = 0;
	        this.drawCallCount = 0;
	    };

	    function VertexArrayObject(
	        availableAttributes,
	        availableAttributeSymbols,
	        indicesBuffer
	    ) {
	        this.availableAttributes = availableAttributes;
	        this.availableAttributeSymbols = availableAttributeSymbols;
	        this.indicesBuffer = indicesBuffer;

	        this.vao = null;
	    }
	    /**
	     * @constructor qtek.Renderable
	     * @extends qtek.Node
	     */
	    var Renderable = Node.extend(
	    /** @lends qtek.Renderable# */
	    {
	        /**
	         * @type {qtek.Material}
	         */
	        material: null,

	        /**
	         * @type {qtek.Geometry}
	         */
	        geometry: null,

	        /**
	         * @type {number}
	         */
	        mode: glenum.TRIANGLES,

	        _drawCache: null,

	        _renderInfo: null
	    }, function() {
	        this._drawCache = {};
	        this._renderInfo = new RenderInfo();
	    },
	    /** @lends qtek.Renderable.prototype */
	    {

	        /**
	         * Render order, Nodes with smaller value renders before nodes with larger values.
	         * @type {Number}
	         */
	        renderOrder: 0,
	        /**
	         * Used when mode is LINES, LINE_STRIP or LINE_LOOP
	         * @type {number}
	         */
	        lineWidth: 1,

	        /**
	         * @type {boolean}
	         */
	        culling: true,
	        /**
	         * @type {number}
	         */
	        cullFace: glenum.BACK,
	        /**
	         * @type {number}
	         */
	        frontFace: glenum.CCW,

	        /**
	         * Software frustum culling
	         * @type {boolean}
	         */
	        frustumCulling: true,
	        /**
	         * @type {boolean}
	         */
	        receiveShadow: true,
	        /**
	         * @type {boolean}
	         */
	        castShadow: true,
	        /**
	         * @type {boolean}
	         */
	        ignorePicking: false,

	        /**
	         * @return {boolean}
	         */
	        isRenderable: function() {
	            return this.geometry && this.material && !this.invisible
	                && this.geometry.vertexCount > 0;
	        },

	        /**
	         * Before render hook
	         * @type {Function}
	         * @memberOf qtek.Renderable
	         */
	        beforeRender: function (_gl) {},

	        /**
	         * Before render hook
	         * @type {Function}
	         * @memberOf qtek.Renderable
	         */
	        afterRender: function (_gl, renderStat) {},

	        getBoundingBox: function (filter, out) {
	            out = Node.prototype.getBoundingBox.call(this, filter, out);
	            if (this.geometry && this.geometry.boundingBox) {
	                out.union(this.geometry.boundingBox);
	            }

	            return out;
	        },

	        /**
	         * @param  {WebGLRenderingContext} _gl
	         * @param  {qtek.Shader} [shader] May use shader of other material if shader code are same
	         * @return {Object}
	         */
	        render: function (_gl, shader) {
	            // May use shader of other material if shader code are same
	            var shader = shader || this.material.shader;
	            var geometry = this.geometry;

	            var glDrawMode = this.mode;

	            var nVertex = geometry.vertexCount;
	            var isUseIndices = geometry.isUseIndices();

	            var uintExt = glinfo.getExtension(_gl, 'OES_element_index_uint');
	            var useUintExt = uintExt && nVertex > 0xffff;
	            var indicesType = useUintExt ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;

	            var vaoExt = glinfo.getExtension(_gl, 'OES_vertex_array_object');

	            var isStatic = !geometry.dynamic;

	            var renderInfo = this._renderInfo;
	            renderInfo.vertexCount = nVertex;
	            renderInfo.triangleCount = 0;
	            renderInfo.drawCallCount = 0;
	            // Draw each chunk
	            var drawHashChanged = false;
	            // Hash with shader id in case previous material has less attributes than next material
	            currentDrawID = _gl.__GLID__ + '-' + geometry.__GUID__ + '-' + shader.__GUID__;

	            if (currentDrawID !== prevDrawID) {
	                drawHashChanged = true;
	            }
	            else {
	                // The cache will be invalid in the following cases
	                // 1. Geometry is splitted to multiple chunks
	                // 2. VAO is enabled and is binded to null after render
	                // 3. Geometry needs update
	                if (
	                    ((nVertex > 0xffff && !uintExt) && isUseIndices)
	                 || (vaoExt && isStatic)
	                 || geometry._cache.isDirty()
	                ) {
	                    drawHashChanged = true;
	                }
	            }
	            prevDrawID = currentDrawID;

	            if (!drawHashChanged) {
	                // Direct draw
	                if (prevDrawIsUseIndices) {
	                    _gl.drawElements(glDrawMode, prevDrawIndicesBuffer.count, indicesType, 0);
	                    renderInfo.triangleCount = prevDrawIndicesBuffer.count / 3;
	                }
	                else {
	                    // FIXME Use vertex number in buffer
	                    // vertexCount may get the wrong value when geometry forget to mark dirty after update
	                    _gl.drawArrays(glDrawMode, 0, nVertex);
	                }
	                renderInfo.drawCallCount = 1;
	            }
	            else {
	                // Use the cache of static geometry
	                var vaoList = this._drawCache[currentDrawID];
	                if (!vaoList) {
	                    var chunks = geometry.getBufferChunks(_gl);
	                    if (!chunks) {  // Empty mesh
	                        return;
	                    }
	                    vaoList = [];
	                    for (var c = 0; c < chunks.length; c++) {
	                        var chunk = chunks[c];
	                        var attributeBuffers = chunk.attributeBuffers;
	                        var indicesBuffer = chunk.indicesBuffer;

	                        var availableAttributes = [];
	                        var availableAttributeSymbols = [];
	                        for (var a = 0; a < attributeBuffers.length; a++) {
	                            var attributeBufferInfo = attributeBuffers[a];
	                            var name = attributeBufferInfo.name;
	                            var semantic = attributeBufferInfo.semantic;
	                            var symbol;
	                            if (semantic) {
	                                var semanticInfo = shader.attribSemantics[semantic];
	                                symbol = semanticInfo && semanticInfo.symbol;
	                            }
	                            else {
	                                symbol = name;
	                            }
	                            if (symbol && shader.attributeTemplates[symbol]) {
	                                availableAttributes.push(attributeBufferInfo);
	                                availableAttributeSymbols.push(symbol);
	                            }
	                        }

	                        var vao = new VertexArrayObject(
	                            availableAttributes,
	                            availableAttributeSymbols,
	                            indicesBuffer
	                        );
	                        vaoList.push(vao);
	                    }
	                    if (isStatic) {
	                        this._drawCache[currentDrawID] = vaoList;
	                    }
	                }

	                for (var i = 0; i < vaoList.length; i++) {
	                    var vao = vaoList[i];
	                    var needsBindAttributes = true;

	                    // Create vertex object array cost a lot
	                    // So we don't use it on the dynamic object
	                    if (vaoExt && isStatic) {
	                        // Use vertex array object
	                        // http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html
	                        if (vao.vao == null) {
	                            vao.vao = vaoExt.createVertexArrayOES();
	                        } else {
	                            needsBindAttributes = false;
	                        }
	                        vaoExt.bindVertexArrayOES(vao.vao);
	                    }

	                    var availableAttributes = vao.availableAttributes;
	                    var indicesBuffer = vao.indicesBuffer;

	                    if (needsBindAttributes) {
	                        var locationList = shader.enableAttributes(_gl, vao.availableAttributeSymbols, (vaoExt && isStatic && vao.vao));
	                        // Setting attributes;
	                        for (var a = 0; a < availableAttributes.length; a++) {
	                            var location = locationList[a];
	                            if (location === -1) {
	                                continue;
	                            }
	                            var attributeBufferInfo = availableAttributes[a];
	                            var buffer = attributeBufferInfo.buffer;
	                            var size = attributeBufferInfo.size;
	                            var glType;
	                            switch (attributeBufferInfo.type) {
	                                case 'float':
	                                    glType = _gl.FLOAT;
	                                    break;
	                                case 'byte':
	                                    glType = _gl.BYTE;
	                                    break;
	                                case 'ubyte':
	                                    glType = _gl.UNSIGNED_BYTE;
	                                    break;
	                                case 'short':
	                                    glType = _gl.SHORT;
	                                    break;
	                                case 'ushort':
	                                    glType = _gl.UNSIGNED_SHORT;
	                                    break;
	                                default:
	                                    glType = _gl.FLOAT;
	                                    break;
	                            }

	                            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
	                            _gl.vertexAttribPointer(location, size, glType, false, 0, 0);
	                        }
	                    }
	                    if (
	                        glDrawMode == glenum.LINES ||
	                        glDrawMode == glenum.LINE_STRIP ||
	                        glDrawMode == glenum.LINE_LOOP
	                    ) {
	                        _gl.lineWidth(this.lineWidth);
	                    }

	                    prevDrawIndicesBuffer = indicesBuffer;
	                    prevDrawIsUseIndices = geometry.isUseIndices();
	                    // Do drawing
	                    if (prevDrawIsUseIndices) {
	                        if (needsBindAttributes) {
	                            _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
	                        }
	                        _gl.drawElements(glDrawMode, indicesBuffer.count, indicesType, 0);
	                        renderInfo.triangleCount += indicesBuffer.count / 3;
	                    } else {
	                        _gl.drawArrays(glDrawMode, 0, nVertex);
	                    }

	                    if (vaoExt && isStatic) {
	                        vaoExt.bindVertexArrayOES(null);
	                    }

	                    renderInfo.drawCallCount++;
	                }
	            }

	            return renderInfo;
	        },

	        /**
	         * Clone a new renderable
	         * @method
	         * @return {qtek.Renderable}
	         */
	        clone: (function() {
	            var properties = [
	                'castShadow', 'receiveShadow',
	                'mode', 'culling', 'cullFace', 'frontFace',
	                'frustumCulling'
	            ];
	            return function() {
	                var renderable = Node.prototype.clone.call(this);

	                renderable.geometry = this.geometry;
	                renderable.material = this.material;

	                for (var i = 0; i < properties.length; i++) {
	                    var name = properties[i];
	                    // Try not to overwrite the prototype property
	                    if (renderable[name] !== this[name]) {
	                        renderable[name] = this[name];
	                    }
	                }

	                return renderable;
	            };
	        })()
	    });

	    Renderable.beforeFrame = function() {
	        prevDrawID = 0;
	    };

	    // Enums
	    Renderable.POINTS = glenum.POINTS;
	    Renderable.LINES = glenum.LINES;
	    Renderable.LINE_LOOP = glenum.LINE_LOOP;
	    Renderable.LINE_STRIP = glenum.LINE_STRIP;
	    Renderable.TRIANGLES = glenum.TRIANGLES;
	    Renderable.TRIANGLE_STRIP = glenum.TRIANGLE_STRIP;
	    Renderable.TRIANGLE_FAN = glenum.TRIANGLE_FAN;

	    Renderable.BACK = glenum.BACK;
	    Renderable.FRONT = glenum.FRONT;
	    Renderable.FRONT_AND_BACK = glenum.FRONT_AND_BACK;
	    Renderable.CW = glenum.CW;
	    Renderable.CCW = glenum.CCW;

	    Renderable.RenderInfo = RenderInfo;

	    module.exports = Renderable;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var Vector3 = __webpack_require__(14);
	    var Quaternion = __webpack_require__(29);
	    var Matrix4 = __webpack_require__(16);
	    var glMatrix = __webpack_require__(15);
	    var BoundingBox = __webpack_require__(13);
	    var mat4 = glMatrix.mat4;

	    var nameId = 0;

	    /**
	     * @constructor qtek.Node
	     * @extends qtek.core.Base
	     */
	    var Node = Base.extend(
	    /** @lends qtek.Node# */
	    {
	        /**
	         * Scene node name
	         * @type {string}
	         */
	        name: '',

	        /**
	         * Position relative to its parent node. aka translation.
	         * @type {qtek.math.Vector3}
	         */
	        position: null,

	        /**
	         * Rotation relative to its parent node. Represented by a quaternion
	         * @type {qtek.math.Quaternion}
	         */
	        rotation: null,

	        /**
	         * Scale relative to its parent node
	         * @type {qtek.math.Vector3}
	         */
	        scale: null,

	        /**
	         * Affine transform matrix relative to its root scene.
	         * @type {qtek.math.Matrix4}
	         */
	        worldTransform: null,

	        /**
	         * Affine transform matrix relative to its parent node.
	         * Composited with position, rotation and scale.
	         * @type {qtek.math.Matrix4}
	         */
	        localTransform: null,

	        /**
	         * If the local transform is update from SRT(scale, rotation, translation, which is position here) each frame
	         * @type {boolean}
	         */
	        autoUpdateLocalTransform: true,

	        /**
	         * Parent of current scene node
	         * @type {?qtek.Node}
	         * @private
	         */
	        _parent: null,
	        /**
	         * The root scene mounted. Null if it is a isolated node
	         * @type {?qtek.Scene}
	         * @private
	         */
	        _scene: null,

	        _needsUpdateWorldTransform: true,

	        _inIterating: false,

	        // Depth for transparent queue sorting
	        __depth: 0

	    }, function () {

	        if (!this.name) {
	            this.name = (this.type || 'NODE') + '_' + (nameId++);
	        }

	        if (!this.position) {
	            this.position = new Vector3();
	        }
	        if (!this.rotation) {
	            this.rotation = new Quaternion();
	        }
	        if (!this.scale) {
	            this.scale = new Vector3(1, 1, 1);
	        }

	        this.worldTransform = new Matrix4();
	        this.localTransform = new Matrix4();

	        this._children = [];

	    },
	    /**@lends qtek.Node.prototype. */
	    {

	        /**
	         * If node and its chilren invisible
	         * @type {boolean}
	         * @memberOf qtek.Node
	         * @instance
	         */
	        invisible: false,

	        /**
	         * Return true if it is a renderable scene node, like Mesh and ParticleSystem
	         * @return {boolean}
	         */
	        isRenderable: function () {
	            return false;
	        },

	        /**
	         * Set the name of the scene node
	         * @param {string} name
	         */
	        setName: function (name) {
	            var scene = this._scene;
	            if (scene) {
	                var nodeRepository = scene._nodeRepository;
	                delete nodeRepository[this.name];
	                nodeRepository[name] = this;
	            }
	            this.name = name;
	        },

	        /**
	         * Add a child node
	         * @param {qtek.Node} node
	         */
	        add: function (node) {
	            if (this._inIterating) {
	                console.warn('Add operation can cause unpredictable error when in iterating');
	            }
	            var originalParent = node._parent;
	            if (originalParent === this) {
	                return;
	            }
	            if (originalParent) {
	                originalParent.remove(node);
	            }
	            node._parent = this;
	            this._children.push(node);

	            var scene = this._scene;
	            if (scene && scene !== node.scene) {
	                node.traverse(this._addSelfToScene, this);
	            }
	            // Mark children needs update transform
	            // In case child are remove and added again after parent moved
	            node._needsUpdateWorldTransform = true;
	        },

	        /**
	         * Remove the given child scene node
	         * @param {qtek.Node} node
	         */
	        remove: function (node) {
	            if (this._inIterating) {
	                console.warn('Remove operation can cause unpredictable error when in iterating');
	            }
	            var children = this._children;
	            var idx = children.indexOf(node);
	            if (idx < 0) {
	                return;
	            }

	            children.splice(idx, 1);
	            node._parent = null;

	            if (this._scene) {
	                node.traverse(this._removeSelfFromScene, this);
	            }
	        },

	        /**
	         * Remove all children
	         */
	        removeAll: function () {
	            var children = this._children;

	            for (var idx = 0; idx < children.length; idx++) {
	                children[idx]._parent = null;

	                if (this._scene) {
	                    children[idx].traverse(this._removeSelfFromScene, this);
	                }
	            }

	            this._children = [];
	        },

	        /**
	         * Get the scene mounted
	         * @return {qtek.Scene}
	         */
	        getScene: function () {
	            return this._scene;
	        },

	        /**
	         * Get parent node
	         * @return {qtek.Scene}
	         */
	        getParent: function () {
	            return this._parent;
	        },

	        _removeSelfFromScene: function (descendant) {
	            descendant._scene.removeFromScene(descendant);
	            descendant._scene = null;
	        },

	        _addSelfToScene: function (descendant) {
	            this._scene.addToScene(descendant);
	            descendant._scene = this._scene;
	        },

	        /**
	         * Return true if it is ancestor of the given scene node
	         * @param {qtek.Node} node
	         */
	        isAncestor: function (node) {
	            var parent = node._parent;
	            while(parent) {
	                if (parent === this) {
	                    return true;
	                }
	                parent = parent._parent;
	            }
	            return false;
	        },

	        /**
	         * Get a new created array of all its children nodes
	         * @return {qtek.Node[]}
	         */
	        children: function () {
	            return this._children.slice();
	        },

	        childAt: function (idx) {
	            return this._children[idx];
	        },

	        /**
	         * Get first child with the given name
	         * @param {string} name
	         * @return {qtek.Node}
	         */
	        getChildByName: function (name) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                if (children[i].name === name) {
	                    return children[i];
	                }
	            }
	        },

	        /**
	         * Get first descendant have the given name
	         * @param {string} name
	         * @return {qtek.Node}
	         */
	        getDescendantByName: function (name) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                if (child.name === name) {
	                    return child;
	                } else {
	                    var res = child.getDescendantByName(name);
	                    if (res) {
	                        return res;
	                    }
	                }
	            }
	        },

	        /**
	         * Query descendant node by path
	         * @param {string} path
	         * @return {qtek.Node}
	         */
	        queryNode: function (path) {
	            if (!path) {
	                return;
	            }
	            // TODO Name have slash ?
	            var pathArr = path.split('/');
	            var current = this;
	            for (var i = 0; i < pathArr.length; i++) {
	                var name = pathArr[i];
	                // Skip empty
	                if (!name) {
	                    continue;
	                }
	                var found = false;
	                var children = current._children;
	                for (var j = 0; j < children.length; j++) {
	                    var child = children[j];
	                    if (child.name === name) {
	                        current = child;
	                        found = true;
	                        break;
	                    }
	                }
	                // Early return if not found
	                if (!found) {
	                    return;
	                }
	            }

	            return current;
	        },

	        /**
	         * Get query path, relative to rootNode(default is scene)
	         * @return {string}
	         */
	        getPath: function (rootNode) {
	            if (!this._parent) {
	                return '/';
	            }

	            var current = this._parent;
	            var path = this.name;
	            while (current._parent) {
	                path = current.name + '/' + path;
	                if (current._parent == rootNode) {
	                    break;
	                }
	                current = current._parent;
	            }
	            if (!current._parent && rootNode) {
	                return null;
	            }
	            return path;
	        },

	        /**
	         * Depth first traverse all its descendant scene nodes and
	         * @param {Function} callback
	         * @param {Node} [context]
	         * @param {Function} [ctor]
	         */
	        traverse: function (callback, context, ctor) {

	            this._inIterating = true;

	            if (ctor == null || this.constructor === ctor) {
	                callback.call(context, this);
	            }
	            var _children = this._children;
	            for(var i = 0, len = _children.length; i < len; i++) {
	                _children[i].traverse(callback, context, ctor);
	            }

	            this._inIterating = false;
	        },

	        eachChild: function (callback, context, ctor) {
	            this._inIterating = true;

	            var _children = this._children;
	            var noCtor = ctor == null;
	            for(var i = 0, len = _children.length; i < len; i++) {
	                var child = _children[i];
	                if (noCtor || child.constructor === ctor) {
	                    callback.call(context, child, i);
	                }
	            }

	            this._inIterating = false;
	        },

	        /**
	         * Set the local transform and decompose to SRT
	         * @param {qtek.math.Matrix4} matrix
	         */
	        setLocalTransform: function (matrix) {
	            mat4.copy(this.localTransform._array, matrix._array);
	            this.decomposeLocalTransform();
	        },

	        /**
	         * Decompose the local transform to SRT
	         */
	        decomposeLocalTransform: function (keepScale) {
	            var scale = !keepScale ? this.scale: null;
	            this.localTransform.decomposeMatrix(scale, this.rotation, this.position);
	        },

	        /**
	         * Set the world transform and decompose to SRT
	         * @param {qtek.math.Matrix4} matrix
	         */
	        setWorldTransform: function (matrix) {
	            mat4.copy(this.worldTransform._array, matrix._array);
	            this.decomposeWorldTransform();
	        },

	        /**
	         * Decompose the world transform to SRT
	         * @method
	         */
	        decomposeWorldTransform: (function () {

	            var tmp = mat4.create();

	            return function (keepScale) {
	                var localTransform = this.localTransform;
	                var worldTransform = this.worldTransform;
	                // Assume world transform is updated
	                if (this._parent) {
	                    mat4.invert(tmp, this._parent.worldTransform._array);
	                    mat4.multiply(localTransform._array, tmp, worldTransform._array);
	                } else {
	                    mat4.copy(localTransform._array, worldTransform._array);
	                }
	                var scale = !keepScale ? this.scale: null;
	                localTransform.decomposeMatrix(scale, this.rotation, this.position);
	            };
	        })(),

	        transformNeedsUpdate: function () {
	            return this.position._dirty
	                || this.rotation._dirty
	                || this.scale._dirty;
	        },

	        /**
	         * Update local transform from SRT
	         * Notice that local transform will not be updated if _dirty mark of position, rotation, scale is all false
	         */
	        updateLocalTransform: function () {
	            var position = this.position;
	            var rotation = this.rotation;
	            var scale = this.scale;

	            if (this.transformNeedsUpdate()) {
	                var m = this.localTransform._array;

	                // Transform order, scale->rotation->position
	                mat4.fromRotationTranslation(m, rotation._array, position._array);

	                mat4.scale(m, m, scale._array);

	                rotation._dirty = false;
	                scale._dirty = false;
	                position._dirty = false;

	                this._needsUpdateWorldTransform = true;
	            }
	        },

	        /**
	         * Update world transform, assume its parent world transform have been updated
	         */
	        updateWorldTransform: function () {
	            var localTransform = this.localTransform._array;
	            var worldTransform = this.worldTransform._array;
	            if (this._parent) {
	                mat4.multiplyAffine(
	                    worldTransform,
	                    this._parent.worldTransform._array,
	                    localTransform
	                );
	            }
	            else {
	                mat4.copy(worldTransform, localTransform);
	            }
	        },

	        /**
	         * Update local transform and world transform recursively
	         * @param {boolean} forceUpdateWorld
	         */
	        update: function (forceUpdateWorld) {
	            if (this.autoUpdateLocalTransform) {
	                this.updateLocalTransform();
	            }
	            else {
	                // Transform is manually setted
	                forceUpdateWorld = true;
	            }

	            if (forceUpdateWorld || this._needsUpdateWorldTransform) {
	                this.updateWorldTransform();
	                forceUpdateWorld = true;
	                this._needsUpdateWorldTransform = false;
	            }

	            var children = this._children;
	            for(var i = 0, len = children.length; i < len; i++) {
	                children[i].update(forceUpdateWorld);
	            }
	        },

	        /**
	         * Get bounding box of node
	         * @param  {Function} [filter]
	         * @param  {qtek.math.BoundingBox} [out]
	         * @return {qtek.math.BoundingBox}
	         */
	        getBoundingBox: (function () {

	            function defaultFilter (el) {
	                return !el.invisible;
	            }
	            return function (filter, out) {
	                out = out || new BoundingBox();
	                filter = filter || defaultFilter;

	                var children = this._children;
	                if (children.length === 0) {
	                    out.max.set(-Infinity, -Infinity, -Infinity);
	                    out.min.set(Infinity, Infinity, Infinity);
	                }

	                var tmpBBox = new BoundingBox();
	                for (var i = 0; i < children.length; i++) {
	                    var child = children[i];
	                    if (!filter(child)) {
	                        continue;
	                    }
	                    child.getBoundingBox(filter, tmpBBox);
	                    child.updateLocalTransform();
	                    if (tmpBBox.isFinite()) {
	                        tmpBBox.applyTransform(child.localTransform);
	                    }
	                    if (i === 0) {
	                        out.copy(tmpBBox);
	                    }
	                    else {
	                        out.union(tmpBBox);
	                    }

	                }

	                return out;
	            };
	        })(),

	        /**
	         * Get world position, extracted from world transform
	         * @param  {qtek.math.Vector3} [out]
	         * @return {qtek.math.Vector3}
	         */
	        getWorldPosition: function (out) {
	            // TODO If update when get worldTransform
	            if (this.transformNeedsUpdate()) {
	                // Find the root node which transform needs update;
	                var rootNodeDirty = this;
	                while (rootNodeDirty && rootNodeDirty.getParent()
	                    && rootNodeDirty.getParent().transformNeedsUpdate()
	                ) {
	                    rootNodeDirty = rootNodeDirty.getParent();
	                }
	                rootNodeDirty.update();
	            }
	            var m = this.worldTransform._array;
	            if (out) {
	                var arr = out._array;
	                arr[0] = m[12];
	                arr[1] = m[13];
	                arr[2] = m[14];
	                return out;
	            }
	            else {
	                return new Vector3(m[12], m[13], m[14]);
	            }
	        },

	        // TODO Set world transform

	        /**
	         * Clone a new node
	         * @return {Node}
	         */
	        clone: function () {
	            var node = new this.constructor();
	            var children = this._children;

	            node.setName(this.name);
	            node.position.copy(this.position);
	            node.rotation.copy(this.rotation);
	            node.scale.copy(this.scale);

	            for (var i = 0; i < children.length; i++) {
	                node.add(children[i].clone());
	            }
	            return node;
	        },

	        /**
	         * Rotate the node around a axis by angle degrees, axis passes through point
	         * @param {qtek.math.Vector3} point Center point
	         * @param {qtek.math.Vector3} axis  Center axis
	         * @param {number}       angle Rotation angle
	         * @see http://docs.unity3d.com/Documentation/ScriptReference/Transform.RotateAround.html
	         * @method
	         */
	        rotateAround: (function () {
	            var v = new Vector3();
	            var RTMatrix = new Matrix4();

	            // TODO improve performance
	            return function (point, axis, angle) {

	                v.copy(this.position).subtract(point);

	                var localTransform = this.localTransform;
	                localTransform.identity();
	                // parent node
	                localTransform.translate(point);
	                localTransform.rotate(angle, axis);

	                RTMatrix.fromRotationTranslation(this.rotation, v);
	                localTransform.multiply(RTMatrix);
	                localTransform.scale(this.scale);

	                this.decomposeLocalTransform();
	                this._needsUpdateWorldTransform = true;
	            };
	        })(),

	        /**
	         * @param {qtek.math.Vector3} target
	         * @param {qtek.math.Vector3} [up]
	         * @see http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml
	         * @method
	         */
	        // TODO world space ?
	        lookAt: (function () {
	            var m = new Matrix4();
	            return function (target, up) {
	                m.lookAt(this.position, target, up || this.localTransform.y).invert();
	                this.setLocalTransform(m);
	            };
	        })()
	    });

	    module.exports = Node;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var quat = glMatrix.quat;

	    /**
	     * @constructor
	     * @alias qtek.math.Quaternion
	     * @param {number} x
	     * @param {number} y
	     * @param {number} z
	     * @param {number} w
	     */
	    var Quaternion = function (x, y, z, w) {

	        x = x || 0;
	        y = y || 0;
	        z = z || 0;
	        w = w === undefined ? 1 : w;

	        /**
	         * Storage of Quaternion, read and write of x, y, z, w will change the values in _array
	         * All methods also operate on the _array instead of x, y, z, w components
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = quat.fromValues(x, y, z, w);

	        /**
	         * Dirty flag is used by the Node to determine
	         * if the matrix is updated to latest
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Quaternion.prototype = {

	        constructor: Quaternion,

	        /**
	         * Add b to self
	         * @param  {qtek.math.Quaternion} b
	         * @return {qtek.math.Quaternion}
	         */
	        add: function (b) {
	            quat.add(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculate the w component from x, y, z component
	         * @return {qtek.math.Quaternion}
	         */
	        calculateW: function () {
	            quat.calculateW(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x, y and z components
	         * @param  {number}  x
	         * @param  {number}  y
	         * @param  {number}  z
	         * @param  {number}  w
	         * @return {qtek.math.Quaternion}
	         */
	        set: function (x, y, z, w) {
	            this._array[0] = x;
	            this._array[1] = y;
	            this._array[2] = z;
	            this._array[3] = w;
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x, y, z and w components from array
	         * @param  {Float32Array|number[]} arr
	         * @return {qtek.math.Quaternion}
	         */
	        setArray: function (arr) {
	            this._array[0] = arr[0];
	            this._array[1] = arr[1];
	            this._array[2] = arr[2];
	            this._array[3] = arr[3];

	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new Quaternion
	         * @return {qtek.math.Quaternion}
	         */
	        clone: function () {
	            return new Quaternion(this.x, this.y, this.z, this.w);
	        },

	        /**
	         * Calculates the conjugate of self If the quaternion is normalized,
	         * this function is faster than invert and produces the same result.
	         *
	         * @return {qtek.math.Quaternion}
	         */
	        conjugate: function () {
	            quat.conjugate(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Quaternion} b
	         * @return {qtek.math.Quaternion}
	         */
	        copy: function (b) {
	            quat.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Dot product of self and b
	         * @param  {qtek.math.Quaternion} b
	         * @return {number}
	         */
	        dot: function (b) {
	            return quat.dot(this._array, b._array);
	        },

	        /**
	         * Set from the given 3x3 rotation matrix
	         * @param  {qtek.math.Matrix3} m
	         * @return {qtek.math.Quaternion}
	         */
	        fromMat3: function (m) {
	            quat.fromMat3(this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set from the given 4x4 rotation matrix
	         * The 4th column and 4th row will be droped
	         * @param  {qtek.math.Matrix4} m
	         * @return {qtek.math.Quaternion}
	         */
	        fromMat4: (function () {
	            var mat3 = glMatrix.mat3;
	            var m3 = mat3.create();
	            return function (m) {
	                mat3.fromMat4(m3, m._array);
	                // TODO Not like mat4, mat3 in glmatrix seems to be row-based
	                mat3.transpose(m3, m3);
	                quat.fromMat3(this._array, m3);
	                this._dirty = true;
	                return this;
	            };
	        })(),

	        /**
	         * Set to identity quaternion
	         * @return {qtek.math.Quaternion}
	         */
	        identity: function () {
	            quat.identity(this._array);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Invert self
	         * @return {qtek.math.Quaternion}
	         */
	        invert: function () {
	            quat.invert(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Alias of length
	         * @return {number}
	         */
	        len: function () {
	            return quat.len(this._array);
	        },

	        /**
	         * Calculate the length
	         * @return {number}
	         */
	        length: function () {
	            return quat.length(this._array);
	        },

	        /**
	         * Linear interpolation between a and b
	         * @param  {qtek.math.Quaternion} a
	         * @param  {qtek.math.Quaternion} b
	         * @param  {number}  t
	         * @return {qtek.math.Quaternion}
	         */
	        lerp: function (a, b, t) {
	            quat.lerp(this._array, a._array, b._array, t);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiply
	         * @param  {qtek.math.Quaternion} b
	         * @return {qtek.math.Quaternion}
	         */
	        mul: function (b) {
	            quat.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiplyLeft
	         * @param  {qtek.math.Quaternion} a
	         * @return {qtek.math.Quaternion}
	         */
	        mulLeft: function (a) {
	            quat.multiply(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Mutiply self and b
	         * @param  {qtek.math.Quaternion} b
	         * @return {qtek.math.Quaternion}
	         */
	        multiply: function (b) {
	            quat.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Mutiply a and self
	         * Quaternion mutiply is not commutative, so the result of mutiplyLeft is different with multiply.
	         * @param  {qtek.math.Quaternion} a
	         * @return {qtek.math.Quaternion}
	         */
	        multiplyLeft: function (a) {
	            quat.multiply(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Normalize self
	         * @return {qtek.math.Quaternion}
	         */
	        normalize: function () {
	            quat.normalize(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian about X axis
	         * @param {number} rad
	         * @return {qtek.math.Quaternion}
	         */
	        rotateX: function (rad) {
	            quat.rotateX(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian about Y axis
	         * @param {number} rad
	         * @return {qtek.math.Quaternion}
	         */
	        rotateY: function (rad) {
	            quat.rotateY(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian about Z axis
	         * @param {number} rad
	         * @return {qtek.math.Quaternion}
	         */
	        rotateZ: function (rad) {
	            quat.rotateZ(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Sets self to represent the shortest rotation from Vector3 a to Vector3 b.
	         * a and b needs to be normalized
	         * @param  {qtek.math.Vector3} a
	         * @param  {qtek.math.Vector3} b
	         * @return {qtek.math.Quaternion}
	         */
	        rotationTo: function (a, b) {
	            quat.rotationTo(this._array, a._array, b._array);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Sets self with values corresponding to the given axes
	         * @param {qtek.math.Vector3} view
	         * @param {qtek.math.Vector3} right
	         * @param {qtek.math.Vector3} up
	         * @return {qtek.math.Quaternion}
	         */
	        setAxes: function (view, right, up) {
	            quat.setAxes(this._array, view._array, right._array, up._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Sets self with a rotation axis and rotation angle
	         * @param {qtek.math.Vector3} axis
	         * @param {number} rad
	         * @return {qtek.math.Quaternion}
	         */
	        setAxisAngle: function (axis, rad) {
	            quat.setAxisAngle(this._array, axis._array, rad);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Perform spherical linear interpolation between a and b
	         * @param  {qtek.math.Quaternion} a
	         * @param  {qtek.math.Quaternion} b
	         * @param  {number} t
	         * @return {qtek.math.Quaternion}
	         */
	        slerp: function (a, b, t) {
	            quat.slerp(this._array, a._array, b._array, t);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for squaredLength
	         * @return {number}
	         */
	        sqrLen: function () {
	            return quat.sqrLen(this._array);
	        },

	        /**
	         * Squared length of self
	         * @return {number}
	         */
	        squaredLength: function () {
	            return quat.squaredLength(this._array);
	        },

	        /**
	         * Set from euler
	         * @param {qtek.math.Vector3} v
	         * @param {String} order
	         */
	        fromEuler: function (v, order) {
	            return Quaternion.fromEuler(this, v, order);
	        },

	        toString: function () {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    var defineProperty = Object.defineProperty;
	    // Getter and Setter
	    if (defineProperty) {

	        var proto = Quaternion.prototype;
	        /**
	         * @name x
	         * @type {number}
	         * @memberOf qtek.math.Quaternion
	         * @instance
	         */
	        defineProperty(proto, 'x', {
	            get: function () {
	                return this._array[0];
	            },
	            set: function (value) {
	                this._array[0] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name y
	         * @type {number}
	         * @memberOf qtek.math.Quaternion
	         * @instance
	         */
	        defineProperty(proto, 'y', {
	            get: function () {
	                return this._array[1];
	            },
	            set: function (value) {
	                this._array[1] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name z
	         * @type {number}
	         * @memberOf qtek.math.Quaternion
	         * @instance
	         */
	        defineProperty(proto, 'z', {
	            get: function () {
	                return this._array[2];
	            },
	            set: function (value) {
	                this._array[2] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name w
	         * @type {number}
	         * @memberOf qtek.math.Quaternion
	         * @instance
	         */
	        defineProperty(proto, 'w', {
	            get: function () {
	                return this._array[3];
	            },
	            set: function (value) {
	                this._array[3] = value;
	                this._dirty = true;
	            }
	        });
	    }

	    // Supply methods that are not in place

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {qtek.math.Quaternion} b
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.add = function (out, a, b) {
	        quat.add(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {number}     x
	     * @param  {number}     y
	     * @param  {number}     z
	     * @param  {number}     w
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.set = function (out, x, y, z, w) {
	        quat.set(out._array, x, y, z, w);
	        out._dirty = true;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} b
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.copy = function (out, b) {
	        quat.copy(out._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.calculateW = function (out, a) {
	        quat.calculateW(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.conjugate = function (out, a) {
	        quat.conjugate(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.identity = function (out) {
	        quat.identity(out._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.invert = function (out, a) {
	        quat.invert(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} a
	     * @param  {qtek.math.Quaternion} b
	     * @return {number}
	     */
	    Quaternion.dot = function (a, b) {
	        return quat.dot(a._array, b._array);
	    };

	    /**
	     * @param  {qtek.math.Quaternion} a
	     * @return {number}
	     */
	    Quaternion.len = function (a) {
	        return quat.length(a._array);
	    };

	    // Quaternion.length = Quaternion.len;

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {qtek.math.Quaternion} b
	     * @param  {number}     t
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.lerp = function (out, a, b, t) {
	        quat.lerp(out._array, a._array, b._array, t);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {qtek.math.Quaternion} b
	     * @param  {number}     t
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.slerp = function (out, a, b, t) {
	        quat.slerp(out._array, a._array, b._array, t);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {qtek.math.Quaternion} b
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.mul = function (out, a, b) {
	        quat.multiply(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {qtek.math.Quaternion} b
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.multiply = Quaternion.mul;

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {number}     rad
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.rotateX = function (out, a, rad) {
	        quat.rotateX(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {number}     rad
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.rotateY = function (out, a, rad) {
	        quat.rotateY(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @param  {number}     rad
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.rotateZ = function (out, a, rad) {
	        quat.rotateZ(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Vector3}    axis
	     * @param  {number}     rad
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.setAxisAngle = function (out, axis, rad) {
	        quat.setAxisAngle(out._array, axis._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Quaternion} a
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.normalize = function (out, a) {
	        quat.normalize(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} a
	     * @return {number}
	     */
	    Quaternion.sqrLen = function (a) {
	        return quat.sqrLen(a._array);
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Quaternion} a
	     * @return {number}
	     */
	    Quaternion.squaredLength = Quaternion.sqrLen;

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Matrix3}    m
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.fromMat3 = function (out, m) {
	        quat.fromMat3(out._array, m._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Vector3}    view
	     * @param  {qtek.math.Vector3}    right
	     * @param  {qtek.math.Vector3}    up
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.setAxes = function (out, view, right, up) {
	        quat.setAxes(out._array, view._array, right._array, up._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Quaternion} out
	     * @param  {qtek.math.Vector3}    a
	     * @param  {qtek.math.Vector3}    b
	     * @return {qtek.math.Quaternion}
	     */
	    Quaternion.rotationTo = function (out, a, b) {
	        quat.rotationTo(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * Set quaternion from euler
	     * @param {qtek.math.Quaternion} out
	     * @param {qtek.math.Vector3} v
	     * @param {String} order
	     */
	    Quaternion.fromEuler = function (out, v, order) {

	        out._dirty = true;

	        v = v._array;
	        var target = out._array;
	        var c1 = Math.cos(v[0] / 2);
	        var c2 = Math.cos(v[1] / 2);
	        var c3 = Math.cos(v[2] / 2);
	        var s1 = Math.sin(v[0] / 2);
	        var s2 = Math.sin(v[1] / 2);
	        var s3 = Math.sin(v[2] / 2);

	        var order = (order || 'XYZ').toUpperCase();

	        // http://www.mathworks.com/matlabcentral/fileexchange/
	        //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
	        //  content/SpinCalc.m

	        switch (order) {
	            case 'XYZ':
	                target[0] = s1 * c2 * c3 + c1 * s2 * s3;
	                target[1] = c1 * s2 * c3 - s1 * c2 * s3;
	                target[2] = c1 * c2 * s3 + s1 * s2 * c3;
	                target[3] = c1 * c2 * c3 - s1 * s2 * s3;
	                break;
	            case 'YXZ':
	                target[0] = s1 * c2 * c3 + c1 * s2 * s3;
	                target[1] = c1 * s2 * c3 - s1 * c2 * s3;
	                target[2] = c1 * c2 * s3 - s1 * s2 * c3;
	                target[3] = c1 * c2 * c3 + s1 * s2 * s3;
	                break;
	            case 'ZXY':
	                target[0] = s1 * c2 * c3 - c1 * s2 * s3;
	                target[1] = c1 * s2 * c3 + s1 * c2 * s3;
	                target[2] = c1 * c2 * s3 + s1 * s2 * c3;
	                target[3] = c1 * c2 * c3 - s1 * s2 * s3;
	                break;
	            case 'ZYX':
	                target[0] = s1 * c2 * c3 - c1 * s2 * s3;
	                target[1] = c1 * s2 * c3 + s1 * c2 * s3;
	                target[2] = c1 * c2 * s3 - s1 * s2 * c3;
	                target[3] = c1 * c2 * c3 + s1 * s2 * s3;
	                break;
	            case 'YZX':
	                target[0] = s1 * c2 * c3 + c1 * s2 * s3;
	                target[1] = c1 * s2 * c3 + s1 * c2 * s3;
	                target[2] = c1 * c2 * s3 - s1 * s2 * c3;
	                target[3] = c1 * c2 * c3 - s1 * s2 * s3;
	                break;
	            case 'XZY':
	                target[0] = s1 * c2 * c3 - c1 * s2 * s3;
	                target[1] = c1 * s2 * c3 - s1 * c2 * s3;
	                target[2] = c1 * c2 * s3 + s1 * s2 * c3;
	                target[3] = c1 * c2 * c3 + s1 * s2 * s3;
	                break;
	        }
	    };

	    module.exports = Quaternion;


/***/ },
/* 30 */
/***/ function(module, exports) {

	

	    module.exports = (typeof window !== 'undefined' &&
	                                    (window.requestAnimationFrame
	                                    || window.msRequestAnimationFrame
	                                    || window.mozRequestAnimationFrame
	                                    || window.webkitRequestAnimationFrame))
	                                || function (func) {
	                                    setTimeout(func, 16);
	                                };



/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var Mesh = __webpack_require__(32);
	var Renderer = __webpack_require__(5);
	var Texture2D = __webpack_require__(33);
	var Texture = __webpack_require__(21);
	var Shader = __webpack_require__(18);
	var Material = __webpack_require__(20);
	var Node3D = __webpack_require__(28);
	var StaticGeometry = __webpack_require__(35);
	var echarts = __webpack_require__(2);
	var Scene = __webpack_require__(37);
	var LRUCache = __webpack_require__(39);
	var textureUtil = __webpack_require__(40);
	var EChartsSurface = __webpack_require__(54);
	var AmbientCubemapLight = __webpack_require__(55);
	var AmbientSHLight = __webpack_require__(66);
	var shUtil = __webpack_require__(67);
	var retrieve = __webpack_require__(69);

	var animatableMixin = __webpack_require__(70);
	echarts.util.extend(Node3D.prototype, animatableMixin);

	// Some common shaders
	Shader.import(__webpack_require__(76));
	Shader.import(__webpack_require__(77));
	Shader.import(__webpack_require__(78));
	Shader.import(__webpack_require__(79));
	Shader.import(__webpack_require__(80));

	function isValueNone(value) {
	    return !value || value === 'none';
	}

	function isValueImage(value) {
	    return value instanceof HTMLCanvasElement
	        || value instanceof HTMLImageElement
	        || value instanceof Image;
	}

	function isECharts(value) {
	    return value.getZr && value.setOption;
	}

	// Overwrite addToScene and removeFromScene
	var oldAddToScene = Scene.prototype.addToScene;
	var oldRemoveFromScene = Scene.prototype.removeFromScene;

	Scene.prototype.addToScene = function (node) {
	    oldAddToScene.call(this, node);

	    if (this.__zr) {
	        var zr = this.__zr;
	        node.traverse(function (child) {
	            child.__zr = zr;
	            if (child.addAnimatorsToZr) {
	                child.addAnimatorsToZr(zr);
	            }
	        })
	    }
	};

	Scene.prototype.removeFromScene = function (node) {
	    oldRemoveFromScene.call(this, node);

	    node.traverse(function (child) {
	        var zr = child.__zr;
	        child.__zr = null;
	        if (zr && child.removeAnimatorsFromZr) {
	            child.removeAnimatorsFromZr(zr);
	        }
	    });
	};

	/**
	 * @param {string} textureName
	 * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [textureOpts]
	 */
	Material.prototype.setTextureImage = function (textureName, imgValue, api, textureOpts) {
	    if (api == null) {
	        api = textureOpts;
	    }

	    if (!this.shader) {
	        return;
	    }

	    var zr = api.getZr();
	    var material = this;
	    var texture;
	    // disableTexture first
	    material.shader.disableTexture(textureName);
	    if (!isValueNone(imgValue)) {
	        texture = graphicGL.loadTexture(imgValue, api, textureOpts, function (texture) {
	            material.shader.enableTexture(textureName);
	            material.set(textureName, texture);
	            zr && zr.refresh();
	        });
	    }

	    return texture;
	};

	var graphicGL = {};

	graphicGL.Renderer = Renderer;

	graphicGL.Node = Node3D;

	graphicGL.Mesh = Mesh;

	graphicGL.Shader = Shader;

	graphicGL.Material = Material;

	graphicGL.Texture = Texture;

	graphicGL.Texture2D = Texture2D;

	// Geometries
	graphicGL.Geometry = StaticGeometry;

	graphicGL.SphereGeometry = __webpack_require__(50);

	graphicGL.PlaneGeometry = __webpack_require__(59);

	graphicGL.CubeGeometry = __webpack_require__(62);

	// Lights
	graphicGL.AmbientLight = __webpack_require__(81);
	graphicGL.DirectionalLight = __webpack_require__(82);
	graphicGL.PointLight = __webpack_require__(83);
	graphicGL.SpotLight = __webpack_require__(84);

	// Cameras
	graphicGL.PerspectiveCamera = __webpack_require__(44);
	graphicGL.OrthographicCamera = __webpack_require__(58);

	// Math
	graphicGL.Vector2 = __webpack_require__(22);
	graphicGL.Vector3 = __webpack_require__(14);
	graphicGL.Vector4 = __webpack_require__(85);

	graphicGL.Quaternion = __webpack_require__(29);

	graphicGL.Matrix2 = __webpack_require__(86);
	graphicGL.Matrix2d = __webpack_require__(87);
	graphicGL.Matrix3 = __webpack_require__(88);
	graphicGL.Matrix4 = __webpack_require__(16);

	graphicGL.Plane = __webpack_require__(47);
	graphicGL.Ray = __webpack_require__(26);
	graphicGL.BoundingBox = __webpack_require__(13);
	graphicGL.Frustum = __webpack_require__(46);

	// Texture utilities

	var blankImage = textureUtil.createBlank('rgba(255,255,255,0)');
	/**
	 * @param {string|HTMLImageElement|HTMLCanvasElement} imgValue
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [textureOpts]
	 * @param {Function} cb
	 */
	// TODO Promise
	graphicGL.loadTexture = function (imgValue, api, textureOpts, cb) {
	    if (typeof textureOpts === 'function') {
	        cb = textureOpts;
	        textureOpts = {};
	    }

	    var keys = Object.keys(textureOpts).sort();
	    var prefix = '';
	    for (var i = 0; i < keys.length; i++) {
	        prefix += keys[i] + '_' + textureOpts[keys[i]] + '_';
	    }

	    var textureCache = api.__textureCache = api.__textureCache || new LRUCache(20);

	    if (isECharts(imgValue)) {
	        var id = imgValue.__textureid__;
	        var textureObj = textureCache.get(prefix + id);
	        if (!textureObj) {
	            var surface = new EChartsSurface(imgValue);
	            surface.onupdate = function () {
	                api.getZr().refresh();
	            };
	            textureObj = {
	                texture: surface.getTexture()
	            };
	            for (var i = 0; i < keys.length; i++) {
	                textureObj.texture[keys[i]] = textureOpts[keys[i]];
	            }
	            id = imgValue.__textureid__ || '__ecgl_ec__' + textureObj.texture.__GUID__;
	            imgValue.__textureid__ = id;
	            textureCache.put(prefix + id, textureObj);
	            // TODO Next tick?
	            cb && cb(textureObj.texture);
	        }
	        else {
	            textureObj.texture.surface.setECharts(imgValue);

	            cb && cb(textureObj.texture);
	        }
	        return textureObj.texture;
	    }
	    else if (isValueImage(imgValue)) {
	        var id = imgValue.__textureid__;
	        var textureObj = textureCache.get(prefix + id);
	        if (!textureObj) {
	            textureObj = {
	                texture: new graphicGL.Texture2D({
	                    image: imgValue
	                })
	            };
	            for (var i = 0; i < keys.length; i++) {
	                textureObj.texture[keys[i]] = textureOpts[keys[i]];
	            }
	            id = imgValue.__textureid__ || '__ecgl_image__' + textureObj.texture.__GUID__;
	            imgValue.__textureid__ = id;
	            textureCache.put(prefix + id, textureObj);
	            // TODO Next tick?
	            cb && cb(textureObj.texture);
	        }
	        return textureObj.texture;
	    }
	    else {
	        var textureObj = textureCache.get(prefix + imgValue);
	        if (textureObj) {
	            if (textureObj.callbacks) {
	                // Add to pending callbacks
	                textureObj.callbacks.push(cb);
	            }
	            else {
	                // TODO Next tick?
	                cb && cb(textureObj.texture);
	            }
	        }
	        else {
	            if (imgValue.match(/.hdr$/)) {
	                textureObj = {
	                    callbacks: [cb]
	                };
	                var texture = textureUtil.loadTexture(imgValue, {
	                    exposure: textureOpts.exposure
	                }, function () {
	                    texture.dirty();
	                    textureObj.callbacks.forEach(function (cb) {
	                        cb && cb(texture);
	                    });
	                    textureObj.callbacks = null;
	                });
	                textureObj.texture = texture;
	                textureCache.put(prefix + imgValue, textureObj);
	            }
	            else {
	                var texture = new graphicGL.Texture2D({
	                    image: new Image()
	                });
	                for (var i = 0; i < keys.length; i++) {
	                    texture[keys[i]] = textureOpts[keys[i]];
	                }

	                textureObj = {
	                    texture: texture,
	                    callbacks: [cb]
	                };
	                var originalImage = texture.image;
	                originalImage.onload = function () {
	                    texture.image = originalImage;
	                    texture.dirty();
	                    textureObj.callbacks.forEach(function (cb) {
	                        cb && cb(texture);
	                    });
	                    textureObj.callbacks = null;
	                };
	                originalImage.src = imgValue;
	                // Use blank image as place holder.
	                texture.image = blankImage;

	                textureCache.put(prefix + imgValue, textureObj);
	            }
	        }

	        return textureObj.texture;
	    }
	};

	/**
	 * Create ambientCubemap and ambientSH light. respectively to have specular and diffuse light
	 * @return {Object} { specular, diffuse }
	 */
	graphicGL.createAmbientCubemap = function (opt, renderer, api) {
	    opt = opt || {};
	    var textureUrl = opt.texture;
	    var exposure = retrieve.firstNotNull(opt.exposure, 1.0);

	    var ambientCubemap = new AmbientCubemapLight({
	        intensity: retrieve.firstNotNull(opt.specularIntensity, 1.0)
	    });
	    var ambientSH = new AmbientSHLight({
	        intensity: retrieve.firstNotNull(opt.diffuseIntensity, 1.0),
	        coefficients: [0.844, 0.712, 0.691, -0.037, 0.083, 0.167, 0.343, 0.288, 0.299, -0.041, -0.021, -0.009, -0.003, -0.041, -0.064, -0.011, -0.007, -0.004, -0.031, 0.034, 0.081, -0.060, -0.049, -0.060, 0.046, 0.056, 0.050]
	    });

	    ambientCubemap.cubemap = graphicGL.loadTexture(textureUrl, api, {
	        exposure: exposure
	    }, function () {
	        ambientCubemap.cubemap.flipY = false;
	        ambientCubemap.prefilter(renderer, 32);
	        ambientSH.coefficients = shUtil.projectEnvironmentMap(renderer, ambientCubemap.cubemap, {
	            lod: 1
	        });
	    });

	    return {
	        specular: ambientCubemap,
	        diffuse: ambientSH
	    };
	};

	/**
	 * Create a blank texture for placeholder
	 */
	graphicGL.createBlankTexture = textureUtil.createBlank;

	/**
	 * If value is image
	 * @param {*}
	 * @return {boolean}
	 */
	graphicGL.isImage = isValueImage;

	graphicGL.additiveBlend = function (gl) {
	    gl.blendEquation(gl.FUNC_ADD);
	    gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
	};

	/**
	 * @param {string|Array.<number>} colorStr
	 * @param {Array.<number>} [rgba]
	 * @return {Array.<number>} rgba
	 */
	graphicGL.parseColor = function (colorStr, rgba) {
	    if (colorStr instanceof Array) {
	        // Color has been parsed.
	        return colorStr;
	    }

	    rgba = echarts.color.parse(colorStr || '#000', rgba) || [0, 0, 0, 0];
	    rgba[0] /= 255;
	    rgba[1] /= 255;
	    rgba[2] /= 255;
	    return rgba;
	};

	/**
	 * Convert alpha beta rotation to direction.
	 * @param {number} alpha
	 * @param {number} beta
	 * @return {Array.<number>}
	 */
	graphicGL.directionFromAlphaBeta = function (alpha, beta) {
	    var theta = alpha / 180 * Math.PI + Math.PI / 2;
	    var phi = -beta / 180 * Math.PI + Math.PI / 2;

	    var dir = [];
	    var r = Math.sin(theta);
	    dir[0] = r * Math.cos(phi);
	    dir[1] = -Math.cos(theta);
	    dir[2] = r * Math.sin(phi);

	    return dir;
	};
	/**
	 * Get shadow resolution from shadowQuality configuration
	 */
	graphicGL.getShadowResolution = function (shadowQuality) {
	    var shadowResolution = 1024;
	    switch (shadowQuality) {
	        case 'low':
	            shadowResolution = 512;
	            break;
	        case 'medium':
	            break;
	        case 'high':
	            shadowResolution = 2048;
	            break;
	        case 'ultra':
	            shadowResolution = 4096;
	            break;
	    }
	    return shadowResolution;
	};

	/**
	 * Shading utilities
	 */
	graphicGL.COMMON_SHADERS = ['lambert', 'color', 'realistic'];

	/**
	 * Create shader including vertex and fragment
	 * @param {string} prefix.
	 */
	graphicGL.createShader = function (prefix) {
	    var vertexShaderStr = Shader.source(prefix + '.vertex');
	    var fragmentShaderStr = Shader.source(prefix + '.fragment');
	    if (!vertexShaderStr) {
	        console.error('Vertex shader of \'%s\' not exits', prefix);
	    }
	    if (!fragmentShaderStr) {
	        console.error('Fragment shader of \'%s\' not exits', prefix);
	    }
	    return new Shader({
	        vertex: vertexShaderStr,
	        fragment: fragmentShaderStr
	    });
	};
	/**
	 * Set material from model.
	 * @param {qtek.Material} material
	 * @param {module:echarts/model/Model} model
	 * @param {module:echarts/ExtensionAPI} api
	 */
	graphicGL.setMaterialFromModel = function (shading, material, model, api) {
	    var materialModel = model.getModel(shading + 'Material');
	    var baseTexture = materialModel.get('baseTexture');
	    var uvRepeat = retrieve.firstNotNull(materialModel.get('textureTiling'), 1.0);
	    var uvOffset = retrieve.firstNotNull(materialModel.get('textureOffset'), 1.0);
	    if (typeof uvRepeat === 'number') {
	        uvRepeat = [uvRepeat, uvRepeat];
	    }
	    if (typeof uvOffset === 'number') {
	        uvOffset = [uvOffset, uvOffset];
	    }
	    var textureOpt = {
	        anisotropic: 8,
	        wrapS: graphicGL.Texture.REPEAT,
	        wrapT: graphicGL.Texture.REPEAT
	    };
	    if (shading === 'realistic') {
	        var roughness = retrieve.firstNotNull(materialModel.get('roughness'), 0.5);
	        var metalness = materialModel.get('metalness') || 0;
	        var roughnessTexture = materialModel.get('roughnessTexture');
	        var metalnessTexture = materialModel.get('metalnessTexture');
	        if (metalness == null) {
	            if (metalnessTexture == null) {
	                metalness = 0.0;
	            }
	            else {
	                metalness = 0.5;
	            }
	        }
	        if (roughness == null) {
	            roughness = 0.5;
	        }

	        material.setTextureImage('diffuseMap', baseTexture, api, textureOpt);
	        material.setTextureImage('roughnessMap', roughnessTexture, api, textureOpt);
	        material.setTextureImage('metalnessMap', metalnessTexture, api, textureOpt);
	        material.set({
	            roughness: roughness,
	            metalness: metalness,
	            uvRepeat: uvRepeat,
	            uvOffset: uvOffset
	        });
	    }
	    else if (shading === 'lambert') {
	        material.setTextureImage('diffuseMap', baseTexture, api, textureOpt);
	        material.set({
	            uvRepeat: uvRepeat,
	            uvOffset: uvOffset
	        });
	    }
	    else if (shading === 'color') {
	        material.setTextureImage('diffuseMap', baseTexture, api, textureOpt);
	        material.set({
	            uvRepeat: uvRepeat,
	            uvOffset: uvOffset
	        });
	    }
	};

	module.exports = graphicGL;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Renderable = __webpack_require__(27);
	    var glenum = __webpack_require__(11);

	    /**
	     * @constructor qtek.Mesh
	     * @extends qtek.Renderable
	     */
	    var Mesh = Renderable.extend(
	    /** @lends qtek.Mesh# */
	    {
	        /**
	         * Used when it is a skinned mesh
	         * @type {qtek.Skeleton}
	         */
	        skeleton: null,
	        /**
	         * Joints indices Meshes can share the one skeleton instance and each mesh can use one part of joints. Joints indices indicate the index of joint in the skeleton instance
	         * @type {number[]}
	         */
	        joints: null

	    }, function () {
	        if (!this.joints) {
	            this.joints = [];
	        }
	    }, {
	        render: function(_gl, shader) {
	            shader = shader || this.material.shader;
	            // Set pose matrices of skinned mesh
	            if (this.skeleton) {
	                var skinMatricesArray = this.skeleton.getSubSkinMatrices(this.__GUID__, this.joints);
	                shader.setUniformOfSemantic(_gl, 'SKIN_MATRIX', skinMatricesArray);
	            }

	            return Renderable.prototype.render.call(this, _gl, shader);
	        }
	    });

	    // Enums
	    Mesh.POINTS = glenum.POINTS;
	    Mesh.LINES = glenum.LINES;
	    Mesh.LINE_LOOP = glenum.LINE_LOOP;
	    Mesh.LINE_STRIP = glenum.LINE_STRIP;
	    Mesh.TRIANGLES = glenum.TRIANGLES;
	    Mesh.TRIANGLE_STRIP = glenum.TRIANGLE_STRIP;
	    Mesh.TRIANGLE_FAN = glenum.TRIANGLE_FAN;

	    Mesh.BACK = glenum.BACK;
	    Mesh.FRONT = glenum.FRONT;
	    Mesh.FRONT_AND_BACK = glenum.FRONT_AND_BACK;
	    Mesh.CW = glenum.CW;
	    Mesh.CCW = glenum.CCW;

	    module.exports = Mesh;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Texture = __webpack_require__(21);
	    var glinfo = __webpack_require__(10);
	    var glenum = __webpack_require__(11);
	    var mathUtil = __webpack_require__(34);
	    var isPowerOfTwo = mathUtil.isPowerOfTwo;

	    /**
	     * @constructor qtek.Texture2D
	     * @extends qtek.Texture
	     *
	     * @example
	     *     ...
	     *     var mat = new qtek.Material({
	     *         shader: qtek.shader.library.get('qtek.phong', 'diffuseMap')
	     *     });
	     *     var diffuseMap = new qtek.Texture2D();
	     *     diffuseMap.load('assets/textures/diffuse.jpg');
	     *     mat.set('diffuseMap', diffuseMap);
	     *     ...
	     *     diffuseMap.success(function() {
	     *         // Wait for the diffuse texture loaded
	     *         animation.on('frame', function(frameTime) {
	     *             renderer.render(scene, camera);
	     *         });
	     *     });
	     */
	    var Texture2D = Texture.extend(function() {
	        return /** @lends qtek.Texture2D# */ {
	            /**
	             * @type {HTMLImageElement|HTMLCanvasElemnet}
	             */
	            image: null,
	            /**
	             * @type {Uint8Array|Float32Array}
	             */
	            pixels: null,
	            /**
	             * @type {Array.<Object>}
	             * @example
	             *     [{
	             *         image: mipmap0,
	             *         pixels: null
	             *     }, {
	             *         image: mipmap1,
	             *         pixels: null
	             *     }, ....]
	             */
	            mipmaps: []
	        };
	    }, {
	        update: function(_gl) {

	            _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));

	            this.beforeUpdate( _gl);

	            var glFormat = this.format;
	            var glType = this.type;

	            _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, this.wrapS);
	            _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, this.wrapT);

	            _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, this.magFilter);
	            _gl.texParameteri(_gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, this.minFilter);

	            var anisotropicExt = glinfo.getExtension(_gl, 'EXT_texture_filter_anisotropic');
	            if (anisotropicExt && this.anisotropic > 1) {
	                _gl.texParameterf(_gl.TEXTURE_2D, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
	            }

	            // Fallback to float type if browser don't have half float extension
	            if (glType === 36193) {
	                var halfFloatExt = glinfo.getExtension(_gl, 'OES_texture_half_float');
	                if (!halfFloatExt) {
	                    glType = glenum.FLOAT;
	                }
	            }

	            if (this.mipmaps.length) {
	                var width = this.width;
	                var height = this.height;
	                for (var i = 0; i < this.mipmaps.length; i++) {
	                    var mipmap = this.mipmaps[i];
	                    this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);
	                    width /= 2;
	                    height /= 2;
	                }
	            }
	            else {
	                this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);

	                if (this.useMipmap && !this.NPOT) {
	                    _gl.generateMipmap(_gl.TEXTURE_2D);
	                }
	            }

	            _gl.bindTexture(_gl.TEXTURE_2D, null);
	        },

	        _updateTextureData: function (_gl, data, level, width, height, glFormat, glType) {
	            if (data.image) {
	                _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, glFormat, glType, data.image);
	            }
	            else {
	                // Can be used as a blank texture when writing render to texture(RTT)
	                if (
	                    glFormat <= Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT
	                    && glFormat >= Texture.COMPRESSED_RGB_S3TC_DXT1_EXT
	                ) {
	                    _gl.compressedTexImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, data.pixels);
	                }
	                else {
	                    // Is a render target if pixels is null
	                    _gl.texImage2D(_gl.TEXTURE_2D, level, glFormat, width, height, 0, glFormat, glType, data.pixels);
	                }
	            }
	        },

	        /**
	         * @param  {WebGLRenderingContext} _gl
	         * @memberOf qtek.Texture2D.prototype
	         */
	        generateMipmap: function(_gl) {
	            if (this.useMipmap && !this.NPOT) {
	                _gl.bindTexture(_gl.TEXTURE_2D, this._cache.get('webgl_texture'));
	                _gl.generateMipmap(_gl.TEXTURE_2D);
	            }
	        },

	        isPowerOfTwo: function() {
	            var width;
	            var height;
	            if (this.image) {
	                width = this.image.width;
	                height = this.image.height;
	            }
	            else {
	                width = this.width;
	                height = this.height;
	            }
	            return isPowerOfTwo(width) && isPowerOfTwo(height);
	        },

	        isRenderable: function() {
	            if (this.image) {
	                return this.image.nodeName === 'CANVAS'
	                    || this.image.nodeName === 'VIDEO'
	                    || this.image.complete;
	            }
	            else {
	                return !!(this.width && this.height);
	            }
	        },

	        bind: function(_gl) {
	            _gl.bindTexture(_gl.TEXTURE_2D, this.getWebGLTexture(_gl));
	        },

	        unbind: function(_gl) {
	            _gl.bindTexture(_gl.TEXTURE_2D, null);
	        },

	        load: function (src) {
	            var image = new Image();
	            var self = this;
	            image.onload = function() {
	                self.dirty();
	                self.trigger('success', self);
	                image.onload = null;
	            };
	            image.onerror = function() {
	                self.trigger('error', self);
	                image.onerror = null;
	            };

	            image.src = src;
	            this.image = image;

	            return this;
	        }
	    });

	    module.exports = Texture2D;


/***/ },
/* 34 */
/***/ function(module, exports) {

	

	    var mathUtil = {};

	    mathUtil.isPowerOfTwo = function (value) {
	        return (value & (value - 1)) === 0;
	    };

	    mathUtil.nextPowerOfTwo = function (value) {
	        value --;
	        value |= value >> 1;
	        value |= value >> 2;
	        value |= value >> 4;
	        value |= value >> 8;
	        value |= value >> 16;
	        value ++;

	        return value;
	    };

	    mathUtil.nearestPowerOfTwo = function (value) {
	        return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );
	    };

	    module.exports = mathUtil;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * StaticGeometry can not be changed once they've been setup
	 */


	    var Geometry = __webpack_require__(36);
	    var BoundingBox = __webpack_require__(13);
	    var glMatrix = __webpack_require__(15);
	    var vendor = __webpack_require__(12);
	    var glenum = __webpack_require__(11);
	    var mat4 = glMatrix.mat4;
	    var vec3 = glMatrix.vec3;

	    var StaticAttribute = Geometry.StaticAttribute;
	    var vec3Create = vec3.create;
	    var vec3Add = vec3.add;
	    var vec3Set = vec3.set;

	    function makeAttrKey(attrName) {
	        return 'attr_' + attrName;
	    }
	    /**
	     * @constructor qtek.StaticGeometry
	     * @extends qtek.Geometry
	     */
	    var StaticGeometry = Geometry.extend(function () {
	        return /** @lends qtek.StaticGeometry# */ {
	            attributes: {
	                 position: new StaticAttribute('position', 'float', 3, 'POSITION'),
	                 texcoord0: new StaticAttribute('texcoord0', 'float', 2, 'TEXCOORD_0'),
	                 texcoord1: new StaticAttribute('texcoord1', 'float', 2, 'TEXCOORD_1'),
	                 normal: new StaticAttribute('normal', 'float', 3, 'NORMAL'),
	                 tangent: new StaticAttribute('tangent', 'float', 4, 'TANGENT'),
	                 color: new StaticAttribute('color', 'float', 4, 'COLOR'),
	                 // Skinning attributes
	                 // Each vertex can be bind to 4 bones, because the
	                 // sum of weights is 1, so the weights is stored in vec3 and the last
	                 // can be calculated by 1-w.x-w.y-w.z
	                 weight: new StaticAttribute('weight', 'float', 3, 'WEIGHT'),
	                 joint: new StaticAttribute('joint', 'float', 4, 'JOINT'),
	                 // For wireframe display
	                 // http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
	                 barycentric: new StaticAttribute('barycentric', 'float', 3, null),
	            },

	            hint: glenum.STATIC_DRAW,

	            /**
	             * @type {Uint16Array|Uint32Array}
	             */
	            indices: null,

	            _normalType: 'vertex',

	            _enabledAttributes: null
	        };
	    },
	    /** @lends qtek.StaticGeometry.prototype */
	    {
	        updateBoundingBox: function () {
	            var bbox = this.boundingBox;
	            if (!bbox) {
	                bbox = this.boundingBox = new BoundingBox();
	            }
	            var posArr = this.attributes.position.value;
	            if (posArr && posArr.length) {
	                var min = bbox.min;
	                var max = bbox.max;
	                var minArr = min._array;
	                var maxArr = max._array;
	                vec3.set(minArr, posArr[0], posArr[1], posArr[2]);
	                vec3.set(maxArr, posArr[0], posArr[1], posArr[2]);
	                for (var i = 3; i < posArr.length;) {
	                    var x = posArr[i++];
	                    var y = posArr[i++];
	                    var z = posArr[i++];
	                    if (x < minArr[0]) { minArr[0] = x; }
	                    if (y < minArr[1]) { minArr[1] = y; }
	                    if (z < minArr[2]) { minArr[2] = z; }

	                    if (x > maxArr[0]) { maxArr[0] = x; }
	                    if (y > maxArr[1]) { maxArr[1] = y; }
	                    if (z > maxArr[2]) { maxArr[2] = z; }
	                }
	                min._dirty = true;
	                max._dirty = true;
	            }
	        },

	        dirty: function () {
	            var enabledAttributes = this.getEnabledAttributes();
	            for (var i = 0; i < enabledAttributes.length; i++) {
	                this.dirtyAttribute(enabledAttributes[i]);
	            }
	            this.dirtyIndices();
	            this._enabledAttributes = null;
	        },

	        dirtyIndices: function () {
	            this._cache.dirtyAll('indices');
	        },

	        dirtyAttribute: function (attrName) {
	            this._cache.dirtyAll(makeAttrKey(attrName));
	            this._cache.dirtyAll('attributes');
	        },

	        getTriangleIndices: function (idx, out) {
	            if (idx < this.triangleCount && idx >= 0) {
	                if (!out) {
	                    out = vec3Create();
	                }
	                var indices = this.indices;
	                out[0] = indices[idx * 3];
	                out[1] = indices[idx * 3 + 1];
	                out[2] = indices[idx * 3 + 2];
	                return out;
	            }
	        },

	        setTriangleIndices: function (idx, arr) {
	            var indices = this.indices;
	            indices[idx * 3] = arr[0];
	            indices[idx * 3 + 1] = arr[1];
	            indices[idx * 3 + 2] = arr[2];
	        },

	        isUseIndices: function () {
	            return this.indices;
	        },

	        initIndicesFromArray: function (array) {
	            var value;
	            var ArrayConstructor = this.vertexCount > 0xffff
	                ? vendor.Uint32Array : vendor.Uint16Array;
	            // Convert 2d array to flat
	            if (array[0] && (array[0].length)) {
	                var n = 0;
	                var size = 3;

	                value = new ArrayConstructor(array.length * size);
	                for (var i = 0; i < array.length; i++) {
	                    for (var j = 0; j < size; j++) {
	                        value[n++] = array[i][j];
	                    }
	                }
	            }
	            else {
	                value = new ArrayConstructor(array);
	            }

	            this.indices = value;
	        },

	        createAttribute: function (name, type, size, semantic) {
	            var attrib = new StaticAttribute(name, type, size, semantic);
	            if (this.attributes[name]) {
	                this.removeAttribute(name);
	            }
	            this.attributes[name] = attrib;
	            this._attributeList.push(name);
	            return attrib;
	        },

	        removeAttribute: function (name) {
	            var attributeList = this._attributeList;
	            var idx = attributeList.indexOf(name);
	            if (idx >= 0) {
	                attributeList.splice(idx, 1);
	                delete this.attributes[name];
	                return true;
	            }
	            return false;
	        },

	        /**
	         * Get enabled attributes name list
	         * Attribute which has the same vertex number with position is treated as a enabled attribute
	         * @return {string[]}
	         */
	        getEnabledAttributes: function () {
	            var enabledAttributes = this._enabledAttributes;
	            var attributeList = this._attributeList;
	            // Cache
	            if (enabledAttributes) {
	                return enabledAttributes;
	            }

	            var result = [];
	            var nVertex = this.vertexCount;

	            for (var i = 0; i < attributeList.length; i++) {
	                var name = attributeList[i];
	                var attrib = this.attributes[name];
	                if (attrib.value) {
	                    if (attrib.value.length === nVertex * attrib.size) {
	                        result.push(name);
	                    }
	                }
	            }

	            this._enabledAttributes = result;

	            return result;
	        },

	        getBufferChunks: function (_gl) {
	            var cache = this._cache;
	            cache.use(_gl.__GLID__);
	            var isAttributesDirty = cache.isDirty('attributes');
	            var isIndicesDirty = cache.isDirty('indices');
	            if (isAttributesDirty || isIndicesDirty) {
	                this._updateBuffer(_gl, isAttributesDirty, isIndicesDirty);
	                var enabledAttributes = this.getEnabledAttributes();
	                for (var i = 0; i < enabledAttributes.length; i++) {
	                    cache.fresh(makeAttrKey(enabledAttributes[i]));
	                }
	                cache.fresh('attributes');
	                cache.fresh('indices');
	            }
	            return cache.get('chunks');
	        },

	        _updateBuffer: function (_gl, isAttributesDirty, isIndicesDirty) {
	            var cache = this._cache;
	            var chunks = cache.get('chunks');
	            var firstUpdate = false;
	            if (!chunks) {
	                chunks = [];
	                // Intialize
	                chunks[0] = {
	                    attributeBuffers: [],
	                    indicesBuffer: null
	                };
	                cache.put('chunks', chunks);
	                firstUpdate = true;
	            }

	            var chunk = chunks[0];
	            var attributeBuffers = chunk.attributeBuffers;
	            var indicesBuffer = chunk.indicesBuffer;

	            if (isAttributesDirty || firstUpdate) {
	                var attributeList = this.getEnabledAttributes();

	                var attributeBufferMap = {};
	                if (!firstUpdate) {
	                    for (var i = 0; i < attributeBuffers.length; i++) {
	                        attributeBufferMap[attributeBuffers[i].name] = attributeBuffers[i];
	                    }
	                }
	                // FIXME If some attributes removed
	                for (var k = 0; k < attributeList.length; k++) {
	                    var name = attributeList[k];
	                    var attribute = this.attributes[name];

	                    var bufferInfo;

	                    if (!firstUpdate) {
	                        bufferInfo = attributeBufferMap[name];
	                    }
	                    var buffer;
	                    if (bufferInfo) {
	                        buffer = bufferInfo.buffer;
	                    }
	                    else {
	                        buffer = _gl.createBuffer();
	                    }
	                    if (cache.isDirty(makeAttrKey(name))) {
	                        // Only update when they are dirty.
	                        // TODO: Use BufferSubData?
	                        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);
	                        _gl.bufferData(_gl.ARRAY_BUFFER, attribute.value, this.hint);
	                    }

	                    attributeBuffers[k] = new Geometry.AttributeBuffer(name, attribute.type, buffer, attribute.size, attribute.semantic);
	                }
	                // Remove unused attributes buffers.
	                // PENDING
	                for (var i = k; i < attributeBuffers.length; i++) {
	                    _gl.deleteBuffer(attributeBuffers[i].buffer);
	                }
	                attributeBuffers.length = k;

	            }

	            if (this.isUseIndices() && (isIndicesDirty || firstUpdate)) {
	                if (!indicesBuffer) {
	                    indicesBuffer = new Geometry.IndicesBuffer(_gl.createBuffer());
	                    chunk.indicesBuffer = indicesBuffer;
	                }
	                indicesBuffer.count = this.indices.length;
	                _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, indicesBuffer.buffer);
	                _gl.bufferData(_gl.ELEMENT_ARRAY_BUFFER, this.indices, this.hint);
	            }
	        },

	        generateVertexNormals: function () {
	            if (!this.vertexCount) {
	                return;
	            }

	            var indices = this.indices;
	            var attributes = this.attributes;
	            var positions = attributes.position.value;
	            var normals = attributes.normal.value;

	            if (!normals || normals.length !== positions.length) {
	                normals = attributes.normal.value = new vendor.Float32Array(positions.length);
	            }
	            else {
	                // Reset
	                for (var i = 0; i < normals.length; i++) {
	                    normals[i] = 0;
	                }
	            }

	            var p1 = vec3Create();
	            var p2 = vec3Create();
	            var p3 = vec3Create();

	            var v21 = vec3Create();
	            var v32 = vec3Create();

	            var n = vec3Create();

	            // TODO if no indices
	            for (var f = 0; f < indices.length;) {
	                var i1 = indices[f++];
	                var i2 = indices[f++];
	                var i3 = indices[f++];

	                vec3Set(p1, positions[i1*3], positions[i1*3+1], positions[i1*3+2]);
	                vec3Set(p2, positions[i2*3], positions[i2*3+1], positions[i2*3+2]);
	                vec3Set(p3, positions[i3*3], positions[i3*3+1], positions[i3*3+2]);

	                vec3.sub(v21, p1, p2);
	                vec3.sub(v32, p2, p3);
	                vec3.cross(n, v21, v32);
	                // Already be weighted by the triangle area
	                for (var i = 0; i < 3; i++) {
	                    normals[i1*3+i] = normals[i1*3+i] + n[i];
	                    normals[i2*3+i] = normals[i2*3+i] + n[i];
	                    normals[i3*3+i] = normals[i3*3+i] + n[i];
	                }
	            }

	            for (var i = 0; i < normals.length;) {
	                vec3Set(n, normals[i], normals[i+1], normals[i+2]);
	                vec3.normalize(n, n);
	                normals[i++] = n[0];
	                normals[i++] = n[1];
	                normals[i++] = n[2];
	            }
	            this.dirty();
	        },

	        generateFaceNormals: function () {
	            if (!this.vertexCount) {
	                return;
	            }

	            if (!this.isUniqueVertex()) {
	                this.generateUniqueVertex();
	            }

	            var indices = this.indices;
	            var attributes = this.attributes;
	            var positions = attributes.position.value;
	            var normals = attributes.normal.value;

	            var p1 = vec3Create();
	            var p2 = vec3Create();
	            var p3 = vec3Create();

	            var v21 = vec3Create();
	            var v32 = vec3Create();
	            var n = vec3Create();

	            if (!normals) {
	                normals = attributes.normal.value = new Float32Array(positions.length);
	            }
	            for (var f = 0; f < indices.length;) {
	                var i1 = indices[f++];
	                var i2 = indices[f++];
	                var i3 = indices[f++];

	                vec3Set(p1, positions[i1*3], positions[i1*3+1], positions[i1*3+2]);
	                vec3Set(p2, positions[i2*3], positions[i2*3+1], positions[i2*3+2]);
	                vec3Set(p3, positions[i3*3], positions[i3*3+1], positions[i3*3+2]);

	                vec3.sub(v21, p1, p2);
	                vec3.sub(v32, p2, p3);
	                vec3.cross(n, v21, v32);

	                vec3.normalize(n, n);

	                for (var i = 0; i < 3; i++) {
	                    normals[i1*3 + i] = n[i];
	                    normals[i2*3 + i] = n[i];
	                    normals[i3*3 + i] = n[i];
	                }
	            }
	            this.dirty();
	        },

	        generateTangents: function () {
	            if (!this.vertexCount) {
	                return;
	            }

	            var nVertex = this.vertexCount;
	            var attributes = this.attributes;
	            if (!attributes.tangent.value) {
	                attributes.tangent.value = new Float32Array(nVertex * 4);
	            }
	            var texcoords = attributes.texcoord0.value;
	            var positions = attributes.position.value;
	            var tangents = attributes.tangent.value;
	            var normals = attributes.normal.value;

	            var tan1 = [];
	            var tan2 = [];
	            for (var i = 0; i < nVertex; i++) {
	                tan1[i] = [0.0, 0.0, 0.0];
	                tan2[i] = [0.0, 0.0, 0.0];
	            }

	            var sdir = [0.0, 0.0, 0.0];
	            var tdir = [0.0, 0.0, 0.0];
	            var indices = this.indices;
	            for (var i = 0; i < indices.length;) {
	                var i1 = indices[i++],
	                    i2 = indices[i++],
	                    i3 = indices[i++],

	                    st1s = texcoords[i1 * 2],
	                    st2s = texcoords[i2 * 2],
	                    st3s = texcoords[i3 * 2],
	                    st1t = texcoords[i1 * 2 + 1],
	                    st2t = texcoords[i2 * 2 + 1],
	                    st3t = texcoords[i3 * 2 + 1],

	                    p1x = positions[i1 * 3],
	                    p2x = positions[i2 * 3],
	                    p3x = positions[i3 * 3],
	                    p1y = positions[i1 * 3 + 1],
	                    p2y = positions[i2 * 3 + 1],
	                    p3y = positions[i3 * 3 + 1],
	                    p1z = positions[i1 * 3 + 2],
	                    p2z = positions[i2 * 3 + 2],
	                    p3z = positions[i3 * 3 + 2];

	                var x1 = p2x - p1x,
	                    x2 = p3x - p1x,
	                    y1 = p2y - p1y,
	                    y2 = p3y - p1y,
	                    z1 = p2z - p1z,
	                    z2 = p3z - p1z;

	                var s1 = st2s - st1s,
	                    s2 = st3s - st1s,
	                    t1 = st2t - st1t,
	                    t2 = st3t - st1t;

	                var r = 1.0 / (s1 * t2 - t1 * s2);
	                sdir[0] = (t2 * x1 - t1 * x2) * r;
	                sdir[1] = (t2 * y1 - t1 * y2) * r;
	                sdir[2] = (t2 * z1 - t1 * z2) * r;

	                tdir[0] = (s1 * x2 - s2 * x1) * r;
	                tdir[1] = (s1 * y2 - s2 * y1) * r;
	                tdir[2] = (s1 * z2 - s2 * z1) * r;

	                vec3Add(tan1[i1], tan1[i1], sdir);
	                vec3Add(tan1[i2], tan1[i2], sdir);
	                vec3Add(tan1[i3], tan1[i3], sdir);
	                vec3Add(tan2[i1], tan2[i1], tdir);
	                vec3Add(tan2[i2], tan2[i2], tdir);
	                vec3Add(tan2[i3], tan2[i3], tdir);
	            }
	            var tmp = vec3Create();
	            var nCrossT = vec3Create();
	            var n = vec3Create();
	            for (var i = 0; i < nVertex; i++) {
	                n[0] = normals[i * 3];
	                n[1] = normals[i * 3 + 1];
	                n[2] = normals[i * 3 + 2];
	                var t = tan1[i];

	                // Gram-Schmidt orthogonalize
	                vec3.scale(tmp, n, vec3.dot(n, t));
	                vec3.sub(tmp, t, tmp);
	                vec3.normalize(tmp, tmp);
	                // Calculate handedness.
	                vec3.cross(nCrossT, n, t);
	                tangents[i * 4] = tmp[0];
	                tangents[i * 4 + 1] = tmp[1];
	                tangents[i * 4 + 2] = tmp[2];
	                tangents[i * 4 + 3] = vec3.dot(nCrossT, tan2[i]) < 0.0 ? -1.0 : 1.0;
	            }
	            this.dirty();
	        },

	        isUniqueVertex: function () {
	            if (this.isUseIndices()) {
	                return this.vertexCount === this.indices.length;
	            }
	            else {
	                return true;
	            }
	        },

	        generateUniqueVertex: function () {
	            if (!this.vertexCount) {
	                return;
	            }

	            var vertexUseCount = [];

	            for (var i = 0, len = this.vertexCount; i < len; i++) {
	                vertexUseCount[i] = 0;
	            }
	            if (this.indices.length > 0xffff) {
	                this.indices = new vendor.Uint32Array(this.indices);
	            }

	            var cursor = 0;
	            var attributes = this.attributes;
	            var indices = this.indices;

	            // Cursor not use vertexNumber in case vertex array length is larger than face used.
	            for (var i = 0; i < indices.length; i++) {
	                cursor = Math.max(cursor, indices[i] + 1);
	            }

	            var attributeNameList = this.getEnabledAttributes();

	            for (var a = 0; a < attributeNameList.length; a++) {
	                var name = attributeNameList[a];
	                var valueArr = attributes[name].value;
	                attributes[name].init(this.indices.length);
	                var expandedArray = attributes[name].value;
	                for (var i = 0; i < valueArr.length; i++) {
	                    expandedArray[i] = valueArr[i];
	                }
	            }

	            for (var i = 0; i < indices.length; i++) {
	                var ii = indices[i];
	                if (vertexUseCount[ii] > 0) {
	                    for (var a = 0; a < attributeNameList.length; a++) {
	                        var name = attributeNameList[a];
	                        var array = attributes[name].value;
	                        var size = attributes[name].size;

	                        for (var k = 0; k < size; k++) {
	                            array[cursor * size + k] = array[ii * size + k];
	                        }
	                    }
	                    indices[i] = cursor;
	                    cursor++;
	                }
	                vertexUseCount[ii]++;
	            }

	            this.dirty();
	        },

	        generateBarycentric: function () {
	            if (!this.vertexCount) {
	                return;
	            }

	            if (!this.isUniqueVertex()) {
	                this.generateUniqueVertex();
	            }

	            var attributes = this.attributes;
	            var array = attributes.barycentric.value;
	            var indices = this.indices;
	            // Already existed;
	            if (array && array.length === indices.length * 3) {
	                return;
	            }
	            array = attributes.barycentric.value = new Float32Array(indices.length * 3);
	            for (var i = 0; i < indices.length;) {
	                for (var j = 0; j < 3; j++) {
	                    var ii = indices[i++];
	                    array[ii * 3 + j] = 1;
	                }
	            }
	            this.dirty();
	        },

	        applyTransform: function (matrix) {

	            var attributes = this.attributes;
	            var positions = attributes.position.value;
	            var normals = attributes.normal.value;
	            var tangents = attributes.tangent.value;

	            matrix = matrix._array;
	            // Normal Matrix
	            var inverseTransposeMatrix = mat4.create();
	            mat4.invert(inverseTransposeMatrix, matrix);
	            mat4.transpose(inverseTransposeMatrix, inverseTransposeMatrix);

	            var vec3TransformMat4 = vec3.transformMat4;
	            var vec3ForEach = vec3.forEach;
	            vec3ForEach(positions, 3, 0, null, vec3TransformMat4, matrix);
	            if (normals) {
	                vec3ForEach(normals, 3, 0, null, vec3TransformMat4, inverseTransposeMatrix);
	            }
	            if (tangents) {
	                vec3ForEach(tangents, 4, 0, null, vec3TransformMat4, inverseTransposeMatrix);
	            }

	            if (this.boundingBox) {
	                this.updateBoundingBox();
	            }
	        },

	        dispose: function (_gl) {

	            var cache = this._cache;

	            cache.use(_gl.__GLID__);
	            var chunks = cache.get('chunks');
	            if (chunks) {
	                for (var c = 0; c < chunks.length; c++) {
	                    var chunk = chunks[c];

	                    for (var k = 0; k < chunk.attributeBuffers.length; k++) {
	                        var attribs = chunk.attributeBuffers[k];
	                        _gl.deleteBuffer(attribs.buffer);
	                    }
	                }
	            }
	            cache.deleteContext(_gl.__GLID__);
	        }
	    });

	    if (Object.defineProperty) {
	        Object.defineProperty(StaticGeometry.prototype, 'vertexCount', {

	            enumerable: false,

	            get: function () {
	                var mainAttribute = this.attributes[this.mainAttribute];
	                if (!mainAttribute || !mainAttribute.value) {
	                    return 0;
	                }
	                return mainAttribute.value.length / mainAttribute.size;
	            }
	        });
	        Object.defineProperty(StaticGeometry.prototype, 'triangleCount', {

	            enumerable: false,

	            get: function () {
	                var indices = this.indices;
	                if (!indices) {
	                    return 0;
	                }
	                else {
	                    return indices.length / 3;
	                }
	            }
	        });
	    }

	    StaticGeometry.Attribute = Geometry.StaticAttribute;

	    module.exports = StaticGeometry;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var glenum = __webpack_require__(11);
	    var Cache = __webpack_require__(19);
	    var vendor = __webpack_require__(12);

	    function getArrayCtorByType (type) {
	        var ArrayConstructor;
	        switch(type) {
	            case 'byte':
	                ArrayConstructor = vendor.Int8Array;
	                break;
	            case 'ubyte':
	                ArrayConstructor = vendor.Uint8Array;
	                break;
	            case 'short':
	                ArrayConstructor = vendor.Int16Array;
	                break;
	            case 'ushort':
	                ArrayConstructor = vendor.Uint16Array;
	                break;
	            default:
	                ArrayConstructor = vendor.Float32Array;
	                break;
	        }
	        return ArrayConstructor;
	    }


	    function Attribute(name, type, size, semantic) {
	        this.name = name;
	        this.type = type;
	        this.size = size;
	        if (semantic) {
	            this.semantic = semantic;
	        }
	    }
	    Attribute.prototype.clone = function(copyValue) {
	        var ret = new this.constructor(this.name, this.type, this.size, this.semantic);
	        // FIXME
	        if (copyValue) {
	            console.warn('todo');
	        }
	        return ret;
	    };


	    /**
	     * Attribute for static geometry
	     */
	    function StaticAttribute (name, type, size, semantic) {
	        Attribute.call(this, name, type, size, semantic);
	        this.value = null;

	        // Init getter setter
	        switch (size) {
	            case 1:
	                this.get = function (idx) {
	                    return this.value[idx];
	                };
	                this.set = function (idx, value) {
	                    this.value[idx] = value;
	                };
	                // Copy from source to target
	                this.copy = function (target, source) {
	                    this.value[target] = this.value[target];
	                };
	                break;
	            case 2:
	                this.get = function (idx, out) {
	                    var arr = this.value;
	                    out[0] = arr[idx * 2];
	                    out[1] = arr[idx * 2 + 1];
	                    return out;
	                };
	                this.set = function (idx, val) {
	                    var arr = this.value;
	                    arr[idx * 2] = val[0];
	                    arr[idx * 2 + 1] = val[1];
	                };
	                this.copy = function (target, source) {
	                    var arr = this.value;
	                    source *= 2;
	                    target *= 2;
	                    arr[target] = arr[source];
	                    arr[target + 1] = arr[source + 1];
	                };
	                break;
	            case 3:
	                this.get = function (idx, out) {
	                    var idx3 = idx * 3;
	                    var arr = this.value;
	                    out[0] = arr[idx3++];
	                    out[1] = arr[idx3++];
	                    out[2] = arr[idx3++];
	                    return out;
	                };
	                this.set = function (idx, val) {
	                    var idx3 = idx * 3;
	                    var arr = this.value;
	                    arr[idx3++] = val[0];
	                    arr[idx3++] = val[1];
	                    arr[idx3++] = val[2];
	                };
	                this.copy = function (target, source) {
	                    var arr = this.value;
	                    source *= 3;
	                    target *= 3;
	                    arr[target] = arr[source];
	                    arr[target + 1] = arr[source + 1];
	                    arr[target + 2] = arr[source + 2];
	                };
	                break;
	            case 4:
	                this.get = function (idx, out) {
	                    var arr = this.value;
	                    var idx4 = idx * 4;
	                    out[0] = arr[idx4++];
	                    out[1] = arr[idx4++];
	                    out[2] = arr[idx4++];
	                    out[3] = arr[idx4++];
	                    return out;
	                };
	                this.set = function (idx, val) {
	                    var arr = this.value;
	                    var idx4 = idx * 4;
	                    arr[idx4++] = val[0];
	                    arr[idx4++] = val[1];
	                    arr[idx4++] = val[2];
	                    arr[idx4++] = val[3];
	                };
	                this.copy = function (target, source) {
	                    var arr = this.value;
	                    source *= 4;
	                    target *= 4;
	                    // copyWithin is extremely slow
	                    arr[target] = arr[source];
	                    arr[target + 1] = arr[source + 1];
	                    arr[target + 2] = arr[source + 2];
	                    arr[target + 3] = arr[source + 3];
	                };
	        }
	    }

	    StaticAttribute.prototype.constructor = new Attribute();

	    StaticAttribute.prototype.init = function (nVertex) {
	        if (!this.value || this.value.length != nVertex * this.size) {
	            var ArrayConstructor = getArrayCtorByType(this.type);
	            this.value = new ArrayConstructor(nVertex * this.size);
	        }
	    };

	    StaticAttribute.prototype.fromArray = function (array) {
	        var ArrayConstructor = getArrayCtorByType(this.type);
	        var value;
	        // Convert 2d array to flat
	        if (array[0] && (array[0].length)) {
	            var n = 0;
	            var size = this.size;
	            value = new ArrayConstructor(array.length * size);
	            for (var i = 0; i < array.length; i++) {
	                for (var j = 0; j < size; j++) {
	                    value[n++] = array[i][j];
	                }
	            }
	        }
	        else {
	            value = new ArrayConstructor(array);
	        }
	        this.value = value;
	    };

	    function AttributeBuffer(name, type, buffer, size, semantic) {
	        this.name = name;
	        this.type = type;
	        this.buffer = buffer;
	        this.size = size;
	        this.semantic = semantic;

	        // To be set in mesh
	        // symbol in the shader
	        this.symbol = '';

	        // Needs remove flag
	        this.needsRemove = false;
	    }

	    function IndicesBuffer(buffer) {
	        this.buffer = buffer;
	        this.count = 0;
	    }

	    function notImplementedWarn() {
	        console.warn('Geometry doesn\'t implement this method, use StaticGeometry instead');
	    }

	    /**
	     * @constructor qtek.Geometry
	     * @extends qtek.core.Base
	     */
	    var Geometry = Base.extend(
	    /** @lends qtek.Geometry# */
	    {
	        /**
	         * @type {qtek.math.BoundingBox}
	         */
	        boundingBox : null,

	        /**
	         * Vertex attributes
	         * @type {Object}
	         */
	        attributes : {},

	        indices : null,

	        /**
	         * Is vertices data dynamically updated
	         * @type {boolean}
	         */
	        dynamic: false,

	    }, function() {
	        // Use cache
	        this._cache = new Cache();

	        this._attributeList = Object.keys(this.attributes);
	    },
	    /** @lends qtek.Geometry.prototype */
	    {
	        /**
	         * User defined ray picking algorithm instead of default
	         * triangle ray intersection
	         * x, y are NDC.
	         * (x, y, renderer, camera, renderable, out) => boolean
	         * @type {Function}
	         */
	        pickByRay: null,

	        /**
	         * User defined picking algorithm instead of default
	         * triangle ray intersection
	         * (ray: qtek.math.Ray, renderable: qtek.Renderable, out: Array) => boolean
	         * @type {Function}
	         */
	        pick: null,

	        /**
	         * Main attribute will be used to count vertex number
	         * @type {string}
	         */
	        mainAttribute: 'position',
	        /**
	         * Mark attributes in geometry is dirty
	         * @method
	         */
	        dirty: notImplementedWarn,
	        /**
	         * Create a new attribute
	         * @method
	         * @param {string} name
	         * @param {string} type
	         * @param {number} size
	         * @param {string} [semantic]
	         */
	        createAttribute: notImplementedWarn,
	        /**
	         * Remove attribute
	         * @method
	         * @param {string} name
	         */
	        removeAttribute: notImplementedWarn,

	        /**
	         * @method
	         * @param {number} idx
	         * @param {Array.<number>} out
	         * @return {Array.<number>}
	         */
	        getTriangleIndices: notImplementedWarn,

	        /**
	         * @method
	         * @param {number} idx
	         * @param {Array.<number>} face
	         */
	        setTriangleIndices: notImplementedWarn,
	        /**
	         * @method
	         * @return {boolean}
	         */
	        isUseIndices: notImplementedWarn,

	        getEnabledAttributes: notImplementedWarn,
	        getBufferChunks: notImplementedWarn,

	        /**
	         * @method
	         */
	        generateVertexNormals: notImplementedWarn,
	        /**
	         * @method
	         */
	        generateFaceNormals: notImplementedWarn,
	        /**
	         * @method
	         * @return {boolean}
	         */
	        isUniqueVertex: notImplementedWarn,
	        /**
	         * @method
	         */
	        generateUniqueVertex: notImplementedWarn,
	        /**
	         * @method
	         */
	        generateTangents: notImplementedWarn,
	        /**
	         * @method
	         */
	        generateBarycentric: notImplementedWarn,
	        /**
	         * @method
	         * @param {qtek.math.Matrix4} matrix
	         */
	        applyTransform: notImplementedWarn,
	        /**
	         * @method
	         * @param {WebGLRenderingContext} [gl]
	         */
	        dispose: notImplementedWarn
	    });

	    Geometry.STATIC_DRAW = glenum.STATIC_DRAW;
	    Geometry.DYNAMIC_DRAW = glenum.DYNAMIC_DRAW;
	    Geometry.STREAM_DRAW = glenum.STREAM_DRAW;

	    Geometry.AttributeBuffer = AttributeBuffer;
	    Geometry.IndicesBuffer = IndicesBuffer;
	    Geometry.Attribute = Attribute;
	    Geometry.StaticAttribute = StaticAttribute;

	    module.exports = Geometry;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Node = __webpack_require__(28);
	    var Light = __webpack_require__(38);
	    var BoundingBox = __webpack_require__(13);

	    /**
	     * @constructor qtek.Scene
	     * @extends qtek.Node
	     */
	    var Scene = Node.extend(function () {
	        return /** @lends qtek.Scene# */ {
	            /**
	             * Global material of scene
	             * @type {Material}
	             */
	            material: null,

	            /**
	             * @type {boolean}
	             */
	            autoUpdate: true,

	            /**
	             * Opaque renderable list, it will be updated automatically
	             * @type {Renderable[]}
	             * @readonly
	             */
	            opaqueQueue: [],

	            /**
	             * Opaque renderable list, it will be updated automatically
	             * @type {Renderable[]}
	             * @readonly
	             */
	            transparentQueue: [],

	            lights: [],


	            /**
	             * Scene bounding box in view space.
	             * Used when camera needs to adujst the near and far plane automatically
	             * so that the view frustum contains the visible objects as tightly as possible.
	             * Notice:
	             *  It is updated after rendering (in the step of frustum culling passingly). So may be not so accurate, but saves a lot of calculation
	             *
	             * @type {qtek.math.BoundingBox}
	             */
	            viewBoundingBoxLastFrame: new BoundingBox(),

	            // Properties to save the light information in the scene
	            // Will be set in the render function
	            _lightUniforms: {},

	            _lightNumber: {
	                // groupId: {
	                    // POINT_LIGHT: 0,
	                    // DIRECTIONAL_LIGHT: 0,
	                    // SPOT_LIGHT: 0,
	                    // AMBIENT_LIGHT: 0,
	                    // AMBIENT_SH_LIGHT: 0
	                // }
	            },

	            _opaqueObjectCount: 0,
	            _transparentObjectCount: 0,

	            _nodeRepository: {},

	        };
	    }, function () {
	        this._scene = this;
	    },
	    /** @lends qtek.Scene.prototype. */
	    {
	        /**
	         * Add node to scene
	         * @param {Node} node
	         */
	        addToScene: function (node) {
	            if (node.name) {
	                this._nodeRepository[node.name] = node;
	            }
	        },

	        /**
	         * Remove node from scene
	         * @param {Node} node
	         */
	        removeFromScene: function (node) {
	            if (node.name) {
	                delete this._nodeRepository[node.name];
	            }
	        },

	        /**
	         * Get node by name
	         * @param  {string} name
	         * @return {Node}
	         * @DEPRECATED
	         */
	        getNode: function (name) {
	            return this._nodeRepository[name];
	        },

	        /**
	         * Clone a new scene node recursively, including material, skeleton.
	         * Shader and geometry instances will not been cloned
	         * @param  {qtek.Node} node
	         * @return {qtek.Node}
	         */
	        cloneNode: function (node) {
	            var newNode = node.clone();
	            var materialsMap = {};

	            var cloneSkeleton = function (current, currentNew) {
	                if (current.skeleton) {
	                    currentNew.skeleton = current.skeleton.clone(node, newNode);
	                    currentNew.joints = current.joints.slice();
	                }
	                if (current.material) {
	                    materialsMap[current.material.__GUID__] = {
	                        oldMat: current.material
	                    };
	                }
	                for (var i = 0; i < current._children.length; i++) {
	                    cloneSkeleton(current._children[i], currentNew._children[i]);
	                }
	            };

	            cloneSkeleton(node, newNode);

	            for (var guid in materialsMap) {
	                materialsMap[guid].newMat = materialsMap[guid].oldMat.clone();
	            }

	            // Replace material
	            newNode.traverse(function (current) {
	                if (current.material) {
	                    current.material = materialsMap[current.material.__GUID__].newMat;
	                }
	            });

	            return newNode;
	        },


	        /**
	         * Scene update
	         * @param  {boolean} force
	         * @param  {boolean} notUpdateLights
	         *         Useful in deferred pipeline
	         */
	        update: function (force, notUpdateLights) {
	            if (!(this.autoUpdate || force)) {
	                return;
	            }
	            Node.prototype.update.call(this, force);

	            var lights = this.lights;
	            var sceneMaterialTransparent = this.material && this.material.transparent;

	            this._opaqueObjectCount = 0;
	            this._transparentObjectCount = 0;

	            lights.length = 0;

	            this._updateRenderQueue(this, sceneMaterialTransparent);

	            this.opaqueQueue.length = this._opaqueObjectCount;
	            this.transparentQueue.length = this._transparentObjectCount;

	            // reset
	            if (!notUpdateLights) {
	                var lightNumber = this._lightNumber;
	                // Reset light numbers
	                for (var group in lightNumber) {
	                    for (var type in lightNumber[group]) {
	                        lightNumber[group][type] = 0;
	                    }
	                }
	                for (var i = 0; i < lights.length; i++) {
	                    var light = lights[i];
	                    var group = light.group;
	                    if (!lightNumber[group]) {
	                        lightNumber[group] = {};
	                    }
	                    // User can use any type of light
	                    lightNumber[group][light.type] = lightNumber[group][light.type] || 0;
	                    lightNumber[group][light.type]++;
	                }
	                // PENDING Remove unused group?

	                this._updateLightUniforms();
	            }
	        },

	        // Traverse the scene and add the renderable
	        // object to the render queue
	        _updateRenderQueue: function (parent, sceneMaterialTransparent) {
	            if (parent.invisible) {
	                return;
	            }

	            for (var i = 0; i < parent._children.length; i++) {
	                var child = parent._children[i];

	                if (child instanceof Light) {
	                    this.lights.push(child);
	                }
	                if (child.isRenderable()) {
	                    if (child.material.transparent || sceneMaterialTransparent) {
	                        this.transparentQueue[this._transparentObjectCount++] = child;
	                    }
	                    else {
	                        this.opaqueQueue[this._opaqueObjectCount++] = child;
	                    }
	                }
	                if (child._children.length > 0) {
	                    this._updateRenderQueue(child);
	                }
	            }
	        },

	        _updateLightUniforms: function () {
	            var lights = this.lights;
	            // Put the light cast shadow before the light not cast shadow
	            lights.sort(lightSortFunc);

	            var lightUniforms = this._lightUniforms;
	            for (var group in lightUniforms) {
	                for (var symbol in lightUniforms[group]) {
	                    lightUniforms[group][symbol].value.length = 0;
	                }
	            }
	            for (var i = 0; i < lights.length; i++) {

	                var light = lights[i];
	                var group = light.group;

	                for (var symbol in light.uniformTemplates) {

	                    var uniformTpl = light.uniformTemplates[symbol];
	                    if (!lightUniforms[group]) {
	                        lightUniforms[group] = {};
	                    }
	                    if (!lightUniforms[group][symbol]) {
	                        lightUniforms[group][symbol] = {
	                            type: '',
	                            value: []
	                        };
	                    }
	                    var value = uniformTpl.value(light);
	                    var lu = lightUniforms[group][symbol];
	                    lu.type = uniformTpl.type + 'v';
	                    switch (uniformTpl.type) {
	                        case '1i':
	                        case '1f':
	                        case 't':
	                            lu.value.push(value);
	                            break;
	                        case '2f':
	                        case '3f':
	                        case '4f':
	                            for (var j =0; j < value.length; j++) {
	                                lu.value.push(value[j]);
	                            }
	                            break;
	                        default:
	                            console.error('Unkown light uniform type ' + uniformTpl.type);
	                    }
	                }
	            }
	        },

	        isShaderLightNumberChanged: function (shader) {
	            var group = shader.lightGroup;
	            // PENDING Performance
	            for (var type in this._lightNumber[group]) {
	                if (this._lightNumber[group][type] !== shader.lightNumber[type]) {
	                    return true;
	                }
	            }
	            for (var type in shader.lightNumber) {
	                if (this._lightNumber[group][type] !== shader.lightNumber[type]) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        setShaderLightNumber: function (shader) {
	            var group = shader.lightGroup;
	            for (var type in this._lightNumber[group]) {
	                shader.lightNumber[type] = this._lightNumber[group][type];
	            }
	            shader.dirty();
	        },

	        setLightUniforms: function (shader, _gl) {
	            var group = shader.lightGroup;
	            for (var symbol in this._lightUniforms[group]) {
	                var lu = this._lightUniforms[group][symbol];
	                if (lu.type === 'tv') {
	                    for (var i = 0; i < lu.value.length; i++) {
	                        var texture = lu.value[i];
	                        var slot = shader.currentTextureSlot();
	                        var result = shader.setUniform(_gl, '1i', symbol, slot);
	                        if (result) {
	                            shader.useCurrentTextureSlot(_gl, texture);
	                        }
	                    }
	                }
	                else {
	                    shader.setUniform(_gl, lu.type, symbol, lu.value);
	                }
	            }
	        },

	        /**
	         * Dispose self, clear all the scene objects
	         * But resources of gl like texuture, shader will not be disposed.
	         * Mostly you should use disposeScene method in Renderer to do dispose.
	         */
	        dispose: function () {
	            this.material = null;
	            this.opaqueQueue = [];
	            this.transparentQueue = [];

	            this.lights = [];

	            this._lightUniforms = {};

	            this._lightNumber = {};
	            this._nodeRepository = {};
	        }
	    });

	    function lightSortFunc(a, b) {
	        if (b.castShadow && !a.castShadow) {
	            return true;
	        }
	    }

	    module.exports = Scene;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Node = __webpack_require__(28);

	    /**
	     * @constructor qtek.Light
	     * @extends qtek.Node
	     */
	    var Light = Node.extend(function(){
	        return /** @lends qtek.Light# */ {
	            /**
	             * Light RGB color
	             * @type {number[]}
	             */
	            color: [1, 1, 1],

	            /**
	             * Light intensity
	             * @type {number}
	             */
	            intensity: 1.0,

	            // Config for shadow map
	            /**
	             * If light cast shadow
	             * @type {boolean}
	             */
	            castShadow: true,

	            /**
	             * Shadow map size
	             * @type {number}
	             */
	            shadowResolution: 512,

	            /**
	             * Light group, shader with same `lightGroup` will be affected
	             *
	             * Only useful in forward rendering
	             * @type {number}
	             */
	            group: 0
	        };
	    },
	    /** @lends qtek.Light.prototype. */
	    {
	        /**
	         * Light type
	         * @type {string}
	         * @memberOf qtek.Light#
	         */
	        type: '',

	        /**
	         * @return {qtek.Light}
	         * @memberOf qtek.Light.prototype
	         */
	        clone: function() {
	            var light = Node.prototype.clone.call(this);
	            light.color = Array.prototype.slice.call(this.color);
	            light.intensity = this.intensity;
	            light.castShadow = this.castShadow;
	            light.shadowResolution = this.shadowResolution;

	            return light;
	        }
	    });

	    module.exports = Light;


/***/ },
/* 39 */
/***/ function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU


	    /**
	     * Simple double linked list. Compared with array, it has O(1) remove operation.
	     * @constructor
	     */
	    var LinkedList = function () {

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.head = null;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.tail = null;

	        this._len = 0;
	    };

	    var linkedListProto = LinkedList.prototype;
	    /**
	     * Insert a new value at the tail
	     * @param  {} val
	     * @return {module:zrender/core/LRU~Entry}
	     */
	    linkedListProto.insert = function (val) {
	        var entry = new Entry(val);
	        this.insertEntry(entry);
	        return entry;
	    };

	    /**
	     * Insert an entry at the tail
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.insertEntry = function (entry) {
	        if (!this.head) {
	            this.head = this.tail = entry;
	        }
	        else {
	            this.tail.next = entry;
	            entry.prev = this.tail;
	            entry.next = null;
	            this.tail = entry;
	        }
	        this._len++;
	    };

	    /**
	     * Remove entry.
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.remove = function (entry) {
	        var prev = entry.prev;
	        var next = entry.next;
	        if (prev) {
	            prev.next = next;
	        }
	        else {
	            // Is head
	            this.head = next;
	        }
	        if (next) {
	            next.prev = prev;
	        }
	        else {
	            // Is tail
	            this.tail = prev;
	        }
	        entry.next = entry.prev = null;
	        this._len--;
	    };

	    /**
	     * @return {number}
	     */
	    linkedListProto.len = function () {
	        return this._len;
	    };

	    /**
	     * Clear list
	     */
	    linkedListProto.clear = function () {
	        this.head = this.tail = null;
	        this._len = 0;
	    };

	    /**
	     * @constructor
	     * @param {} val
	     */
	    var Entry = function (val) {
	        /**
	         * @type {}
	         */
	        this.value = val;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.next;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.prev;
	    };

	    /**
	     * LRU Cache
	     * @constructor
	     * @alias module:zrender/core/LRU
	     */
	    var LRU = function (maxSize) {

	        this._list = new LinkedList();

	        this._map = {};

	        this._maxSize = maxSize || 10;

	        this._lastRemovedEntry = null;
	    };

	    var LRUProto = LRU.prototype;

	    /**
	     * @param  {string} key
	     * @param  {} value
	     * @return {} Removed value
	     */
	    LRUProto.put = function (key, value) {
	        var list = this._list;
	        var map = this._map;
	        var removed = null;
	        if (map[key] == null) {
	            var len = list.len();
	            // Reuse last removed entry
	            var entry = this._lastRemovedEntry;

	            if (len >= this._maxSize && len > 0) {
	                // Remove the least recently used
	                var leastUsedEntry = list.head;
	                list.remove(leastUsedEntry);
	                delete map[leastUsedEntry.key];

	                removed = leastUsedEntry.value;
	                this._lastRemovedEntry = leastUsedEntry;
	            }

	            if (entry) {
	                entry.value = value;
	            }
	            else {
	                entry = new Entry(value);
	            }
	            entry.key = key;
	            list.insertEntry(entry);
	            map[key] = entry;
	        }

	        return removed;
	    };

	    /**
	     * @param  {string} key
	     * @return {}
	     */
	    LRUProto.get = function (key) {
	        var entry = this._map[key];
	        var list = this._list;
	        if (entry != null) {
	            // Put the latest used entry in the tail
	            if (entry !== list.tail) {
	                list.remove(entry);
	                list.insertEntry(entry);
	            }

	            return entry.value;
	        }
	    };

	    /**
	     * Clear the cache
	     */
	    LRUProto.clear = function () {
	        this._list.clear();
	        this._map = {};
	    };

	    module.exports = LRU;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Texture2D = __webpack_require__(33);
	    var TextureCube = __webpack_require__(41);
	    var request = __webpack_require__(42);
	    var EnvironmentMapPass = __webpack_require__(43);
	    var Skydome = __webpack_require__(49);
	    var Scene = __webpack_require__(37);

	    var dds = __webpack_require__(52);
	    var hdr = __webpack_require__(53);

	    /**
	     * @namespace qtek.util.texture
	     */
	    var textureUtil = {
	        /**
	         * @param  {string|object} path
	         * @param  {object} [option]
	         * @param  {Function} [onsuccess]
	         * @param  {Function} [onerror]
	         * @return {qtek.Texture}
	         *
	         * @memberOf qtek.util.texture
	         */
	        loadTexture: function (path, option, onsuccess, onerror) {
	            var texture;
	            if (typeof(option) === 'function') {
	                onsuccess = option;
	                onerror = onsuccess;
	                option = {};
	            }
	            else {
	                option = option || {};
	            }
	            if (typeof(path) === 'string') {
	                if (path.match(/.hdr$/)) {
	                    texture = new Texture2D({
	                        width: 0,
	                        height: 0
	                    });
	                    textureUtil._fetchTexture(
	                        path,
	                        function (data) {
	                            hdr.parseRGBE(data, texture, option.exposure);
	                            texture.dirty();
	                            onsuccess && onsuccess(texture);
	                        },
	                        onerror
	                    );
	                    return texture;
	                }
	                else if (path.match(/.dds$/)) {
	                    texture = new Texture2D({
	                        width: 0,
	                        height: 0
	                    });
	                    textureUtil._fetchTexture(
	                        path,
	                        function (data) {
	                            dds.parse(data, texture);
	                            texture.dirty();
	                            onsuccess && onsuccess(texture);
	                        },
	                        onerror
	                    );
	                }
	                else {
	                    texture = new Texture2D();
	                    texture.load(path);
	                    texture.success(onsuccess);
	                    texture.error(onerror);
	                }
	            }
	            else if (typeof(path) == 'object' && typeof(path.px) !== 'undefined') {
	                var texture = new TextureCube();
	                texture.load(path);
	                texture.success(onsuccess);
	                texture.error(onerror);
	            }
	            return texture;
	        },

	        /**
	         * Load a panorama texture and render it to a cube map
	         * @param  {qtek.Renderer} renderer
	         * @param  {string} path
	         * @param  {qtek.TextureCube} cubeMap
	         * @param  {object} [option]
	         * @param  {boolean} [option.encodeRGBM]
	         * @param  {number} [option.exposure]
	         * @param  {Function} [onsuccess]
	         * @param  {Function} [onerror]
	         *
	         * @memberOf qtek.util.texture
	         */
	        loadPanorama: function (renderer, path, cubeMap, option, onsuccess, onerror) {
	            var self = this;

	            if (typeof(option) === 'function') {
	                onsuccess = option;
	                onerror = onsuccess;
	                option = {};
	            }
	            else {
	                option = option || {};
	            }

	            textureUtil.loadTexture(path, option, function (texture) {
	                // PENDING
	                texture.flipY = option.flipY || false;
	                self.panoramaToCubeMap(renderer, texture, cubeMap, option);
	                texture.dispose(renderer.gl);
	                onsuccess && onsuccess(cubeMap);
	            }, onerror);
	        },

	        /**
	         * Render a panorama texture to a cube map
	         * @param  {qtek.Renderer} renderer
	         * @param  {qtek.Texture2D} panoramaMap
	         * @param  {qtek.TextureCube} cubeMap
	         * @param  {Object} option
	         * @param  {boolean} [option.encodeRGBM]
	         *
	         * @memberOf qtek.util.texture
	         */
	        panoramaToCubeMap: function (renderer, panoramaMap, cubeMap, option) {
	            var environmentMapPass = new EnvironmentMapPass();
	            var skydome = new Skydome({
	                scene: new Scene()
	            });
	            skydome.material.set('diffuseMap', panoramaMap);

	            option = option || {};
	            if (option.encodeRGBM) {
	                skydome.material.shader.define('fragment', 'RGBM_ENCODE');
	            }

	            environmentMapPass.texture = cubeMap;
	            environmentMapPass.render(renderer, skydome.scene);
	            environmentMapPass.texture = null;
	            environmentMapPass.dispose(renderer);
	            return cubeMap;
	        },

	        _fetchTexture: function (path, onsuccess, onerror) {
	            request.get({
	                url: path,
	                responseType: 'arraybuffer',
	                onload: onsuccess,
	                onerror: onerror
	            });
	        },

	        /**
	         * Create a chessboard texture
	         * @param  {number} [size]
	         * @param  {number} [unitSize]
	         * @param  {string} [color1]
	         * @param  {string} [color2]
	         * @return {qtek.Texture2D}
	         *
	         * @memberOf qtek.util.texture
	         */
	        createChessboard: function (size, unitSize, color1, color2) {
	            size = size || 512;
	            unitSize = unitSize || 64;
	            color1 = color1 || 'black';
	            color2 = color2 || 'white';

	            var repeat = Math.ceil(size / unitSize);

	            var canvas = document.createElement('canvas');
	            canvas.width = size;
	            canvas.height = size;
	            var ctx = canvas.getContext('2d');
	            ctx.fillStyle = color2;
	            ctx.fillRect(0, 0, size, size);

	            ctx.fillStyle = color1;
	            for (var i = 0; i < repeat; i++) {
	                for (var j = 0; j < repeat; j++) {
	                    var isFill = j % 2 ? (i % 2) : (i % 2 - 1);
	                    if (isFill) {
	                        ctx.fillRect(i * unitSize, j * unitSize, unitSize, unitSize);
	                    }
	                }
	            }

	            var texture = new Texture2D({
	                image: canvas,
	                anisotropic: 8
	            });

	            return texture;
	        },

	        /**
	         * Create a blank pure color 1x1 texture
	         * @param  {string} color
	         * @return {qtek.Texture2D}
	         *
	         * @memberOf qtek.util.texture
	         */
	        createBlank: function (color) {
	            var canvas = document.createElement('canvas');
	            canvas.width = 1;
	            canvas.height = 1;
	            var ctx = canvas.getContext('2d');
	            ctx.fillStyle = color;
	            ctx.fillRect(0, 0, 1, 1);

	            var texture = new Texture2D({
	                image: canvas
	            });

	            return texture;
	        }
	    };

	    module.exports = textureUtil;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Texture = __webpack_require__(21);
	    var glinfo = __webpack_require__(10);
	    var glenum = __webpack_require__(11);
	    var util = __webpack_require__(9);
	    var mathUtil = __webpack_require__(34);
	    var isPowerOfTwo = mathUtil.isPowerOfTwo;

	    var targetList = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

	    /**
	     * @constructor qtek.TextureCube
	     * @extends qtek.Texture
	     *
	     * @example
	     *     ...
	     *     var mat = new qtek.Material({
	     *         shader: qtek.shader.library.get('qtek.phong', 'environmentMap')
	     *     });
	     *     var envMap = new qtek.TextureCube();
	     *     envMap.load({
	     *         'px': 'assets/textures/sky/px.jpg',
	     *         'nx': 'assets/textures/sky/nx.jpg'
	     *         'py': 'assets/textures/sky/py.jpg'
	     *         'ny': 'assets/textures/sky/ny.jpg'
	     *         'pz': 'assets/textures/sky/pz.jpg'
	     *         'nz': 'assets/textures/sky/nz.jpg'
	     *     });
	     *     mat.set('environmentMap', envMap);
	     *     ...
	     *     envMap.success(function() {
	     *         // Wait for the sky texture loaded
	     *         animation.on('frame', function(frameTime) {
	     *             renderer.render(scene, camera);
	     *         });
	     *     });
	     */
	    var TextureCube = Texture.extend(function() {
	        return /** @lends qtek.TextureCube# */{
	            /**
	             * @type {Object}
	             * @property {HTMLImageElement|HTMLCanvasElemnet} px
	             * @property {HTMLImageElement|HTMLCanvasElemnet} nx
	             * @property {HTMLImageElement|HTMLCanvasElemnet} py
	             * @property {HTMLImageElement|HTMLCanvasElemnet} ny
	             * @property {HTMLImageElement|HTMLCanvasElemnet} pz
	             * @property {HTMLImageElement|HTMLCanvasElemnet} nz
	             */
	            image: {
	                px: null,
	                nx: null,
	                py: null,
	                ny: null,
	                pz: null,
	                nz: null
	            },
	            /**
	             * @type {Object}
	             * @property {Uint8Array} px
	             * @property {Uint8Array} nx
	             * @property {Uint8Array} py
	             * @property {Uint8Array} ny
	             * @property {Uint8Array} pz
	             * @property {Uint8Array} nz
	             */
	            pixels: {
	                px: null,
	                nx: null,
	                py: null,
	                ny: null,
	                pz: null,
	                nz: null
	            },

	            /**
	             * @type {Array.<Object>}
	             */
	            mipmaps: []
	       };
	    }, {
	        update: function(_gl) {

	            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));

	            this.beforeUpdate(_gl);

	            var glFormat = this.format;
	            var glType = this.type;

	            _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_S, this.wrapS);
	            _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_WRAP_T, this.wrapT);

	            _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MAG_FILTER, this.magFilter);
	            _gl.texParameteri(_gl.TEXTURE_CUBE_MAP, _gl.TEXTURE_MIN_FILTER, this.minFilter);

	            var anisotropicExt = glinfo.getExtension(_gl, 'EXT_texture_filter_anisotropic');
	            if (anisotropicExt && this.anisotropic > 1) {
	                _gl.texParameterf(_gl.TEXTURE_CUBE_MAP, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropic);
	            }

	            // Fallback to float type if browser don't have half float extension
	            if (glType === 36193) {
	                var halfFloatExt = glinfo.getExtension(_gl, 'OES_texture_half_float');
	                if (!halfFloatExt) {
	                    glType = glenum.FLOAT;
	                }
	            }

	            if (this.mipmaps.length) {
	                var width = this.width;
	                var height = this.height;
	                for (var i = 0; i < this.mipmaps.length; i++) {
	                    var mipmap = this.mipmaps[i];
	                    this._updateTextureData(_gl, mipmap, i, width, height, glFormat, glType);
	                    width /= 2;
	                    height /= 2;
	                }
	            }
	            else {
	                this._updateTextureData(_gl, this, 0, this.width, this.height, glFormat, glType);

	                if (!this.NPOT && this.useMipmap) {
	                    _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
	                }
	            }

	            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);
	        },

	        _updateTextureData: function (_gl, data, level, width, height, glFormat, glType) {
	            for (var i = 0; i < 6; i++) {
	                var target = targetList[i];
	                var img = data.image && data.image[target];
	                if (img) {
	                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, glFormat, glType, img);
	                }
	                else {
	                    _gl.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level, glFormat, width, height, 0, glFormat, glType, data.pixels && data.pixels[target]);
	                }
	            }
	        },

	        /**
	         * @param  {WebGLRenderingContext} _gl
	         * @memberOf qtek.TextureCube.prototype
	         */
	        generateMipmap: function(_gl) {
	            if (this.useMipmap && !this.NPOT) {
	                _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this._cache.get('webgl_texture'));
	                _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);
	            }
	        },

	        bind: function(_gl) {

	            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, this.getWebGLTexture(_gl));
	        },

	        unbind: function(_gl) {
	            _gl.bindTexture(_gl.TEXTURE_CUBE_MAP, null);
	        },

	        // Overwrite the isPowerOfTwo method
	        isPowerOfTwo: function() {
	            if (this.image.px) {
	                return isPowerOfTwo(this.image.px.width)
	                    && isPowerOfTwo(this.image.px.height);
	            }
	            else {
	                return isPowerOfTwo(this.width)
	                    && isPowerOfTwo(this.height);
	            }
	        },

	        isRenderable: function() {
	            if (this.image.px) {
	                return isImageRenderable(this.image.px)
	                    && isImageRenderable(this.image.nx)
	                    && isImageRenderable(this.image.py)
	                    && isImageRenderable(this.image.ny)
	                    && isImageRenderable(this.image.pz)
	                    && isImageRenderable(this.image.nz);
	            }
	            else {
	                return !!(this.width && this.height);
	            }
	        },

	        load: function(imageList) {
	            var loading = 0;
	            var self = this;
	            util.each(imageList, function(src, target){
	                var image = new Image();
	                image.onload = function() {
	                    loading --;
	                    if (loading === 0){
	                        self.dirty();
	                        self.trigger('success', self);
	                    }
	                    image.onload = null;
	                };
	                image.onerror = function() {
	                    loading --;
	                    image.onerror = null;
	                };

	                loading++;
	                image.src = src;
	                self.image[target] = image;
	            });

	            return this;
	        }
	    });

	    function isImageRenderable(image) {
	        return image.nodeName === 'CANVAS' ||
	                image.nodeName === 'VIDEO' ||
	                image.complete;
	    }

	    module.exports = TextureCube;


/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';


	    function get(options) {

	        var xhr = new XMLHttpRequest();

	        xhr.open('get', options.url);
	        // With response type set browser can get and put binary data
	        // https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data
	        // Default is text, and it can be set
	        // arraybuffer, blob, document, json, text
	        xhr.responseType = options.responseType || 'text';

	        if (options.onprogress) {
	            //https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest
	            xhr.onprogress = function(e) {
	                if (e.lengthComputable) {
	                    var percent = e.loaded / e.total;
	                    options.onprogress(percent, e.loaded, e.total);
	                } else {
	                    options.onprogress(null);
	                }
	            };
	        }
	        xhr.onload = function(e) {
	            options.onload && options.onload(xhr.response);
	        };
	        if (options.onerror) {
	            xhr.onerror = options.onerror;
	        }
	        xhr.send(null);
	    }

	    module.exports = {
	        get : get
	    };


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Base = __webpack_require__(6);
	    var Vector3 = __webpack_require__(14);
	    var PerspectiveCamera = __webpack_require__(44);
	    var FrameBuffer = __webpack_require__(48);

	    var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

	    /**
	     * Pass rendering scene to a environment cube map
	     *
	     * @constructor qtek.prePass.EnvironmentMap
	     * @extends qtek.core.Base
	     * @example
	     *     // Example of car reflection
	     *     var envMap = new qtek.TextureCube({
	     *         width: 256,
	     *         height: 256
	     *     });
	     *     var envPass = new qtek.prePass.EnvironmentMap({
	     *         position: car.position,
	     *         texture: envMap
	     *     });
	     *     var carBody = car.getChildByName('body');
	     *     carBody.material.shader.enableTexture('environmentMap');
	     *     carBody.material.set('environmentMap', envMap);
	     *     ...
	     *     animation.on('frame', function(frameTime) {
	     *         envPass.render(renderer, scene);
	     *         renderer.render(scene, camera);
	     *     });
	     */
	    var EnvironmentMapPass = Base.extend(function() {
	        var ret = {
	            /**
	             * Camera position
	             * @type {qtek.math.Vector3}
	             * @memberOf qtek.prePass.EnvironmentMap#
	             */
	            position: new Vector3(),
	            /**
	             * Camera far plane
	             * @type {number}
	             * @memberOf qtek.prePass.EnvironmentMap#
	             */
	            far: 1000,
	            /**
	             * Camera near plane
	             * @type {number}
	             * @memberOf qtek.prePass.EnvironmentMap#
	             */
	            near: 0.1,
	            /**
	             * Environment cube map
	             * @type {qtek.TextureCube}
	             * @memberOf qtek.prePass.EnvironmentMap#
	             */
	            texture: null,

	            /**
	             * Used if you wan't have shadow in environment map
	             * @type {qtek.prePass.ShadowMap}
	             */
	            shadowMapPass: null,
	        };
	        var cameras = ret._cameras = {
	            px: new PerspectiveCamera({ fov: 90 }),
	            nx: new PerspectiveCamera({ fov: 90 }),
	            py: new PerspectiveCamera({ fov: 90 }),
	            ny: new PerspectiveCamera({ fov: 90 }),
	            pz: new PerspectiveCamera({ fov: 90 }),
	            nz: new PerspectiveCamera({ fov: 90 })
	        };
	        cameras.px.lookAt(Vector3.POSITIVE_X, Vector3.NEGATIVE_Y);
	        cameras.nx.lookAt(Vector3.NEGATIVE_X, Vector3.NEGATIVE_Y);
	        cameras.py.lookAt(Vector3.POSITIVE_Y, Vector3.POSITIVE_Z);
	        cameras.ny.lookAt(Vector3.NEGATIVE_Y, Vector3.NEGATIVE_Z);
	        cameras.pz.lookAt(Vector3.POSITIVE_Z, Vector3.NEGATIVE_Y);
	        cameras.nz.lookAt(Vector3.NEGATIVE_Z, Vector3.NEGATIVE_Y);

	        // FIXME In windows, use one framebuffer only renders one side of cubemap
	        ret._frameBuffer = new FrameBuffer()

	        return ret;
	    }, {
	        /**
	         * @param  {string} target
	         * @return  {qtek.Camera}
	         */
	        getCamera: function (target) {
	            return this._cameras[target];
	        },
	        /**
	         * @param  {qtek.Renderer} renderer
	         * @param  {qtek.Scene} scene
	         * @param  {boolean} [notUpdateScene=false]
	         */
	        render: function(renderer, scene, notUpdateScene) {
	            var _gl = renderer.gl;
	            if (!notUpdateScene) {
	                scene.update();
	            }
	            // Tweak fov
	            // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
	            var n = this.texture.width;
	            var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;

	            for (var i = 0; i < 6; i++) {
	                var target = targets[i];
	                var camera = this._cameras[target];
	                Vector3.copy(camera.position, this.position);

	                camera.far = this.far;
	                camera.near = this.near;
	                camera.fov = fov;

	                if (this.shadowMapPass) {
	                    camera.update();

	                    // update boundingBoxLastFrame
	                    var bbox = scene.getBoundingBox(function (el) {
	                        return !el.invisible;
	                    });
	                    bbox.applyTransform(camera.viewMatrix);
	                    scene.viewBoundingBoxLastFrame.copy(bbox);

	                    this.shadowMapPass.render(renderer, scene, camera, true);
	                }
	                this._frameBuffer.attach(
	                    this.texture, _gl.COLOR_ATTACHMENT0,
	                    _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i
	                );
	                this._frameBuffer.bind(renderer);
	                renderer.render(scene, camera, true);
	                this._frameBuffer.unbind(renderer);
	            }
	        },
	        /**
	         * @param  {qtek.Renderer} renderer
	         */
	        dispose: function(gl) {
	            this._frameBuffer.dispose(gl);
	        }
	    });

	    module.exports = EnvironmentMapPass;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Camera = __webpack_require__(45);

	    /**
	     * @constructor qtek.camera.Perspective
	     * @extends qtek.Camera
	     */
	    var Perspective = Camera.extend(
	    /** @lends qtek.camera.Perspective# */
	    {
	        /**
	         * Vertical field of view in radians
	         * @type {number}
	         */
	        fov: 50,
	        /**
	         * Aspect ratio, typically viewport width / height
	         * @type {number}
	         */
	        aspect: 1,
	        /**
	         * Near bound of the frustum
	         * @type {number}
	         */
	        near: 0.1,
	        /**
	         * Far bound of the frustum
	         * @type {number}
	         */
	        far: 2000
	    },
	    /** @lends qtek.camera.Perspective.prototype */
	    {

	        updateProjectionMatrix: function() {
	            var rad = this.fov / 180 * Math.PI;
	            this.projectionMatrix.perspective(rad, this.aspect, this.near, this.far);
	        },
	        decomposeProjectionMatrix: function () {
	            var m = this.projectionMatrix._array;
	            var rad = Math.atan(1 / m[5]) * 2;
	            this.fov = rad / Math.PI * 180;
	            this.aspect = m[5] / m[0];
	            this.near = m[14] / (m[10] - 1);
	            this.far = m[14] / (m[10] + 1);
	        },
	        /**
	         * @return {qtek.camera.Perspective}
	         */
	        clone: function() {
	            var camera = Camera.prototype.clone.call(this);
	            camera.fov = this.fov;
	            camera.aspect = this.aspect;
	            camera.near = this.near;
	            camera.far = this.far;

	            return camera;
	        }
	    });

	    module.exports = Perspective;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Node = __webpack_require__(28);
	    var Matrix4 = __webpack_require__(16);
	    var Frustum = __webpack_require__(46);
	    var Ray = __webpack_require__(26);

	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;
	    var vec4 = glMatrix.vec4;

	    /**
	     * @constructor qtek.Camera
	     * @extends qtek.Node
	     */
	    var Camera = Node.extend(function () {
	        return /** @lends qtek.Camera# */ {
	            /**
	             * Camera projection matrix
	             * @type {qtek.math.Matrix4}
	             */
	            projectionMatrix: new Matrix4(),

	            /**
	             * Inverse of camera projection matrix
	             * @type {qtek.math.Matrix4}
	             */
	            invProjectionMatrix: new Matrix4(),

	            /**
	             * View matrix, equal to inverse of camera's world matrix
	             * @type {qtek.math.Matrix4}
	             */
	            viewMatrix: new Matrix4(),

	            /**
	             * Camera frustum in view space
	             * @type {qtek.math.Frustum}
	             */
	            frustum: new Frustum()
	        };
	    }, function () {
	        this.update(true);
	    },
	    /** @lends qtek.Camera.prototype */
	    {

	        update: function (force) {
	            Node.prototype.update.call(this, force);
	            Matrix4.invert(this.viewMatrix, this.worldTransform);

	            this.updateProjectionMatrix();
	            Matrix4.invert(this.invProjectionMatrix, this.projectionMatrix);

	            this.frustum.setFromProjection(this.projectionMatrix);
	        },

	        /**
	         * Set camera view matrix
	         */
	        setViewMatrix: function (viewMatrix) {
	            Matrix4.invert(this.worldTransform, viewMatrix);
	            this.decomposeWorldTransform();
	        },

	        /**
	         * Decompose camera projection matrix
	         */
	        decomposeProjectionMatrix: function () {},

	        /**
	         * Set camera projection matrix
	         */
	        setProjectionMatrix: function (projectionMatrix) {
	            Matrix4.copy(this.projectionMatrix, projectionMatrix);
	            Matrix4.invert(this.invProjectionMatrix, projectionMatrix);
	            this.decomposeProjectionMatrix();
	        },
	        /**
	         * Update projection matrix, called after update
	         */
	        updateProjectionMatrix: function () {},

	        /**
	         * Cast a picking ray from camera near plane to far plane
	         * @method
	         * @param {qtek.math.Vector2} ndc
	         * @param {qtek.math.Ray} [out]
	         * @return {qtek.math.Ray}
	         */
	        castRay: (function () {
	            var v4 = vec4.create();
	            return function (ndc, out) {
	                var ray = out !== undefined ? out : new Ray();
	                var x = ndc._array[0];
	                var y = ndc._array[1];
	                vec4.set(v4, x, y, -1, 1);
	                vec4.transformMat4(v4, v4, this.invProjectionMatrix._array);
	                vec4.transformMat4(v4, v4, this.worldTransform._array);
	                vec3.scale(ray.origin._array, v4, 1 / v4[3]);

	                vec4.set(v4, x, y, 1, 1);
	                vec4.transformMat4(v4, v4, this.invProjectionMatrix._array);
	                vec4.transformMat4(v4, v4, this.worldTransform._array);
	                vec3.scale(v4, v4, 1 / v4[3]);
	                vec3.sub(ray.direction._array, v4, ray.origin._array);

	                vec3.normalize(ray.direction._array, ray.direction._array);
	                ray.direction._dirty = true;
	                ray.origin._dirty = true;

	                return ray;
	            };
	        })()

	        /**
	         * @method
	         * @name clone
	         * @return {qtek.Camera}
	         * @memberOf qtek.Camera.prototype
	         */
	    });

	    module.exports = Camera;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Vector3 = __webpack_require__(14);
	    var BoundingBox = __webpack_require__(13);
	    var Plane = __webpack_require__(47);

	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;

	    var vec3Set = vec3.set;
	    var vec3Copy = vec3.copy;
	    var vec3TranformMat4 = vec3.transformMat4;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    /**
	     * @constructor
	     * @alias qtek.math.Frustum
	     */
	    var Frustum = function() {

	        /**
	         * Eight planes to enclose the frustum
	         * @type {qtek.math.Plane[]}
	         */
	        this.planes = [];

	        for (var i = 0; i < 6; i++) {
	            this.planes.push(new Plane());
	        }

	        /**
	         * Bounding box of frustum
	         * @type {qtek.math.BoundingBox}
	         */
	        this.boundingBox = new BoundingBox();

	        /**
	         * Eight vertices of frustum
	         * @type {Float32Array[]}
	         */
	        this.vertices = [];
	        for (var i = 0; i < 8; i++) {
	            this.vertices[i] = vec3.fromValues(0, 0, 0);
	        }
	    };

	    Frustum.prototype = {

	        // http://web.archive.org/web/20120531231005/http://crazyjoke.free.fr/doc/3D/plane%20extraction.pdf
	        /**
	         * Set frustum from a projection matrix
	         * @param {qtek.math.Matrix4} projectionMatrix
	         */
	        setFromProjection: function(projectionMatrix) {

	            var planes = this.planes;
	            var m = projectionMatrix._array;
	            var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];
	            var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];
	            var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];
	            var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];

	            // Update planes
	            vec3Set(planes[0].normal._array, m3 - m0, m7 - m4, m11 - m8);
	            planes[0].distance = -(m15 - m12);
	            planes[0].normalize();

	            vec3Set(planes[1].normal._array, m3 + m0, m7 + m4, m11 + m8);
	            planes[1].distance = -(m15 + m12);
	            planes[1].normalize();

	            vec3Set(planes[2].normal._array, m3 + m1, m7 + m5, m11 + m9);
	            planes[2].distance = -(m15 + m13);
	            planes[2].normalize();

	            vec3Set(planes[3].normal._array, m3 - m1, m7 - m5, m11 - m9);
	            planes[3].distance = -(m15 - m13);
	            planes[3].normalize();

	            vec3Set(planes[4].normal._array, m3 - m2, m7 - m6, m11 - m10);
	            planes[4].distance = -(m15 - m14);
	            planes[4].normalize();

	            vec3Set(planes[5].normal._array, m3 + m2, m7 + m6, m11 + m10);
	            planes[5].distance = -(m15 + m14);
	            planes[5].normalize();

	            // Perspective projection
	            var boundingBox = this.boundingBox;
	            if (m15 === 0)  {
	                var aspect = m5 / m0;
	                var zNear = -m14 / (m10 - 1);
	                var zFar = -m14 / (m10 + 1);
	                var farY = -zFar / m5;
	                var nearY = -zNear / m5;
	                // Update bounding box
	                boundingBox.min.set(-farY * aspect, -farY, zFar);
	                boundingBox.max.set(farY * aspect, farY, zNear);
	                // update vertices
	                var vertices = this.vertices;
	                //--- min z
	                // min x
	                vec3Set(vertices[0], -farY * aspect, -farY, zFar);
	                vec3Set(vertices[1], -farY * aspect, farY, zFar);
	                // max x
	                vec3Set(vertices[2], farY * aspect, -farY, zFar);
	                vec3Set(vertices[3], farY * aspect, farY, zFar);
	                //-- max z
	                vec3Set(vertices[4], -nearY * aspect, -nearY, zNear);
	                vec3Set(vertices[5], -nearY * aspect, nearY, zNear);
	                vec3Set(vertices[6], nearY * aspect, -nearY, zNear);
	                vec3Set(vertices[7], nearY * aspect, nearY, zNear);
	            }
	            else { // Orthographic projection
	                var left = (-1 - m12) / m0;
	                var right = (1 - m12) / m0;
	                var top = (1 - m13) / m5;
	                var bottom = (-1 - m13) / m5;
	                var near = (-1 - m14) / m10;
	                var far = (1 - m14) / m10;

	                boundingBox.min.set(left, bottom, far);
	                boundingBox.max.set(right, top, near);

	                var min = boundingBox.min._array;
	                var max = boundingBox.max._array;
	                var vertices = this.vertices;
	                //--- min z
	                // min x
	                vec3Set(vertices[0], min[0], min[1], min[2]);
	                vec3Set(vertices[1], min[0], max[1], min[2]);
	                // max x
	                vec3Set(vertices[2], max[0], min[1], min[2]);
	                vec3Set(vertices[3], max[0], max[1], min[2]);
	                //-- max z
	                vec3Set(vertices[4], min[0], min[1], max[2]);
	                vec3Set(vertices[5], min[0], max[1], max[2]);
	                vec3Set(vertices[6], max[0], min[1], max[2]);
	                vec3Set(vertices[7], max[0], max[1], max[2]);
	            }
	        },

	        /**
	         * Apply a affine transform matrix and set to the given bounding box
	         * @method
	         * @param {qtek.math.BoundingBox}
	         * @param {qtek.math.Matrix4}
	         * @return {qtek.math.BoundingBox}
	         */
	        getTransformedBoundingBox: (function() {

	            var tmpVec3 = vec3.create();

	            return function(bbox, matrix) {
	                var vertices = this.vertices;

	                var m4 = matrix._array;
	                var min = bbox.min;
	                var max = bbox.max;
	                var minArr = min._array;
	                var maxArr = max._array;
	                var v = vertices[0];
	                vec3TranformMat4(tmpVec3, v, m4);
	                vec3Copy(minArr, tmpVec3);
	                vec3Copy(maxArr, tmpVec3);

	                for (var i = 1; i < 8; i++) {
	                    v = vertices[i];
	                    vec3TranformMat4(tmpVec3, v, m4);

	                    minArr[0] = mathMin(tmpVec3[0], minArr[0]);
	                    minArr[1] = mathMin(tmpVec3[1], minArr[1]);
	                    minArr[2] = mathMin(tmpVec3[2], minArr[2]);

	                    maxArr[0] = mathMax(tmpVec3[0], maxArr[0]);
	                    maxArr[1] = mathMax(tmpVec3[1], maxArr[1]);
	                    maxArr[2] = mathMax(tmpVec3[2], maxArr[2]);
	                }

	                min._dirty = true;
	                max._dirty = true;

	                return bbox;
	            };
	        }) ()
	    };
	    module.exports = Frustum;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Vector3 = __webpack_require__(14);
	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;
	    var mat4 = glMatrix.mat4;
	    var vec4 = glMatrix.vec4;

	    /**
	     * @constructor
	     * @alias qtek.math.Plane
	     * @param {qtek.math.Vector3} [normal]
	     * @param {number} [distance]
	     */
	    var Plane = function(normal, distance) {
	        /**
	         * Normal of the plane
	         * @type {qtek.math.Vector3}
	         */
	        this.normal = normal || new Vector3(0, 1, 0);

	        /**
	         * Constant of the plane equation, used as distance to the origin
	         * @type {number}
	         */
	        this.distance = distance || 0;
	    };

	    Plane.prototype = {

	        constructor: Plane,

	        /**
	         * Distance from given point to plane
	         * @param  {qtek.math.Vector3} point
	         * @return {number}
	         */
	        distanceToPoint: function(point) {
	            return vec3.dot(point._array, this.normal._array) - this.distance;
	        },

	        /**
	         * Calculate the projection on the plane of point
	         * @param  {qtek.math.Vector3} point
	         * @param  {qtek.math.Vector3} out
	         * @return {qtek.math.Vector3}
	         */
	        projectPoint: function(point, out) {
	            if (!out) {
	                out = new Vector3();
	            }
	            var d = this.distanceToPoint(point);
	            vec3.scaleAndAdd(out._array, point._array, this.normal._array, -d);
	            out._dirty = true;
	            return out;
	        },

	        /**
	         * Normalize the plane's normal and calculate distance
	         */
	        normalize: function() {
	            var invLen = 1 / vec3.len(this.normal._array);
	            vec3.scale(this.normal._array, invLen);
	            this.distance *= invLen;
	        },

	        /**
	         * If the plane intersect a frustum
	         * @param  {qtek.math.Frustum} Frustum
	         * @return {boolean}
	         */
	        intersectFrustum: function(frustum) {
	            // Check if all coords of frustum is on plane all under plane
	            var coords = frustum.vertices;
	            var normal = this.normal._array;
	            var onPlane = vec3.dot(coords[0]._array, normal) > this.distance;
	            for (var i = 1; i < 8; i++) {
	                if ((vec3.dot(coords[i]._array, normal) > this.distance) != onPlane) {
	                    return true;
	                } 
	            }
	        },

	        /**
	         * Calculate the intersection point between plane and a given line
	         * @method
	         * @param {qtek.math.Vector3} start start point of line
	         * @param {qtek.math.Vector3} end end point of line
	         * @param {qtek.math.Vector3} [out]
	         * @return {qtek.math.Vector3}
	         */
	        intersectLine: (function() {
	            var rd = vec3.create();
	            return function(start, end, out) {
	                var d0 = this.distanceToPoint(start);
	                var d1 = this.distanceToPoint(end);
	                if ((d0 > 0 && d1 > 0) || (d0 < 0 && d1 < 0)) {
	                    return null;
	                }
	                // Ray intersection
	                var pn = this.normal._array;
	                var d = this.distance;
	                var ro = start._array;
	                // direction
	                vec3.sub(rd, end._array, start._array);
	                vec3.normalize(rd, rd);

	                var divider = vec3.dot(pn, rd);
	                // ray is parallel to the plane
	                if (divider === 0) {
	                    return null;
	                }
	                if (!out) {
	                    out = new Vector3();
	                }
	                var t = (vec3.dot(pn, ro) - d) / divider;
	                vec3.scaleAndAdd(out._array, ro, rd, -t);
	                out._dirty = true;
	                return out;
	            };
	        })(),

	        /**
	         * Apply an affine transform matrix to plane
	         * @method
	         * @return {qtek.math.Matrix4}
	         */
	        applyTransform: (function() {
	            var inverseTranspose = mat4.create();
	            var normalv4 = vec4.create();
	            var pointv4 = vec4.create();
	            pointv4[3] = 1;
	            return function(m4) {
	                m4 = m4._array;
	                // Transform point on plane
	                vec3.scale(pointv4, this.normal._array, this.distance);
	                vec4.transformMat4(pointv4, pointv4, m4);
	                this.distance = vec3.dot(pointv4, this.normal._array);
	                // Transform plane normal
	                mat4.invert(inverseTranspose, m4);
	                mat4.transpose(inverseTranspose, inverseTranspose);
	                normalv4[3] = 0;
	                vec3.copy(normalv4, this.normal._array);
	                vec4.transformMat4(normalv4, normalv4, inverseTranspose);
	                vec3.copy(this.normal._array, normalv4);
	            };
	        })(),

	        /**
	         * Copy from another plane
	         * @param  {qtek.math.Vector3} plane
	         */
	        copy: function(plane) {
	            vec3.copy(this.normal._array, plane.normal._array);
	            this.normal._dirty = true;
	            this.distance = plane.distance;
	        },

	        /**
	         * Clone a new plane
	         * @return {qtek.math.Plane}
	         */
	        clone: function() {
	            var plane = new Plane();
	            plane.copy(this);
	            return plane;
	        }
	    };

	    module.exports = Plane;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var Texture = __webpack_require__(21);
	    var TextureCube = __webpack_require__(41);
	    var glinfo = __webpack_require__(10);
	    var glenum = __webpack_require__(11);
	    var Cache = __webpack_require__(19);

	    var KEY_FRAMEBUFFER = 'framebuffer';
	    var KEY_RENDERBUFFER = 'renderbuffer';
	    var KEY_RENDERBUFFER_WIDTH = KEY_RENDERBUFFER + '_width';
	    var KEY_RENDERBUFFER_HEIGHT = KEY_RENDERBUFFER + '_height';
	    var KEY_RENDERBUFFER_ATTACHED = KEY_RENDERBUFFER + '_attached';
	    var KEY_DEPTHTEXTURE_ATTACHED = 'depthtexture_attached';

	    var GL_FRAMEBUFFER = glenum.FRAMEBUFFER;
	    var GL_RENDERBUFFER = glenum.RENDERBUFFER;
	    var GL_DEPTH_ATTACHMENT = glenum.DEPTH_ATTACHMENT;
	    var GL_COLOR_ATTACHMENT0 = glenum.COLOR_ATTACHMENT0;
	    /**
	     * @constructor qtek.FrameBuffer
	     * @extends qtek.core.Base
	     */
	    var FrameBuffer = Base.extend(
	    /** @lends qtek.FrameBuffer# */
	    {
	        /**
	         * If use depth buffer
	         * @type {boolean}
	         */
	        depthBuffer: true,

	        /**
	         * @type {Object}
	         */
	        viewport: null,

	        _width: 0,
	        _height: 0,

	        _textures: null,

	        _boundRenderer: null,
	    }, function () {
	        // Use cache
	        this._cache = new Cache();

	        this._textures = {};
	    },

	    /**@lends qtek.FrameBuffer.prototype. */
	    {
	        /**
	         * Get attached texture width
	         * {number}
	         */
	        // FIXME Can't use before #bind
	        getTextureWidth: function () {
	            return this._width;
	        },

	        /**
	         * Get attached texture height
	         * {number}
	         */
	        getTextureHeight: function () {
	            return this._height;
	        },

	        /**
	         * Bind the framebuffer to given renderer before rendering
	         * @param  {qtek.Renderer} renderer
	         */
	        bind: function (renderer) {

	            if (renderer.__currentFrameBuffer) {
	                // Already bound
	                if (renderer.__currentFrameBuffer === this) {
	                    return;
	                }

	                console.warn('Renderer already bound with another framebuffer. Unbind it first');
	            }
	            renderer.__currentFrameBuffer = this;

	            var _gl = renderer.gl;

	            _gl.bindFramebuffer(GL_FRAMEBUFFER, this._getFrameBufferGL(_gl));
	            this._boundRenderer = renderer;
	            var cache = this._cache;

	            cache.put('viewport', renderer.viewport);

	            var hasTextureAttached = false;
	            var width;
	            var height;
	            for (var attachment in this._textures) {
	                hasTextureAttached = true;
	                var obj = this._textures[attachment];
	                if (obj) {
	                    // TODO Do width, height checking, make sure size are same
	                    width = obj.texture.width;
	                    height = obj.texture.height;
	                    // Attach textures
	                    this._doAttach(_gl, obj.texture, attachment, obj.target);
	                }
	            }

	            this._width = width;
	            this._height = height;

	            if (!hasTextureAttached && this.depthBuffer) {
	                console.error('Must attach texture before bind, or renderbuffer may have incorrect width and height.')
	            }

	            if (this.viewport) {
	                renderer.setViewport(this.viewport);
	            }
	            else {
	                renderer.setViewport(0, 0, width, height, 1);
	            }

	            var attachedTextures = cache.get('attached_textures');
	            if (attachedTextures) {
	                for (var attachment in attachedTextures) {
	                    if (!this._textures[attachment]) {
	                        var target = attachedTextures[attachment];
	                        this._doDetach(_gl, attachment, target);
	                    }
	                }
	            }
	            if (!cache.get(KEY_DEPTHTEXTURE_ATTACHED) && this.depthBuffer) {
	                // Create a new render buffer
	                if (cache.miss(KEY_RENDERBUFFER)) {
	                    cache.put(KEY_RENDERBUFFER, _gl.createRenderbuffer());
	                }
	                var renderbuffer = cache.get(KEY_RENDERBUFFER);

	                if (width !== cache.get(KEY_RENDERBUFFER_WIDTH)
	                     || height !== cache.get(KEY_RENDERBUFFER_HEIGHT)) {
	                    _gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer);
	                    _gl.renderbufferStorage(GL_RENDERBUFFER, _gl.DEPTH_COMPONENT16, width, height);
	                    cache.put(KEY_RENDERBUFFER_WIDTH, width);
	                    cache.put(KEY_RENDERBUFFER_HEIGHT, height);
	                    _gl.bindRenderbuffer(GL_RENDERBUFFER, null);
	                }
	                if (!cache.get(KEY_RENDERBUFFER_ATTACHED)) {
	                    _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, renderbuffer);
	                    cache.put(KEY_RENDERBUFFER_ATTACHED, true);
	                }
	            }
	        },

	        /**
	         * Unbind the frame buffer after rendering
	         * @param  {qtek.Renderer} renderer
	         */
	        unbind: function (renderer) {
	            // Remove status record on renderer
	            renderer.__currentFrameBuffer = null;

	            var _gl = renderer.gl;

	            _gl.bindFramebuffer(GL_FRAMEBUFFER, null);
	            this._boundRenderer = null;

	            this._cache.use(_gl.__GLID__);
	            var viewport = this._cache.get('viewport');
	            // Reset viewport;
	            if (viewport) {
	                renderer.setViewport(viewport);
	            }

	            this.updateMipmap(_gl);
	        },

	        // Because the data of texture is changed over time,
	        // Here update the mipmaps of texture each time after rendered;
	        updateMipmap: function (_gl) {
	            for (var attachment in this._textures) {
	                var obj = this._textures[attachment];
	                if (obj) {
	                    var texture = obj.texture;
	                    // FIXME some texture format can't generate mipmap
	                    if (!texture.NPOT && texture.useMipmap
	                        && texture.minFilter === Texture.LINEAR_MIPMAP_LINEAR) {
	                        var target = texture instanceof TextureCube ? glenum.TEXTURE_CUBE_MAP : glenum.TEXTURE_2D;
	                        _gl.bindTexture(target, texture.getWebGLTexture(_gl));
	                        _gl.generateMipmap(target);
	                        _gl.bindTexture(target, null);
	                    }
	                }
	            }
	        },

	        /**
	         * 0x8CD5, 36053, FRAMEBUFFER_COMPLETE
	         * 0x8CD6, 36054, FRAMEBUFFER_INCOMPLETE_ATTACHMENT
	         * 0x8CD7, 36055, FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
	         * 0x8CD9, 36057, FRAMEBUFFER_INCOMPLETE_DIMENSIONS
	         * 0x8CDD, 36061, FRAMEBUFFER_UNSUPPORTED
	         */
	        checkStatus: function (_gl) {
	            return _gl.checkFramebufferStatus(GL_FRAMEBUFFER);
	        },

	        _getFrameBufferGL: function (_gl) {
	            var cache = this._cache;
	            cache.use(_gl.__GLID__);

	            if (cache.miss(KEY_FRAMEBUFFER)) {
	                cache.put(KEY_FRAMEBUFFER, _gl.createFramebuffer());
	            }

	            return cache.get(KEY_FRAMEBUFFER);
	        },

	        /**
	         * Attach a texture(RTT) to the framebuffer
	         * @param  {qtek.Texture} texture
	         * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
	         * @param  {number} [target=gl.TEXTURE_2D]
	         */
	        attach: function (texture, attachment, target) {

	            if (!texture.width) {
	                throw new Error('The texture attached to color buffer is not a valid.');
	            }
	            // TODO width and height check

	            // If the depth_texture extension is enabled, developers
	            // Can attach a depth texture to the depth buffer
	            // http://blog.tojicode.com/2012/07/using-webgldepthtexture.html
	            attachment = attachment || GL_COLOR_ATTACHMENT0;
	            target = target || glenum.TEXTURE_2D;

	            var boundRenderer = this._boundRenderer;
	            var _gl = boundRenderer && boundRenderer.gl;
	            var attachedTextures;

	            if (_gl) {
	                var cache = this._cache;
	                cache.use(_gl.__GLID__);
	                attachedTextures = cache.get('attached_textures');
	            }

	            // Check if texture attached
	            var previous = this._textures[attachment];
	            if (previous && previous.target === target
	                && previous.texture === texture
	                && (attachedTextures && attachedTextures[attachment] != null)
	            ) {
	                return;
	            }

	            var canAttach = true;
	            if (_gl) {
	                canAttach = this._doAttach(_gl, texture, attachment, target);
	                // Set viewport again incase attached to different size textures.
	                if (!this.viewport) {
	                    boundRenderer.setViewport(0, 0, texture.width, texture.height, 1);
	                }
	            }

	            if (canAttach) {
	                this._textures[attachment] = this._textures[attachment] || {};
	                this._textures[attachment].texture = texture;
	                this._textures[attachment].target = target;
	            }
	        },

	        _doAttach: function (_gl, texture, attachment, target) {

	            // Make sure texture is always updated
	            // Because texture width or height may be changed and in this we can't be notified
	            // FIXME awkward;
	            var webglTexture = texture.getWebGLTexture(_gl);
	            // Assume cache has been used.
	            var attachedTextures = this._cache.get('attached_textures');
	            if (attachedTextures && attachedTextures[attachment]) {
	                var obj = attachedTextures[attachment];
	                // Check if texture and target not changed
	                if (obj.texture === texture && obj.target === target) {
	                    return;
	                }
	            }
	            attachment = +attachment;

	            var canAttach = true;
	            if (attachment === GL_DEPTH_ATTACHMENT || attachment === glenum.DEPTH_STENCIL_ATTACHMENT) {
	                var extension = glinfo.getExtension(_gl, 'WEBGL_depth_texture');

	                if (!extension) {
	                    console.error('Depth texture is not supported by the browser');
	                    canAttach = false;
	                }
	                if (texture.format !== glenum.DEPTH_COMPONENT
	                    && texture.format !== glenum.DEPTH_STENCIL
	                ) {
	                    console.error('The texture attached to depth buffer is not a valid.');
	                    canAttach = false;
	                }

	                // Dispose render buffer created previous
	                if (canAttach) {
	                    var renderbuffer = this._cache.get(KEY_RENDERBUFFER);
	                    if (renderbuffer) {
	                        _gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, null);
	                        _gl.deleteRenderbuffer(renderbuffer);
	                        this._cache.put(KEY_RENDERBUFFER, false);
	                    }

	                    this._cache.put(KEY_RENDERBUFFER_ATTACHED, false);
	                    this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, true);
	                }
	            }

	            // Mipmap level can only be 0
	            _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, webglTexture, 0);

	            if (!attachedTextures) {
	                attachedTextures = {};
	                this._cache.put('attached_textures', attachedTextures);
	            }
	            attachedTextures[attachment] = attachedTextures[attachment] || {};
	            attachedTextures[attachment].texture = texture;
	            attachedTextures[attachment].target = target;

	            return canAttach;
	        },

	        _doDetach: function (_gl, attachment, target) {
	            // Detach a texture from framebuffer
	            // https://github.com/KhronosGroup/WebGL/blob/master/conformance-suites/1.0.0/conformance/framebuffer-test.html#L145
	            _gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, target, null, 0);

	            // Assume cache has been used.
	            var attachedTextures = this._cache.get('attached_textures');
	            if (attachedTextures && attachedTextures[attachment]) {
	                attachedTextures[attachment] = null;
	            }

	            if (attachment === GL_DEPTH_ATTACHMENT || attachment === glenum.DEPTH_STENCIL_ATTACHMENT) {
	                this._cache.put(KEY_DEPTHTEXTURE_ATTACHED, false);
	            }
	        },

	        /**
	         * Detach a texture
	         * @param  {number} [attachment=gl.COLOR_ATTACHMENT0]
	         * @param  {number} [target=gl.TEXTURE_2D]
	         */
	        detach: function (attachment, target) {
	            // TODO depth extension check ?
	            this._textures[attachment] = null;
	            if (this._boundRenderer) {
	                var gl = this._boundRenderer.gl;
	                var cache = this._cache;
	                cache.use(gl.__GLID__);
	                this._doDetach(gl, attachment, target);
	            }
	        },
	        /**
	         * Dispose
	         * @param  {WebGLRenderingContext} _gl
	         */
	        dispose: function (_gl) {

	            var cache = this._cache;

	            cache.use(_gl.__GLID__);

	            var renderBuffer = cache.get(KEY_RENDERBUFFER);
	            if (renderBuffer) {
	                _gl.deleteRenderbuffer(renderBuffer);
	            }
	            var frameBuffer = cache.get(KEY_FRAMEBUFFER);
	            if (frameBuffer) {
	                _gl.deleteFramebuffer(frameBuffer);
	            }
	            cache.deleteContext(_gl.__GLID__);

	            // Clear cache for reusing
	            this._textures = {};

	        }
	    });

	    FrameBuffer.DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT;
	    FrameBuffer.COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0;
	    FrameBuffer.STENCIL_ATTACHMENT = glenum.STENCIL_ATTACHMENT;
	    FrameBuffer.DEPTH_STENCIL_ATTACHMENT = glenum.DEPTH_STENCIL_ATTACHMENT;

	    module.exports = FrameBuffer;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Mesh = __webpack_require__(32);
	    var SphereGeometry = __webpack_require__(50);
	    var Shader = __webpack_require__(18);
	    var Material = __webpack_require__(20);

	    Shader.import(__webpack_require__(51));
	    /**
	     * @constructor qtek.plugin.Skydome
	     *
	     * @example
	     *     var skyTex = new qtek.Texture2D();
	     *     skyTex.load('assets/textures/sky.jpg');
	     *     var skydome = new qtek.plugin.Skydome({
	     *         scene: scene
	     *     });
	     *     skydome.material.set('diffuseMap', skyTex);
	     */
	    var Skydome = Mesh.extend(function () {

	        var skydomeShader = new Shader({
	            vertex: Shader.source('qtek.basic.vertex'),
	            fragment: Shader.source('qtek.basic.fragment')
	        });
	        skydomeShader.enableTexture('diffuseMap');

	        var material = new Material({
	            shader: skydomeShader,
	            depthMask: false
	        });

	        return {
	            /**
	             * @type {qtek.Scene}
	             * @memberOf qtek.plugin.Skydome#
	             */
	            scene: null,

	            geometry: new SphereGeometry({
	                widthSegments: 30,
	                heightSegments: 30,
	                // thetaLength: Math.PI / 2
	            }),

	            material: material,

	            environmentMap: null,

	            culling: false
	        };
	    }, function () {
	        var scene = this.scene;
	        if (scene) {
	            this.attachScene(scene);
	        }

	        if (this.environmentMap) {
	            this.setEnvironmentMap(this.environmentMap);
	        }
	    }, {
	        /**
	         * Attach the skybox to the scene
	         * @param  {qtek.Scene} scene
	         * @memberOf qtek.plugin.Skydome.prototype
	         */
	        attachScene: function (scene) {
	            if (this.scene) {
	                this.detachScene();
	            }
	            this.scene = scene;
	            scene.on('beforerender', this._beforeRenderScene, this);
	        },
	        /**
	         * Detach from scene
	         * @memberOf qtek.plugin.Skydome.prototype
	         */
	        detachScene: function () {
	            if (this.scene) {
	                this.scene.off('beforerender', this._beforeRenderScene, this);
	            }
	            this.scene = null;
	        },

	        _beforeRenderScene: function (renderer, scene, camera) {
	            this.position.copy(camera.getWorldPosition());
	            this.update();
	            renderer.renderQueue([this], camera);
	        },

	        setEnvironmentMap: function (envMap) {
	            this.material.set('diffuseMap', envMap);
	        },

	        dispose: function (gl) {
	            this.detachScene();
	            this.geometry.dispose(gl);
	            this.material.dispose(gl);
	        }
	    });

	    module.exports = Skydome;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var StaticGeometry = __webpack_require__(35);
	    var glMatrix = __webpack_require__(15);
	    var vec3 = glMatrix.vec3;
	    var vec2 = glMatrix.vec2;
	    var BoundingBox = __webpack_require__(13);

	    /**
	     * @constructor qtek.geometry.Sphere
	     * @extends qtek.StaticGeometry
	     * @param {Object} [opt]
	     * @param {number} [widthSegments]
	     * @param {number} [heightSegments]
	     * @param {number} [phiStart]
	     * @param {number} [phiLength]
	     * @param {number} [thetaStart]
	     * @param {number} [thetaLength]
	     * @param {number} [radius]
	     */
	    var Sphere = StaticGeometry.extend(
	    /** @lends qtek.geometry.Sphere# */
	    {
	        /**
	         * @type {number}
	         */
	        widthSegments: 20,
	        /**
	         * @type {number}
	         */
	        heightSegments: 20,

	        /**
	         * @type {number}
	         */
	        phiStart: 0,
	        /**
	         * @type {number}
	         */
	        phiLength: Math.PI * 2,

	        /**
	         * @type {number}
	         */
	        thetaStart: 0,
	        /**
	         * @type {number}
	         */
	        thetaLength: Math.PI,

	        /**
	         * @type {number}
	         */
	        radius: 1

	    }, function() {
	        this.build();
	    },
	    /** @lends qtek.geometry.Sphere.prototype */
	    {
	        /**
	         * Build sphere geometry
	         */
	        build: function() {
	            var heightSegments = this.heightSegments;
	            var widthSegments = this.widthSegments;

	            var positionAttr = this.attributes.position;
	            var texcoordAttr = this.attributes.texcoord0;
	            var normalAttr = this.attributes.normal;

	            var vertexCount = (widthSegments + 1) * (heightSegments + 1);
	            positionAttr.init(vertexCount);
	            texcoordAttr.init(vertexCount);
	            normalAttr.init(vertexCount);

	            var IndicesCtor = vertexCount > 0xffff ? Uint32Array : Uint16Array;
	            var indices = this.indices = new IndicesCtor(widthSegments * heightSegments * 6);

	            var x, y, z,
	                u, v,
	                i, j;

	            var radius = this.radius;
	            var phiStart = this.phiStart;
	            var phiLength = this.phiLength;
	            var thetaStart = this.thetaStart;
	            var thetaLength = this.thetaLength;
	            var radius = this.radius;

	            var pos = [];
	            var uv = [];
	            var offset = 0;
	            var divider = 1 / radius;
	            for (j = 0; j <= heightSegments; j ++) {
	                for (i = 0; i <= widthSegments; i ++) {
	                    u = i / widthSegments;
	                    v = j / heightSegments;

	                    // X axis is inverted so texture can be mapped from left to right
	                    x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
	                    y = radius * Math.cos(thetaStart + v * thetaLength);
	                    z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);

	                    pos[0] = x; pos[1] = y; pos[2] = z;
	                    uv[0] = u; uv[1] = v;
	                    positionAttr.set(offset, pos);
	                    texcoordAttr.set(offset, uv);
	                    pos[0] *= divider;
	                    pos[1] *= divider;
	                    pos[2] *= divider;
	                    normalAttr.set(offset, pos);
	                    offset++;
	                }
	            }

	            var i1, i2, i3, i4;

	            var len = widthSegments + 1;

	            var n = 0;
	            for (j = 0; j < heightSegments; j ++) {
	                for (i = 0; i < widthSegments; i ++) {
	                    i2 = j * len + i;
	                    i1 = (j * len + i + 1);
	                    i4 = (j + 1) * len + i + 1;
	                    i3 = (j + 1) * len + i;

	                    indices[n++] = i1;
	                    indices[n++] = i2;
	                    indices[n++] = i4;

	                    indices[n++] = i2;
	                    indices[n++] = i3;
	                    indices[n++] = i4;
	                }
	            }

	            this.boundingBox = new BoundingBox();
	            this.boundingBox.max.set(radius, radius, radius);
	            this.boundingBox.min.set(-radius, -radius, -radius);
	        }
	    });

	    module.exports = Sphere;


/***/ },
/* 51 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.basic.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\n\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 position : POSITION;\n\nattribute vec3 barycentric;\n\n#ifdef SKINNING\nattribute vec3 weight : WEIGHT;\nattribute vec4 joint : JOINT;\n\nuniform mat4 skinMatrix[JOINT_COUNT] : SKIN_MATRIX;\n#endif\n\nvarying vec2 v_Texcoord;\nvarying vec3 v_Barycentric;\n\nvoid main()\n{\n    vec3 skinnedPosition = position;\n\n#ifdef SKINNING\n    @import qtek.chunk.skin_matrix\n\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n\n    v_Texcoord = texcoord * uvRepeat + uvOffset;\n    v_Barycentric = barycentric;\n\n    gl_Position = worldViewProjection * vec4(skinnedPosition, 1.0);\n}\n\n@end\n\n\n\n\n@export qtek.basic.fragment\n\nvarying vec2 v_Texcoord;\nuniform sampler2D diffuseMap;\nuniform vec3 color : [1.0, 1.0, 1.0];\nuniform vec3 emission : [0.0, 0.0, 0.0];\nuniform float alpha : 1.0;\n\nuniform float lineWidth : 0.0;\nuniform vec3 lineColor : [0.0, 0.0, 0.0];\nvarying vec3 v_Barycentric;\n\n@import qtek.util.edge_factor\n\n@import qtek.util.rgbm\n\n@import qtek.util.srgb\n\nvoid main()\n{\n\n#ifdef RENDER_TEXCOORD\n    gl_FragColor = vec4(v_Texcoord, 1.0, 1.0);\n    return;\n#endif\n\n    gl_FragColor = vec4(color, alpha);\n\n#ifdef DIFFUSEMAP_ENABLED\n    vec4 tex = decodeHDR(texture2D(diffuseMap, v_Texcoord));\n\n#ifdef SRGB_DECODE\n    tex = sRGBToLinear(tex);\n#endif\n\n#if defined(DIFFUSEMAP_ALPHA_ALPHA)\n    gl_FragColor.a = tex.a;\n#endif\n\n    gl_FragColor.rgb *= tex.rgb;\n#endif\n\n    gl_FragColor.rgb += emission;\n    if( lineWidth > 0.01)\n    {\n        gl_FragColor.rgb = gl_FragColor.rgb * mix(lineColor, vec3(1.0), edgeFactor(lineWidth));\n    }\n\n#ifdef GAMMA_ENCODE\n        gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1 / 2.2));\n#endif\n\n    gl_FragColor = encodeHDR(gl_FragColor);\n\n}\n\n@end";


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Texture = __webpack_require__(21);
	    var Texture2D = __webpack_require__(33);
	    var TextureCube = __webpack_require__(41);

	    // http://msdn.microsoft.com/en-us/library/windows/desktop/bb943991(v=vs.85).aspx
	    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js
	    var DDS_MAGIC = 0x20534444;

	    var DDSD_CAPS = 0x1;
	    var DDSD_HEIGHT = 0x2;
	    var DDSD_WIDTH = 0x4;
	    var DDSD_PITCH = 0x8;
	    var DDSD_PIXELFORMAT = 0x1000;
	    var DDSD_MIPMAPCOUNT = 0x20000;
	    var DDSD_LINEARSIZE = 0x80000;
	    var DDSD_DEPTH = 0x800000;

	    var DDSCAPS_COMPLEX = 0x8;
	    var DDSCAPS_MIPMAP = 0x400000;
	    var DDSCAPS_TEXTURE = 0x1000;

	    var DDSCAPS2_CUBEMAP = 0x200;
	    var DDSCAPS2_CUBEMAP_POSITIVEX = 0x400;
	    var DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800;
	    var DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000;
	    var DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000;
	    var DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000;
	    var DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000;
	    var DDSCAPS2_VOLUME = 0x200000;

	    var DDPF_ALPHAPIXELS = 0x1;
	    var DDPF_ALPHA = 0x2;
	    var DDPF_FOURCC = 0x4;
	    var DDPF_RGB = 0x40;
	    var DDPF_YUV = 0x200;
	    var DDPF_LUMINANCE = 0x20000;

	    function fourCCToInt32(value) {
	        return value.charCodeAt(0) +
	            (value.charCodeAt(1) << 8) +
	            (value.charCodeAt(2) << 16) +
	            (value.charCodeAt(3) << 24);
	    }

	    function int32ToFourCC(value) {
	        return String.fromCharCode(
	            value & 0xff,
	            (value >> 8) & 0xff,
	            (value >> 16) & 0xff,
	            (value >> 24) & 0xff
	        );
	    }

	    var headerLengthInt = 31; // The header length in 32 bit ints

	    var FOURCC_DXT1 = fourCCToInt32('DXT1');
	    var FOURCC_DXT3 = fourCCToInt32('DXT3');
	    var FOURCC_DXT5 = fourCCToInt32('DXT5');
	     // Offsets into the header array
	    var off_magic = 0;

	    var off_size = 1;
	    var off_flags = 2;
	    var off_height = 3;
	    var off_width = 4;

	    var off_mipmapCount = 7;

	    var off_pfFlags = 20;
	    var off_pfFourCC = 21;

	    var off_caps = 27;
	    var off_caps2 = 28;
	    var off_caps3 = 29;
	    var off_caps4 = 30;

	    var ret = {
	        parse: function(arrayBuffer, out) {
	            var header = new Int32Array(arrayBuffer, 0, headerLengthInt);
	            if (header[off_magic] !== DDS_MAGIC) {
	                return null;
	            }
	            if (!header(off_pfFlags) & DDPF_FOURCC) {
	                return null;
	            }

	            var fourCC = header(off_pfFourCC);
	            var width = header[off_width];
	            var height = header[off_height];
	            var isCubeMap = header[off_caps2] & DDSCAPS2_CUBEMAP;
	            var hasMipmap = header[off_flags] & DDSD_MIPMAPCOUNT;
	            var blockBytes, internalFormat;
	            switch(fourCC) {
	                case FOURCC_DXT1:
	                    blockBytes = 8;
	                    internalFormat = Texture.COMPRESSED_RGB_S3TC_DXT1_EXT;
	                    break;
	                case FOURCC_DXT3:
	                    blockBytes = 16;
	                    internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT3_EXT;
	                    break;
	                case FOURCC_DXT5:
	                    blockBytes = 16;
	                    internalFormat = Texture.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	                    break;
	                default:
	                    return null;
	            }
	            var dataOffset = header[off_size] + 4;
	            // TODO: Suppose all face are existed
	            var faceNumber = isCubeMap ? 6 : 1;
	            var mipmapCount = 1;
	            if (hasMipmap) {
	                mipmapCount = Math.max(1, header[off_mipmapCount]);
	            }

	            var textures = [];
	            for (var f = 0; f < faceNumber; f++) {
	                var _width = width;
	                var _height = height;
	                textures[f] = new Texture2D({
	                    width : _width,
	                    height : _height,
	                    format : internalFormat
	                });
	                var mipmaps = [];
	                for (var i = 0; i < mipmapCount; i++) {
	                    var dataLength = Math.max(4, _width) / 4 * Math.max(4, _height) / 4 * blockBytes;
	                    var byteArray = new Uint8Array(arrayBuffer, dataOffset, dataLength);

	                    dataOffset += dataLength;
	                    _width *= 0.5;
	                    _height *= 0.5;
	                    mipmaps[i] = byteArray;
	                }
	                textures[f].pixels = mipmaps[0];
	                if (hasMipmap) {
	                    textures[f].mipmaps = mipmaps;
	                }
	            }
	            // TODO
	            // return isCubeMap ? textures : textures[0];
	            if (out) {
	                out.width = textures[0].width;
	                out.height = textures[0].height;
	                out.format = textures[0].format;
	                out.pixels = textures[0].pixels;
	                out.mipmaps = textures[0].mipmaps;
	            }
	            else {
	                return textures[0];
	            }
	        }
	    };

	    module.exports = ret;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Texture = __webpack_require__(21);
	    var Texture2D = __webpack_require__(33);
	    var toChar = String.fromCharCode;

	    var MINELEN = 8;
	    var MAXELEN = 0x7fff;
	    function rgbe2float(rgbe, buffer, offset, exposure) {
	        if (rgbe[3] > 0) {
	            var f = Math.pow(2.0, rgbe[3] - 128 - 8 + exposure);
	            buffer[offset + 0] = rgbe[0] * f;
	            buffer[offset + 1] = rgbe[1] * f;
	            buffer[offset + 2] = rgbe[2] * f;
	        }
	        else {
	            buffer[offset + 0] = 0;
	            buffer[offset + 1] = 0;
	            buffer[offset + 2] = 0;
	        }
	        buffer[offset + 3] = 1.0;
	        return buffer;
	    }

	    function uint82string(array, offset, size) {
	        var str = '';
	        for (var i = offset; i < size; i++) {
	            str += toChar(array[i]);
	        }
	        return str;
	    }

	    function copyrgbe(s, t) {
	        t[0] = s[0];
	        t[1] = s[1];
	        t[2] = s[2];
	        t[3] = s[3];
	    }

	    // TODO : check
	    function oldReadColors(scan, buffer, offset, xmax) {
	        var rshift = 0, x = 0, len = xmax;
	        while (len > 0) {
	            scan[x][0] = buffer[offset++];
	            scan[x][1] = buffer[offset++];
	            scan[x][2] = buffer[offset++];
	            scan[x][3] = buffer[offset++];
	            if (scan[x][0] === 1 && scan[x][1] === 1 && scan[x][2] === 1) {
	                // exp is count of repeated pixels
	                for (var i = (scan[x][3] << rshift) >>> 0; i > 0; i--) {
	                    copyrgbe(scan[x-1], scan[x]);
	                    x++;
	                    len--;
	                }
	                rshift += 8;
	            } else {
	                x++;
	                len--;
	                rshift = 0;
	            }
	        }
	        return offset;
	    }

	    function readColors(scan, buffer, offset, xmax) {
	        if ((xmax < MINELEN) | (xmax > MAXELEN)) {
	            return oldReadColors(scan, buffer, offset, xmax);
	        }
	        var i = buffer[offset++];
	        if (i != 2) {
	            return oldReadColors(scan, buffer, offset - 1, xmax);
	        }
	        scan[0][1] = buffer[offset++];
	        scan[0][2] = buffer[offset++];

	        i = buffer[offset++];
	        if ((((scan[0][2] << 8) >>> 0) | i) >>> 0 !== xmax) {
	            return null;
	        }
	        for (var i = 0; i < 4; i++) {
	            for (var x = 0; x < xmax;) {
	                var code = buffer[offset++];
	                if (code > 128) {
	                    code = (code & 127) >>> 0;
	                    var val = buffer[offset++];
	                    while (code--) {
	                        scan[x++][i] = val;
	                    }
	                } else {
	                    while (code--) {
	                        scan[x++][i] = buffer[offset++];
	                    }
	                }
	            }
	        }
	        return offset;
	    }


	    var ret = {
	        // http://www.graphics.cornell.edu/~bjw/rgbe.html
	        // Blender source
	        // http://radsite.lbl.gov/radiance/refer/Notes/picture_format.html
	        parseRGBE: function(arrayBuffer, texture, exposure) {
	            if (exposure == null) {
	                exposure = 0;
	            }
	            var data = new Uint8Array(arrayBuffer);
	            var size = data.length;
	            if (uint82string(data, 0, 2) !== '#?') {
	                return;
	            }
	            // find empty line, next line is resolution info
	            for (var i = 2; i < size; i++) {
	                if (toChar(data[i]) === '\n' && toChar(data[i+1]) === '\n') {
	                    break;
	                }
	            }
	            if (i >= size) { // not found
	                return;
	            }
	            // find resolution info line
	            i += 2;
	            var str = '';
	            for (; i < size; i++) {
	                var _char = toChar(data[i]);
	                if (_char === '\n') {
	                    break;
	                }
	                str += _char;
	            }
	            // -Y M +X N
	            var tmp = str.split(' ');
	            var height = parseInt(tmp[1]);
	            var width = parseInt(tmp[3]);
	            if (!width || !height) {
	                return;
	            }

	            // read and decode actual data
	            var offset = i+1;
	            var scanline = [];
	            // memzero
	            for (var x = 0; x < width; x++) {
	                scanline[x] = [];
	                for (var j = 0; j < 4; j++) {
	                    scanline[x][j] = 0;
	                }
	            }
	            var pixels = new Float32Array(width * height * 4);
	            var offset2 = 0;
	            for (var y = 0; y < height; y++) {
	                var offset = readColors(scanline, data, offset, width);
	                if (!offset) {
	                    return null;
	                }
	                for (var x = 0; x < width; x++) {
	                    rgbe2float(scanline[x], pixels, offset2, exposure);
	                    offset2 += 4;
	                }
	            }

	            if (!texture) {
	                texture = new Texture2D();
	            }
	            texture.width = width;
	            texture.height = height;
	            texture.pixels = pixels;
	            // HALF_FLOAT can't use Float32Array
	            texture.type = Texture.FLOAT;
	            return texture;
	        },

	        parseRGBEFromPNG: function(png) {

	        }
	    };

	    module.exports = ret;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Surface texture in the 3D scene.
	 * Provide management and rendering of zrender shapes and groups
	 *
	 * @module echarts-gl/util/EChartsSurface
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var Texture2D = __webpack_require__(33);
	var Vector3 = __webpack_require__(14);
	var Vector2 = __webpack_require__(22);

	var events = ['mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'click', 'dblclick', 'contextmenu'];

	function makeHandlerName(eventName) {
	    return '_on' + eventName;
	}
	/**
	 * @constructor
	 * @alias echarts-gl/util/EChartsSurface
	 * @param {module:echarts~ECharts} chart
	 */
	var EChartsSurface = function (chart) {
	    var self = this;
	    this._texture = new Texture2D({
	        anisotropic: 32,
	        flipY: false,

	        surface: this,

	        dispose: function (gl) {
	            self.dispose();
	            Texture2D.prototype.dispose.call(this, gl);
	        }
	    });

	    events.forEach(function (eventName) {
	        this[makeHandlerName(eventName)] = function (eveObj) {
	            this._meshes.forEach(function (mesh) {
	                this.dispatchEvent(eventName, mesh, eveObj.triangle, eveObj.point);
	            }, this);
	        };
	    }, this);

	    this._meshes = [];

	    if (chart) {
	        this.setECharts(chart);
	    }

	    // Texture updated callback;
	    this.onupdate = null;
	};

	EChartsSurface.prototype = {

	    constructor: EChartsSurface,

	    getTexture: function () {
	        return this._texture;
	    },

	    setECharts: function (chart) {
	        this._chart = chart;

	        var canvas = chart.getDom();
	        if (!(canvas instanceof HTMLCanvasElement)) {
	            console.error('ECharts must init on canvas if it is used as texture.');
	            // Use an empty canvas
	            canvas = document.createElement('canvas');
	        }
	        else {
	            var self = this;
	            // Wrap refreshImmediately
	            var zr = chart.getZr();
	            var oldRefreshImmediately = zr.__oldRefreshImmediately || zr.refreshImmediately;
	            zr.refreshImmediately = function () {
	                oldRefreshImmediately.call(this);
	                self._texture.dirty();

	                self.onupdate && self.onupdate();
	            };
	            zr.__oldRefreshImmediately = oldRefreshImmediately;
	        }

	        this._texture.image = canvas;
	        this._texture.dirty();
	        this.onupdate && this.onupdate();
	    },

	    /**
	     * @method
	     * @param {qtek.Mesh} attachedMesh
	     * @param {Array.<number>} triangle Triangle indices
	     * @param {qtek.math.Vector3} point
	     */
	    dispatchEvent: (function () {

	        var p0 = new Vector3();
	        var p1 = new Vector3();
	        var p2 = new Vector3();
	        var uv0 = new Vector2();
	        var uv1 = new Vector2();
	        var uv2 = new Vector2();
	        var uv = new Vector2();

	        var vCross = new Vector3();

	        return function (eventName, attachedMesh, triangle, point) {
	            var geo = attachedMesh.geometry;
	            var position = geo.attributes.position;
	            var texcoord = geo.attributes.texcoord0;
	            var dot = Vector3.dot;
	            var cross = Vector3.cross;

	            position.get(triangle[0], p0._array);
	            position.get(triangle[1], p1._array);
	            position.get(triangle[2], p2._array);
	            texcoord.get(triangle[0], uv0._array);
	            texcoord.get(triangle[1], uv1._array);
	            texcoord.get(triangle[2], uv2._array);

	            cross(vCross, p1, p2);
	            var det = dot(p0, vCross);
	            var t = dot(point, vCross) / det;
	            cross(vCross, p2, p0);
	            var u = dot(point, vCross) / det;
	            cross(vCross, p0, p1);
	            var v = dot(point, vCross) / det;

	            Vector2.scale(uv, uv0, t);
	            Vector2.scaleAndAdd(uv, uv, uv1, u);
	            Vector2.scaleAndAdd(uv, uv, uv2, v);

	            var x = uv.x * this._chart.getWidth();
	            var y = uv.y * this._chart.getHeight();
	            this._chart.getZr().handler.dispatch(eventName, {
	                zrX: x,
	                zrY: y
	            });
	        };
	    })(),

	    attachToMesh: function (mesh) {
	        if (this._meshes.indexOf(mesh) >= 0) {
	            return;
	        }

	        events.forEach(function (eventName) {
	            mesh.on(eventName, this[makeHandlerName(eventName)], this);
	        }, this);

	        this._meshes.push(mesh);
	    },

	    detachFromMesh: function (mesh) {
	        var idx = this._meshes.indexOf(mesh);
	        if (idx >= 0) {
	            this._meshes.splice(idx, 1);
	        }

	        events.forEach(function (eventName) {
	            mesh.off(eventName, this[makeHandlerName(eventName)]);
	        }, this);
	    },

	    dispose: function () {
	        this._meshes.forEach(function (mesh) {
	            this.detachFromMesh(mesh);
	        }, this);
	    }
	};

	module.exports = EChartsSurface;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// https://docs.unrealengine.com/latest/INT/Engine/Rendering/LightingAndShadows/AmbientCubemap/define(function(require) {


	    var Light = __webpack_require__(38);
	    var cubemapUtil = __webpack_require__(56);

	    /**
	     * @constructor qtek.light.AmbientCubemap
	     * @extends qtek.Light
	     */
	    var AmbientCubemapLight = Light.extend({

	        /**
	         * @type {qtek.TextureCube}
	         */
	        cubemap: null,

	        // TODO
	        // range: 100,

	        castShadow: false,

	        _normalDistribution: null,
	        _brdfLookup: null

	    }, {

	        type: 'AMBIENT_CUBEMAP_LIGHT',

	        prefilter: function (renderer, size) {
	            if (!this._brdfLookup) {
	                this._normalDistribution = cubemapUtil.generateNormalDistribution();
	                this._brdfLookup = cubemapUtil.integrateBRDF(renderer, this._normalDistribution);
	            }
	            var cubemap = this.cubemap;
	            if (cubemap.__prefiltered) {
	                return;
	            }

	            var result = cubemapUtil.prefilterEnvironmentMap(
	                renderer, cubemap, {
	                    encodeRGBM: true,
	                    width: size,
	                    height: size
	                }, this._normalDistribution, this._brdfLookup
	            );
	            this.cubemap = result.environmentMap;
	            this.cubemap.__prefiltered = true;

	            cubemap.dispose(renderer.gl);
	        },

	        uniformTemplates: {
	            ambientCubemapLightColor: {
	                type: '3f',
	                value: function (instance) {
	                    var color = instance.color;
	                    var intensity = instance.intensity;
	                    return [color[0]*intensity, color[1]*intensity, color[2]*intensity];
	                }
	            },

	            ambientCubemapLightCubemap: {
	                type: 't',
	                value: function (instance) {
	                    return instance.cubemap;
	                }
	            },

	            ambientCubemapLightBRDFLookup: {
	                type: 't',
	                value: function (instance) {
	                    return instance._brdfLookup;
	                }
	            }
	        }
	        /**
	         * @method
	         * @name clone
	         * @return {qtek.light.AmbientCubemap}
	         * @memberOf qtek.light.AmbientCubemap.prototype
	         */
	    });

	    module.exports = AmbientCubemapLight;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// Cubemap prefilter utility
	// http://www.unrealengine.com/files/downloads/2013SiggraphPresentationsNotes.pdf
	// http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html


	    var Texture2D = __webpack_require__(33);
	    var TextureCube = __webpack_require__(41);
	    var Texture = __webpack_require__(21);
	    var FrameBuffer = __webpack_require__(48);
	    var Pass = __webpack_require__(57);
	    var Material = __webpack_require__(20);
	    var Shader = __webpack_require__(18);
	    var Skybox = __webpack_require__(61);
	    var Scene = __webpack_require__(37);
	    var EnvironmentMapPass = __webpack_require__(43);
	    var vendor = __webpack_require__(12);
	    var textureUtil = __webpack_require__(40);

	    var integrateBRDFShaderCode = __webpack_require__(64);
	    var prefilterFragCode = __webpack_require__(65);

	    var cubemapUtil = {};

	    var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

	    /**
	     * @param  {qtek.Renderer} renderer
	     * @param  {qtek.Texture} envMap
	     * @param  {Object} [textureOpts]
	     * @param  {number} [textureOpts.width]
	     * @param  {number} [textureOpts.height]
	     * @param  {number} [textureOpts.type]
	     * @param  {boolean} [textureOpts.encodeRGBM]
	     * @param  {boolean} [textureOpts.decodeRGBM]
	     * @param  {qtek.Texture2D} [normalDistribution]
	     * @param  {qtek.Texture2D} [brdfLookup]
	     */
	    cubemapUtil.prefilterEnvironmentMap = function (
	        renderer, envMap, textureOpts, normalDistribution, brdfLookup
	    ) {
	        // Not create other renderer, it is easy having issue of cross reference of resources like framebuffer
	        // PENDING preserveDrawingBuffer?
	        if (!brdfLookup || !normalDistribution) {
	            normalDistribution = cubemapUtil.generateNormalDistribution();
	            brdfLookup = cubemapUtil.integrateBRDF(renderer, normalDistribution);
	        }
	        textureOpts = textureOpts || {};

	        var width = textureOpts.width || 64;
	        var height = textureOpts.height || 64;

	        var textureType = textureOpts.type || envMap.type;

	        // Use same type with given envMap
	        var prefilteredCubeMap = new TextureCube({
	            width: width,
	            height: height,
	            type: textureType,
	            flipY: false,
	            mipmaps: []
	        });

	        if (!prefilteredCubeMap.isPowerOfTwo()) {
	            console.warn('Width and height must be power of two to enable mipmap.');
	        }

	        var size = Math.min(width, height);
	        var mipmapNum = Math.log(size) / Math.log(2) + 1;

	        var prefilterMaterial = new Material({
	            shader: new Shader({
	                vertex: Shader.source('qtek.skybox.vertex'),
	                fragment: prefilterFragCode
	            })
	        });
	        prefilterMaterial.set('normalDistribution', normalDistribution);

	        textureOpts.encodeRGBM && prefilterMaterial.shader.define('fragment', 'RGBM_ENCODE');
	        textureOpts.decodeRGBM && prefilterMaterial.shader.define('fragment', 'RGBM_DECODE');

	        var dummyScene = new Scene();
	        var skyEnv;

	        if (envMap instanceof Texture2D) {
	            // Convert panorama to cubemap
	            var envCubemap = new TextureCube({
	                width: width,
	                height: height,
	                // FIXME FLOAT type will cause GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT error on iOS
	                type: textureType === Texture.FLOAT ?
	                     Texture.HALF_FLOAT : textureType
	            });
	            textureUtil.panoramaToCubeMap(renderer, envMap, envCubemap, {
	                // PENDING encodeRGBM so it can be decoded as RGBM
	                encodeRGBM: textureOpts.decodeRGBM
	            });
	            envMap = envCubemap;
	        }
	        skyEnv = new Skybox({
	            scene: dummyScene,
	            material: prefilterMaterial
	        });
	        skyEnv.material.set('environmentMap', envMap);

	        var envMapPass = new EnvironmentMapPass({
	            texture: prefilteredCubeMap
	        });

	        // Force to be UNSIGNED_BYTE
	        if (textureOpts.encodeRGBM) {
	            textureType = prefilteredCubeMap.type = Texture.UNSIGNED_BYTE;
	        }

	        var renderTargetTmp = new Texture2D({
	            width: width,
	            height: height,
	            type: textureType
	        });
	        var frameBuffer = new FrameBuffer({
	            depthBuffer: false
	        });
	        var ArrayCtor = vendor[textureType === Texture.UNSIGNED_BYTE ? 'Uint8Array' : 'Float32Array'];
	        for (var i = 0; i < mipmapNum; i++) {
	            prefilteredCubeMap.mipmaps[i] = {
	                pixels: {}
	            };
	            skyEnv.material.set('roughness', i / (targets.length - 1));

	            // Tweak fov
	            // http://the-witness.net/news/2012/02/seamless-cube-map-filtering/
	            var n = renderTargetTmp.width;
	            var fov = 2 * Math.atan(n / (n - 0.5)) / Math.PI * 180;

	            for (var j = 0; j < targets.length; j++) {
	                var pixels = new ArrayCtor(renderTargetTmp.width * renderTargetTmp.height * 4);
	                frameBuffer.attach(renderTargetTmp);
	                frameBuffer.bind(renderer);

	                var camera = envMapPass.getCamera(targets[j]);
	                camera.fov = fov;
	                renderer.render(dummyScene, camera);
	                renderer.gl.readPixels(
	                    0, 0, renderTargetTmp.width, renderTargetTmp.height,
	                    Texture.RGBA, textureType, pixels
	                );

	                // var canvas = document.createElement('canvas');
	                // var ctx = canvas.getContext('2d');
	                // canvas.width = renderTargetTmp.width;
	                // canvas.height = renderTargetTmp.height;
	                // var imageData = ctx.createImageData(renderTargetTmp.width, renderTargetTmp.height);
	                // for (var k = 0; k < pixels.length; k++) {
	                //     imageData.data[k] = pixels[k];
	                // }
	                // ctx.putImageData(imageData, 0, 0);
	                // document.body.appendChild(canvas);

	                frameBuffer.unbind(renderer);
	                prefilteredCubeMap.mipmaps[i].pixels[targets[j]] = pixels;
	            }

	            renderTargetTmp.width /= 2;
	            renderTargetTmp.height /= 2;
	            renderTargetTmp.dirty();
	        }

	        frameBuffer.dispose(renderer.gl);
	        renderTargetTmp.dispose(renderer.gl);
	        skyEnv.dispose(renderer.gl);
	        // Remove gpu resource allucated in renderer
	        normalDistribution.dispose(renderer.gl);

	        // renderer.dispose();

	        return {
	            environmentMap: prefilteredCubeMap,
	            brdfLookup: brdfLookup,
	            normalDistribution: normalDistribution,
	            maxMipmapLevel: mipmapNum
	        };
	    };

	    cubemapUtil.integrateBRDF = function (renderer, normalDistribution) {
	        normalDistribution = normalDistribution || cubemapUtil.generateNormalDistribution();
	        var framebuffer = new FrameBuffer({
	            depthBuffer: false
	        });
	        var pass = new Pass({
	            fragment: integrateBRDFShaderCode
	        });

	        var texture = new Texture2D({
	            width: 512,
	            height: 256,
	            type: Texture.HALF_FLOAT,
	            minFilter: Texture.NEAREST,
	            magFilter: Texture.NEAREST,
	            useMipmap: false
	        });
	        pass.setUniform('normalDistribution', normalDistribution);
	        pass.setUniform('viewportSize', [512, 256]);
	        pass.attachOutput(texture);
	        pass.render(renderer, framebuffer);

	        // FIXME Only chrome and firefox can readPixels with float type.
	        // framebuffer.bind(renderer);
	        // var pixels = new Float32Array(512 * 256 * 4);
	        // renderer.gl.readPixels(
	        //     0, 0, texture.width, texture.height,
	        //     Texture.RGBA, Texture.FLOAT, pixels
	        // );
	        // texture.pixels = pixels;
	        // texture.flipY = false;
	        // texture.dirty();
	        // framebuffer.unbind(renderer);

	        framebuffer.dispose(renderer.gl);

	        return texture;
	    };

	    cubemapUtil.generateNormalDistribution = function (roughnessLevels, sampleSize) {

	        // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
	        // GLSL not support bit operation, use lookup instead
	        // V -> i / N, U -> roughness
	        var roughnessLevels = roughnessLevels || 256;
	        var sampleSize = sampleSize || 1024;

	        var normalDistribution = new Texture2D({
	            width: roughnessLevels,
	            height: sampleSize,
	            type: Texture.FLOAT,
	            minFilter: Texture.NEAREST,
	            magFilter: Texture.NEAREST,
	            useMipmap: false
	        });
	        var pixels = new Float32Array(sampleSize * roughnessLevels * 4);
	        for (var i = 0; i < sampleSize; i++) {
	            var x = i / sampleSize;
	            // http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
	            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators
	            // http://stackoverflow.com/questions/1908492/unsigned-integer-in-javascript
	            // http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it
	            var y = (i << 16 | i >>> 16) >>> 0;
	            y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;
	            y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;
	            y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;
	            y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296;

	            for (var j = 0; j < roughnessLevels; j++) {
	                var roughness = j / roughnessLevels;
	                var a = roughness * roughness;
	                var phi = 2.0 * Math.PI * x;
	                // CDF
	                var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));
	                var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);
	                var offset = (i * roughnessLevels + j) * 4;
	                pixels[offset] = sinTheta * Math.cos(phi);
	                pixels[offset + 1] = sinTheta * Math.sin(phi);
	                pixels[offset + 2] = cosTheta;
	                pixels[offset + 3] = 1.0;
	            }
	        }
	        normalDistribution.pixels = pixels;

	        return normalDistribution;
	    };

	    module.exports = cubemapUtil;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var OrthoCamera = __webpack_require__(58);
	    var Plane = __webpack_require__(59);
	    var Shader = __webpack_require__(18);
	    var Material = __webpack_require__(20);
	    var Mesh = __webpack_require__(32);
	    var glinfo = __webpack_require__(10);
	    var glenum = __webpack_require__(11);

	    Shader['import'](__webpack_require__(60));

	    var planeGeo = new Plane();
	    var mesh = new Mesh({
	        geometry: planeGeo,
	        frustumCulling: false
	    });
	    var camera = new OrthoCamera();

	    /**
	     * @constructor qtek.compositor.Pass
	     * @extends qtek.core.Base
	     */
	    var Pass = Base.extend(function () {
	        return /** @lends qtek.compositor.Pass# */ {
	            /**
	             * Fragment shader string
	             * @type {string}
	             */
	            // PENDING shader or fragment ?
	            fragment : '',

	            /**
	             * @type {Object}
	             */
	            outputs : null,

	            /**
	             * @type {qtek.Material}
	             */
	            material : null,

	            /**
	             * @type {Boolean}
	             */
	            blendWithPrevious: false,

	            /**
	             * @type {Boolean}
	             */
	            clearColor: false,

	            /**
	             * @type {Boolean}
	             */
	            clearDepth: true
	        };
	    }, function() {

	        var shader = new Shader({
	            vertex : Shader.source('qtek.compositor.vertex'),
	            fragment : this.fragment
	        });
	        var material = new Material({
	            shader : shader
	        });
	        shader.enableTexturesAll();

	        this.material = material;

	    },
	    /** @lends qtek.compositor.Pass.prototype */
	    {
	        /**
	         * @param {string} name
	         * @param {} value
	         */
	        setUniform : function(name, value) {
	            var uniform = this.material.uniforms[name];
	            if (uniform) {
	                uniform.value = value;
	            }
	        },
	        /**
	         * @param  {string} name
	         * @return {}
	         */
	        getUniform : function(name) {
	            var uniform = this.material.uniforms[name];
	            if (uniform) {
	                return uniform.value;
	            }
	        },
	        /**
	         * @param  {qtek.Texture} texture
	         * @param  {number} attachment
	         */
	        attachOutput : function(texture, attachment) {
	            if (!this.outputs) {
	                this.outputs = {};
	            }
	            attachment = attachment || glenum.COLOR_ATTACHMENT0;
	            this.outputs[attachment] = texture;
	        },
	        /**
	         * @param  {qtek.Texture} texture
	         */
	        detachOutput : function(texture) {
	            for (var attachment in this.outputs) {
	                if (this.outputs[attachment] === texture) {
	                    this.outputs[attachment] = null;
	                }
	            }
	        },

	        bind : function(renderer, frameBuffer) {

	            if (this.outputs) {
	                for (var attachment in this.outputs) {
	                    var texture = this.outputs[attachment];
	                    if (texture) {
	                        frameBuffer.attach(texture, attachment);
	                    }
	                }
	            }

	            if (frameBuffer) {
	                frameBuffer.bind(renderer);
	            }
	        },

	        unbind : function(renderer, frameBuffer) {
	            frameBuffer.unbind(renderer);
	        },
	        /**
	         * @param  {qtek.Renderer} renderer
	         * @param  {qtek.FrameBuffer} [frameBuffer]
	         */
	        render : function(renderer, frameBuffer) {

	            var _gl = renderer.gl;

	            if (frameBuffer) {
	                this.bind(renderer, frameBuffer);
	                // MRT Support in chrome
	                // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
	                var ext = glinfo.getExtension(_gl, 'EXT_draw_buffers');
	                if (ext && this.outputs) {
	                    var bufs = [];
	                    for (var attachment in this.outputs) {
	                        attachment = +attachment;
	                        if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
	                            bufs.push(attachment);
	                        }
	                    }
	                    ext.drawBuffersEXT(bufs);
	                }
	            }

	            this.trigger('beforerender', this, renderer);

	            // FIXME Don't clear in each pass in default, let the color overwrite the buffer
	            // FIXME pixels may be discard
	            var clearBit = this.clearDepth ? _gl.DEPTH_BUFFER_BIT : 0;
	            _gl.depthMask(true);
	            if (this.clearColor) {
	                clearBit = clearBit | _gl.COLOR_BUFFER_BIT;
	                _gl.colorMask(true, true, true, true);
	                var cc = this.clearColor;
	                if (cc instanceof Array) {
	                    _gl.clearColor(cc[0], cc[1], cc[2], cc[3]);
	                }
	            }
	            _gl.clear(clearBit);

	            if (this.blendWithPrevious) {
	                // Blend with previous rendered scene in the final output
	                // FIXME Configure blend.
	                // FIXME It will cause screen blink？
	                _gl.enable(_gl.BLEND);
	                this.material.transparent = true;
	            }
	            else {
	                _gl.disable(_gl.BLEND);
	                this.material.transparent = false;
	            }

	            this.renderQuad(renderer);

	            this.trigger('afterrender', this, renderer);

	            if (frameBuffer) {
	                this.unbind(renderer, frameBuffer);
	            }
	        },

	        /**
	         * Simply do quad rendering
	         */
	        renderQuad: function (renderer) {
	            mesh.material = this.material;
	            renderer.renderQueue([mesh], camera);
	        },

	        /**
	         * @param  {WebGLRenderingContext} _gl
	         */
	        dispose: function (gl) {
	            this.material.dispose(gl);
	        }
	    });

	    module.exports = Pass;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Camera = __webpack_require__(45);
	    /**
	     * @constructor qtek.camera.Orthographic
	     * @extends qtek.Camera
	     */
	    var Orthographic = Camera.extend(
	    /** @lends qtek.camera.Orthographic# */
	    {
	        /**
	         * @type {number}
	         */
	        left: -1,
	        /**
	         * @type {number}
	         */
	        right: 1,
	        /**
	         * @type {number}
	         */
	        near: -1,
	        /**
	         * @type {number}
	         */
	        far: 1,
	        /**
	         * @type {number}
	         */
	        top: 1,
	        /**
	         * @type {number}
	         */
	        bottom: -1
	    },
	    /** @lends qtek.camera.Orthographic.prototype */
	    {

	        updateProjectionMatrix: function() {
	            this.projectionMatrix.ortho(this.left, this.right, this.bottom, this.top, this.near, this.far);
	        },

	        decomposeProjectionMatrix: function () {
	            var m = this.projectionMatrix._array;
	            this.left = (-1 - m[12]) / m[0];
	            this.right = (1 - m[12]) / m[0];
	            this.top = (1 - m[13]) / m[5];
	            this.bottom = (-1 - m[13]) / m[5];
	            this.near = -(-1 - m[14]) / m[10];
	            this.far = -(1 - m[14]) / m[10];
	        },
	        /**
	         * @return {qtek.camera.Orthographic}
	         */
	        clone: function() {
	            var camera = Camera.prototype.clone.call(this);
	            camera.left = this.left;
	            camera.right = this.right;
	            camera.near = this.near;
	            camera.far = this.far;
	            camera.top = this.top;
	            camera.bottom = this.bottom;

	            return camera;
	        }
	    });

	    module.exports = Orthographic;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var StaticGeometry = __webpack_require__(35);
	    var BoundingBox = __webpack_require__(13);

	    /**
	     * @constructor qtek.geometry.Plane
	     * @extends qtek.StaticGeometry
	     * @param {Object} [opt]
	     * @param {number} [opt.widthSegments]
	     * @param {number} [opt.heightSegments]
	     */
	    var Plane = StaticGeometry.extend(
	    /** @lends qtek.geometry.Plane# */
	    {
	        /**
	         * @type {number}
	         */
	        widthSegments: 1,
	        /**
	         * @type {number}
	         */
	        heightSegments: 1
	    }, function() {
	        this.build();
	    },
	    /** @lends qtek.geometry.Plane.prototype */
	    {
	        /**
	         * Build plane geometry
	         */
	        build: function() {
	            var heightSegments = this.heightSegments;
	            var widthSegments = this.widthSegments;
	            var attributes = this.attributes;
	            var positions = [];
	            var texcoords = [];
	            var normals = [];
	            var faces = [];

	            for (var y = 0; y <= heightSegments; y++) {
	                var t = y / heightSegments;
	                for (var x = 0; x <= widthSegments; x++) {
	                    var s = x / widthSegments;

	                    positions.push([2 * s - 1, 2 * t - 1, 0]);
	                    if (texcoords) {
	                        texcoords.push([s, t]);
	                    }
	                    if (normals) {
	                        normals.push([0, 0, 1]);
	                    }
	                    if (x < widthSegments && y < heightSegments) {
	                        var i = x + y * (widthSegments + 1);
	                        faces.push([i, i + 1, i + widthSegments + 1]);
	                        faces.push([i + widthSegments + 1, i + 1, i + widthSegments + 2]);
	                    }
	                }
	            }

	            attributes.position.fromArray(positions);
	            attributes.texcoord0.fromArray(texcoords);
	            attributes.normal.fromArray(normals);

	            this.initIndicesFromArray(faces);

	            this.boundingBox = new BoundingBox();
	            this.boundingBox.min.set(-1, -1, 0);
	            this.boundingBox.max.set(1, 1, 0);
	        }
	    });

	    module.exports = Plane;


/***/ },
/* 60 */
/***/ function(module, exports) {

	
	module.exports = "\n@export qtek.compositor.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n    v_Texcoord = texcoord;\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n\n@end";


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Should not derived from mesh?


	    var Mesh = __webpack_require__(32);
	    var CubeGeometry = __webpack_require__(62);
	    var Shader = __webpack_require__(18);
	    var Material = __webpack_require__(20);


	    Shader.import(__webpack_require__(63));
	    /**
	     * @constructor qtek.plugin.Skybox
	     *
	     * @example
	     *     var skyTex = new qtek.TextureCube();
	     *     skyTex.load({
	     *         'px': 'assets/textures/sky/px.jpg',
	     *         'nx': 'assets/textures/sky/nx.jpg'
	     *         'py': 'assets/textures/sky/py.jpg'
	     *         'ny': 'assets/textures/sky/ny.jpg'
	     *         'pz': 'assets/textures/sky/pz.jpg'
	     *         'nz': 'assets/textures/sky/nz.jpg'
	     *     });
	     *     var skybox = new qtek.plugin.Skybox({
	     *         scene: scene
	     *     });
	     *     skybox.material.set('environmentMap', skyTex);
	     */
	    var Skybox = Mesh.extend(function () {

	        var skyboxShader = new Shader({
	            vertex: Shader.source('qtek.skybox.vertex'),
	            fragment: Shader.source('qtek.skybox.fragment')
	        });
	        var material = new Material({
	            shader: skyboxShader,
	            depthMask: false
	        });

	        return {
	            /**
	             * @type {qtek.Scene}
	             * @memberOf qtek.plugin.Skybox.prototype
	             */
	            scene: null,

	            geometry: new CubeGeometry(),

	            material: material,

	            environmentMap: null,

	            culling: false
	        };
	    }, function () {
	        var scene = this.scene;
	        if (scene) {
	            this.attachScene(scene);
	        }
	        if (this.environmentMap) {
	            this.setEnvironmentMap(this.environmentMap);
	        }
	    }, {
	        /**
	         * Attach the skybox to the scene
	         * @param  {qtek.Scene} scene
	         * @memberOf qtek.plugin.Skybox.prototype
	         */
	        attachScene: function (scene) {
	            if (this.scene) {
	                this.detachScene();
	            }
	            this.scene = scene;
	            scene.on('beforerender', this._beforeRenderScene, this);
	        },
	        /**
	         * Detach from scene
	         * @memberOf qtek.plugin.Skybox.prototype
	         */
	        detachScene: function () {
	            if (this.scene) {
	                this.scene.off('beforerender', this._beforeRenderScene, this);
	            }
	            this.scene = null;
	        },

	        /**
	         * Dispose skybox
	         * @param  {WebGLRenderingContext} gl
	         */
	        dispose: function (gl) {
	            this.detachScene();
	            this.geometry.dispose(gl);
	            this.material.dispose(gl);
	        },

	        setEnvironmentMap: function (envMap) {
	            this.material.set('environmentMap', envMap);
	        },

	        _beforeRenderScene: function(renderer, scene, camera) {
	            this.renderSkybox(renderer, camera);
	        },

	        renderSkybox: function (renderer, camera) {
	            this.position.copy(camera.getWorldPosition());
	            this.update();
	            // Don't remember to disable blend
	            renderer.gl.disable(renderer.gl.BLEND);
	            renderer.renderQueue([this], camera);
	        }
	    });

	    module.exports = Skybox;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var StaticGeometry = __webpack_require__(35);
	    var Plane = __webpack_require__(59);
	    var Matrix4 = __webpack_require__(16);
	    var Vector3 = __webpack_require__(14);
	    var BoundingBox = __webpack_require__(13);
	    var vendor = __webpack_require__(12);

	    var planeMatrix = new Matrix4();

	    /**
	     * @constructor qtek.geometry.Cube
	     * @extends qtek.StaticGeometry
	     * @param {Object} [opt]
	     * @param {number} [opt.widthSegments]
	     * @param {number} [opt.heightSegments]
	     * @param {number} [opt.depthSegments]
	     * @param {boolean} [opt.inside]
	     */
	    var Cube = StaticGeometry.extend(
	    /**@lends qtek.geometry.Cube# */
	    {
	        /**
	         * @type {number}
	         */
	        widthSegments: 1,
	        /**
	         * @type {number}
	         */
	        heightSegments: 1,
	        /**
	         * @type {number}
	         */
	        depthSegments: 1,
	        /**
	         * @type {boolean}
	         */
	        inside: false
	    }, function() {
	        this.build();
	    },
	    /** @lends qtek.geometry.Cube.prototype */
	    {
	        /**
	         * Build cube geometry
	         */
	        build: function() {

	            var planes = {
	                'px': createPlane('px', this.depthSegments, this.heightSegments),
	                'nx': createPlane('nx', this.depthSegments, this.heightSegments),
	                'py': createPlane('py', this.widthSegments, this.depthSegments),
	                'ny': createPlane('ny', this.widthSegments, this.depthSegments),
	                'pz': createPlane('pz', this.widthSegments, this.heightSegments),
	                'nz': createPlane('nz', this.widthSegments, this.heightSegments),
	            };

	            var attrList = ['position', 'texcoord0', 'normal'];
	            var vertexNumber = 0;
	            var faceNumber = 0;
	            for (var pos in planes) {
	                vertexNumber += planes[pos].vertexCount;
	                faceNumber += planes[pos].indices.length;
	            }
	            for (var k = 0; k < attrList.length; k++) {
	                this.attributes[attrList[k]].init(vertexNumber);
	            }
	            this.indices = new vendor.Uint16Array(faceNumber);
	            var faceOffset = 0;
	            var vertexOffset = 0;
	            for (var pos in planes) {
	                var plane = planes[pos];
	                for (var k = 0; k < attrList.length; k++) {
	                    var attrName = attrList[k];
	                    var attrArray = plane.attributes[attrName].value;
	                    var attrSize = plane.attributes[attrName].size;
	                    var isNormal = attrName === 'normal';
	                    for (var i = 0; i < attrArray.length; i++) {
	                        var value = attrArray[i];
	                        if (this.inside && isNormal) {
	                            value = -value;
	                        }
	                        this.attributes[attrName].value[i + attrSize * vertexOffset] = value;
	                    }
	                }
	                for (var i = 0; i < plane.indices.length; i++) {
	                    this.indices[i + faceOffset] = vertexOffset + plane.indices[i];
	                }
	                faceOffset += plane.indices.length;
	                vertexOffset += plane.vertexCount;
	            }

	            this.boundingBox = new BoundingBox();
	            this.boundingBox.max.set(1, 1, 1);
	            this.boundingBox.min.set(-1, -1, -1);
	        }
	    });

	    function createPlane(pos, widthSegments, heightSegments) {

	        planeMatrix.identity();

	        var plane = new Plane({
	            widthSegments: widthSegments,
	            heightSegments: heightSegments
	        });

	        switch(pos) {
	            case 'px':
	                Matrix4.translate(planeMatrix, planeMatrix, Vector3.POSITIVE_X);
	                Matrix4.rotateY(planeMatrix, planeMatrix, Math.PI / 2);
	                break;
	            case 'nx':
	                Matrix4.translate(planeMatrix, planeMatrix, Vector3.NEGATIVE_X);
	                Matrix4.rotateY(planeMatrix, planeMatrix, -Math.PI / 2);
	                break;
	            case 'py':
	                Matrix4.translate(planeMatrix, planeMatrix, Vector3.POSITIVE_Y);
	                Matrix4.rotateX(planeMatrix, planeMatrix, -Math.PI / 2);
	                break;
	            case 'ny':
	                Matrix4.translate(planeMatrix, planeMatrix, Vector3.NEGATIVE_Y);
	                Matrix4.rotateX(planeMatrix, planeMatrix, Math.PI / 2);
	                break;
	            case 'pz':
	                Matrix4.translate(planeMatrix, planeMatrix, Vector3.POSITIVE_Z);
	                break;
	            case 'nz':
	                Matrix4.translate(planeMatrix, planeMatrix, Vector3.NEGATIVE_Z);
	                Matrix4.rotateY(planeMatrix, planeMatrix, Math.PI);
	                break;
	        }
	        plane.applyTransform(planeMatrix);
	        return plane;
	    }

	    module.exports = Cube;


/***/ },
/* 63 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.skybox.vertex\n\nuniform mat4 world : WORLD;\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position : POSITION;\n\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n    v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}\n\n@end\n\n@export qtek.skybox.fragment\n\nuniform mat4 viewInverse : VIEWINVERSE;\nuniform samplerCube environmentMap;\nuniform float lod: 0.0;\n\nvarying vec3 v_WorldPosition;\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n    vec3 eyePos = viewInverse[3].xyz;\n    vec3 viewDirection = normalize(v_WorldPosition - eyePos);\n\n    vec3 tex = decodeHDR(textureCubeLodEXT(environmentMap, viewDirection, lod)).rgb;\n\n#ifdef SRGB_DECODE\n    tex.rgb = pow(tex.rgb, vec3(2.2));\n#endif\n\n    gl_FragColor = encodeHDR(vec4(tex, 1.0));\n}\n@end";


/***/ },
/* 64 */
/***/ function(module, exports) {

	
	module.exports = "#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\n\n\nuniform sampler2D normalDistribution;\n\nuniform vec2 viewportSize : [512, 256];\n\nconst vec3 N = vec3(0.0, 0.0, 1.0);\nconst float fSampleNumber = float(SAMPLE_NUMBER);\n\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n    vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangentX = normalize(cross(upVector, N));\n    vec3 tangentY = cross(N, tangentX);\n        return tangentX * H.x + tangentY * H.y + N * H.z;\n}\n\nfloat G_Smith(float roughness, float NoV, float NoL) {\n        float k = roughness * roughness / 2.0;\n    float G1V = NoV / (NoV * (1.0 - k) + k);\n    float G1L = NoL / (NoL * (1.0 - k) + k);\n    return G1L * G1V;\n}\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / viewportSize;\n    float NoV = uv.x;\n    float roughness = uv.y;\n\n    vec3 V;\n    V.x = sqrt(1.0 - NoV * NoV);\n    V.y = 0.0;\n    V.z = NoV;\n\n    float A = 0.0;\n    float B = 0.0;\n\n    for (int i = 0; i < SAMPLE_NUMBER; i++) {\n        vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);\n        vec3 L = reflect(-V, H);\n        float NoL = clamp(L.z, 0.0, 1.0);\n        float NoH = clamp(H.z, 0.0, 1.0);\n        float VoH = clamp(dot(V, H), 0.0, 1.0);\n\n        if (NoL > 0.0) {\n            float G = G_Smith(roughness, NoV, NoL);\n            float G_Vis = G * VoH / (NoH * NoV);\n            float Fc = pow(1.0 - VoH, 5.0);\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n\n    gl_FragColor = vec4(vec2(A, B) / fSampleNumber, 0.0, 1.0);\n}\n";


/***/ },
/* 65 */
/***/ function(module, exports) {

	
	module.exports = "#define SAMPLE_NUMBER 1024\n#define PI 3.14159265358979\n\nuniform mat4 viewInverse : VIEWINVERSE;\nuniform samplerCube environmentMap;\nuniform sampler2D normalDistribution;\n\nuniform float roughness : 0.5;\n\nvarying vec2 v_Texcoord;\nvarying vec3 v_WorldPosition;\n\nconst float fSampleNumber = float(SAMPLE_NUMBER);\n\n@import qtek.util.rgbm\n\nvec3 importanceSampleNormal(float i, float roughness, vec3 N) {\n    vec3 H = texture2D(normalDistribution, vec2(roughness, i)).rgb;\n\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangentX = normalize(cross(upVector, N));\n    vec3 tangentY = cross(N, tangentX);\n        return tangentX * H.x + tangentY * H.y + N * H.z;\n}\n\nvoid main() {\n\n    vec3 eyePos = viewInverse[3].xyz;\n    vec3 V = normalize(v_WorldPosition - eyePos);\n\n    vec3 N = V;\n    vec3 R = V;\n\n    vec3 prefilteredColor = vec3(0.0);\n    float totalWeight = 0.0;\n\n\n    for (int i = 0; i < SAMPLE_NUMBER; i++) {\n        vec3 H = importanceSampleNormal(float(i) / fSampleNumber, roughness, N);\n        vec3 L = reflect(-V, H);\n\n        float NoL = clamp(dot(N, L), 0.0, 1.0);\n        if (NoL > 0.0) {\n            prefilteredColor += decodeHDR(textureCube(environmentMap, L)).rgb * NoL;\n            totalWeight += NoL;\n        }\n    }\n\n    gl_FragColor = encodeHDR(vec4(prefilteredColor / totalWeight, 1.0));\n}\n";


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Light = __webpack_require__(38);
	    var vendor = __webpack_require__(12);

	    /**
	     * Spherical Harmonic Ambient Light
	     * @constructor qtek.light.AmbientSH
	     * @extends qtek.Light
	     */
	    var AmbientSHLight = Light.extend({

	        castShadow: false,


	        /**
	         * Spherical Harmonic Coefficients
	         * @type {Array.<number>}
	         */
	        coefficients: [],

	    }, function () {
	        this._coefficientsTmpArr = new vendor.Float32Array(9 * 3);
	    }, {

	        type: 'AMBIENT_SH_LIGHT',

	        uniformTemplates: {
	            ambientSHLightColor: {
	                type: '3f',
	                value: function (instance) {
	                    var color = instance.color;
	                    var intensity = instance.intensity;
	                    return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
	                }
	            },

	            ambientSHLightCoefficients: {
	                type: '3f',
	                value: function (instance) {
	                    var coefficientsTmpArr = instance._coefficientsTmpArr;
	                    for (var i = 0; i < instance.coefficients.length; i++) {
	                        coefficientsTmpArr[i] = instance.coefficients[i];
	                    }
	                    return coefficientsTmpArr;
	                }
	            }
	        }
	        /**
	         * @method
	         * @name clone
	         * @return {qtek.light.Ambient}
	         * @memberOf qtek.light.Ambient.prototype
	         */
	    });

	    module.exports = AmbientSHLight;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// Spherical Harmonic Helpers


	    var Texture = __webpack_require__(21);
	    var FrameBuffer = __webpack_require__(48);
	    var Texture2D = __webpack_require__(33);
	    var TextureCube = __webpack_require__(41);
	    var textureUtil = __webpack_require__(40);
	    var Pass = __webpack_require__(57);
	    var vendor = __webpack_require__(12);
	    var Skybox = __webpack_require__(61);
	    var Skydome = __webpack_require__(49);
	    var EnvironmentMapPass = __webpack_require__(43);
	    var Scene = __webpack_require__(37);
	    var glmatrix = __webpack_require__(15);
	    var vec3 = glmatrix.vec3;
	    var sh = {};


	    var projectEnvMapShaderCode = __webpack_require__(68);

	    var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

	    // Project on gpu, but needs browser to support readPixels as Float32Array.
	    function projectEnvironmentMapGPU(renderer, envMap) {
	        var shTexture = new Texture2D({
	            width: 9,
	            height: 1,
	            type: Texture.FLOAT
	        });
	        var pass = new Pass({
	            fragment: projectEnvMapShaderCode
	        });
	        pass.material.shader.define('fragment', 'TEXTURE_SIZE', envMap.width);
	        pass.setUniform('environmentMap', envMap);

	        var framebuffer = new FrameBuffer();
	        framebuffer.attach(shTexture);
	        pass.render(renderer, framebuffer);

	        framebuffer.bind(renderer);
	        // TODO Only chrome and firefox support Float32Array
	        var pixels = new vendor.Float32Array(9 * 4);
	        renderer.gl.readPixels(0, 0, 9, 1, Texture.RGBA, Texture.FLOAT, pixels);

	        var coeff = new vendor.Float32Array(9 * 3);
	        for (var i = 0; i < 9; i++) {
	            coeff[i * 3] = pixels[i * 4];
	            coeff[i * 3 + 1] = pixels[i * 4 + 1];
	            coeff[i * 3 + 2] = pixels[i * 4 + 2];
	        }
	        framebuffer.unbind(renderer);

	        framebuffer.dispose(renderer.gl);
	        pass.dispose(renderer.gl);
	        return coeff;
	    }

	    function harmonics(normal, index){
	        var x = normal[0];
	        var y = normal[1];
	        var z = normal[2];

	        if (index === 0) {
	            return 1.0;
	        }
	        else if (index === 1) {
	            return x;
	        }
	        else if (index === 2) {
	            return y;
	        }
	        else if (index === 3) {
	            return z;
	        }
	        else if (index === 4) {
	            return x * z;
	        }
	        else if (index === 5) {
	            return y * z;
	        }
	        else if (index === 6) {
	            return x * y;
	        }
	        else if (index === 7) {
	            return 3.0 * z * z - 1.0;
	        }
	        else {
	            return x * x - y * y;
	        }
	    }

	    var normalTransform = {
	        px: [2, 1, 0, -1, -1, 1],
	        nx: [2, 1, 0, 1, -1, -1],
	        py: [0, 2, 1, 1, -1, -1],
	        ny: [0, 2, 1, 1, 1, 1],
	        pz: [0, 1, 2, -1, -1, -1],
	        nz: [0, 1, 2, 1, -1, 1]
	    };

	    // Project on cpu.
	    function projectEnvironmentMapCPU(renderer, cubePixels, width, height) {
	        var coeff = new vendor.Float32Array(9 * 3);
	        var normal = vec3.create();
	        var texel = vec3.create();
	        var fetchNormal = vec3.create();
	        for (var m = 0; m < 9; m++) {
	            var result = vec3.create();
	            for (var k = 0; k < targets.length; k++) {
	                var pixels = cubePixels[targets[k]];

	                var sideResult = vec3.create();
	                var divider = 0;
	                var i = 0;
	                var transform = normalTransform[targets[k]];
	                for (var y = 0; y < height; y++) {
	                    for (var x = 0; x < width; x++) {

	                        normal[0] = x / (width - 1.0) * 2.0 - 1.0;
	                        // TODO Flip y?
	                        normal[1] = y / (height - 1.0) * 2.0 - 1.0;
	                        normal[2] = -1.0;
	                        vec3.normalize(normal, normal);

	                        fetchNormal[0] = normal[transform[0]] * transform[3];
	                        fetchNormal[1] = normal[transform[1]] * transform[4];
	                        fetchNormal[2] = normal[transform[2]] * transform[5];

	                        texel[0] = pixels[i++] / 255;
	                        texel[1] = pixels[i++] / 255;
	                        texel[2] = pixels[i++] / 255;
	                        // RGBM Decode
	                        var scale = pixels[i++] / 255 * 51.5;
	                        texel[0] *= scale;
	                        texel[1] *= scale;
	                        texel[2] *= scale;

	                        vec3.scaleAndAdd(sideResult, sideResult, texel, harmonics(fetchNormal, m) * -normal[2]);
	                        // -normal.z equals cos(theta) of Lambertian
	                        divider += -normal[2];
	                    }
	                }
	                vec3.scaleAndAdd(result, result, sideResult, 1 / divider);
	            }

	            coeff[m * 3] = result[0] / 6.0;
	            coeff[m * 3 + 1] = result[1] / 6.0;
	            coeff[m * 3 + 2] = result[2] / 6.0;
	        }
	        return coeff;
	    }

	    /**
	     * @param  {qtek.Renderer} renderer
	     * @param  {qtek.Texture} envMap
	     * @param  {Object} [textureOpts]
	     * @param  {Object} [textureOpts.lod]
	     * @param  {boolean} [textureOpts.decodeRGBM]
	     */
	    sh.projectEnvironmentMap = function (renderer, envMap, opts) {

	        // TODO sRGB

	        opts = opts || {};
	        opts.lod = opts.lod || 0;

	        var skybox;
	        var dummyScene = new Scene();
	        var size = 64;
	        if (envMap instanceof Texture2D) {
	            skybox = new Skydome({
	                scene: dummyScene,
	                environmentMap: envMap
	            });
	        }
	        else {
	            size = (envMap.image && envMap.image.px) ? envMap.image.px.width : envMap.width;
	            skybox = new Skybox({
	                scene: dummyScene,
	                environmentMap: envMap
	            });
	        }
	        // Convert to rgbm
	        var width = Math.ceil(size / Math.pow(2, opts.lod));
	        var height = Math.ceil(size / Math.pow(2, opts.lod));
	        var rgbmTexture = new Texture2D({
	            width: width,
	            height: height
	        });
	        var framebuffer = new FrameBuffer();
	        skybox.material.shader.define('fragment', 'RGBM_ENCODE');
	        if (opts.decodeRGBM) {
	            skybox.material.shader.define('fragment', 'RGBM_DECODE');
	        }
	        skybox.material.set('lod', opts.lod);
	        var envMapPass = new EnvironmentMapPass({
	            texture: rgbmTexture
	        });
	        var cubePixels = {};
	        for (var i = 0; i < targets.length; i++) {
	            cubePixels[targets[i]] = new Uint8Array(width * height * 4);
	            var camera = envMapPass.getCamera(targets[i]);
	            camera.fov = 90;
	            framebuffer.attach(rgbmTexture);
	            framebuffer.bind(renderer);
	            renderer.render(dummyScene, camera);
	            renderer.gl.readPixels(
	                0, 0, width, height,
	                Texture.RGBA, Texture.UNSIGNED_BYTE, cubePixels[targets[i]]
	            );
	            framebuffer.unbind(renderer);
	        }

	        skybox.dispose(renderer.gl);
	        framebuffer.dispose(renderer.gl);
	        rgbmTexture.dispose(renderer.gl);

	        return projectEnvironmentMapCPU(renderer, cubePixels, width, height);
	    };

	    module.exports = sh;


/***/ },
/* 68 */
/***/ function(module, exports) {

	
	module.exports = "uniform samplerCube environmentMap;\n\nvarying vec2 v_Texcoord;\n\n#define TEXTURE_SIZE 16\n\nmat3 front = mat3(\n     1.0,  0.0,  0.0,\n     0.0,  1.0,  0.0,\n     0.0,  0.0,  1.0\n);\n\nmat3 back = mat3(\n    -1.0,  0.0,  0.0,\n     0.0,  1.0,  0.0,\n     0.0,  0.0, -1.0\n);\n\nmat3 left = mat3(\n     0.0,  0.0, -1.0,\n     0.0,  1.0,  0.0,\n     1.0,  0.0,  0.0\n);\n\nmat3 right = mat3(\n     0.0,  0.0,  1.0,\n     0.0,  1.0,  0.0,\n    -1.0,  0.0,  0.0\n);\n\nmat3 up = mat3(\n     1.0,  0.0,  0.0,\n     0.0,  0.0,  1.0,\n     0.0, -1.0,  0.0\n);\n\nmat3 down = mat3(\n     1.0,  0.0,  0.0,\n     0.0,  0.0, -1.0,\n     0.0,  1.0,  0.0\n);\n\n\nfloat harmonics(vec3 normal){\n    int index = int(gl_FragCoord.x);\n\n    float x = normal.x;\n    float y = normal.y;\n    float z = normal.z;\n\n    if(index==0){\n        return 1.0;\n    }\n    else if(index==1){\n        return x;\n    }\n    else if(index==2){\n        return y;\n    }\n    else if(index==3){\n        return z;\n    }\n    else if(index==4){\n        return x*z;\n    }\n    else if(index==5){\n        return y*z;\n    }\n    else if(index==6){\n        return x*y;\n    }\n    else if(index==7){\n        return 3.0*z*z - 1.0;\n    }\n    else{\n        return x*x - y*y;\n    }\n}\n\nvec3 sampleSide(mat3 rot)\n{\n\n    vec3 result = vec3(0.0);\n    float divider = 0.0;\n    for (int i = 0; i < TEXTURE_SIZE * TEXTURE_SIZE; i++) {\n        float x = mod(float(i), float(TEXTURE_SIZE));\n        float y = float(i / TEXTURE_SIZE);\n\n        vec2 sidecoord = ((vec2(x, y) + vec2(0.5, 0.5)) / vec2(TEXTURE_SIZE)) * 2.0 - 1.0;\n        vec3 normal = normalize(vec3(sidecoord, -1.0));\n        vec3 fetchNormal = rot * normal;\n        vec3 texel = textureCube(environmentMap, fetchNormal).rgb;\n\n                result += harmonics(fetchNormal) * texel * -normal.z;\n\n        divider += -normal.z;\n    }\n\n    return result / divider;\n}\n\nvoid main()\n{\n    vec3 result = (\n        sampleSide(front) +\n        sampleSide(back) +\n        sampleSide(left) +\n        sampleSide(right) +\n        sampleSide(up) +\n        sampleSide(down)\n    ) / 6.0;\n    gl_FragColor = vec4(result, 1.0);\n}";


/***/ },
/* 69 */
/***/ function(module, exports) {

	var retrieve = {

	    firstNotNull: function () {
	        for (var i = 0, len = arguments.length; i < len; i++) {
	            if (arguments[i] != null) {
	                return arguments[i];
	            }
	        }
	    }
	};

	module.exports = retrieve;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var Animator = __webpack_require__(71);

	var animatableMixin = {

	    _animators: null,

	    getAnimators: function () {
	        this._animators = this._animators || [];

	        return this._animators;
	    },

	    animate: function (path, opts) {
	        this._animators = this._animators || [];

	        var el = this;

	        var target;

	        if (path) {
	            var pathSplitted = path.split('.');
	            var prop = el;
	            for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                if (!prop) {
	                    continue;
	                }
	                prop = prop[pathSplitted[i]];
	            }
	            if (prop) {
	                target = prop;
	            }
	        }
	        else {
	            target = el;
	        }
	        if (target == null) {
	            throw new Error('Target ' + path + ' not exists');
	        }

	        var animators = this._animators;

	        var animator = new Animator(target, opts);
	        var self = this;
	        animator.during(function () {
	            if (self.__zr) {
	                self.__zr.refresh();
	            }
	        }).done(function () {
	            var idx = animators.indexOf(animator);
	            if (idx >= 0) {
	                animators.splice(idx, 1);
	            }
	        });
	        animators.push(animator);

	        if (this.__zr) {
	            this.__zr.animation.addAnimator(animator);
	        }

	        return animator;
	    },

	    stopAnimation: function (forwardToLast) {
	        this._animators = this._animators || [];

	        var animators = this._animators;
	        var len = animators.length;
	        for (var i = 0; i < len; i++) {
	            animators[i].stop(forwardToLast);
	        }
	        animators.length = 0;

	        return this;
	    },

	    addAnimatorsToZr: function (zr) {
	        if (this._animators) {
	            for (var i = 0; i < this._animators.length; i++) {
	                zr.animation.addAnimator(this._animators[i]);
	            }
	        }
	    },

	    removeAnimatorsFromZr: function (zr) {
	        if (this._animators) {
	            for (var i = 0; i < this._animators.length; i++) {
	                zr.animation.removeAnimator(this._animators[i]);
	            }
	        }
	    }
	};

	module.exports = animatableMixin;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/animation/Animator
	 */


	    var Clip = __webpack_require__(72);
	    var color = __webpack_require__(74);
	    var util = __webpack_require__(75);
	    var isArrayLike = util.isArrayLike;

	    var arraySlice = Array.prototype.slice;

	    function defaultGetter(target, key) {
	        return target[key];
	    }

	    function defaultSetter(target, key, value) {
	        target[key] = value;
	    }

	    /**
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} percent
	     * @return {number}
	     */
	    function interpolateNumber(p0, p1, percent) {
	        return (p1 - p0) * percent + p0;
	    }

	    /**
	     * @param  {string} p0
	     * @param  {string} p1
	     * @param  {number} percent
	     * @return {string}
	     */
	    function interpolateString(p0, p1, percent) {
	        return percent > 0.5 ? p1 : p0;
	    }

	    /**
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {number} percent
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function interpolateArray(p0, p1, percent, out, arrDim) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = interpolateNumber(p0[i], p1[i], percent);
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = interpolateNumber(
	                        p0[i][j], p1[i][j], percent
	                    );
	                }
	            }
	        }
	    }

	    // arr0 is source array, arr1 is target array.
	    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1
	    function fillArr(arr0, arr1, arrDim) {
	        var arr0Len = arr0.length;
	        var arr1Len = arr1.length;
	        if (arr0Len !== arr1Len) {
	            // FIXME Not work for TypedArray
	            var isPreviousLarger = arr0Len > arr1Len;
	            if (isPreviousLarger) {
	                // Cut the previous
	                arr0.length = arr1Len;
	            }
	            else {
	                // Fill the previous
	                for (var i = arr0Len; i < arr1Len; i++) {
	                    arr0.push(
	                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])
	                    );
	                }
	            }
	        }
	        // Handling NaN value
	        var len2 = arr0[0] && arr0[0].length;
	        for (var i = 0; i < arr0.length; i++) {
	            if (arrDim === 1) {
	                if (isNaN(arr0[i])) {
	                    arr0[i] = arr1[i];
	                }
	            }
	            else {
	                for (var j = 0; j < len2; j++) {
	                    if (isNaN(arr0[i][j])) {
	                        arr0[i][j] = arr1[i][j];
	                    }
	                }
	            }
	        }
	    }

	    /**
	     * @param  {Array} arr0
	     * @param  {Array} arr1
	     * @param  {number} arrDim
	     * @return {boolean}
	     */
	    function isArraySame(arr0, arr1, arrDim) {
	        if (arr0 === arr1) {
	            return true;
	        }
	        var len = arr0.length;
	        if (len !== arr1.length) {
	            return false;
	        }
	        if (arrDim === 1) {
	            for (var i = 0; i < len; i++) {
	                if (arr0[i] !== arr1[i]) {
	                    return false;
	                }
	            }
	        }
	        else {
	            var len2 = arr0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    if (arr0[i][j] !== arr1[i][j]) {
	                        return false;
	                    }
	                }
	            }
	        }
	        return true;
	    }

	    /**
	     * Catmull Rom interpolate array
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {Array} p2
	     * @param  {Array} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function catmullRomInterpolateArray(
	        p0, p1, p2, p3, t, t2, t3, out, arrDim
	    ) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = catmullRomInterpolate(
	                    p0[i], p1[i], p2[i], p3[i], t, t2, t3
	                );
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = catmullRomInterpolate(
	                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],
	                        t, t2, t3
	                    );
	                }
	            }
	        }
	    }

	    /**
	     * Catmull Rom interpolate number
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @return {number}
	     */
	    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }

	    function cloneValue(value) {
	        if (isArrayLike(value)) {
	            var len = value.length;
	            if (isArrayLike(value[0])) {
	                var ret = [];
	                for (var i = 0; i < len; i++) {
	                    ret.push(arraySlice.call(value[i]));
	                }
	                return ret;
	            }

	            return arraySlice.call(value);
	        }

	        return value;
	    }

	    function rgba2String(rgba) {
	        rgba[0] = Math.floor(rgba[0]);
	        rgba[1] = Math.floor(rgba[1]);
	        rgba[2] = Math.floor(rgba[2]);

	        return 'rgba(' + rgba.join(',') + ')';
	    }

	    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {
	        var getter = animator._getter;
	        var setter = animator._setter;
	        var useSpline = easing === 'spline';

	        var trackLen = keyframes.length;
	        if (!trackLen) {
	            return;
	        }
	        // Guess data type
	        var firstVal = keyframes[0].value;
	        var isValueArray = isArrayLike(firstVal);
	        var isValueColor = false;
	        var isValueString = false;

	        // For vertices morphing
	        var arrDim = (
	                isValueArray
	                && isArrayLike(firstVal[0])
	            )
	            ? 2 : 1;
	        var trackMaxTime;
	        // Sort keyframe as ascending
	        keyframes.sort(function(a, b) {
	            return a.time - b.time;
	        });

	        trackMaxTime = keyframes[trackLen - 1].time;
	        // Percents of each keyframe
	        var kfPercents = [];
	        // Value of each keyframe
	        var kfValues = [];
	        var prevValue = keyframes[0].value;
	        var isAllValueEqual = true;
	        for (var i = 0; i < trackLen; i++) {
	            kfPercents.push(keyframes[i].time / trackMaxTime);
	            // Assume value is a color when it is a string
	            var value = keyframes[i].value;

	            // Check if value is equal, deep check if value is array
	            if (!((isValueArray && isArraySame(value, prevValue, arrDim))
	                || (!isValueArray && value === prevValue))) {
	                isAllValueEqual = false;
	            }
	            prevValue = value;

	            // Try converting a string to a color array
	            if (typeof value == 'string') {
	                var colorArray = color.parse(value);
	                if (colorArray) {
	                    value = colorArray;
	                    isValueColor = true;
	                }
	                else {
	                    isValueString = true;
	                }
	            }
	            kfValues.push(value);
	        }
	        if (isAllValueEqual) {
	            return;
	        }

	        var lastValue = kfValues[trackLen - 1];
	        // Polyfill array and NaN value
	        for (var i = 0; i < trackLen - 1; i++) {
	            if (isValueArray) {
	                fillArr(kfValues[i], lastValue, arrDim);
	            }
	            else {
	                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	                    kfValues[i] = lastValue;
	                }
	            }
	        }
	        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);

	        // Cache the key of last frame to speed up when
	        // animation playback is sequency
	        var lastFrame = 0;
	        var lastFramePercent = 0;
	        var start;
	        var w;
	        var p0;
	        var p1;
	        var p2;
	        var p3;

	        if (isValueColor) {
	            var rgba = [0, 0, 0, 0];
	        }

	        var onframe = function (target, percent) {
	            // Find the range keyframes
	            // kf1-----kf2---------current--------kf3
	            // find kf2 and kf3 and do interpolation
	            var frame;
	            // In the easing function like elasticOut, percent may less than 0
	            if (percent < 0) {
	                frame = 0;
	            }
	            else if (percent < lastFramePercent) {
	                // Start from next key
	                // PENDING start from lastFrame ?
	                start = Math.min(lastFrame + 1, trackLen - 1);
	                for (frame = start; frame >= 0; frame--) {
	                    if (kfPercents[frame] <= percent) {
	                        break;
	                    }
	                }
	                // PENDING really need to do this ?
	                frame = Math.min(frame, trackLen - 2);
	            }
	            else {
	                for (frame = lastFrame; frame < trackLen; frame++) {
	                    if (kfPercents[frame] > percent) {
	                        break;
	                    }
	                }
	                frame = Math.min(frame - 1, trackLen - 2);
	            }
	            lastFrame = frame;
	            lastFramePercent = percent;

	            var range = (kfPercents[frame + 1] - kfPercents[frame]);
	            if (range === 0) {
	                return;
	            }
	            else {
	                w = (percent - kfPercents[frame]) / range;
	            }
	            if (useSpline) {
	                p1 = kfValues[frame];
	                p0 = kfValues[frame === 0 ? frame : frame - 1];
	                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	                if (isValueArray) {
	                    catmullRomInterpolateArray(
	                        p0, p1, p2, p3, w, w * w, w * w * w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        value = catmullRomInterpolateArray(
	                            p0, p1, p2, p3, w, w * w, w * w * w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(p1, p2, w);
	                    }
	                    else {
	                        value = catmullRomInterpolate(
	                            p0, p1, p2, p3, w, w * w, w * w * w
	                        );
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	            else {
	                if (isValueArray) {
	                    interpolateArray(
	                        kfValues[frame], kfValues[frame + 1], w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        interpolateArray(
	                            kfValues[frame], kfValues[frame + 1], w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    else {
	                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	        };

	        var clip = new Clip({
	            target: animator._target,
	            life: trackMaxTime,
	            loop: animator._loop,
	            delay: animator._delay,
	            onframe: onframe,
	            ondestroy: oneTrackDone
	        });

	        if (easing && easing !== 'spline') {
	            clip.easing = easing;
	        }

	        return clip;
	    }

	    /**
	     * @alias module:zrender/animation/Animator
	     * @constructor
	     * @param {Object} target
	     * @param {boolean} loop
	     * @param {Function} getter
	     * @param {Function} setter
	     */
	    var Animator = function(target, loop, getter, setter) {
	        this._tracks = {};
	        this._target = target;

	        this._loop = loop || false;

	        this._getter = getter || defaultGetter;
	        this._setter = setter || defaultSetter;

	        this._clipCount = 0;

	        this._delay = 0;

	        this._doneList = [];

	        this._onframeList = [];

	        this._clipList = [];
	    };

	    Animator.prototype = {
	        /**
	         * 设置动画关键帧
	         * @param  {number} time 关键帧时间，单位是ms
	         * @param  {Object} props 关键帧的属性值，key-value表示
	         * @return {module:zrender/animation/Animator}
	         */
	        when: function(time /* ms */, props) {
	            var tracks = this._tracks;
	            for (var propName in props) {
	                if (!props.hasOwnProperty(propName)) {
	                    continue;
	                }

	                if (!tracks[propName]) {
	                    tracks[propName] = [];
	                    // Invalid value
	                    var value = this._getter(this._target, propName);
	                    if (value == null) {
	                        // zrLog('Invalid property ' + propName);
	                        continue;
	                    }
	                    // If time is 0
	                    //  Then props is given initialize value
	                    // Else
	                    //  Initialize value from current prop value
	                    if (time !== 0) {
	                        tracks[propName].push({
	                            time: 0,
	                            value: cloneValue(value)
	                        });
	                    }
	                }
	                tracks[propName].push({
	                    time: time,
	                    value: props[propName]
	                });
	            }
	            return this;
	        },
	        /**
	         * 添加动画每一帧的回调函数
	         * @param  {Function} callback
	         * @return {module:zrender/animation/Animator}
	         */
	        during: function (callback) {
	            this._onframeList.push(callback);
	            return this;
	        },

	        pause: function () {
	            for (var i = 0; i < this._clipList.length; i++) {
	                this._clipList[i].pause();
	            }
	            this._paused = true;
	        },

	        resume: function () {
	            for (var i = 0; i < this._clipList.length; i++) {
	                this._clipList[i].resume();
	            }
	            this._paused = false;
	        },

	        isPaused: function () {
	            return !!this._paused;
	        },

	        _doneCallback: function () {
	            // Clear all tracks
	            this._tracks = {};
	            // Clear all clips
	            this._clipList.length = 0;

	            var doneList = this._doneList;
	            var len = doneList.length;
	            for (var i = 0; i < len; i++) {
	                doneList[i].call(this);
	            }
	        },
	        /**
	         * 开始执行动画
	         * @param  {string|Function} easing
	         *         动画缓动函数，详见{@link module:zrender/animation/easing}
	         * @return {module:zrender/animation/Animator}
	         */
	        start: function (easing) {

	            var self = this;
	            var clipCount = 0;

	            var oneTrackDone = function() {
	                clipCount--;
	                if (!clipCount) {
	                    self._doneCallback();
	                }
	            };

	            var lastClip;
	            for (var propName in this._tracks) {
	                if (!this._tracks.hasOwnProperty(propName)) {
	                    continue;
	                }
	                var clip = createTrackClip(
	                    this, easing, oneTrackDone,
	                    this._tracks[propName], propName
	                );
	                if (clip) {
	                    this._clipList.push(clip);
	                    clipCount++;

	                    // If start after added to animation
	                    if (this.animation) {
	                        this.animation.addClip(clip);
	                    }

	                    lastClip = clip;
	                }
	            }

	            // Add during callback on the last clip
	            if (lastClip) {
	                var oldOnFrame = lastClip.onframe;
	                lastClip.onframe = function (target, percent) {
	                    oldOnFrame(target, percent);

	                    for (var i = 0; i < self._onframeList.length; i++) {
	                        self._onframeList[i](target, percent);
	                    }
	                };
	            }

	            if (!clipCount) {
	                this._doneCallback();
	            }
	            return this;
	        },
	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stop: function (forwardToLast) {
	            var clipList = this._clipList;
	            var animation = this.animation;
	            for (var i = 0; i < clipList.length; i++) {
	                var clip = clipList[i];
	                if (forwardToLast) {
	                    // Move to last frame before stop
	                    clip.onframe(this._target, 1);
	                }
	                animation && animation.removeClip(clip);
	            }
	            clipList.length = 0;
	        },
	        /**
	         * 设置动画延迟开始的时间
	         * @param  {number} time 单位ms
	         * @return {module:zrender/animation/Animator}
	         */
	        delay: function (time) {
	            this._delay = time;
	            return this;
	        },
	        /**
	         * 添加动画结束的回调
	         * @param  {Function} cb
	         * @return {module:zrender/animation/Animator}
	         */
	        done: function(cb) {
	            if (cb) {
	                this._doneList.push(cb);
	            }
	            return this;
	        },

	        /**
	         * @return {Array.<module:zrender/animation/Clip>}
	         */
	        getClips: function () {
	            return this._clipList;
	        }
	    };

	    module.exports = Animator;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */


	    var easingFuncs = __webpack_require__(73);

	    function Clip(options) {

	        this._target = options.target;

	        // 生命周期
	        this._life = options.life || 1000;
	        // 延时
	        this._delay = options.delay || 0;
	        // 开始时间
	        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	        this._initialized = false;

	        // 是否循环
	        this.loop = options.loop == null ? false : options.loop;

	        this.gap = options.gap || 0;

	        this.easing = options.easing || 'Linear';

	        this.onframe = options.onframe;
	        this.ondestroy = options.ondestroy;
	        this.onrestart = options.onrestart;

	        this._pausedTime = 0;
	        this._paused = false;
	    }

	    Clip.prototype = {

	        constructor: Clip,

	        step: function (globalTime, deltaTime) {
	            // Set startTime on first step, or _startTime may has milleseconds different between clips
	            // PENDING
	            if (!this._initialized) {
	                this._startTime = globalTime + this._delay;
	                this._initialized = true;
	            }

	            if (this._paused) {
	                this._pausedTime += deltaTime;
	                return;
	            }

	            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;

	            // 还没开始
	            if (percent < 0) {
	                return;
	            }

	            percent = Math.min(percent, 1);

	            var easing = this.easing;
	            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	            var schedule = typeof easingFunc === 'function'
	                ? easingFunc(percent)
	                : percent;

	            this.fire('frame', schedule);

	            // 结束
	            if (percent == 1) {
	                if (this.loop) {
	                    this.restart (globalTime);
	                    // 重新开始周期
	                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                    return 'restart';
	                }

	                // 动画完成将这个控制器标识为待删除
	                // 在Animation.update中进行批量删除
	                this._needsRemove = true;
	                return 'destroy';
	            }

	            return null;
	        },

	        restart: function (globalTime) {
	            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
	            this._startTime = globalTime - remainder + this.gap;
	            this._pausedTime = 0;

	            this._needsRemove = false;
	        },

	        fire: function (eventType, arg) {
	            eventType = 'on' + eventType;
	            if (this[eventType]) {
	                this[eventType](this._target, arg);
	            }
	        },

	        pause: function () {
	            this._paused = true;
	        },

	        resume: function () {
	            this._paused = false;
	        }
	    };

	    module.exports = Clip;



/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */

	    var easing = {
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        linear: function (k) {
	            return k;
	        },

	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticIn: function (k) {
	            return k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticOut: function (k) {
	            return k * (2 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k;
	            }
	            return -0.5 * (--k * (k - 2) - 1);
	        },

	        // 三次方的缓动（t^3）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicIn: function (k) {
	            return k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicOut: function (k) {
	            return --k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k + 2);
	        },

	        // 四次方的缓动（t^4）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticIn: function (k) {
	            return k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticOut: function (k) {
	            return 1 - (--k * k * k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k;
	            }
	            return -0.5 * ((k -= 2) * k * k * k - 2);
	        },

	        // 五次方的缓动（t^5）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticIn: function (k) {
	            return k * k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticOut: function (k) {
	            return --k * k * k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k * k * k + 2);
	        },

	        // 正弦曲线的缓动（sin(t)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalIn: function (k) {
	            return 1 - Math.cos(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalOut: function (k) {
	            return Math.sin(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalInOut: function (k) {
	            return 0.5 * (1 - Math.cos(Math.PI * k));
	        },

	        // 指数曲线的缓动（2^t）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialIn: function (k) {
	            return k === 0 ? 0 : Math.pow(1024, k - 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialOut: function (k) {
	            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialInOut: function (k) {
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if ((k *= 2) < 1) {
	                return 0.5 * Math.pow(1024, k - 1);
	            }
	            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	        },

	        // 圆形曲线的缓动（sqrt(1-t^2)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularIn: function (k) {
	            return 1 - Math.sqrt(1 - k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularOut: function (k) {
	            return Math.sqrt(1 - (--k * k));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return -0.5 * (Math.sqrt(1 - k * k) - 1);
	            }
	            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	        },

	        // 创建类似于弹簧在停止前来回振荡的动画
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticIn: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return -(a * Math.pow(2, 10 * (k -= 1)) *
	                        Math.sin((k - s) * (2 * Math.PI) / p));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return (a * Math.pow(2, -10 * k) *
	                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticInOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            if ((k *= 2) < 1) {
	                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p));
	            }
	            return a * Math.pow(2, -10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;

	        },

	        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backIn: function (k) {
	            var s = 1.70158;
	            return k * k * ((s + 1) * k - s);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backOut: function (k) {
	            var s = 1.70158;
	            return --k * k * ((s + 1) * k + s) + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backInOut: function (k) {
	            var s = 1.70158 * 1.525;
	            if ((k *= 2) < 1) {
	                return 0.5 * (k * k * ((s + 1) * k - s));
	            }
	            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	        },

	        // 创建弹跳效果
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceIn: function (k) {
	            return 1 - easing.bounceOut(1 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceOut: function (k) {
	            if (k < (1 / 2.75)) {
	                return 7.5625 * k * k;
	            }
	            else if (k < (2 / 2.75)) {
	                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	            }
	            else if (k < (2.5 / 2.75)) {
	                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	            }
	            else {
	                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	            }
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceInOut: function (k) {
	            if (k < 0.5) {
	                return easing.bounceIn(k * 2) * 0.5;
	            }
	            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	        }
	    };

	    module.exports = easing;




/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/tool/color
	 */


	    var LRU = __webpack_require__(39);

	    var kCSSColorTable = {
	        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],
	        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],
	        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],
	        'beige': [245,245,220,1], 'bisque': [255,228,196,1],
	        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],
	        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],
	        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],
	        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],
	        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],
	        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],
	        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],
	        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],
	        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],
	        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],
	        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],
	        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],
	        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],
	        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],
	        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],
	        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],
	        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],
	        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],
	        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],
	        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],
	        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],
	        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],
	        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],
	        'gray': [128,128,128,1], 'green': [0,128,0,1],
	        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],
	        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],
	        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],
	        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],
	        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],
	        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],
	        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],
	        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],
	        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],
	        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],
	        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],
	        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],
	        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],
	        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],
	        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],
	        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],
	        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],
	        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],
	        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],
	        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],
	        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],
	        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],
	        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],
	        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],
	        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],
	        'orange': [255,165,0,1], 'orangered': [255,69,0,1],
	        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],
	        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],
	        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],
	        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],
	        'pink': [255,192,203,1], 'plum': [221,160,221,1],
	        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],
	        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],
	        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],
	        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],
	        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],
	        'sienna': [160,82,45,1], 'silver': [192,192,192,1],
	        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],
	        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],
	        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],
	        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],
	        'teal': [0,128,128,1], 'thistle': [216,191,216,1],
	        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],
	        'violet': [238,130,238,1], 'wheat': [245,222,179,1],
	        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],
	        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]
	    };

	    function clampCssByte(i) {  // Clamp to integer 0 .. 255.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 255 ? 255 : i;
	    }

	    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 360 ? 360 : i;
	    }

	    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.
	        return f < 0 ? 0 : f > 1 ? 1 : f;
	    }

	    function parseCssInt(str) {  // int or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssByte(parseFloat(str) / 100 * 255);
	        }
	        return clampCssByte(parseInt(str, 10));
	    }

	    function parseCssFloat(str) {  // float or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssFloat(parseFloat(str) / 100);
	        }
	        return clampCssFloat(parseFloat(str));
	    }

	    function cssHueToRgb(m1, m2, h) {
	        if (h < 0) {
	            h += 1;
	        }
	        else if (h > 1) {
	            h -= 1;
	        }

	        if (h * 6 < 1) {
	            return m1 + (m2 - m1) * h * 6;
	        }
	        if (h * 2 < 1) {
	            return m2;
	        }
	        if (h * 3 < 2) {
	            return m1 + (m2 - m1) * (2/3 - h) * 6;
	        }
	        return m1;
	    }

	    function lerp(a, b, p) {
	        return a + (b - a) * p;
	    }

	    function setRgba(out, r, g, b, a) {
	        out[0] = r; out[1] = g; out[2] = b; out[3] = a;
	        return out;
	    }
	    function copyRgba(out, a) {
	        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];
	        return out;
	    }
	    var colorCache = new LRU(20);
	    var lastRemovedArr = null;
	    function putToCache(colorStr, rgbaArr) {
	        // Reuse removed array
	        if (lastRemovedArr) {
	            copyRgba(lastRemovedArr, rgbaArr);
	        }
	        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));
	    }
	    /**
	     * @param {string} colorStr
	     * @param {Array.<number>} out
	     * @return {Array.<number>}
	     * @memberOf module:zrender/util/color
	     */
	    function parse(colorStr, rgbaArr) {
	        if (!colorStr) {
	            return;
	        }
	        rgbaArr = rgbaArr || [];

	        var cached = colorCache.get(colorStr);
	        if (cached) {
	            return copyRgba(rgbaArr, cached);
	        }

	        // colorStr may be not string
	        colorStr = colorStr + '';
	        // Remove all whitespace, not compliant, but should just be more accepting.
	        var str = colorStr.replace(/ /g, '').toLowerCase();

	        // Color keywords (and transparent) lookup.
	        if (str in kCSSColorTable) {
	            copyRgba(rgbaArr, kCSSColorTable[str]);
	            putToCache(colorStr, rgbaArr);
	            return rgbaArr;
	        }

	        // #abc and #abc123 syntax.
	        if (str.charAt(0) === '#') {
	            if (str.length === 4) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xfff)) {
	                    setRgba(rgbaArr, 0, 0, 0, 1);
	                    return;  // Covers NaN.
	                }
	                setRgba(rgbaArr,
	                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
	                    (iv & 0xf0) | ((iv & 0xf0) >> 4),
	                    (iv & 0xf) | ((iv & 0xf) << 4),
	                    1
	                );
	                putToCache(colorStr, rgbaArr);
	                return rgbaArr;
	            }
	            else if (str.length === 7) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xffffff)) {
	                    setRgba(rgbaArr, 0, 0, 0, 1);
	                    return;  // Covers NaN.
	                }
	                setRgba(rgbaArr,
	                    (iv & 0xff0000) >> 16,
	                    (iv & 0xff00) >> 8,
	                    iv & 0xff,
	                    1
	                );
	                putToCache(colorStr, rgbaArr);
	                return rgbaArr;
	            }

	            return;
	        }
	        var op = str.indexOf('('), ep = str.indexOf(')');
	        if (op !== -1 && ep + 1 === str.length) {
	            var fname = str.substr(0, op);
	            var params = str.substr(op + 1, ep - (op + 1)).split(',');
	            var alpha = 1;  // To allow case fallthrough.
	            switch (fname) {
	                case 'rgba':
	                    if (params.length !== 4) {
	                        setRgba(rgbaArr, 0, 0, 0, 1);
	                        return;
	                    }
	                    alpha = parseCssFloat(params.pop()); // jshint ignore:line
	                // Fall through.
	                case 'rgb':
	                    if (params.length !== 3) {
	                        setRgba(rgbaArr, 0, 0, 0, 1);
	                        return;
	                    }
	                    setRgba(rgbaArr,
	                        parseCssInt(params[0]),
	                        parseCssInt(params[1]),
	                        parseCssInt(params[2]),
	                        alpha
	                    );
	                    putToCache(colorStr, rgbaArr);
	                    return rgbaArr;
	                case 'hsla':
	                    if (params.length !== 4) {
	                        setRgba(rgbaArr, 0, 0, 0, 1);
	                        return;
	                    }
	                    params[3] = parseCssFloat(params[3]);
	                    hsla2rgba(params, rgbaArr);
	                    putToCache(colorStr, rgbaArr);
	                    return rgbaArr;
	                case 'hsl':
	                    if (params.length !== 3) {
	                        setRgba(rgbaArr, 0, 0, 0, 1);
	                        return;
	                    }
	                    hsla2rgba(params, rgbaArr);
	                    putToCache(colorStr, rgbaArr);
	                    return rgbaArr;
	                default:
	                    return;
	            }
	        }

	        setRgba(rgbaArr, 0, 0, 0, 1);
	        return;
	    }

	    /**
	     * @param {Array.<number>} hsla
	     * @param {Array.<number>} rgba
	     * @return {Array.<number>} rgba
	     */
	    function hsla2rgba(hsla, rgba) {
	        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
	        // NOTE(deanm): According to the CSS spec s/l should only be
	        // percentages, but we don't bother and let float or percentage.
	        var s = parseCssFloat(hsla[1]);
	        var l = parseCssFloat(hsla[2]);
	        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        var m1 = l * 2 - m2;

	        rgba = rgba || [];
	        setRgba(rgba,
	            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),
	            1
	        );

	        if (hsla.length === 4) {
	            rgba[3] = hsla[3];
	        }

	        return rgba;
	    }

	    /**
	     * @param {Array.<number>} rgba
	     * @return {Array.<number>} hsla
	     */
	    function rgba2hsla(rgba) {
	        if (!rgba) {
	            return;
	        }

	        // RGB from 0 to 255
	        var R = rgba[0] / 255;
	        var G = rgba[1] / 255;
	        var B = rgba[2] / 255;

	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value

	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            }
	            else {
	                S = delta / (2 - vMax - vMin);
	            }

	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }

	            if (H < 0) {
	                H += 1;
	            }

	            if (H > 1) {
	                H -= 1;
	            }
	        }

	        var hsla = [H * 360, S, L];

	        if (rgba[3] != null) {
	            hsla.push(rgba[3]);
	        }

	        return hsla;
	    }

	    /**
	     * @param {string} color
	     * @param {number} level
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function lift(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            for (var i = 0; i < 3; i++) {
	                if (level < 0) {
	                    colorArr[i] = colorArr[i] * (1 - level) | 0;
	                }
	                else {
	                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;
	                }
	            }
	            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	        }
	    }

	    /**
	     * @param {string} color
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function toHex(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);
	        }
	    }

	    /**
	     * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<Array.<number>>} colors List of rgba color array
	     * @param {Array.<number>} [out] Mapped gba color array
	     * @return {Array.<number>}
	     */
	    function fastMapToColor(normalizedValue, colors, out) {
	        out = out || [0, 0, 0, 0];
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return out;
	        }
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = colors[leftIndex];
	        var rightColor = colors[rightIndex];
	        var dv = value - leftIndex;
	        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	        return out;
	    }
	    /**
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<string>} colors Color list.
	     * @param {boolean=} fullOutput Default false.
	     * @return {(string|Object)} Result color. If fullOutput,
	     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	     * @memberOf module:zrender/util/color
	     */
	    function mapToColor(normalizedValue, colors, fullOutput) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }

	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = parse(colors[leftIndex]);
	        var rightColor = parse(colors[rightIndex]);
	        var dv = value - leftIndex;

	        var color = stringify(
	            [
	                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),
	                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),
	                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),
	                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))
	            ],
	            'rgba'
	        );

	        return fullOutput
	            ? {
	                color: color,
	                leftIndex: leftIndex,
	                rightIndex: rightIndex,
	                value: value
	            }
	            : color;
	    }

	    /**
	     * @param {string} color
	     * @param {number=} h 0 ~ 360, ignore when null.
	     * @param {number=} s 0 ~ 1, ignore when null.
	     * @param {number=} l 0 ~ 1, ignore when null.
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyHSL(color, h, s, l) {
	        color = parse(color);

	        if (color) {
	            color = rgba2hsla(color);
	            h != null && (color[0] = clampCssAngle(h));
	            s != null && (color[1] = parseCssFloat(s));
	            l != null && (color[2] = parseCssFloat(l));

	            return stringify(hsla2rgba(color), 'rgba');
	        }
	    }

	    /**
	     * @param {string} color
	     * @param {number=} alpha 0 ~ 1
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyAlpha(color, alpha) {
	        color = parse(color);

	        if (color && alpha != null) {
	            color[3] = clampCssFloat(alpha);
	            return stringify(color, 'rgba');
	        }
	    }

	    /**
	     * @param {Array.<string>} colors Color list.
	     * @param {string} type 'rgba', 'hsva', ...
	     * @return {string} Result color. (If input illegal, return undefined).
	     */
	    function stringify(arrColor, type) {
	        if (!arrColor) {
	            return;
	        }
	        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
	        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	            colorStr += ',' + arrColor[3];
	        }
	        return type + '(' + colorStr + ')';
	    }

	    module.exports = {
	        parse: parse,
	        lift: lift,
	        toHex: toHex,
	        fastMapToColor: fastMapToColor,
	        mapToColor: mapToColor,
	        modifyHSL: modifyHSL,
	        modifyAlpha: modifyAlpha,
	        stringify: stringify
	    };




/***/ },
/* 75 */
/***/ function(module, exports) {

	/**
	 * @module zrender/core/util
	 */


	    // 用于处理merge时无法遍历Date等对象的问题
	    var BUILTIN_OBJECT = {
	        '[object Function]': 1,
	        '[object RegExp]': 1,
	        '[object Date]': 1,
	        '[object Error]': 1,
	        '[object CanvasGradient]': 1,
	        '[object CanvasPattern]': 1,
	        // For node-canvas
	        '[object Image]': 1,
	        '[object Canvas]': 1
	    };

	    var TYPED_ARRAY = {
	        '[object Int8Array]': 1,
	        '[object Uint8Array]': 1,
	        '[object Uint8ClampedArray]': 1,
	        '[object Int16Array]': 1,
	        '[object Uint16Array]': 1,
	        '[object Int32Array]': 1,
	        '[object Uint32Array]': 1,
	        '[object Float32Array]': 1,
	        '[object Float64Array]': 1
	    };

	    var objToString = Object.prototype.toString;

	    var arrayProto = Array.prototype;
	    var nativeForEach = arrayProto.forEach;
	    var nativeFilter = arrayProto.filter;
	    var nativeSlice = arrayProto.slice;
	    var nativeMap = arrayProto.map;
	    var nativeReduce = arrayProto.reduce;

	    /**
	     * Those data types can be cloned:
	     *     Plain object, Array, TypedArray, number, string, null, undefined.
	     * Those data types will be assgined using the orginal data:
	     *     BUILTIN_OBJECT
	     * Instance of user defined class will be cloned to a plain object, without
	     * properties in prototype.
	     * Other data types is not supported (not sure what will happen).
	     *
	     * Caution: do not support clone Date, for performance consideration.
	     * (There might be a large number of date in `series.data`).
	     * So date should not be modified in and out of echarts.
	     *
	     * @param {*} source
	     * @return {*} new
	     */
	    function clone(source) {
	        if (source == null || typeof source != 'object') {
	            return source;
	        }

	        var result = source;
	        var typeStr = objToString.call(source);

	        if (typeStr === '[object Array]') {
	            result = [];
	            for (var i = 0, len = source.length; i < len; i++) {
	                result[i] = clone(source[i]);
	            }
	        }
	        else if (TYPED_ARRAY[typeStr]) {
	            result = source.constructor.from(source);
	        }
	        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
	            result = {};
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    result[key] = clone(source[key]);
	                }
	            }
	        }

	        return result;
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} target
	     * @param {*} source
	     * @param {boolean} [overwrite=false]
	     */
	    function merge(target, source, overwrite) {
	        // We should escapse that source is string
	        // and enter for ... in ...
	        if (!isObject(source) || !isObject(target)) {
	            return overwrite ? clone(source) : target;
	        }

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                var sourceProp = source[key];

	                if (isObject(sourceProp)
	                    && isObject(targetProp)
	                    && !isArray(sourceProp)
	                    && !isArray(targetProp)
	                    && !isDom(sourceProp)
	                    && !isDom(targetProp)
	                    && !isBuiltInObject(sourceProp)
	                    && !isBuiltInObject(targetProp)
	                    && !isPrimitive(sourceProp)
	                    && !isPrimitive(targetProp)
	                ) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(targetProp, sourceProp, overwrite);
	                }
	                else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                    target[key] = clone(source[key], true);
	                }
	            }
	        }

	        return target;
	    }

	    /**
	     * @param {Array} targetAndSources The first item is target, and the rests are source.
	     * @param {boolean} [overwrite=false]
	     * @return {*} target
	     */
	    function mergeAll(targetAndSources, overwrite) {
	        var result = targetAndSources[0];
	        for (var i = 1, len = targetAndSources.length; i < len; i++) {
	            result = merge(result, targetAndSources[i], overwrite);
	        }
	        return result;
	    }

	    /**
	     * @param {*} target
	     * @param {*} source
	     * @memberOf module:zrender/core/util
	     */
	    function extend(target, source) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }

	    /**
	     * @param {*} target
	     * @param {*} source
	     * @param {boolen} [overlay=false]
	     * @memberOf module:zrender/core/util
	     */
	    function defaults(target, source, overlay) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)
	                && (overlay ? source[key] != null : target[key] == null)
	            ) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }

	    function createCanvas() {
	        return document.createElement('canvas');
	    }
	    // FIXME
	    var _ctx;
	    function getContext() {
	        if (!_ctx) {
	            // Use util.createCanvas instead of createCanvas
	            // because createCanvas may be overwritten in different environment
	            _ctx = util.createCanvas().getContext('2d');
	        }
	        return _ctx;
	    }

	    /**
	     * 查询数组中元素的index
	     * @memberOf module:zrender/core/util
	     */
	    function indexOf(array, value) {
	        if (array) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    }

	    /**
	     * 构造类继承关系
	     *
	     * @memberOf module:zrender/core/util
	     * @param {Function} clazz 源类
	     * @param {Function} baseClazz 基类
	     */
	    function inherits(clazz, baseClazz) {
	        var clazzPrototype = clazz.prototype;
	        function F() {}
	        F.prototype = baseClazz.prototype;
	        clazz.prototype = new F();

	        for (var prop in clazzPrototype) {
	            clazz.prototype[prop] = clazzPrototype[prop];
	        }
	        clazz.prototype.constructor = clazz;
	        clazz.superClass = baseClazz;
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Object|Function} target
	     * @param {Object|Function} sorce
	     * @param {boolean} overlay
	     */
	    function mixin(target, source, overlay) {
	        target = 'prototype' in target ? target.prototype : target;
	        source = 'prototype' in source ? source.prototype : source;

	        defaults(target, source, overlay);
	    }

	    /**
	     * @param {Array|TypedArray} data
	     */
	    function isArrayLike(data) {
	        if (! data) {
	            return;
	        }
	        if (typeof data == 'string') {
	            return false;
	        }
	        return typeof data.length == 'number';
	    }

	    /**
	     * 数组或对象遍历
	     * @memberOf module:zrender/core/util
	     * @param {Object|Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     */
	    function each(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.forEach && obj.forEach === nativeForEach) {
	            obj.forEach(cb, context);
	        }
	        else if (obj.length === +obj.length) {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                cb.call(context, obj[i], i, obj);
	            }
	        }
	        else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    cb.call(context, obj[key], key, obj);
	                }
	            }
	        }
	    }

	    /**
	     * 数组映射
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function map(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.map && obj.map === nativeMap) {
	            return obj.map(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                result.push(cb.call(context, obj[i], i, obj));
	            }
	            return result;
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {Object} [memo]
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function reduce(obj, cb, memo, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.reduce && obj.reduce === nativeReduce) {
	            return obj.reduce(cb, memo, context);
	        }
	        else {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                memo = cb.call(context, memo, obj[i], i, obj);
	            }
	            return memo;
	        }
	    }

	    /**
	     * 数组过滤
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function filter(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.filter && obj.filter === nativeFilter) {
	            return obj.filter(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                if (cb.call(context, obj[i], i, obj)) {
	                    result.push(obj[i]);
	                }
	            }
	            return result;
	        }
	    }

	    /**
	     * 数组项查找
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function find(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                return obj[i];
	            }
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @param {*} context
	     * @return {Function}
	     */
	    function bind(func, context) {
	        var args = nativeSlice.call(arguments, 2);
	        return function () {
	            return func.apply(context, args.concat(nativeSlice.call(arguments)));
	        };
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @return {Function}
	     */
	    function curry(func) {
	        var args = nativeSlice.call(arguments, 1);
	        return function () {
	            return func.apply(this, args.concat(nativeSlice.call(arguments)));
	        };
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isArray(value) {
	        return objToString.call(value) === '[object Array]';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isFunction(value) {
	        return typeof value === 'function';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isString(value) {
	        return objToString.call(value) === '[object String]';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isObject(value) {
	        // Avoid a V8 JIT bug in Chrome 19-20.
	        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	        var type = typeof value;
	        return type === 'function' || (!!value && type == 'object');
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isBuiltInObject(value) {
	        return !!BUILTIN_OBJECT[objToString.call(value)];
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isDom(value) {
	        return typeof value === 'object'
	            && typeof value.nodeType === 'number'
	            && typeof value.ownerDocument === 'object';
	    }

	    /**
	     * Whether is exactly NaN. Notice isNaN('a') returns true.
	     * @param {*} value
	     * @return {boolean}
	     */
	    function eqNaN(value) {
	        return value !== value;
	    }

	    /**
	     * If value1 is not null, then return value1, otherwise judget rest of values.
	     * @memberOf module:zrender/core/util
	     * @return {*} Final value
	     */
	    function retrieve(values) {
	        for (var i = 0, len = arguments.length; i < len; i++) {
	            if (arguments[i] != null) {
	                return arguments[i];
	            }
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} arr
	     * @param {number} startIndex
	     * @param {number} endIndex
	     * @return {Array}
	     */
	    function slice() {
	        return Function.call.apply(nativeSlice, arguments);
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {boolean} condition
	     * @param {string} message
	     */
	    function assert(condition, message) {
	        if (!condition) {
	            throw new Error(message);
	        }
	    }

	    var primitiveKey = '__ec_primitive__';
	    /**
	     * Set an object as primitive to be ignored traversing children in clone or merge
	     */
	    function setAsPrimitive(obj) {
	        obj[primitiveKey] = true;
	    }

	    function isPrimitive(obj) {
	        return obj[primitiveKey];
	    }

	    var util = {
	        inherits: inherits,
	        mixin: mixin,
	        clone: clone,
	        merge: merge,
	        mergeAll: mergeAll,
	        extend: extend,
	        defaults: defaults,
	        getContext: getContext,
	        createCanvas: createCanvas,
	        indexOf: indexOf,
	        slice: slice,
	        find: find,
	        isArrayLike: isArrayLike,
	        each: each,
	        map: map,
	        reduce: reduce,
	        filter: filter,
	        bind: bind,
	        curry: curry,
	        isArray: isArray,
	        isString: isString,
	        isObject: isObject,
	        isFunction: isFunction,
	        isBuiltInObject: isBuiltInObject,
	        isDom: isDom,
	        eqNaN: eqNaN,
	        retrieve: retrieve,
	        assert: assert,
	        setAsPrimitive: setAsPrimitive,
	        noop: function () {}
	    };
	    module.exports = util;



/***/ },
/* 76 */
/***/ function(module, exports) {

	
	module.exports = "\n@export qtek.util.rand\nhighp float rand(vec2 uv) {\n    const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n    highp float dt = dot(uv.xy, vec2(a,b)), sn = mod(dt, 3.141592653589793);\n    return fract(sin(sn) * c);\n}\n@end\n\n@export qtek.util.calculate_attenuation\n\nuniform float attenuationFactor : 5.0;\n\nfloat lightAttenuation(float dist, float range)\n{\n    float attenuation = 1.0;\n    attenuation = dist*dist/(range*range+1.0);\n    float att_s = attenuationFactor;\n    attenuation = 1.0/(attenuation*att_s+1.0);\n    att_s = 1.0/(att_s+1.0);\n    attenuation = attenuation - att_s;\n    attenuation /= 1.0 - att_s;\n    return clamp(attenuation, 0.0, 1.0);\n}\n\n@end\n\n@export qtek.util.edge_factor\n\nfloat edgeFactor(float width)\n{\n    vec3 d = fwidth(v_Barycentric);\n    vec3 a3 = smoothstep(vec3(0.0), d * width, v_Barycentric);\n    return min(min(a3.x, a3.y), a3.z);\n}\n\n@end\n\n@export qtek.util.encode_float\nvec4 encodeFloat(const in float depth)\n{\n            \n            \n    const vec4 bitShifts = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n    vec4 res = fract(depth * bitShifts);\n    res -= res.xxyz * bit_mask;\n\n    return res;\n}\n@end\n\n@export qtek.util.decode_float\nfloat decodeFloat(const in vec4 color)\n{\n            \n    \n    const vec4 bitShifts = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n    return dot(color, bitShifts);\n}\n@end\n\n\n@export qtek.util.float\n@import qtek.util.encode_float\n@import qtek.util.decode_float\n@end\n\n\n\n@export qtek.util.rgbm_decode\nvec3 RGBMDecode(vec4 rgbm, float range) {\n  return range * rgbm.rgb * rgbm.a;\n    }\n@end\n\n@export qtek.util.rgbm_encode\nvec4 RGBMEncode(vec3 color, float range) {\n    if (dot(color, color) == 0.0) {\n        return vec4(0.0);\n    }\n    vec4 rgbm;\n    color /= range;\n    rgbm.a = clamp(max(max(color.r, color.g), max(color.b, 1e-6)), 0.0, 1.0);\n    rgbm.a = ceil(rgbm.a * 255.0) / 255.0;\n    rgbm.rgb = color / rgbm.a;\n    return rgbm;\n}\n@end\n\n@export qtek.util.rgbm\n@import qtek.util.rgbm_decode\n@import qtek.util.rgbm_encode\n\nvec4 decodeHDR(vec4 color)\n{\n#if defined(RGBM_DECODE) || defined(RGBM)\n    return vec4(RGBMDecode(color, 51.5), 1.0);\n#else\n    return color;\n#endif\n}\n\nvec4 encodeHDR(vec4 color)\n{\n#if defined(RGBM_ENCODE) || defined(RGBM)\n    return RGBMEncode(color.xyz, 51.5);\n#else\n    return color;\n#endif\n}\n\n@end\n\n\n@export qtek.util.srgb\n\nvec4 sRGBToLinear(in vec4 value) {\n    return vec4(mix(pow(value.rgb * 0.9478672986 + vec3(0.0521327014), vec3(2.4)), value.rgb * 0.0773993808, vec3(lessThanEqual(value.rgb, vec3(0.04045)))), value.w);\n}\n\nvec4 linearTosRGB(in vec4 value) {\n    return vec4(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))), value.w);\n}\n@end\n\n\n@export qtek.chunk.skin_matrix\n\nmat4 skinMatrixWS;\nif (joint.x >= 0.0)\n{\n    skinMatrixWS = skinMatrix[int(joint.x)] * weight.x;\n}\nif (joint.y >= 0.0)\n{\n    skinMatrixWS += skinMatrix[int(joint.y)] * weight.y;\n}\nif (joint.z >= 0.0)\n{\n    skinMatrixWS += skinMatrix[int(joint.z)] * weight.z;\n}\nif (joint.w >= 0.0)\n{\n    skinMatrixWS += skinMatrix[int(joint.w)] * (1.0-weight.x-weight.y-weight.z);\n}\n@end\n\n\n\n@export qtek.util.parallax_correct\n\nvec3 parallaxCorrect(in vec3 dir, in vec3 pos, in vec3 boxMin, in vec3 boxMax) {\n            vec3 first = (boxMax - pos) / dir;\n    vec3 second = (boxMin - pos) / dir;\n\n    vec3 further = max(first, second);\n    float dist = min(further.x, min(further.y, further.z));\n\n    vec3 fixedPos = pos + dir * dist;\n    vec3 boxCenter = (boxMax + boxMin) * 0.5;\n\n    return normalize(fixedPos - boxCenter);\n}\n\n@end\n\n\n\n@export qtek.util.clamp_sample\nvec4 clampSample(const in sampler2D texture, const in vec2 coord)\n{\n#ifdef STEREO\n            float eye = step(0.5, coord.x) * 0.5;\n    vec2 coordClamped = clamp(coord, vec2(eye, 0.0), vec2(0.5 + eye, 1.0));\n#else\n    vec2 coordClamped = clamp(coord, vec2(0.0), vec2(1.0));\n#endif\n    return texture2D(texture, coordClamped);\n}\n@end";


/***/ },
/* 77 */
/***/ function(module, exports) {

	module.exports = "// COMMON SHADERS\n// -----------------WIREFRAME -----------\n@export ecgl.wireframe.common.vertexHeader\n\n#ifdef WIREFRAME_QUAD\nattribute vec4 barycentric;\nvarying vec4 v_Barycentric;\n#elif defined(WIREFRAME_TRIANGLE)\nattribute vec3 barycentric;\nvarying vec3 v_Barycentric;\n#endif\n\n@end\n\n@export ecgl.wireframe.common.vertexMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n    v_Barycentric = barycentric;\n#endif\n\n@end\n\n\n@export ecgl.wireframe.common.fragmentHeader\n\nuniform float wireframeLineWidth : 1;\nuniform vec3 wireframeLineColor: [0.5, 0.5, 0.5];\n\n#ifdef WIREFRAME_QUAD\nvarying vec4 v_Barycentric;\nfloat edgeFactor () {\n    vec4 d = fwidth(v_Barycentric);\n    vec4 a4 = smoothstep(vec4(0.0), d * wireframeLineWidth, v_Barycentric);\n    return min(min(min(a4.x, a4.y), a4.z), a4.w);\n}\n#elif defined(WIREFRAME_TRIANGLE)\nvarying vec3 v_Barycentric;\nfloat edgeFactor () {\n    vec3 d = fwidth(v_Barycentric);\n    vec3 a3 = smoothstep(vec3(0.0), d * wireframeLineWidth, v_Barycentric);\n    return min(min(a3.x, a3.y), a3.z);\n}\n#endif\n\n@end\n\n\n@export ecgl.wireframe.common.fragmentMain\n\n#if defined(WIREFRAME_QUAD) || defined(WIREFRAME_TRIANGLE)\n    if (wireframeLineWidth > 0.) {\n        vec3 lineColor = wireframeLineColor;\n#ifdef SRGB_DECODE\n        lineColor = sRGBToLinear(vec4(lineColor, 1.0)).rgb;\n#endif\n\n        gl_FragColor.rgb = mix(lineColor, gl_FragColor.rgb, edgeFactor());\n    }\n#endif\n@end\n\n"

/***/ },
/* 78 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.color.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec2 uvRepeat: [1, 1];\n\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 position: POSITION;\n\n@import ecgl.wireframe.common.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n    v_Texcoord = texcoord * uvRepeat;\n\n#ifdef VERTEX_COLOR\n    v_Color = a_Color;\n#endif\n\n    @import ecgl.wireframe.common.vertexMain\n\n}\n\n@end\n\n@export ecgl.color.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n\nuniform sampler2D diffuseMap;\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform float emissionIntensity: 1.0;\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\nuniform sampler2D layerDiffuseMap[LAYER_DIFFUSEMAP_COUNT];\n#endif\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\nuniform sampler2D layerEmissiveMap[LAYER_EMISSIVEMAP_COUNT];\n#endif\n\nvarying vec2 v_Texcoord;\n\n@import ecgl.wireframe.common.fragmentHeader\n\n@import qtek.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n    gl_FragColor = sRGBToLinear(color);\n#else\n    gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n    gl_FragColor *= v_Color;\n#endif\n\n    vec4 albedoTexel = vec4(1.0);\n#ifdef DIFFUSEMAP_ENABLED\n    albedoTexel = texture2D(diffuseMap, v_Texcoord);\n    #ifdef SRGB_DECODE\n    albedoTexel = sRGBToLinear(albedoTexel);\n    #endif\n#endif\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\n    for (int _idx_ = 0; _idx_ < LAYER_DIFFUSEMAP_COUNT; _idx_++) {{\n        vec4 texel2 = texture2D(layerDiffuseMap[_idx_], v_Texcoord);\n        #ifdef SRGB_DECODE\n        texel2 = sRGBToLinear(texel2);\n        #endif\n        // source-over blend\n        albedoTexel.rgb = mix(albedoTexel.rgb, texel2.rgb, texel2.a);\n        albedoTexel.a = texel2.a + (1.0 - texel2.a) * albedoTexel.a;\n    }}\n#endif\n    gl_FragColor *= albedoTexel;\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\n    for (int _idx_ = 0; _idx_ < LAYER_EMISSIVEMAP_COUNT; _idx_++) {{\n        // PENDING BLEND?\n        vec4 texel2 = texture2D(layerEmissiveMap[_idx_], v_Texcoord);\n        gl_FragColor.rgb += texel2.rgb * texel2.a * emissionIntensity;\n    }}\n#endif\n\n\n    @import ecgl.wireframe.common.fragmentMain\n\n}\n@end"

/***/ },
/* 79 */
/***/ function(module, exports) {

	module.exports = "/**\n * http://en.wikipedia.org/wiki/Lambertian_reflectance\n */\n\n@export ecgl.lambert.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;\nuniform mat4 world : WORLD;\n\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\n\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 normal : NORMAL;\n\n@import ecgl.wireframe.common.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nvarying vec2 v_Texcoord;\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n    v_Texcoord = texcoord * uvRepeat + uvOffset;\n\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n\n    v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n    v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n    v_Color = a_Color;\n#endif\n\n    @import ecgl.wireframe.common.vertexMain\n}\n\n@end\n\n\n@export ecgl.lambert.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n#define PI 3.14159265358979\n\nvarying vec2 v_Texcoord;\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\n#ifdef DIFFUSEMAP_ENABLED\nuniform sampler2D diffuseMap;\n#endif\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\nuniform sampler2D layerDiffuseMap[LAYER_DIFFUSEMAP_COUNT];\n#endif\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\nuniform sampler2D layerEmissiveMap[LAYER_EMISSIVEMAP_COUNT];\n#endif\n\nuniform float emissionIntensity: 1.0;\n\n#ifdef BUMPMAP_ENABLED\nuniform sampler2D bumpMap;\nuniform float bumpScale : 1.0;\n// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n//  http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\nvec3 perturbNormalArb(vec3 surfPos, vec3 surfNormal, vec3 baseNormal)\n{\n    vec2 dSTdx = dFdx(v_Texcoord);\n    vec2 dSTdy = dFdy(v_Texcoord);\n\n    float Hll = bumpScale * texture2D(bumpMap, v_Texcoord).x;\n    float dHx = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdx).x - Hll;\n    float dHy = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdy).x - Hll;\n\n    vec3 vSigmaX = dFdx(surfPos);\n    vec3 vSigmaY = dFdy(surfPos);\n    vec3 vN = surfNormal;\n\n    vec3 R1 = cross(vSigmaY, vN);\n    vec3 R2 = cross(vN, vSigmaX);\n\n    float fDet = dot(vSigmaX, R1);\n\n    vec3 vGrad = sign(fDet) * (dHx * R1 + dHy * R2);\n    return normalize(abs(fDet) * baseNormal - vGrad);\n\n}\n#endif\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import qtek.header.ambient_light\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import qtek.header.ambient_sh_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import qtek.header.directional_light\n#endif\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\n@import qtek.util.srgb\n\n@import ecgl.wireframe.common.fragmentHeader\n\n@import qtek.plugin.compute_shadow_map\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n    gl_FragColor = sRGBToLinear(color);\n#else\n    gl_FragColor = color;\n#endif\n\n#ifdef VERTEX_COLOR\n    // PENDING\n    #ifdef SRGB_DECODE\n    gl_FragColor *= sRGBToLinear(v_Color);\n    #else\n    gl_FragColor *= v_Color;\n    #endif\n#endif\n\n    vec4 albedoTexel = vec4(1.0);\n#ifdef DIFFUSEMAP_ENABLED\n    albedoTexel = texture2D(diffuseMap, v_Texcoord);\n    #ifdef SRGB_DECODE\n    albedoTexel = sRGBToLinear(albedoTexel);\n    #endif\n#endif\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\n    for (int _idx_ = 0; _idx_ < LAYER_DIFFUSEMAP_COUNT; _idx_++) {{\n        vec4 texel2 = texture2D(layerDiffuseMap[_idx_], v_Texcoord);\n        #ifdef SRGB_DECODE\n        texel2 = sRGBToLinear(texel2);\n        #endif\n        // source-over blend\n        albedoTexel.rgb = mix(albedoTexel.rgb, texel2.rgb, texel2.a);\n        albedoTexel.a = texel2.a + (1.0 - texel2.a) * albedoTexel.a;\n    }}\n#endif\n    gl_FragColor *= albedoTexel;\n\n    vec3 N = v_Normal;\n#ifdef DOUBLE_SIDE\n    vec3 eyePos = viewInverse[3].xyz;\n    vec3 V = normalize(eyePos - v_WorldPosition);\n\n    if (dot(N, V) < 0.0) {\n        N = -N;\n    }\n#endif\n\n    float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n    N = perturbNormalArb(v_WorldPosition, v_Normal, N);\n    // PENDING\n    ambientFactor = dot(v_Normal, N);\n#endif\n\n    vec3 diffuseColor = vec3(0.0, 0.0, 0.0);\n\n#ifdef AMBIENT_LIGHT_COUNT\n    for(int i = 0; i < AMBIENT_LIGHT_COUNT; i++)\n    {\n        // Multiply a dot factor to make sure the bump detail can be seen\n        // in the dark side\n        diffuseColor += ambientLightColor[i] * ambientFactor;\n    }\n#endif\n#ifdef AMBIENT_SH_LIGHT_COUNT\n    for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n    {{\n        diffuseColor += calcAmbientSHLight(_idx_, N) * ambientSHLightColor[_idx_];\n    }}\n#endif\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n    float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n    if(shadowEnabled)\n    {\n        computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n    }\n#endif\n    for(int i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)\n    {\n        vec3 lightDirection = -directionalLightDirection[i];\n        vec3 lightColor = directionalLightColor[i];\n\n        float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n        if (shadowEnabled)\n        {\n            shadowContrib = shadowContribsDir[i];\n        }\n#endif\n\n        float ndl = dot(N, normalize(lightDirection)) * shadowContrib;\n\n        diffuseColor += lightColor * clamp(ndl, 0.0, 1.0);\n    }\n#endif\n\n    gl_FragColor.rgb *= diffuseColor;\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\n    for (int _idx_ = 0; _idx_ < LAYER_EMISSIVEMAP_COUNT; _idx_++) {{\n        vec4 texel2 = texture2D(layerEmissiveMap[_idx_], v_Texcoord) * emissionIntensity;\n        gl_FragColor.rgb += texel2.rgb;\n    }}\n#endif\n\n    @import ecgl.wireframe.common.fragmentMain\n}\n\n@end"

/***/ },
/* 80 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.realistic.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 worldInverseTranspose : WORLDINVERSETRANSPOSE;\nuniform mat4 world : WORLD;\n\nuniform vec2 uvRepeat : [1.0, 1.0];\nuniform vec2 uvOffset : [0.0, 0.0];\n\nattribute vec3 position : POSITION;\nattribute vec2 texcoord : TEXCOORD_0;\nattribute vec3 normal : NORMAL;\n\n@import ecgl.wireframe.common.vertexHeader\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nvarying vec2 v_Texcoord;\n\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\nvoid main()\n{\n    v_Texcoord = texcoord * uvRepeat + uvOffset;\n\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n\n    v_Normal = normalize((worldInverseTranspose * vec4(normal, 0.0)).xyz);\n    v_WorldPosition = (world * vec4(position, 1.0)).xyz;\n\n#ifdef VERTEX_COLOR\n    v_Color = a_Color;\n#endif\n\n    @import ecgl.wireframe.common.vertexMain\n\n}\n\n@end\n\n\n@export ecgl.realistic.fragment\n\n#define LAYER_DIFFUSEMAP_COUNT 0\n#define LAYER_EMISSIVEMAP_COUNT 0\n#define PI 3.14159265358979\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\n\nvarying vec2 v_Texcoord;\nvarying vec3 v_Normal;\nvarying vec3 v_WorldPosition;\n\n#ifdef DIFFUSEMAP_ENABLED\nuniform sampler2D diffuseMap;\n#endif\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\nuniform sampler2D layerDiffuseMap[LAYER_DIFFUSEMAP_COUNT];\n#endif\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\nuniform sampler2D layerEmissiveMap[LAYER_EMISSIVEMAP_COUNT];\n#endif\n\nuniform float emissionIntensity: 1.0;\n\n#ifdef BUMPMAP_ENABLED\nuniform sampler2D bumpMap;\nuniform float bumpScale : 1.0;\n// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n//  http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\nvec3 perturbNormalArb(vec3 surfPos, vec3 surfNormal, vec3 baseNormal)\n{\n    vec2 dSTdx = dFdx(v_Texcoord);\n    vec2 dSTdy = dFdy(v_Texcoord);\n\n    float Hll = bumpScale * texture2D(bumpMap, v_Texcoord).x;\n    float dHx = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdx).x - Hll;\n    float dHy = bumpScale * texture2D(bumpMap, v_Texcoord + dSTdy).x - Hll;\n\n    vec3 vSigmaX = dFdx(surfPos);\n    vec3 vSigmaY = dFdy(surfPos);\n    vec3 vN = surfNormal;\n\n    vec3 R1 = cross(vSigmaY, vN);\n    vec3 R2 = cross(vN, vSigmaX);\n\n    float fDet = dot(vSigmaX, R1);\n\n    vec3 vGrad = sign(fDet) * (dHx * R1 + dHy * R2);\n    return normalize(abs(fDet) * baseNormal - vGrad);\n\n}\n#endif\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nuniform float metalness : 0.0;\nuniform float roughness : 0.5;\n\nuniform mat4 viewInverse : VIEWINVERSE;\n\n#ifdef AMBIENT_LIGHT_COUNT\n@import qtek.header.ambient_light\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n@import qtek.header.ambient_sh_light\n#endif\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n@import qtek.header.ambient_cubemap_light\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n@import qtek.header.directional_light\n#endif\n\n@import qtek.util.srgb\n\n@import qtek.util.rgbm\n\n@import ecgl.wireframe.common.fragmentHeader\n\n@import qtek.plugin.compute_shadow_map\n\n// Fresnel\nvec3 F_Schlick(float ndv, vec3 spec) {\n    return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n\nfloat D_Phong(float g, float ndh) {\n    // from black ops 2\n    float a = pow(8192.0, g);\n    return (a + 2.0) / 8.0 * pow(ndh, a);\n}\nvoid main()\n{\n    vec4 albedoColor = color;\n\n    vec3 eyePos = viewInverse[3].xyz;\n    vec3 V = normalize(eyePos - v_WorldPosition);\n#ifdef VERTEX_COLOR\n    // PENDING\n    #ifdef SRGB_DECODE\n    albedoColor *= sRGBToLinear(v_Color);\n    #else\n    albedoColor *= v_Color;\n    #endif\n#endif\n\n    vec4 albedoTexel = vec4(1.0);\n#ifdef DIFFUSEMAP_ENABLED\n    albedoTexel = texture2D(diffuseMap, v_Texcoord);\n    #ifdef SRGB_DECODE\n    albedoTexel = sRGBToLinear(albedoTexel);\n    #endif\n#endif\n\n#if (LAYER_DIFFUSEMAP_COUNT > 0)\n    for (int _idx_ = 0; _idx_ < LAYER_DIFFUSEMAP_COUNT; _idx_++) {{\n        vec4 texel2 = texture2D(layerDiffuseMap[_idx_], v_Texcoord);\n        #ifdef SRGB_DECODE\n        texel2 = sRGBToLinear(texel2);\n        #endif\n        // source-over blend\n        albedoTexel.rgb = mix(albedoTexel.rgb, texel2.rgb, texel2.a);\n        albedoTexel.a = texel2.a + (1.0 - texel2.a) * albedoTexel.a;\n    }}\n#endif\n    albedoColor *= albedoTexel;\n\n    vec3 baseColor = albedoColor.rgb;\n    albedoColor.rgb = baseColor * (1.0 - metalness);\n    vec3 specFactor = mix(vec3(0.04), baseColor, metalness);\n\n    float g = 1.0 - roughness;\n\n    vec3 N = v_Normal;\n\n#ifdef DOUBLE_SIDE\n    if (dot(N, V) < 0.0) {\n        N = -N;\n    }\n#endif\n\n    float ambientFactor = 1.0;\n\n#ifdef BUMPMAP_ENABLED\n    N = perturbNormalArb(v_WorldPosition, v_Normal, N);\n    // PENDING\n    ambientFactor = dot(v_Normal, N);\n#endif\n\n    vec3 diffuseTerm = vec3(0.0);\n    vec3 specularTerm = vec3(0.0);\n\n    float ndv = clamp(dot(N, V), 0.0, 1.0);\n    vec3 fresnelTerm = F_Schlick(ndv, specFactor);\n\n#ifdef AMBIENT_LIGHT_COUNT\n    for(int _idx_ = 0; _idx_ < AMBIENT_LIGHT_COUNT; _idx_++)\n    {{\n        // Multiply a dot factor to make sure the bump detail can be seen\n        // in the dark side\n        diffuseTerm += ambientLightColor[_idx_] * ambientFactor;\n    }}\n#endif\n\n#ifdef AMBIENT_SH_LIGHT_COUNT\n    for(int _idx_ = 0; _idx_ < AMBIENT_SH_LIGHT_COUNT; _idx_++)\n    {{\n        diffuseTerm += calcAmbientSHLight(_idx_, N) * ambientSHLightColor[_idx_];\n    }}\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_COUNT\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n    float shadowContribsDir[DIRECTIONAL_LIGHT_COUNT];\n    if(shadowEnabled)\n    {\n        computeShadowOfDirectionalLights(v_WorldPosition, shadowContribsDir);\n    }\n#endif\n    for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++)\n    {{\n        vec3 L = -directionalLightDirection[_idx_];\n        vec3 lc = directionalLightColor[_idx_];\n\n        vec3 H = normalize(L + V);\n        float ndl = clamp(dot(N, normalize(L)), 0.0, 1.0);\n        float ndh = clamp(dot(N, H), 0.0, 1.0);\n\n        float shadowContrib = 1.0;\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n        if (shadowEnabled)\n        {\n            shadowContrib = shadowContribsDir[_idx_];\n        }\n#endif\n\n        vec3 li = lc * ndl * shadowContrib;\n\n        diffuseTerm += li;\n        specularTerm += li * fresnelTerm * D_Phong(g, ndh);\n    }}\n#endif\n\n\n#ifdef AMBIENT_CUBEMAP_LIGHT_COUNT\n    vec3 L = reflect(-V, N);\n    float rough2 = clamp(1.0 - g, 0.0, 1.0);\n    // FIXME fixed maxMipmapLevel ?\n    float bias2 = rough2 * 5.0;\n    // One brdf lookup is enough\n    vec2 brdfParam2 = texture2D(ambientCubemapLightBRDFLookup[0], vec2(rough2, ndv)).xy;\n    vec3 envWeight2 = specFactor * brdfParam2.x + brdfParam2.y;\n    vec3 envTexel2;\n    for(int _idx_ = 0; _idx_ < AMBIENT_CUBEMAP_LIGHT_COUNT; _idx_++)\n    {{\n        envTexel2 = RGBMDecode(textureCubeLodEXT(ambientCubemapLightCubemap[_idx_], L, bias2), 51.5);\n        // TODO mix ?\n        specularTerm += ambientCubemapLightColor[_idx_] * envTexel2 * envWeight2;\n    }}\n#endif\n\n    gl_FragColor.rgb = albedoColor.rgb * diffuseTerm + specularTerm;\n    gl_FragColor.a = albedoColor.a;\n\n    #ifdef SRGB_ENCODE\n    gl_FragColor = linearTosRGB(gl_FragColor);\n    #endif\n\n#if (LAYER_EMISSIVEMAP_COUNT > 0)\n    for (int _idx_ = 0; _idx_ < LAYER_EMISSIVEMAP_COUNT; _idx_++)\n    {{\n        // PENDING sRGB ?\n        vec4 texel2 = texture2D(layerEmissiveMap[_idx_], v_Texcoord) * emissionIntensity;\n        gl_FragColor.rgb += texel2.rgb;\n    }}\n#endif\n\n    @import ecgl.wireframe.common.fragmentMain\n}\n\n@end"

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Light = __webpack_require__(38);

	    /**
	     * @constructor qtek.light.Ambient
	     * @extends qtek.Light
	     */
	    var AmbientLight = Light.extend({

	        castShadow: false

	    }, {

	        type: 'AMBIENT_LIGHT',

	        uniformTemplates: {
	            ambientLightColor: {
	                type: '3f',
	                value: function(instance) {
	                    var color = instance.color;
	                    var intensity = instance.intensity;
	                    return [color[0]*intensity, color[1]*intensity, color[2]*intensity];
	                }
	            }
	        }
	        /**
	         * @method
	         * @name clone
	         * @return {qtek.light.Ambient}
	         * @memberOf qtek.light.Ambient.prototype
	         */
	    });

	    module.exports = AmbientLight;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Light = __webpack_require__(38);
	    var Vector3 = __webpack_require__(14);

	    /**
	     * @constructor qtek.light.Directional
	     * @extends qtek.Light
	     *
	     * @example
	     *     var light = new qtek.light.Directional({
	     *         intensity: 0.5,
	     *         color: [1.0, 0.0, 0.0]
	     *     });
	     *     light.position.set(10, 10, 10);
	     *     light.lookAt(qtek.math.Vector3.ZERO);
	     *     scene.add(light);
	     */
	    var DirectionalLight = Light.extend(
	    /** @lends qtek.light.Directional# */
	    {
	        /**
	         * @type {number}
	         */
	        shadowBias: 0.001,
	        /**
	         * @type {number}
	         */
	        shadowSlopeScale: 2.0,
	        /**
	         * Shadow cascade.
	         * Use PSSM technique when it is larger than 1 and have a unique directional light in scene.
	         * @type {number}
	         */
	        shadowCascade: 1,

	        /**
	         * Available when shadowCascade is larger than 1 and have a unique directional light in scene.
	         * @type {number}
	         */
	        cascadeSplitLogFactor: 0.2
	    }, {

	        type: 'DIRECTIONAL_LIGHT',

	        uniformTemplates: {
	            directionalLightDirection: {
	                type: '3f',
	                value: function (instance) {
	                    instance.__dir = instance.__dir || new Vector3();
	                    // Direction is target to eye
	                    return instance.__dir.copy(instance.worldTransform.z).negate()._array;
	                }
	            },
	            directionalLightColor: {
	                type: '3f',
	                value: function (instance) {
	                    var color = instance.color;
	                    var intensity = instance.intensity;
	                    return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
	                }
	            }
	        },
	        /**
	         * @return {qtek.light.Directional}
	         * @memberOf qtek.light.Directional.prototype
	         */
	        clone: function () {
	            var light = Light.prototype.clone.call(this);
	            light.shadowBias = this.shadowBias;
	            light.shadowSlopeScale = this.shadowSlopeScale;
	            return light;
	        }
	    });

	    module.exports = DirectionalLight;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Light = __webpack_require__(38);

	    /**
	     * @constructor qtek.light.Point
	     * @extends qtek.Light
	     */
	    var PointLight = Light.extend(
	    /** @lends qtek.light.Point# */
	    {
	        /**
	         * @type {number}
	         */
	        range: 100,

	        /**
	         * @type {number}
	         */
	        castShadow: false
	    }, {

	        type: 'POINT_LIGHT',

	        uniformTemplates: {
	            pointLightPosition: {
	                type: '3f',
	                value: function(instance) {
	                    return instance.getWorldPosition()._array;
	                }
	            },
	            pointLightRange: {
	                type: '1f',
	                value: function(instance) {
	                    return instance.range;
	                }
	            },
	            pointLightColor: {
	                type: '3f',
	                value: function(instance) {
	                    var color = instance.color,
	                        intensity = instance.intensity;
	                    return [ color[0]*intensity, color[1]*intensity, color[2]*intensity ];
	                }
	            }
	        },
	        /**
	         * @return {qtek.light.Point}
	         * @memberOf qtek.light.Point.prototype
	         */
	        clone: function() {
	            var light = Light.prototype.clone.call(this);
	            light.range = this.range;
	            return light;
	        }
	    });

	    module.exports = PointLight;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Light = __webpack_require__(38);
	    var Vector3 = __webpack_require__(14);

	    /**
	     * @constructor qtek.light.Spot
	     * @extends qtek.Light
	     */
	    var SpotLight = Light.extend(
	    /**@lends qtek.light.Spot */
	    {
	        /**
	         * @type {number}
	         */
	        range: 20,
	        /**
	         * @type {number}
	         */
	        umbraAngle: 30,
	        /**
	         * @type {number}
	         */
	        penumbraAngle: 45,
	        /**
	         * @type {number}
	         */
	        falloffFactor: 2.0,
	        /**
	         * @type {number}
	         */
	        shadowBias: 0.0002,
	        /**
	         * @type {number}
	         */
	        shadowSlopeScale: 2.0
	    },{

	        type: 'SPOT_LIGHT',

	        uniformTemplates: {
	            spotLightPosition: {
	                type: '3f',
	                value: function (instance) {
	                    return instance.getWorldPosition()._array;
	                }
	            },
	            spotLightRange: {
	                type: '1f',
	                value: function (instance) {
	                    return instance.range;
	                }
	            },
	            spotLightUmbraAngleCosine: {
	                type: '1f',
	                value: function (instance) {
	                    return Math.cos(instance.umbraAngle * Math.PI / 180);
	                }
	            },
	            spotLightPenumbraAngleCosine: {
	                type: '1f',
	                value: function (instance) {
	                    return Math.cos(instance.penumbraAngle * Math.PI / 180);
	                }
	            },
	            spotLightFalloffFactor: {
	                type: '1f',
	                value: function (instance) {
	                    return instance.falloffFactor;
	                }
	            },
	            spotLightDirection: {
	                type: '3f',
	                value: function (instance) {
	                    instance.__dir = instance.__dir || new Vector3();
	                    // Direction is target to eye
	                    return instance.__dir.copy(instance.worldTransform.z).negate()._array;
	                }
	            },
	            spotLightColor: {
	                type: '3f',
	                value: function (instance) {
	                    var color = instance.color;
	                    var intensity = instance.intensity;
	                    return [color[0] * intensity, color[1] * intensity, color[2] * intensity];
	                }
	            }
	        },
	        /**
	         * @return {qtek.light.Spot}
	         * @memberOf qtek.light.Spot.prototype
	         */
	        clone: function () {
	            var light = Light.prototype.clone.call(this);
	            light.range = this.range;
	            light.umbraAngle = this.umbraAngle;
	            light.penumbraAngle = this.penumbraAngle;
	            light.falloffFactor = this.falloffFactor;
	            light.shadowBias = this.shadowBias;
	            light.shadowSlopeScale = this.shadowSlopeScale;
	            return light;
	        }
	    });

	    module.exports = SpotLight;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var vec4 = glMatrix.vec4;

	    /**
	     * @constructor
	     * @alias qtek.math.Vector4
	     * @param {number} x
	     * @param {number} y
	     * @param {number} z
	     * @param {number} w
	     */
	    var Vector4 = function(x, y, z, w) {

	        x = x || 0;
	        y = y || 0;
	        z = z || 0;
	        w = w || 0;

	        /**
	         * Storage of Vector4, read and write of x, y, z, w will change the values in _array
	         * All methods also operate on the _array instead of x, y, z, w components
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = vec4.fromValues(x, y, z, w);

	        /**
	         * Dirty flag is used by the Node to determine
	         * if the matrix is updated to latest
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Vector4.prototype = {

	        constructor: Vector4,

	        /**
	         * Add b to self
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        add: function(b) {
	            vec4.add(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x, y and z components
	         * @param  {number}  x
	         * @param  {number}  y
	         * @param  {number}  z
	         * @param  {number}  w
	         * @return {qtek.math.Vector4}
	         */
	        set: function(x, y, z, w) {
	            this._array[0] = x;
	            this._array[1] = y;
	            this._array[2] = z;
	            this._array[3] = w;
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set x, y, z and w components from array
	         * @param  {Float32Array|number[]} arr
	         * @return {qtek.math.Vector4}
	         */
	        setArray: function(arr) {
	            this._array[0] = arr[0];
	            this._array[1] = arr[1];
	            this._array[2] = arr[2];
	            this._array[3] = arr[3];

	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new Vector4
	         * @return {qtek.math.Vector4}
	         */
	        clone: function() {
	            return new Vector4(this.x, this.y, this.z, this.w);
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        copy: function(b) {
	            vec4.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for distance
	         * @param  {qtek.math.Vector4} b
	         * @return {number}
	         */
	        dist: function(b) {
	            return vec4.dist(this._array, b._array);
	        },

	        /**
	         * Distance between self and b
	         * @param  {qtek.math.Vector4} b
	         * @return {number}
	         */
	        distance: function(b) {
	            return vec4.distance(this._array, b._array);
	        },

	        /**
	         * Alias for divide
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        div: function(b) {
	            vec4.div(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Divide self by b
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        divide: function(b) {
	            vec4.divide(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Dot product of self and b
	         * @param  {qtek.math.Vector4} b
	         * @return {number}
	         */
	        dot: function(b) {
	            return vec4.dot(this._array, b._array);
	        },

	        /**
	         * Alias of length
	         * @return {number}
	         */
	        len: function() {
	            return vec4.len(this._array);
	        },

	        /**
	         * Calculate the length
	         * @return {number}
	         */
	        length: function() {
	            return vec4.length(this._array);
	        },
	        /**
	         * Linear interpolation between a and b
	         * @param  {qtek.math.Vector4} a
	         * @param  {qtek.math.Vector4} b
	         * @param  {number}  t
	         * @return {qtek.math.Vector4}
	         */
	        lerp: function(a, b, t) {
	            vec4.lerp(this._array, a._array, b._array, t);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Minimum of self and b
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        min: function(b) {
	            vec4.min(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Maximum of self and b
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        max: function(b) {
	            vec4.max(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiply
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        mul: function(b) {
	            vec4.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Mutiply self and b
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        multiply: function(b) {
	            vec4.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Negate self
	         * @return {qtek.math.Vector4}
	         */
	        negate: function() {
	            vec4.negate(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Normalize self
	         * @return {qtek.math.Vector4}
	         */
	        normalize: function() {
	            vec4.normalize(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Generate random x, y, z, w components with a given scale
	         * @param  {number} scale
	         * @return {qtek.math.Vector4}
	         */
	        random: function(scale) {
	            vec4.random(this._array, scale);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self
	         * @param  {number}  scale
	         * @return {qtek.math.Vector4}
	         */
	        scale: function(s) {
	            vec4.scale(this._array, this._array, s);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Scale b and add to self
	         * @param  {qtek.math.Vector4} b
	         * @param  {number}  scale
	         * @return {qtek.math.Vector4}
	         */
	        scaleAndAdd: function(b, s) {
	            vec4.scaleAndAdd(this._array, this._array, b._array, s);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for squaredDistance
	         * @param  {qtek.math.Vector4} b
	         * @return {number}
	         */
	        sqrDist: function(b) {
	            return vec4.sqrDist(this._array, b._array);
	        },

	        /**
	         * Squared distance between self and b
	         * @param  {qtek.math.Vector4} b
	         * @return {number}
	         */
	        squaredDistance: function(b) {
	            return vec4.squaredDistance(this._array, b._array);
	        },

	        /**
	         * Alias for squaredLength
	         * @return {number}
	         */
	        sqrLen: function() {
	            return vec4.sqrLen(this._array);
	        },

	        /**
	         * Squared length of self
	         * @return {number}
	         */
	        squaredLength: function() {
	            return vec4.squaredLength(this._array);
	        },

	        /**
	         * Alias for subtract
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        sub: function(b) {
	            vec4.sub(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Subtract b from self
	         * @param  {qtek.math.Vector4} b
	         * @return {qtek.math.Vector4}
	         */
	        subtract: function(b) {
	            vec4.subtract(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Matrix4 m
	         * @param  {qtek.math.Matrix4} m
	         * @return {qtek.math.Vector4}
	         */
	        transformMat4: function(m) {
	            vec4.transformMat4(this._array, this._array, m._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transform self with a Quaternion q
	         * @param  {qtek.math.Quaternion} q
	         * @return {qtek.math.Vector4}
	         */
	        transformQuat: function(q) {
	            vec4.transformQuat(this._array, this._array, q._array);
	            this._dirty = true;
	            return this;
	        },

	        toString: function() {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    var defineProperty = Object.defineProperty;
	    // Getter and Setter
	    if (defineProperty) {

	        var proto = Vector4.prototype;
	        /**
	         * @name x
	         * @type {number}
	         * @memberOf qtek.math.Vector4
	         * @instance
	         */
	        defineProperty(proto, 'x', {
	            get: function () {
	                return this._array[0];
	            },
	            set: function (value) {
	                this._array[0] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name y
	         * @type {number}
	         * @memberOf qtek.math.Vector4
	         * @instance
	         */
	        defineProperty(proto, 'y', {
	            get: function () {
	                return this._array[1];
	            },
	            set: function (value) {
	                this._array[1] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name z
	         * @type {number}
	         * @memberOf qtek.math.Vector4
	         * @instance
	         */
	        defineProperty(proto, 'z', {
	            get: function () {
	                return this._array[2];
	            },
	            set: function (value) {
	                this._array[2] = value;
	                this._dirty = true;
	            }
	        });

	        /**
	         * @name w
	         * @type {number}
	         * @memberOf qtek.math.Vector4
	         * @instance
	         */
	        defineProperty(proto, 'w', {
	            get: function () {
	                return this._array[3];
	            },
	            set: function (value) {
	                this._array[3] = value;
	                this._dirty = true;
	            }
	        });
	    }

	    // Supply methods that are not in place

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.add = function(out, a, b) {
	        vec4.add(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {number}  x
	     * @param  {number}  y
	     * @param  {number}  z
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.set = function(out, x, y, z, w) {
	        vec4.set(out._array, x, y, z, w);
	        out._dirty = true;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.copy = function(out, b) {
	        vec4.copy(out._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {number}
	     */
	    Vector4.dist = function(a, b) {
	        return vec4.distance(a._array, b._array);
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {number}
	     */
	    Vector4.distance = Vector4.dist;

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.div = function(out, a, b) {
	        vec4.divide(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.divide = Vector4.div;

	    /**
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {number}
	     */
	    Vector4.dot = function(a, b) {
	        return vec4.dot(a._array, b._array);
	    };

	    /**
	     * @param  {qtek.math.Vector4} a
	     * @return {number}
	     */
	    Vector4.len = function(b) {
	        return vec4.length(b._array);
	    };

	    // Vector4.length = Vector4.len;

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @param  {number}  t
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.lerp = function(out, a, b, t) {
	        vec4.lerp(out._array, a._array, b._array, t);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.min = function(out, a, b) {
	        vec4.min(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.max = function(out, a, b) {
	        vec4.max(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.mul = function(out, a, b) {
	        vec4.multiply(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.multiply = Vector4.mul;

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.negate = function(out, a) {
	        vec4.negate(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.normalize = function(out, a) {
	        vec4.normalize(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {number}  scale
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.random = function(out, scale) {
	        vec4.random(out._array, scale);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {number}  scale
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.scale = function(out, a, scale) {
	        vec4.scale(out._array, a._array, scale);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @param  {number}  scale
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.scaleAndAdd = function(out, a, b, scale) {
	        vec4.scaleAndAdd(out._array, a._array, b._array, scale);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {number}
	     */
	    Vector4.sqrDist = function(a, b) {
	        return vec4.sqrDist(a._array, b._array);
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {number}
	     */
	    Vector4.squaredDistance = Vector4.sqrDist;

	    /**
	     * @param  {qtek.math.Vector4} a
	     * @return {number}
	     */
	    Vector4.sqrLen = function(a) {
	        return vec4.sqrLen(a._array);
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector4} a
	     * @return {number}
	     */
	    Vector4.squaredLength = Vector4.sqrLen;

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.sub = function(out, a, b) {
	        vec4.subtract(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @method
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Vector4} b
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.subtract = Vector4.sub;

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Matrix4} m
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.transformMat4 = function(out, a, m) {
	        vec4.transformMat4(out._array, a._array, m._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Vector4} out
	     * @param  {qtek.math.Vector4} a
	     * @param  {qtek.math.Quaternion} q
	     * @return {qtek.math.Vector4}
	     */
	    Vector4.transformQuat = function(out, a, q) {
	        vec4.transformQuat(out._array, a._array, q._array);
	        out._dirty = true;
	        return out;
	    };

	    module.exports = Vector4;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var mat2 = glMatrix.mat2;

	    /**
	     * @constructor
	     * @alias qtek.math.Matrix2
	     */
	    var Matrix2 = function() {

	        /**
	         * Storage of Matrix2
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = mat2.create();

	        /**
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Matrix2.prototype = {

	        constructor: Matrix2,

	        /**
	         * Set components from array
	         * @param  {Float32Array|number[]} arr
	         */
	        setArray: function (arr) {
	            for (var i = 0; i < this._array.length; i++) {
	                this._array[i] = arr[i];
	            }
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Clone a new Matrix2
	         * @return {qtek.math.Matrix2}
	         */
	        clone: function() {
	            return (new Matrix2()).copy(this);
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Matrix2} b
	         * @return {qtek.math.Matrix2}
	         */
	        copy: function(b) {
	            mat2.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculate the adjugate of self, in-place
	         * @return {qtek.math.Matrix2}
	         */
	        adjoint: function() {
	            mat2.adjoint(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculate matrix determinant
	         * @return {number}
	         */
	        determinant: function() {
	            return mat2.determinant(this._array);
	        },

	        /**
	         * Set to a identity matrix
	         * @return {qtek.math.Matrix2}
	         */
	        identity: function() {
	            mat2.identity(this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Invert self
	         * @return {qtek.math.Matrix2}
	         */
	        invert: function() {
	            mat2.invert(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for mutiply
	         * @param  {qtek.math.Matrix2} b
	         * @return {qtek.math.Matrix2}
	         */
	        mul: function(b) {
	            mat2.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiplyLeft
	         * @param  {qtek.math.Matrix2} a
	         * @return {qtek.math.Matrix2}
	         */
	        mulLeft: function(a) {
	            mat2.mul(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply self and b
	         * @param  {qtek.math.Matrix2} b
	         * @return {qtek.math.Matrix2}
	         */
	        multiply: function(b) {
	            mat2.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply a and self, a is on the left
	         * @param  {qtek.math.Matrix2} a
	         * @return {qtek.math.Matrix2}
	         */
	        multiplyLeft: function(a) {
	            mat2.multiply(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian
	         * @param  {number}   rad
	         * @return {qtek.math.Matrix2}
	         */
	        rotate: function(rad) {
	            mat2.rotate(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self by s
	         * @param  {qtek.math.Vector2}  s
	         * @return {qtek.math.Matrix2}
	         */
	        scale: function(v) {
	            mat2.scale(this._array, this._array, v._array);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Transpose self, in-place.
	         * @return {qtek.math.Matrix2}
	         */
	        transpose: function() {
	            mat2.transpose(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        toString: function() {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    /**
	     * @param  {Matrix2} out
	     * @param  {Matrix2} a
	     * @return {Matrix2}
	     */
	    Matrix2.adjoint = function(out, a) {
	        mat2.adjoint(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2} out
	     * @param  {qtek.math.Matrix2} a
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.copy = function(out, a) {
	        mat2.copy(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2} a
	     * @return {number}
	     */
	    Matrix2.determinant = function(a) {
	        return mat2.determinant(a._array);
	    };

	    /**
	     * @param  {qtek.math.Matrix2} out
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.identity = function(out) {
	        mat2.identity(out._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2} out
	     * @param  {qtek.math.Matrix2} a
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.invert = function(out, a) {
	        mat2.invert(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2} out
	     * @param  {qtek.math.Matrix2} a
	     * @param  {qtek.math.Matrix2} b
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.mul = function(out, a, b) {
	        mat2.mul(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Matrix2} out
	     * @param  {qtek.math.Matrix2} a
	     * @param  {qtek.math.Matrix2} b
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.multiply = Matrix2.mul;

	    /**
	     * @param  {qtek.math.Matrix2} out
	     * @param  {qtek.math.Matrix2} a
	     * @param  {number}   rad
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.rotate = function(out, a, rad) {
	        mat2.rotate(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2} out
	     * @param  {qtek.math.Matrix2} a
	     * @param  {qtek.math.Vector2}  v
	     * @return {qtek.math.Matrix2}
	     */
	    Matrix2.scale = function(out, a, v) {
	        mat2.scale(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };
	    /**
	     * @param  {Matrix2} out
	     * @param  {Matrix2} a
	     * @return {Matrix2}
	     */
	    Matrix2.transpose = function(out, a) {
	        mat2.transpose(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    module.exports = Matrix2;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var mat2d = glMatrix.mat2d;

	    /**
	     * @constructor
	     * @alias qtek.math.Matrix2d
	     */
	    var Matrix2d = function() {
	        /**
	         * Storage of Matrix2d
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = mat2d.create();

	        /**
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Matrix2d.prototype = {

	        constructor: Matrix2d,

	        /**
	         * Set components from array
	         * @param  {Float32Array|number[]} arr
	         */
	        setArray: function (arr) {
	            for (var i = 0; i < this._array.length; i++) {
	                this._array[i] = arr[i];
	            }
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Clone a new Matrix2d
	         * @return {qtek.math.Matrix2d}
	         */
	        clone: function() {
	            return (new Matrix2d()).copy(this);
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Matrix2d} b
	         * @return {qtek.math.Matrix2d}
	         */
	        copy: function(b) {
	            mat2d.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculate matrix determinant
	         * @return {number}
	         */
	        determinant: function() {
	            return mat2d.determinant(this._array);
	        },

	        /**
	         * Set to a identity matrix
	         * @return {qtek.math.Matrix2d}
	         */
	        identity: function() {
	            mat2d.identity(this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Invert self
	         * @return {qtek.math.Matrix2d}
	         */
	        invert: function() {
	            mat2d.invert(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for mutiply
	         * @param  {qtek.math.Matrix2d} b
	         * @return {qtek.math.Matrix2d}
	         */
	        mul: function(b) {
	            mat2d.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiplyLeft
	         * @param  {qtek.math.Matrix2d} a
	         * @return {qtek.math.Matrix2d}
	         */
	        mulLeft: function(b) {
	            mat2d.mul(this._array, b._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply self and b
	         * @param  {qtek.math.Matrix2d} b
	         * @return {qtek.math.Matrix2d}
	         */
	        multiply: function(b) {
	            mat2d.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply a and self, a is on the left
	         * @param  {qtek.math.Matrix2d} a
	         * @return {qtek.math.Matrix2d}
	         */
	        multiplyLeft: function(b) {
	            mat2d.multiply(this._array, b._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian
	         * @param  {number}   rad
	         * @return {qtek.math.Matrix2d}
	         */
	        rotate: function(rad) {
	            mat2d.rotate(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self by s
	         * @param  {qtek.math.Vector2}  s
	         * @return {qtek.math.Matrix2d}
	         */
	        scale: function(s) {
	            mat2d.scale(this._array, this._array, s._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Translate self by v
	         * @param  {qtek.math.Vector2}  v
	         * @return {qtek.math.Matrix2d}
	         */
	        translate: function(v) {
	            mat2d.translate(this._array, this._array, v._array);
	            this._dirty = true;
	            return this;
	        },

	        toString: function() {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.copy = function(out, a) {
	        mat2d.copy(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} a
	     * @return {number}
	     */
	    Matrix2d.determinant = function(a) {
	        return mat2d.determinant(a._array);
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.identity = function(out) {
	        mat2d.identity(out._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.invert = function(out, a) {
	        mat2d.invert(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @param  {qtek.math.Matrix2d} b
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.mul = function(out, a, b) {
	        mat2d.mul(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @param  {qtek.math.Matrix2d} b
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.multiply = Matrix2d.mul;

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @param  {number}   rad
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.rotate = function(out, a, rad) {
	        mat2d.rotate(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @param  {qtek.math.Vector2}  v
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.scale = function(out, a, v) {
	        mat2d.scale(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix2d} out
	     * @param  {qtek.math.Matrix2d} a
	     * @param  {qtek.math.Vector2}  v
	     * @return {qtek.math.Matrix2d}
	     */
	    Matrix2d.translate = function(out, a, v) {
	        mat2d.translate(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    module.exports = Matrix2d;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var glMatrix = __webpack_require__(15);
	    var mat3 = glMatrix.mat3;

	    /**
	     * @constructor
	     * @alias qtek.math.Matrix3
	     */
	    var Matrix3 = function () {

	        /**
	         * Storage of Matrix3
	         * @name _array
	         * @type {Float32Array}
	         */
	        this._array = mat3.create();

	        /**
	         * @name _dirty
	         * @type {boolean}
	         */
	        this._dirty = true;
	    };

	    Matrix3.prototype = {

	        constructor: Matrix3,

	        /**
	         * Set components from array
	         * @param  {Float32Array|number[]} arr
	         */
	        setArray: function (arr) {
	            for (var i = 0; i < this._array.length; i++) {
	                this._array[i] = arr[i];
	            }
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Calculate the adjugate of self, in-place
	         * @return {qtek.math.Matrix3}
	         */
	        adjoint: function () {
	            mat3.adjoint(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Clone a new Matrix3
	         * @return {qtek.math.Matrix3}
	         */
	        clone: function () {
	            return (new Matrix3()).copy(this);
	        },

	        /**
	         * Copy from b
	         * @param  {qtek.math.Matrix3} b
	         * @return {qtek.math.Matrix3}
	         */
	        copy: function (b) {
	            mat3.copy(this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculate matrix determinant
	         * @return {number}
	         */
	        determinant: function () {
	            return mat3.determinant(this._array);
	        },

	        /**
	         * Copy the values from Matrix2d a
	         * @param  {qtek.math.Matrix2d} a
	         * @return {qtek.math.Matrix3}
	         */
	        fromMat2d: function (a) {
	            mat3.fromMat2d(this._array, a._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Copies the upper-left 3x3 values of Matrix4
	         * @param  {qtek.math.Matrix4} a
	         * @return {qtek.math.Matrix3}
	         */
	        fromMat4: function (a) {
	            mat3.fromMat4(this._array, a._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Calculates a rotation matrix from the given quaternion
	         * @param  {qtek.math.Quaternion} q
	         * @return {qtek.math.Matrix3}
	         */
	        fromQuat: function (q) {
	            mat3.fromQuat(this._array, q._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Set to a identity matrix
	         * @return {qtek.math.Matrix3}
	         */
	        identity: function () {
	            mat3.identity(this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Invert self
	         * @return {qtek.math.Matrix3}
	         */
	        invert: function () {
	            mat3.invert(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for mutiply
	         * @param  {qtek.math.Matrix3} b
	         * @return {qtek.math.Matrix3}
	         */
	        mul: function (b) {
	            mat3.mul(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Alias for multiplyLeft
	         * @param  {qtek.math.Matrix3} a
	         * @return {qtek.math.Matrix3}
	         */
	        mulLeft: function (a) {
	            mat3.mul(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply self and b
	         * @param  {qtek.math.Matrix3} b
	         * @return {qtek.math.Matrix3}
	         */
	        multiply: function (b) {
	            mat3.multiply(this._array, this._array, b._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Multiply a and self, a is on the left
	         * @param  {qtek.math.Matrix3} a
	         * @return {qtek.math.Matrix3}
	         */
	        multiplyLeft: function (a) {
	            mat3.multiply(this._array, a._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Rotate self by a given radian
	         * @param  {number}   rad
	         * @return {qtek.math.Matrix3}
	         */
	        rotate: function (rad) {
	            mat3.rotate(this._array, this._array, rad);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Scale self by s
	         * @param  {qtek.math.Vector2}  s
	         * @return {qtek.math.Matrix3}
	         */
	        scale: function (v) {
	            mat3.scale(this._array, this._array, v._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Translate self by v
	         * @param  {qtek.math.Vector2}  v
	         * @return {qtek.math.Matrix3}
	         */
	        translate: function (v) {
	            mat3.translate(this._array, this._array, v._array);
	            this._dirty = true;
	            return this;
	        },
	        /**
	         * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	         * @param {qtek.math.Matrix4} a
	         */
	        normalFromMat4: function (a) {
	            mat3.normalFromMat4(this._array, a._array);
	            this._dirty = true;
	            return this;
	        },

	        /**
	         * Transpose self, in-place.
	         * @return {qtek.math.Matrix2}
	         */
	        transpose: function () {
	            mat3.transpose(this._array, this._array);
	            this._dirty = true;
	            return this;
	        },

	        toString: function () {
	            return '[' + Array.prototype.join.call(this._array, ',') + ']';
	        },

	        toArray: function () {
	            return Array.prototype.slice.call(this._array);
	        }
	    };
	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.adjoint = function (out, a) {
	        mat3.adjoint(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.copy = function (out, a) {
	        mat3.copy(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} a
	     * @return {number}
	     */
	    Matrix3.determinant = function (a) {
	        return mat3.determinant(a._array);
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.identity = function (out) {
	        mat3.identity(out._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.invert = function (out, a) {
	        mat3.invert(out._array, a._array);
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @param  {qtek.math.Matrix3} b
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.mul = function (out, a, b) {
	        mat3.mul(out._array, a._array, b._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @method
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @param  {qtek.math.Matrix3} b
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.multiply = Matrix3.mul;

	    /**
	     * @param  {qtek.math.Matrix3}  out
	     * @param  {qtek.math.Matrix2d} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.fromMat2d = function (out, a) {
	        mat3.fromMat2d(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix4} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.fromMat4 = function (out, a) {
	        mat3.fromMat4(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3}    out
	     * @param  {qtek.math.Quaternion} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.fromQuat = function (out, q) {
	        mat3.fromQuat(out._array, q._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix4} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.normalFromMat4 = function (out, a) {
	        mat3.normalFromMat4(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @param  {number}  rad
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.rotate = function (out, a, rad) {
	        mat3.rotate(out._array, a._array, rad);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @param  {qtek.math.Vector2} v
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.scale = function (out, a, v) {
	        mat3.scale(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.transpose = function (out, a) {
	        mat3.transpose(out._array, a._array);
	        out._dirty = true;
	        return out;
	    };

	    /**
	     * @param  {qtek.math.Matrix3} out
	     * @param  {qtek.math.Matrix3} a
	     * @param  {qtek.math.Vector2} v
	     * @return {qtek.math.Matrix3}
	     */
	    Matrix3.translate = function (out, a, v) {
	        mat3.translate(out._array, a._array, v._array);
	        out._dirty = true;
	        return out;
	    };

	    module.exports = Matrix3;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(90);
	__webpack_require__(93);
	__webpack_require__(97);

	__webpack_require__(111);

	var echarts = __webpack_require__(2);
	echarts.registerAction({
	    type: 'grid3DChangeCamera',
	    event: 'grid3dcamerachanged',
	    update: 'series:updateCamera'
	}, function (payload, ecModel) {
	    ecModel.eachComponent({
	        mainType: 'grid3D', query: payload
	    }, function (componentModel) {
	        componentModel.setView(payload);
	    });
	});

	echarts.registerAction({
	    type: 'grid3DShowAxisPointer',
	    event: 'grid3dshowaxispointer',
	    update: 'grid3D:showAxisPointer'
	}, function (payload, ecModel) {
	});

	echarts.registerAction({
	    type: 'grid3DHideAxisPointer',
	    event: 'grid3dhideaxispointer',
	    update: 'grid3D:hideAxisPointer'
	}, function (payload, ecModel) {
	});

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var createAxis3DModel = __webpack_require__(91);

	var Axis3DModel = echarts.extendComponentModel({

	    type: 'cartesian3DAxis',

	    axis: null,

	    /**
	     * @override
	     */
	    getCoordSysModel: function () {
	        return this.ecModel.queryComponents({
	            mainType: 'grid3D',
	            index: this.option.gridIndex,
	            id: this.option.gridId
	        })[0];
	    }
	});

	echarts.helper.mixinAxisModelCommonMethods(Axis3DModel);

	function getAxisType(axisDim, option) {
	    // Default axis with data is category axis
	    return option.type || (option.data ? 'category' : 'value');
	}

	createAxis3DModel('x', Axis3DModel, getAxisType, {
	    name: 'X'
	});
	createAxis3DModel('y', Axis3DModel, getAxisType, {
	    name: 'Y'
	});
	createAxis3DModel('z', Axis3DModel, getAxisType, {
	    name: 'Z'
	});

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var axisDefault = __webpack_require__(92);

	var AXIS_TYPES = ['value', 'category', 'time', 'log'];
	/**
	 * Generate sub axis model class
	 * @param {string} dim 'x' 'y' 'radius' 'angle' 'parallel'
	 * @param {module:echarts/model/Component} BaseAxisModelClass
	 * @param {Function} axisTypeDefaulter
	 * @param {Object} [extraDefaultOption]
	 */
	module.exports = function (dim, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

	    echarts.util.each(AXIS_TYPES, function (axisType) {

	        BaseAxisModelClass.extend({

	            type: dim + 'Axis3D.' + axisType,

	            mergeDefaultAndTheme: function (option, ecModel) {

	                var themeModel = ecModel.getTheme();
	                echarts.util.merge(option, themeModel.get(axisType + 'Axis'));
	                echarts.util.merge(option, this.getDefaultOption());

	                option.type = axisTypeDefaulter(dim, option);
	            },

	            defaultOption: echarts.util.merge(
	                echarts.util.clone(axisDefault[axisType + 'Axis']),
	                extraDefaultOption || {},
	                true
	            )
	        });
	    });

	    // TODO
	    BaseAxisModelClass.superClass.registerSubTypeDefaulter(
	        dim + 'Axis3D',
	        echarts.util.curry(axisTypeDefaulter, dim)
	    );
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	var defaultOption = {
	    show: true,

	    grid3DIndex: 0,
	    // 反向坐标轴
	    inverse: false,

	    // 坐标轴名字
	    name: '',
	    // 坐标轴名字位置
	    nameLocation: 'middle',

	    nameTextStyle: {
	        fontSize: 16
	    },
	    // 文字与轴线距离
	    nameGap: 20,

	    axisPointer: {},

	    axisLine: {},
	    // 坐标轴小标记
	    axisTick: {},
	    axisLabel: {},
	    // 分隔区域
	    splitArea: {}
	};

	var categoryAxis = echarts.util.merge({
	    // 类目起始和结束两端空白策略
	    boundaryGap: true,
	    // splitArea: {
	        // show: false
	    // },
	    // 坐标轴小标记
	    axisTick: {
	        // If tick is align with label when boundaryGap is true
	        // Default with axisTick
	        alignWithLabel: false,
	        interval: 'auto'
	    },
	    // 坐标轴文本标签，详见axis.axisLabel
	    axisLabel: {
	        interval: 'auto'
	    },
	    axisPointer: {
	        label: {
	            show: false
	        }
	    }
	}, defaultOption);

	var valueAxis = echarts.util.merge({
	    // 数值起始和结束两端空白策略
	    boundaryGap: [0, 0],
	    // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	    // min: null,
	    // 最大值，设置成 'dataMax' 则从数据中计算最大值
	    // max: null,
	    // 脱离0值比例，放大聚焦到最终_min，_max区间
	    // scale: false,
	    // 分割段数，默认为5
	    splitNumber: 5,
	    // Minimum interval
	    // minInterval: null

	    axisPointer: {
	        label: {
	        }
	    }
	}, defaultOption);

	// FIXME
	var timeAxis = echarts.util.defaults({
	    scale: true,
	    min: 'dataMin',
	    max: 'dataMax'
	}, valueAxis);
	var logAxis = echarts.util.defaults({
	    logBase: 10
	}, valueAxis);
	logAxis.scale = true;

	module.exports = {
	    categoryAxis: categoryAxis,
	    valueAxis: valueAxis,
	    timeAxis: timeAxis,
	    logAxis: logAxis
	};

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var componentViewControlMixin = __webpack_require__(94);
	var componentPostEffectMixin = __webpack_require__(95);
	var componentLightMixin = __webpack_require__(96);

	var Grid3DModel = echarts.extendComponentModel({

	    type: 'grid3D',

	    dependencies: ['xAxis3D', 'yAxis3D', 'zAxis3D'],

	    defaultOption: {

	        show: true,

	        zlevel: -10,

	        // Layout used for viewport
	        left: 0,
	        top: 0,
	        width: '100%',
	        height: '100%',

	        // Dimension of grid3D
	        boxWidth: 100,
	        boxHeight: 100,
	        boxDepth: 100,

	        // Common axis options.
	        axisPointer: {
	            show: true,
	            lineStyle: {
	                color: 'rgba(0, 0, 0, 0.8)',
	                width: 1
	            },

	            label: {
	                show: true,
	                // (dimValue: number, value: Array) => string
	                formatter: null,

	                margin: 8,
	                // backgroundColor: '#ffbd67',
	                // borderColor: '#000',
	                // borderWidth: 0,

	                textStyle: {
	                    // borderColor: '#fff',
	                    // borderWidth: 3,
	                    fontSize: 16
	                    // Default with lineStyle.color
	                    // color: '#000'
	                }
	            }
	        },

	        axisLine: {
	            show: true,
	            lineStyle: {
	                color: '#333',
	                width: 2,
	                type: 'solid'
	            }
	        },

	        axisTick: {
	            show: true,
	            inside: false,
	            length: 3,
	            lineStyle: {
	                width: 1
	            }
	        },
	        axisLabel: {
	            show: true,
	            inside: false,
	            rotate: 0,
	            margin: 8,
	            textStyle: {
	                fontSize: 12
	            }
	        },
	        splitLine: {
	            show: true,
	            lineStyle: {
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        splitArea: {
	            show: false,
	            areaStyle: {
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        },

	        // Light options
	        light: {
	            main: {
	                // Alpha angle for top-down rotation
	                // Positive to rotate to top.
	                alpha: 30,
	                // beta angle for left-right rotation
	                // Positive to rotate to right.
	                beta: 40
	            },
	            ambient: {
	                intensity: 0.4
	            }
	        },

	        viewControl: {
	            // Small damping for precise control.
	            damping: 0.1,
	            // Alpha angle for top-down rotation
	            // Positive to rotate to top.
	            alpha: 5,
	            // beta angle for left-right rotation
	            // Positive to rotate to right.
	            beta: 40,

	            autoRotate: false,

	            // Distance to the surface of grid3D.
	            distance: 200,

	            // Min distance to the surface of grid3D
	            minDistance: 40,
	            // Max distance to the surface of grid3D
	            maxDistance: 400
	        }
	    }
	});

	echarts.util.merge(Grid3DModel.prototype, componentViewControlMixin);
	echarts.util.merge(Grid3DModel.prototype, componentPostEffectMixin);
	echarts.util.merge(Grid3DModel.prototype, componentLightMixin);

	module.exports = Grid3DModel;



/***/ },
/* 94 */
/***/ function(module, exports) {

	module.exports = {
	    defaultOption: {

	        viewControl: {
	            // If rotate on on init
	            autoRotate: false,

	            // Rotate, zoom damping.
	            damping: 0.8,

	            // Start rotating after still for a given time
	            // default is 3 seconds
	            autoRotateAfterStill: 3,

	            // Distance to the surface of globe.
	            distance: 150,

	            // Min distance to the surface of globe
	            minDistance: 40,
	            // Max distance to the surface of globe
	            maxDistance: 400,

	            // Alpha angle for top-down rotation
	            // Positive to rotate to top.
	            alpha: 0,
	            // beta angle for left-right rotation
	            // Positive to rotate to right.
	            beta: 0,

	            minAlpha: -90,
	            maxAlpha: 90
	        }
	    },

	    setView: function (opts) {
	        opts = opts || {};
	        this.option.viewControl = this.option.viewControl || {};
	        if (opts.alpha != null) {
	            this.option.viewControl.alpha = opts.alpha;
	        }
	        if (opts.beta != null) {
	            this.option.viewControl.beta = opts.beta;
	        }
	        if (opts.distance != null) {
	            this.option.viewControl.distance = opts.distance;
	        }
	    }
	};

/***/ },
/* 95 */
/***/ function(module, exports) {

	module.exports = {
	    defaultOption: {
	        // Post effect
	        postEffect: {
	            enable: false,

	            bloom: {
	                enable: true,
	                intensity: 0.1
	            },
	            depthOfField: {
	                enable: false,
	                focalRange: 20,
	                focalDistance: 50,
	                blurRadius: 10,
	                fstop: 0.5
	            },

	            SSAO: {
	                enable: false,
	                radius: 1,
	                // low, medium, high, ultra
	                quality: 'medium',
	                intensity: 1
	            },
	            FXAA: {
	                enable: false
	            }
	        },

	        // Temporal super sampling when the picture is still.
	        temporalSuperSampling: {
	            // Only enabled when postEffect is enabled
	            enable: 'auto'
	        }
	    }
	};

/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = {
	    defaultOption: {
	        // Light is available when material.shading is not color
	        light: {
	            // Main light
	            main: {
	                shadow: false,
	                // low, medium, high, ultra
	                shadowQuality: 'high',

	                color: '#fff',
	                intensity: 1
	            },
	            ambient: {
	                color: '#fff',
	                intensity: 0.2
	            },
	            ambientCubemap: {
	                // Panorama environment texture,
	                // Support .hdr and commmon web formats.
	                texture: null,
	                // Available when texture is hdr.
	                exposure: 1,
	                // Intensity for diffuse term
	                diffuseIntensity: 0.5,
	                // Intensity for specular term, only available when shading is realastic
	                specularIntensity: 0.5
	            }
	        }
	    }
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	// TODO orthographic camera

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var OrbitControl = __webpack_require__(98);
	var Lines3DGeometry = __webpack_require__(99);
	var retrieve = __webpack_require__(69);
	var firstNotNull = retrieve.firstNotNull;
	var ZRTextureAtlasSurface = __webpack_require__(101);
	var LightHelper = __webpack_require__(102);
	var Grid3DFace = __webpack_require__(103);
	var Grid3DAxis = __webpack_require__(106);
	var LabelsMesh = __webpack_require__(107);

	graphicGL.Shader.import(__webpack_require__(110));

	['x', 'y', 'z'].forEach(function (dim) {
	    echarts.extendComponentView({
	        type: dim + 'Axis3D'
	    });
	});

	var dimIndicesMap = {
	    // Left to right
	    x: 0,
	    // Far to near
	    y: 2,
	    // Bottom to up
	    z: 1
	};

	module.exports = echarts.extendComponentView({

	    type: 'grid3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        var FACES = [
	            // planeDim0, planeDim1, offsetDim, dir on dim3 axis(gl), plane.
	            ['y', 'z', 'x', -1, 'left'],
	            ['y', 'z', 'x',  1, 'right'],
	            ['x', 'y', 'z', -1, 'bottom'],
	            ['x', 'y','z',  1, 'top'],
	            ['x', 'z', 'y', -1, 'far'],
	            ['x', 'z','y',  1, 'near']
	        ];

	        var DIMS = ['x', 'y', 'z'];

	        var quadsMaterial = new graphicGL.Material({
	            // transparent: true,
	            shader: graphicGL.createShader('ecgl.color'),
	            depthMask: false,
	            transparent: true
	        });
	        var linesMaterial = new graphicGL.Material({
	            // transparent: true,
	            shader: graphicGL.createShader('ecgl.meshLines3D'),
	            depthMask: false,
	            transparent: true
	        });
	        quadsMaterial.shader.define('fragment', 'DOUBLE_SIDE');
	        quadsMaterial.shader.define('both', 'VERTEX_COLOR');

	        this.groupGL = new graphicGL.Node();

	        this._control = new OrbitControl({
	            zr: api.getZr()
	        });
	        this._control.init();

	        // Save mesh and other infos for each face.
	        this._faces = FACES.map(function (faceInfo) {
	            var face = new Grid3DFace(faceInfo, linesMaterial, quadsMaterial);
	            this.groupGL.add(face.rootNode);
	            return face;
	        }, this);

	        // Save mesh and other infos for each axis.
	        this._axes = DIMS.map(function (dim) {
	            var axis = new Grid3DAxis(dim, linesMaterial);
	            this.groupGL.add(axis.rootNode);
	            return axis;
	        }, this);

	        var dpr = api.getDevicePixelRatio();
	        // Texture surface for label.
	        this._axisLabelSurface = new ZRTextureAtlasSurface({
	            width: 256, height: 256,
	            devicePixelRatio: dpr
	        });
	        this._axisLabelSurface.onupdate = function () {
	            api.getZr().refresh();
	        };

	        this._axisPointerLineMesh = new graphicGL.Mesh({
	            geometry: new Lines3DGeometry({ useNativeLine: false }),
	            material: linesMaterial,
	            castShadow: false,
	            // PENDING
	            ignorePicking: true, renderOrder: 3
	        });
	        this.groupGL.add(this._axisPointerLineMesh);

	        this._axisPointerLabelsSurface = new ZRTextureAtlasSurface({
	            width: 128, height: 128,
	            devicePixelRatio: dpr
	        });
	        this._axisPointerLabelsMesh = new LabelsMesh({
	            ignorePicking: true, renderOrder: 4,
	            castShadow: false
	        });
	        this._axisPointerLabelsMesh.material.set('textureAtlas', this._axisPointerLabelsSurface.getTexture());
	        this.groupGL.add(this._axisPointerLabelsMesh);

	        this._lightRoot = new graphicGL.Node();
	        this._lightHelper = new LightHelper(this._lightRoot);
	    },

	    render: function (grid3DModel, ecModel, api) {

	        this._model = grid3DModel;
	        this._api = api;

	        var cartesian = grid3DModel.coordinateSystem;

	        // Always have light.
	        cartesian.viewGL.add(this._lightRoot);

	        if (grid3DModel.get('show')) {
	            cartesian.viewGL.add(this.groupGL);
	        }
	        else {
	            cartesian.viewGL.remove(this.groupGL);
	        }

	        // cartesian.viewGL.setCameraType(grid3DModel.get('viewControl.projection'));

	        var control = this._control;
	        control.setCamera(cartesian.viewGL.camera);
	        control.setViewGL(cartesian.viewGL);

	        var viewControlModel = grid3DModel.getModel('viewControl');
	        control.setFromViewControlModel(viewControlModel, 0);

	        this._axisLabelSurface.clear();

	        var labelIntervalFuncs = ['x', 'y', 'z'].reduce(function (obj, axisDim) {
	            var axis = cartesian.getAxis(axisDim);
	            var axisModel = axis.model;
	            // TODO Automatic LABEL INTERVAL
	            obj[axisDim] = firstNotNull(
	                axisModel.get('axisLabel.interval'),
	                grid3DModel.get('axisLabel.interval')
	            );
	            return obj;
	        }, {});
	        this._faces.forEach(function (face) {
	            face.update(labelIntervalFuncs, grid3DModel, ecModel, api);
	        }, this);

	        this._axes.forEach(function (axis) {
	            axis.update(grid3DModel, labelIntervalFuncs, this._axisLabelSurface, api);
	        }, this);

	        control.off('update');
	        control.on('update', this._onCameraChange.bind(this, grid3DModel, api), this);

	        this._lightHelper.updateLight(grid3DModel);

	        // Set post effect
	        cartesian.viewGL.setPostEffect(grid3DModel.getModel('postEffect'));
	        cartesian.viewGL.setTemporalSuperSampling(grid3DModel.getModel('temporalSuperSampling'));

	        this._initMouseHandler(grid3DModel);
	    },

	    afterRender: function (grid3DModel, ecModel, api, layerGL) {
	        // Create ambient cubemap after render because we need to know the renderer.
	        // TODO
	        var renderer = layerGL.renderer;

	        this._lightHelper.updateAmbientCubemap(renderer, grid3DModel, api);
	    },

	    /**
	     * showAxisPointer will be triggered by action.
	     */
	    showAxisPointer: function (grid3dModel, ecModel, api, payload) {
	        this._doShowAxisPointer();
	        this._updateAxisPointer(payload.value);
	    },

	    /**
	     * hideAxisPointer will be triggered by action.
	     */
	    hideAxisPointer: function (grid3dModel, ecModel, api, payload) {
	        this._doHideAxisPointer();
	    },

	    _initMouseHandler: function (grid3DModel) {
	        var cartesian = grid3DModel.coordinateSystem;
	        var viewGL = cartesian.viewGL;

	        if (grid3DModel.get('show')) {
	            viewGL.on('mousemove', this._updateAxisPointerOnMousePosition, this);
	        }
	        else {
	            viewGL.off('mousemove', this._updateAxisPointerOnMousePosition);
	        }
	    },

	    /**
	     * Try find and show axisPointer on the intersect point
	     * of mouse ray with grid plane.
	     */
	    _updateAxisPointerOnMousePosition: function (e) {
	        // Ignore if mouse is on the element.
	        if (e.target) {
	            return;
	        }
	        var grid3DModel = this._model;
	        var cartesian = grid3DModel.coordinateSystem;
	        var viewGL = cartesian.viewGL;

	        var ray = viewGL.castRay(e.offsetX, e.offsetY, new graphicGL.Ray());

	        var nearestIntersectPoint;
	        for (var i = 0; i < this._faces.length; i++) {
	            var face = this._faces[i];
	            if (face.rootNode.invisible) {
	                continue;
	            }

	            // Plane is not face the camera. flip it
	            if (face.plane.normal.dot(viewGL.camera.worldTransform.z) < 0) {
	                face.plane.normal.negate();
	            }

	            var point = ray.intersectPlane(face.plane);
	            var axis0 = cartesian.getAxis(face.faceInfo[0]);
	            var axis1 = cartesian.getAxis(face.faceInfo[1]);
	            var idx0 = dimIndicesMap[face.faceInfo[0]];
	            var idx1 = dimIndicesMap[face.faceInfo[1]];
	            if (axis0.contain(point._array[idx0]) && axis1.contain(point._array[idx1])) {
	                nearestIntersectPoint = point;
	            }
	        }

	        if (nearestIntersectPoint) {
	            var data = cartesian.pointToData(nearestIntersectPoint._array, [], true);
	            this._updateAxisPointer(data);

	            this._doShowAxisPointer();
	        }
	        else {
	            this._doHideAxisPointer();
	        }
	    },

	    _onCameraChange: function (grid3DModel, api) {
	        this._updateFaceVisibility();
	        this._updateAxisLinePosition();
	        var control = this._control;

	        api.dispatchAction({
	            type: 'grid3DChangeCamera',
	            alpha: control.getAlpha(),
	            beta: control.getBeta(),
	            distance: control.getDistance(),
	            from: this.uid,
	            grid3DId: grid3DModel.id
	        });
	    },

	    /**
	     * Update visibility of each face when camera view changed, front face will be invisible.
	     * @private
	     */
	    _updateFaceVisibility: function () {
	        var camera = this._control.getCamera();
	        var viewSpacePos = new graphicGL.Vector3();
	        camera.update();
	        for (var idx = 0; idx < this._faces.length / 2; idx++) {
	            var depths = [];
	            for (var k = 0; k < 2; k++) {
	                var face = this._faces[idx * 2 + k];
	                face.rootNode.getWorldPosition(viewSpacePos);
	                viewSpacePos.transformMat4(camera.viewMatrix);
	                depths[k] = viewSpacePos.z;
	            }
	            // Set the front face invisible
	            var frontIndex = depths[0] > depths[1] ? 0 : 1;
	            var frontFace = this._faces[idx * 2 + frontIndex];
	            var backFace = this._faces[idx * 2 + 1 - frontIndex];
	            // Update rotation.
	            frontFace.rootNode.invisible = true;
	            backFace.rootNode.invisible = false;
	        }
	    },

	    /**
	     * Update axis line position when camera view changed.
	     * @private
	     */
	    _updateAxisLinePosition: function () {
	        // Put xAxis, yAxis on x, y visible plane.
	        // Put zAxis on the left.
	        // TODO
	        var cartesian = this._model.coordinateSystem;
	        var xAxis = cartesian.getAxis('x');
	        var yAxis = cartesian.getAxis('y');
	        var zAxis = cartesian.getAxis('z');
	        var top = zAxis.getExtentMax();
	        var bottom = zAxis.getExtentMin();
	        var left = xAxis.getExtentMin();
	        var right = xAxis.getExtentMax();
	        var near = yAxis.getExtentMax();
	        var far = yAxis.getExtentMin();

	        var xAxisNode = this._axes[0].rootNode;
	        var yAxisNode = this._axes[1].rootNode;
	        var zAxisNode = this._axes[2].rootNode;

	        var faces = this._faces;
	        // Notice: in cartesian up axis is z, but in webgl up axis is y.
	        var xAxisZOffset = (faces[4].rootNode.invisible ? far : near);
	        var xAxisYOffset = (faces[2].rootNode.invisible ? top : bottom);
	        var yAxisXOffset = (faces[0].rootNode.invisible ? left : right);
	        var yAxisYOffset = (faces[2].rootNode.invisible ? top : bottom);
	        var zAxisXOffset = (faces[0].rootNode.invisible ? right : left);
	        var zAxisZOffset = (faces[4].rootNode.invisible ? far : near);

	        xAxisNode.rotation.identity();
	        yAxisNode.rotation.identity();
	        zAxisNode.rotation.identity();
	        if (faces[4].rootNode.invisible) {
	            this._axes[0].flipped = true;
	            xAxisNode.rotation.rotateX(Math.PI);
	        }
	        if (faces[0].rootNode.invisible) {
	            this._axes[1].flipped = true;
	            yAxisNode.rotation.rotateZ(Math.PI);
	        }
	        if (faces[4].rootNode.invisible) {
	            this._axes[2].flipped = true;
	            zAxisNode.rotation.rotateY(Math.PI);
	        }

	        xAxisNode.position.set(0, xAxisYOffset, xAxisZOffset);
	        yAxisNode.position.set(yAxisXOffset, yAxisYOffset, 0); // Actually z
	        zAxisNode.position.set(zAxisXOffset, 0, zAxisZOffset); // Actually y

	        xAxisNode.update();
	        yAxisNode.update();
	        zAxisNode.update();

	        this._updateAxisLabelAlign();
	    },

	    /**
	     * Update label align on axis when axisLine position changed.
	     * @private
	     */
	    _updateAxisLabelAlign: function () {
	        // var cartesian = this._model.coordinateSystem;
	        var camera = this._control.getCamera();
	        var coords = [new graphicGL.Vector4(), new graphicGL.Vector4()];
	        var center = new graphicGL.Vector4();
	        this.groupGL.getWorldPosition(center);
	        center.w = 1.0;
	        center.transformMat4(camera.viewMatrix)
	            .transformMat4(camera.projectionMatrix);
	        center.x /= center.w;
	        center.y /= center.w;
	        this._axes.forEach(function (axisInfo) {
	            var lineCoords = axisInfo.axisLineCoords;
	            var labelGeo = axisInfo.labelsMesh.geometry;
	            for (var i = 0; i < coords.length; i++) {
	                coords[i].setArray(lineCoords[i]);
	                coords[i].w = 1.0;
	                coords[i].transformMat4(axisInfo.rootNode.worldTransform)
	                    .transformMat4(camera.viewMatrix)
	                    .transformMat4(camera.projectionMatrix);
	                coords[i].x /= coords[i].w;
	                coords[i].y /= coords[i].w;
	            }
	            var dx = coords[1].x - coords[0].x;
	            var dy = coords[1].y - coords[0].y;
	            var cx = (coords[1].x + coords[0].x) / 2;
	            var cy = (coords[1].y + coords[0].y) / 2;
	            var textAlign;
	            var verticalAlign;
	            if (Math.abs(dy / dx) < 0.5) {
	                textAlign = 'center';
	                verticalAlign = cy > center.y ? 'bottom' : 'top';
	            }
	            else {
	                verticalAlign = 'middle';
	                textAlign = cx > center.x ? 'left' : 'right';
	            }

	            // axis labels
	            axisInfo.setSpriteAlign(textAlign, verticalAlign, this._api);
	        }, this);
	    },

	    _doShowAxisPointer: function () {
	        if (!this._axisPointerLineMesh.invisible) {
	            return;
	        }

	        this._axisPointerLineMesh.invisible = false;
	        this._api.getZr().refresh();
	    },

	    _doHideAxisPointer: function () {
	        if (this._axisPointerLineMesh.invisible) {
	            return;
	        }

	        this._axisPointerLineMesh.invisible = true;
	        this._api.getZr().refresh();
	    },
	    /**
	     * @private updateAxisPointer.
	     */
	    _updateAxisPointer: function (data) {
	        var cartesian = this._model.coordinateSystem;
	        var point = cartesian.dataToPoint(data);

	        var axisPointerLineMesh = this._axisPointerLineMesh;
	        var linesGeo = axisPointerLineMesh.geometry;

	        var axisPointerParentModel = this._model.getModel('axisPointer');

	        var dpr = this._api.getDevicePixelRatio();
	        linesGeo.convertToDynamicArray(true);


	        function ifShowAxisPointer(axis) {
	            return retrieve.firstNotNull(
	                axis.model.get('axisPointer.show'),
	                axisPointerParentModel.get('show')
	            );
	        }
	        function getAxisColorAndLineWidth(axis) {
	            var axisPointerModel = axis.model.getModel('axisPointer', axisPointerParentModel);
	            var lineStyleModel = axisPointerModel.getModel('lineStyle');

	            var color = graphicGL.parseColor(lineStyleModel.get('color'));
	            var lineWidth = firstNotNull(lineStyleModel.get('width'), 1);
	            var opacity = firstNotNull(lineStyleModel.get('opacity'), 1);
	            color[3] *= opacity;

	            return {
	                color: color,
	                lineWidth: lineWidth
	            };
	        }
	        for (var k = 0; k < this._faces.length; k++) {
	            var face = this._faces[k];
	            if (face.rootNode.invisible) {
	                continue;
	            }

	            var faceInfo = face.faceInfo;
	            var otherCoord = faceInfo[3] < 0
	                ? cartesian.getAxis(faceInfo[2]).getExtentMin()
	                : cartesian.getAxis(faceInfo[2]).getExtentMax();
	            var otherDimIdx = dimIndicesMap[faceInfo[2]];

	            // Line on face.
	            for (var i = 0; i < 2; i++) {
	                var dim = faceInfo[i];
	                var faceOtherDim = faceInfo[1 - i];
	                var axis = cartesian.getAxis(dim);
	                var faceOtherAxis = cartesian.getAxis(faceOtherDim);

	                if (!ifShowAxisPointer(axis)) {
	                    continue;
	                }

	                var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
	                var dimIdx = dimIndicesMap[dim];
	                var faceOtherDimIdx = dimIndicesMap[faceOtherDim];
	                p0[dimIdx] = p1[dimIdx] = point[dimIdx];

	                p0[otherDimIdx] = p1[otherDimIdx] = otherCoord;
	                p0[faceOtherDimIdx] = faceOtherAxis.getExtentMin();
	                p1[faceOtherDimIdx] = faceOtherAxis.getExtentMax();

	                var colorAndLineWidth = getAxisColorAndLineWidth(axis);
	                linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);
	            }

	            // Project line.
	            if (ifShowAxisPointer(cartesian.getAxis(faceInfo[2]))) {
	                var p0 = point.slice();
	                var p1 = point.slice();
	                p1[otherDimIdx] = otherCoord;
	                var colorAndLineWidth = getAxisColorAndLineWidth(cartesian.getAxis(faceInfo[2]));
	                linesGeo.addLine(p0, p1, colorAndLineWidth.color, colorAndLineWidth.lineWidth * dpr);
	            }
	        }
	        linesGeo.convertToTypedArray();

	        this._updateAxisPointerLabelsMesh(data);

	        this._api.getZr().refresh();
	    },

	    _updateAxisPointerLabelsMesh: function (data) {
	        var grid3dModel = this._model;
	        var axisPointerLabelsMesh = this._axisPointerLabelsMesh;
	        var axisPointerLabelsSurface = this._axisPointerLabelsSurface;
	        var cartesian = grid3dModel.coordinateSystem;

	        var axisPointerParentModel = grid3dModel.getModel('axisPointer');

	        axisPointerLabelsMesh.geometry.convertToDynamicArray(true);
	        axisPointerLabelsSurface.clear();

	        var otherDim = {
	            x: 'y', y: 'x', z: 'y'
	        };
	        this._axes.forEach(function (axisInfo, idx) {
	            var axis = cartesian.getAxis(axisInfo.dim);
	            var axisModel = axis.model;
	            var axisPointerModel = axisModel.getModel('axisPointer', axisPointerParentModel);
	            var labelModel = axisPointerModel.getModel('label');
	            var lineColor = axisPointerModel.get('lineStyle.color');
	            if (!labelModel.get('show') || !axisPointerModel.get('show')) {
	                return;
	            }
	            var val = data[idx];
	            var formatter = labelModel.get('formatter');
	            var text = axis.scale.getLabel(val);
	            if (formatter != null) {
	                text = formatter(text, data);
	            }
	            else {
	                if (axis.scale.type === 'interval' || axis.scale.type === 'log') {
	                    var precision = echarts.number.getPrecisionSafe(axis.scale.getTicks()[0]);
	                    text = val.toFixed(precision + 2);
	                }
	            }

	            var textStyleModel = labelModel.getModel('textStyle');
	            var labelColor = textStyleModel.get('color');
	            var opacity = firstNotNull(textStyleModel.get('opacity'), 1.0);
	            var strokeColor = textStyleModel.get('borderColor');
	            var lineWidth = textStyleModel.get('borderWidth');
	            var textEl = new echarts.graphic.Text({
	                style: {
	                    text: text,
	                    textFont: textStyleModel.getFont(),
	                    fill: labelColor || lineColor,
	                    stroke: strokeColor,
	                    lineWidth: lineWidth,
	                    opacity: opacity,
	                    textAlign: 'left',
	                    textVerticalAlign: 'top'
	                }
	            });
	            var coords = axisPointerLabelsSurface.add(textEl);
	            var rect = textEl.getBoundingRect();
	            var dpr = this._api.getDevicePixelRatio();
	            var pos = axisInfo.rootNode.position.toArray();
	            var otherIdx = dimIndicesMap[otherDim[axisInfo.dim]];
	            pos[otherIdx] += (axisInfo.flipped ? -1 : 1) * labelModel.get('margin');
	            pos[dimIndicesMap[axisInfo.dim]] = axis.dataToCoord(data[idx]);

	            axisPointerLabelsMesh.geometry.addSprite(
	                pos, [rect.width * dpr, rect.height * dpr], coords,
	                axisInfo.textAlign, axisInfo.textVerticalAlign
	            );
	        }, this);
	        axisPointerLabelsSurface.getZr().refreshImmediately();
	        axisPointerLabelsMesh.material.set('uvScale', axisPointerLabelsSurface.getCoordsScale());
	        axisPointerLabelsMesh.geometry.convertToTypedArray();
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	        this._control.dispose();
	    }
	});

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provide orbit control for 3D objects
	 *
	 * @module echarts-gl/util/OrbitControl
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var Base = __webpack_require__(6);
	var Vector2 = __webpack_require__(22);
	var Vector3 = __webpack_require__(14);
	var Quaternion = __webpack_require__(29);
	var retrieve = __webpack_require__(69);

	/**
	 * @alias module:echarts-x/util/OrbitControl
	 */
	var OrbitControl = Base.extend(function () {

	    return {
	        /**
	         * @type {module:zrender~ZRender}
	         */
	        zr: null,

	        /**
	         * @type {module:echarts-gl/core/ViewGL}
	         */
	        viewGL: null,

	        /**
	         * @type {qtek.math.Vector3}
	         */
	        origin: new Vector3(),

	        /**
	         * Minimum distance to the origin
	         * @type {number}
	         * @default 0.5
	         */
	        minDistance: 0.5,

	        /**
	         * Maximum distance to the origin
	         * @type {number}
	         * @default 2
	         */
	        maxDistance: 1.5,

	        /**
	         * Minimum alpha rotation
	         */
	        minAlpha: -90,

	        /**
	         * Maximum alpha rotation
	         */
	        maxAlpha: 90,

	        /**
	         * Minimum beta rotation
	         */
	        minBeta: -Infinity,
	        /**
	         * Maximum beta rotation
	         */
	        maxBeta: Infinity,

	        /**
	         * Start auto rotating after still for the given time
	         */
	        autoRotateAfterStill: 0,

	        /**
	         * Pan or rotate
	         * @type {String}
	         */
	        mode: 'rotate',

	        /**
	         * @param {number}
	         */
	        damping: 0.8,

	        /**
	         * @type {qtek.Camera}
	         */
	        _camera: null,

	        _needsUpdate: false,

	        _rotating: false,

	        // Rotation around yAxis
	        _phi: 0,
	        // Rotation around xAxis
	        _theta: 0,

	        _mouseX: 0,
	        _mouseY: 0,

	        _rotateVelocity: new Vector2(),

	        _panVelocity: new Vector2(),

	        _distance: 500,

	        _zoomSpeed: 0,

	        _stillTimeout: 0,

	        _animators: []
	    };
	}, function () {
	    // Each OrbitControl has it's own handler
	    this._mouseDownHandler = this._mouseDownHandler.bind(this);
	    this._mouseWheelHandler = this._mouseWheelHandler.bind(this);
	    this._mouseMoveHandler = this._mouseMoveHandler.bind(this);
	    this._mouseUpHandler = this._mouseUpHandler.bind(this);
	    this._update = this._update.bind(this);
	}, {
	    /**
	     * Initialize.
	     * Mouse event binding
	     */
	    init: function () {
	        var zr = this.zr;

	        zr.on('mousedown', this._mouseDownHandler);
	        zr.on('globalout', this._mouseUpHandler);
	        zr.on('mousewheel', this._mouseWheelHandler);

	        this._decomposeTransform();

	        zr.animation.on('frame', this._update);
	    },

	    /**
	     * Dispose.
	     * Mouse event unbinding
	     */
	    dispose: function () {
	        var zr = this.zr;
	        zr.off('mousedown', this._mouseDownHandler);
	        zr.off('mousemove', this._mouseMoveHandler);
	        zr.off('mouseup', this._mouseUpHandler);
	        zr.off('mousewheel', this._mouseWheelHandler);
	        zr.off('globalout', this._mouseUpHandler);

	        zr.animation.off('frame', this._update);
	        this.stopAllAnimation();
	    },

	    /**
	     * Get distance
	     * @return {number}
	     */
	    getDistance: function () {
	        return this._distance;
	    },

	    /**
	     * Set distance
	     * @param {number} distance
	     */
	    setDistance: function (distance) {
	        this._distance = distance;
	        this._needsUpdate = true;
	    },

	    /**
	     * Get alpha rotation
	     * Alpha angle for top-down rotation. Positive to rotate to top.
	     *
	     * Which means camera rotation around x axis.
	     */
	    getAlpha: function () {
	        return this._theta / Math.PI * 180;
	    },

	    /**
	     * Get beta rotation
	     * Beta angle for left-right rotation. Positive to rotate to right.
	     *
	     * Which means camera rotation around y axis.
	     */
	    getBeta: function () {
	        return -this._phi / Math.PI * 180;
	    },

	    /**
	     * Set alpha rotation angle
	     * @param {number} alpha
	     */
	    setAlpha: function (alpha) {
	        alpha = Math.max(Math.min(this.maxAlpha, alpha), this.minAlpha);

	        this._theta = alpha / 180 * Math.PI;
	        this._needsUpdate = true;
	    },

	    /**
	     * Set beta rotation angle
	     * @param {number} beta
	     */
	    setBeta: function (beta) {
	        beta = Math.max(Math.min(this.maxBeta, beta), this.minBeta);

	        this._phi = -beta / 180 * Math.PI;
	        this._needsUpdate = true;
	    },

	    /**
	     * @param {qtek.Camera} camera
	     */
	    setCamera: function (camera) {
	        this._camera = camera;
	        this._decomposeTransform();

	        this._needsUpdate = true;
	    },

	    /**
	     * @param {module:echarts-gl/core/ViewGL} viewGL
	     */
	    setViewGL: function (viewGL) {
	        this.viewGL = viewGL;
	    },

	    /**
	     * @return {qtek.Camera}
	     */
	    getCamera: function () {
	        return this._camera;
	    },

	    setFromViewControlModel: function (viewControlModel, baseDistance) {
	        this.autoRotate = viewControlModel.get('autoRotate');
	        this.autoRotateAfterStill = viewControlModel.get('autoRotateAfterStill');

	        this.damping = viewControlModel.get('damping');

	        this.minDistance = viewControlModel.get('minDistance') + baseDistance;
	        this.maxDistance = viewControlModel.get('maxDistance') + baseDistance;

	        var targetDistance = viewControlModel.get('distance') + baseDistance;
	        if (this._distance !== targetDistance) {
	            this.zoomTo({
	                distance: targetDistance
	            });
	            // this.setDistance(targetDistance);
	        }

	        this.minAlpha = retrieve.firstNotNull(viewControlModel.get('minAlpha'), -90);
	        this.maxAlpha = retrieve.firstNotNull(viewControlModel.get('maxAlpha'), 90);
	        this.minBeta = retrieve.firstNotNull(viewControlModel.get('minBeta'), -Infinity);
	        this.maxBeta = retrieve.firstNotNull(viewControlModel.get('maxBeta'), Infinity);

	        this.setAlpha(viewControlModel.get('alpha') || 0);
	        this.setBeta(viewControlModel.get('beta') || 0);
	    },

	    /**
	     * Rotation to animation, Params can be target quaternion or x, y, z axis
	     * @example
	     *     control.rotateTo({
	     *         x: transform.x,
	     *         y: transform.y,
	     *         z: transform.z,
	     *         time: 1000
	     *     });
	     *     control.rotateTo({
	     *         rotation: quat,
	     *         time: 1000,
	     *         easing: 'CubicOut'
	     *     })
	     *     .done(function() {
	     *         xxx
	     *     });
	     * @param {Object} opts
	     * @param {qtek.math.Quaternion} [opts.rotation]
	     * @param {qtek.math.Vector3} [opts.x]
	     * @param {qtek.math.Vector3} [opts.y]
	     * @param {qtek.math.Vector3} [opts.z]
	     * @param {number} [opts.time=1000]
	     * @param {number} [opts.easing='linear']
	     */
	    rotateTo: function (opts) {
	        var toQuat;
	        var self = this;
	        if (!opts.rotation) {
	            toQuat = new Quaternion();
	            var view = new Vector3();
	            Vector3.negate(view, opts.z);
	            toQuat.setAxes(view, opts.x, opts.y);
	        }
	        else {
	            toQuat = opts.rotation;
	        }

	        // TODO
	        // var zr = this.zr;
	        // var obj = {
	        //     p: 0
	        // };

	        // var target = this._camera;
	        // var fromQuat = target.rotation.clone();
	        // return this._addAnimator(
	        //     zr.animation.animate(obj)
	        //         .when(opts.time || 1000, {
	        //             p: 1
	        //         })
	        //         .during(function () {
	        //             Quaternion.slerp(
	        //                 target.rotation, fromQuat, toQuat, obj.p
	        //             );
	        //             zr.refresh();
	        //         })
	        // ).start(opts.easing || 'linear')
	    },

	    /**
	     * Zoom to animation
	     * @param {Object} opts
	     * @param {number} opts.distance
	     * @param {number} [opts.time=1000]
	     * @param {number} [opts.easing='linear']
	     */
	    zoomTo: function (opts) {
	        var zr = this.zr;
	        var distance = opts.distance;
	        var self = this;

	        distance = Math.max(Math.min(this.maxDistance, distance), this.minDistance);
	        return this._addAnimator(
	            zr.animation.animate(this)
	                .when(opts.time || 1000, {
	                    _distance: distance
	                })
	                .during(function () {
	                    self._needsUpdate = true;
	                })
	        ).start(opts.easing || 'linear');
	    },

	    /**
	     * Stop all animation
	     */
	    stopAllAnimation: function () {
	        for (var i = 0; i < this._animators.length; i++) {
	            this._animators[i].stop();
	        }
	        this._animators.length = 0;
	    },

	    _isAnimating: function () {
	        return this._animators.length > 0;
	    },
	    /**
	     * Call update each frame
	     * @param  {number} deltaTime Frame time
	     */
	    _update: function (deltaTime) {

	        if (this._rotating) {
	            this._phi -= deltaTime * 1e-4;
	            this._needsUpdate = true;
	        }
	        else if (this._rotateVelocity.len() > 0) {
	            this._needsUpdate = true;
	        }
	        if (Math.abs(this._zoomSpeed) > 0.1) {
	            this._needsUpdate = true;
	        }
	        if (this._panVelocity.len() > 0) {
	            this._needsUpdate = true;
	        }

	        if (!this._needsUpdate) {
	            return;
	        }

	        // Fixed deltaTime
	        this._updateDistance(Math.min(deltaTime, 30));
	        this._updateRotate(Math.min(deltaTime, 30));
	        this._updatePan(Math.min(deltaTime, 30));

	        this._camera.update();

	        this._updateTransform();

	        this.zr.refresh();
	        this.trigger('update');

	        this._needsUpdate = false;
	    },

	    _updateRotate: function (deltaTime) {
	        var velocity = this._rotateVelocity;
	        this._phi = velocity.y * deltaTime / 20 + this._phi;
	        this._theta = velocity.x * deltaTime / 20 + this._theta;

	        this.setAlpha(this.getAlpha());
	        this.setBeta(this.getBeta());

	        this._vectorDamping(velocity, this.damping);
	    },

	    _updateDistance: function (deltaTime) {
	        this._setDistance(this._distance + this._zoomSpeed * deltaTime / 20);
	        this._zoomSpeed *= this.damping;
	    },

	    _setDistance: function (distance) {
	        this._distance = Math.max(Math.min(distance, this.maxDistance), this.minDistance);
	    },

	    _updatePan: function (deltaTime) {

	        var velocity = this._rotateVelocity;
	        var len = this._distance;

	        var target = this._camera;
	        var yAxis = target.worldTransform.y;
	        var xAxis = target.worldTransform.x;

	        // PENDING
	        this.origin
	            .scaleAndAdd(xAxis, velocity.x * len / 400)
	            .scaleAndAdd(yAxis, velocity.y * len / 400);

	        this._vectorDamping(velocity, this.damping);
	    },

	    _updateTransform: function () {
	        var camera = this._camera;

	        var dir = new Vector3();
	        var theta = this._theta + Math.PI / 2;
	        var phi = this._phi + Math.PI / 2;
	        var r = Math.sin(theta);

	        dir.x = r * Math.cos(phi);
	        dir.y = -Math.cos(theta);
	        dir.z = r * Math.sin(phi);

	        camera.position.copy(this.origin).scaleAndAdd(dir, this._distance);
	        camera.rotation.identity()
	            // First around y, then around x
	            .rotateY(-this._phi)
	            .rotateX(-this._theta);
	    },

	    _startCountingStill: function () {
	        clearTimeout(this._stillTimeout);

	        var time = this.autoRotateAfterStill;
	        var self = this;
	        if (!isNaN(time) && time > 0) {
	            this._stillTimeout = setTimeout(function () {
	                self._rotating = true;
	            }, time * 1000);
	        }
	    },

	    _vectorDamping: function (v, damping) {
	        var speed = v.len();
	        speed = speed * damping;
	        if (speed < 1e-4) {
	            speed = 0;
	        }
	        v.normalize().scale(speed);
	    },

	    _decomposeTransform: function () {
	    //     if (!this._camera) {
	    //         return;
	    //     }

	    //     // TODO
	    //     var euler = new Vector3();
	    //     // Z Rotate at last so it can be zero
	    //     euler.eulerFromQuat(
	    //         this._camera.rotation.normalize(), 'ZXY'
	    //     );

	    //     this._theta = euler.x;
	    //     this._phi = euler.y;

	    //     this._theta = Math.max(Math.min(this._theta, Math.PI / 2), -Math.PI / 2);

	    //     this._setDistance(this._camera.position.dist(this.origin));
	    },

	    _mouseDownHandler: function (e) {
	        if (e.target) {
	            // If mouseon some zrender element.
	            return;
	        }
	        if (this._isAnimating()) {
	            return;
	        }

	        var x = e.offsetX;
	        var y = e.offsetY;
	        if (this.viewGL && !this.viewGL.containPoint(x, y)) {
	            return;
	        }

	        this.zr.on('mousemove', this._mouseMoveHandler);
	        this.zr.on('mouseup', this._mouseUpHandler);

	        if (this.mode === 'rotate') {
	            // Reset rotate velocity
	            this._rotateVelocity.set(0, 0);

	            this._rotating = false;

	            if (this.autoRotate) {
	                this._startCountingStill();
	            }
	        }

	        this._mouseX = e.offsetX;
	        this._mouseY = e.offsetY;
	    },

	    _mouseMoveHandler: function (e) {
	        if (this._isAnimating()) {
	            return;
	        }

	        if (this.mode === 'rotate') {
	            this._rotateVelocity.y = (e.offsetX - this._mouseX) / 500;
	            this._rotateVelocity.x = (e.offsetY - this._mouseY) / 500;
	        }
	        else if (this.mode === 'pan') {
	            this._panVelocity.x = e.offsetX - this._mouseX;
	            this._panVelocity.y = -e.offsetY + this._mouseY;
	        }

	        this._mouseX = e.offsetX;
	        this._mouseY = e.offsetY;
	    },

	    _mouseWheelHandler: function (e) {
	        if (this._isAnimating()) {
	            return;
	        }
	        e = e.event;
	        var delta = e.wheelDelta // Webkit
	                || -e.detail; // Firefox
	        if (delta === 0) {
	            return;
	        }

	        var x = e.offsetX;
	        var y = e.offsetY;
	        if (this.viewGL && !this.viewGL.containPoint(x, y)) {
	            return;
	        }

	        var distance = Math.max(Math.min(
	            this._distance - this.minDistance,
	            this.maxDistance - this._distance
	        ));
	        this._zoomSpeed = (delta > 0 ? -1 : 1) * Math.max(distance / 20, 0.5);

	        this._rotating = false;

	        if (this.autoRotate && this.mode === 'rotate') {
	            this._startCountingStill();
	        }
	    },

	    _mouseUpHandler: function () {
	        this.zr.off('mousemove', this._mouseMoveHandler);
	        this.zr.off('mouseup', this._mouseUpHandler);
	    },

	    _addAnimator: function (animator) {
	        var animators = this._animators;
	        animators.push(animator);
	        animator.done(function () {
	            var idx = animators.indexOf(animator);
	            if (idx >= 0) {
	                animators.splice(idx, 1);
	            }
	        });
	        return animator;
	    }
	});

	/**
	 * If auto rotate the target
	 * @type {boolean}
	 * @default false
	 */
	Object.defineProperty(OrbitControl.prototype, 'autoRotate', {
	    get: function (val) {
	        return this._autoRotate;
	    },
	    set: function (val) {
	        this._autoRotate = val;
	        this._rotating = val;
	    }
	});


	module.exports = OrbitControl;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Lines geometry
	 * Use screen space projected lines lineWidth > MAX_LINE_WIDTH
	 * https://mattdesl.svbtle.com/drawing-lines-is-hard
	 * @module echarts-gl/util/geometry/LinesGeometry
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var StaticGeometry = __webpack_require__(35);
	var vec3 = __webpack_require__(15).vec3;
	var echarts = __webpack_require__(2);
	var dynamicConvertMixin = __webpack_require__(100);

	// var CURVE_RECURSION_LIMIT = 8;
	// var CURVE_COLLINEAR_EPSILON = 40;

	var sampleLinePoints = [[0, 0], [1, 1]];
	/**
	 * @constructor
	 * @alias module:echarts-gl/util/geometry/LinesGeometry
	 * @extends qtek.StaticGeometry
	 */

	var LinesGeometry = StaticGeometry.extend(function () {
	    return {

	        segmentScale: 1,

	        dynamic: true,
	        /**
	         * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
	         */
	        useNativeLine: true,

	        attributes: {
	            position: new StaticGeometry.Attribute('position', 'float', 3, 'POSITION'),
	            positionPrev: new StaticGeometry.Attribute('positionPrev', 'float', 3),
	            positionNext: new StaticGeometry.Attribute('positionNext', 'float', 3),
	            offset: new StaticGeometry.Attribute('offset', 'float', 1),
	            color: new StaticGeometry.Attribute('color', 'float', 4, 'COLOR')
	        }
	    };
	},
	/** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */
	{

	    /**
	     * Reset offset
	     */
	    resetOffset: function () {
	        this._vertexOffset = 0;
	        this._faceOffset = 0;
	    },

	    /**
	     * @param {number} nVertex
	     */
	    setVertexCount: function (nVertex) {
	        var attributes = this.attributes;
	        if (this.vertexCount !== nVertex) {
	            attributes.position.init(nVertex);
	            attributes.color.init(nVertex);

	            if (!this.useNativeLine) {
	                attributes.positionPrev.init(nVertex);
	                attributes.positionNext.init(nVertex);
	                attributes.offset.init(nVertex);
	            }

	            if (nVertex > 0xffff) {
	                if (this.indices instanceof Uint16Array) {
	                    this.indices = new Uint32Array(this.indices);
	                }
	            }
	            else {
	                if (this.indices instanceof Uint32Array) {
	                    this.indices = new Uint16Array(this.indices);
	                }
	            }
	        }
	    },

	    /**
	     * @param {number} nTriangle
	     */
	    setTriangleCount: function (nTriangle) {
	        if (this.triangleCount !== nTriangle) {
	            if (nTriangle === 0) {
	                this.indices = null;
	            }
	            else {
	                this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);
	            }
	        }
	    },

	    _getCubicCurveApproxStep: function (p0, p1, p2, p3) {
	        var len = vec3.dist(p0, p1) + vec3.dist(p2, p1) + vec3.dist(p3, p2);
	        var step = 1 / (len + 1) * this.segmentScale;
	        return step;
	    },

	    /**
	     * Get vertex count of cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @return number
	     */
	    getCubicCurveVertexCount: function (p0, p1, p2, p3) {
	        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
	        var segCount = Math.ceil(1 / step);
	        if (!this.useNativeLine) {
	            return segCount * 2 + 2;
	        }
	        else {
	            return segCount * 2;
	        }
	    },

	    /**
	     * Get face count of cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @return number
	     */
	    getCubicCurveTriangleCount: function (p0, p1, p2, p3) {
	        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
	        var segCount = Math.ceil(1 / step);
	        if (!this.useNativeLine) {
	            return segCount * 2;
	        }
	        else {
	            return 0;
	        }
	    },

	    /**
	     * Get vertex count of line
	     * @return {number}
	     */
	    getLineVertexCount: function () {
	        return this.getPolylineVertexCount(sampleLinePoints);
	    },

	    /**
	     * Get face count of line
	     * @return {number}
	     */
	    getLineTriangleCount: function () {
	        return this.getPolylineTriangleCount(sampleLinePoints);
	    },

	    getPolylineVertexCount: function (points) {
	        var is2DArray = typeof points[0] !== 'number';
	        var pointsLen = is2DArray ? points.length : (points.length / 3);
	        return !this.useNativeLine ? ((pointsLen - 1) * 2 + 2) : (pointsLen - 1) * 2;
	    },

	    getPolylineTriangleCount: function (points) {
	        var is2DArray = typeof points[0] !== 'number';
	        var pointsLen = is2DArray ? points.length : (points.length / 3);
	        return !this.useNativeLine ? (pointsLen - 1) * 2 : 0;
	    },

	    /**
	     * Add a cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @param {Array.<number>} color
	     * @param {number} [lineWidth=1]
	     */
	    addCubicCurve: function (p0, p1, p2, p3, color, lineWidth) {
	        if (lineWidth == null) {
	            lineWidth = 1;
	        }
	        // incremental interpolation
	        // http://antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION
	        var x0 = p0[0], y0 = p0[1], z0 = p0[2];
	        var x1 = p1[0], y1 = p1[1], z1 = p1[2];
	        var x2 = p2[0], y2 = p2[1], z2 = p2[2];
	        var x3 = p3[0], y3 = p3[1], z3 = p3[2];

	        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);

	        var step2 = step * step;
	        var step3 = step2 * step;

	        var pre1 = 3.0 * step;
	        var pre2 = 3.0 * step2;
	        var pre4 = 6.0 * step2;
	        var pre5 = 6.0 * step3;

	        var tmp1x = x0 - x1 * 2.0 + x2;
	        var tmp1y = y0 - y1 * 2.0 + y2;
	        var tmp1z = z0 - z1 * 2.0 + z2;

	        var tmp2x = (x1 - x2) * 3.0 - x0 + x3;
	        var tmp2y = (y1 - y2) * 3.0 - y0 + y3;
	        var tmp2z = (z1 - z2) * 3.0 - z0 + z3;

	        var fx = x0;
	        var fy = y0;
	        var fz = z0;

	        var dfx = (x1 - x0) * pre1 + tmp1x * pre2 + tmp2x * step3;
	        var dfy = (y1 - y0) * pre1 + tmp1y * pre2 + tmp2y * step3;
	        var dfz = (z1 - z0) * pre1 + tmp1z * pre2 + tmp2z * step3;

	        var ddfx = tmp1x * pre4 + tmp2x * pre5;
	        var ddfy = tmp1y * pre4 + tmp2y * pre5;
	        var ddfz = tmp1z * pre4 + tmp2z * pre5;

	        var dddfx = tmp2x * pre5;
	        var dddfy = tmp2y * pre5;
	        var dddfz = tmp2z * pre5;

	        var t = 0;

	        var k = 0;
	        var segCount = Math.ceil(1 / step);

	        var points = new Float32Array((segCount + 1) * 3);
	        var points = [];
	        var offset = 0;
	        for (var k = 0; k < segCount + 1; k++) {
	            points[offset++] = fx;
	            points[offset++] = fy;
	            points[offset++] = fz;

	            fx += dfx; fy += dfy; fz += dfz;
	            dfx += ddfx; dfy += ddfy; dfz += ddfz;
	            ddfx += dddfx; ddfy += dddfy; ddfz += dddfz;
	            t += step;

	            if (t > 1) {
	                fx = dfx > 0 ? Math.min(fx, x3) : Math.max(fx, x3);
	                fy = dfy > 0 ? Math.min(fy, y3) : Math.max(fy, y3);
	                fz = dfz > 0 ? Math.min(fz, z3) : Math.max(fz, z3);
	            }
	        }

	        this.addPolyline(points, color, lineWidth, false);
	    },

	    /**
	     * Add a straight line
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} color
	     * @param {number} [lineWidth=1]
	     */
	    addLine: function (p0, p1, color, lineWidth) {
	        this.addPolyline([p0, p1], color, lineWidth, false);
	    },

	    /**
	     * Add a straight line
	     * @param {Array.<Array> | Array.<number>} points
	     * @param {Array.<number> | Array.<Array>} color
	     * @param {number} [lineWidth=1]
	     * @param {boolean} [notSharingColor=false]
	     */
	    addPolyline: function (points, color, lineWidth, notSharingColor) {
	        if (!points.length) {
	            return;
	        }

	        var is2DArray = typeof points[0] !== 'number';
	        var positionAttr = this.attributes.position;
	        var positionPrevAttr = this.attributes.positionPrev;
	        var positionNextAttr = this.attributes.positionNext;
	        var colorAttr = this.attributes.color;
	        var offsetAttr = this.attributes.offset;
	        var indices = this.indices;

	        if (lineWidth == null) {
	            lineWidth = 1;
	        }

	        var vertexOffset = this._vertexOffset;
	        var pointCount = is2DArray ? points.length : points.length / 3;
	        var iterCount = pointCount;
	        var point;
	        var pointColor;
	        for (var k = 0; k < iterCount; k++) {
	            if (is2DArray) {
	                point = points[k];
	                if (notSharingColor) {
	                    pointColor = color[k];
	                }
	                else {
	                    pointColor = color;
	                }
	            }
	            else {
	                var k3 = k * 3;
	                point = point || [];
	                point[0] = points[k3];
	                point[1] = points[k3 + 1];
	                point[2] = points[k3 + 2];

	                if (notSharingColor) {
	                    var k4 = k * 4;
	                    pointColor = pointColor || [];
	                    pointColor[0] = color[k4];
	                    pointColor[1] = color[k4 + 1];
	                    pointColor[2] = color[k4 + 2];
	                    pointColor[3] = color[k4 + 3];
	                }
	                else {
	                    pointColor = color;
	                }
	            }
	            if (!this.useNativeLine) {
	                if (k < iterCount - 1) {
	                    // Set to next two points
	                    positionPrevAttr.set(vertexOffset + 2, point);
	                    positionPrevAttr.set(vertexOffset + 3, point);
	                }
	                if (k > 0) {
	                    // Set to previous two points
	                    positionNextAttr.set(vertexOffset - 2, point);
	                    positionNextAttr.set(vertexOffset - 1, point);
	                }

	                positionAttr.set(vertexOffset, point);
	                positionAttr.set(vertexOffset + 1, point);

	                colorAttr.set(vertexOffset, pointColor);
	                colorAttr.set(vertexOffset + 1, pointColor);

	                offsetAttr.set(vertexOffset, lineWidth / 2);
	                offsetAttr.set(vertexOffset + 1, -lineWidth / 2);

	                vertexOffset += 2;
	            }
	            else {
	                if (k > 1) {
	                    positionAttr.copy(vertexOffset, vertexOffset - 1);
	                    colorAttr.copy(vertexOffset, vertexOffset - 1);
	                    vertexOffset++;
	                }
	            }

	            if (!this.useNativeLine) {
	                if (k > 0) {
	                    var idx3 = this._faceOffset * 3;
	                    var indices = this.indices;
	                    // 0-----2
	                    // 1-----3
	                    // 0->1->2, 1->3->2
	                    indices[idx3] = vertexOffset - 4;
	                    indices[idx3 + 1] = vertexOffset - 3;
	                    indices[idx3 + 2] = vertexOffset - 2;

	                    indices[idx3 + 3] = vertexOffset - 3;
	                    indices[idx3 + 4] = vertexOffset - 1;
	                    indices[idx3 + 5] = vertexOffset - 2;

	                    this._faceOffset += 2;
	                }
	            }
	            else {
	                colorAttr.set(vertexOffset, pointColor);
	                positionAttr.set(vertexOffset, point);
	                vertexOffset++;
	            }
	        }
	        if (!this.useNativeLine) {
	            var start = this._vertexOffset;
	            var end = this._vertexOffset + pointCount * 2;
	            positionPrevAttr.copy(start, start + 2);
	            positionPrevAttr.copy(start + 1, start + 3);
	            positionNextAttr.copy(end - 1, end - 3);
	            positionNextAttr.copy(end - 2, end - 4);
	        }

	        this._vertexOffset = vertexOffset;
	    }
	});

	echarts.util.defaults(LinesGeometry.prototype, dynamicConvertMixin);

	module.exports = LinesGeometry;

/***/ },
/* 100 */
/***/ function(module, exports) {

	module.exports = {
	    convertToDynamicArray: function (clear) {
	        if (clear) {
	            this.resetOffset();
	        }
	        var attributes = this.attributes;
	        for (var name in attributes) {
	            if (clear || !attributes[name].value) {
	                attributes[name].value = [];
	            }
	            else {
	                attributes[name].value = Array.prototype.slice.call(attributes[name].value);
	            }
	        }
	        if (clear || !this.indices) {
	            this.indices = [];
	        }
	        else {
	            this.indices = Array.prototype.slice.call(this.indices);
	        }
	    },

	    convertToTypedArray: function () {
	        var attributes = this.attributes;
	        for (var name in attributes) {
	            if (attributes[name].value && attributes[name].value.length > 0) {
	                attributes[name].value = new Float32Array(attributes[name].value);
	            }
	            else {
	                attributes[name].value = null;
	            }
	        }
	        if (this.indices && this.indices.length > 0) {
	            this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.indices) : new Uint16Array(this.indices);
	        }

	        this.dirty();
	    }
	};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Texture Atlas for the sprites.
	 * It uses zrender for 2d element management and rendering
	 * @module echarts-gl/util/ZRTextureAtlasSurface
	 */

	// TODO Expand.
	var echarts = __webpack_require__(2);
	var Texture2D = __webpack_require__(33);

	function ZRTextureAtlasSurfaceNode(zr, offsetX, offsetY, width, height, gap, dpr) {
	    this._zr = zr;

	    /**
	     * Current cursor x
	     * @type {number}
	     * @private
	     */
	    this._x = 0;

	    /**
	     * Current cursor y
	     * @type {number}
	     */
	    this._y = 0;

	    this._rowHeight = 0;
	    /**
	     * width without dpr.
	     * @type {number}
	     * @private
	     */
	    this.width = width;

	    /**
	     * height without dpr.
	     * @type {number}
	     * @private
	     */
	    this.height = height;

	    /**
	     * offsetX without dpr
	     * @type {number}
	     */
	    this.offsetX = offsetX;
	    /**
	     * offsetY without dpr
	     * @type {number}
	     */
	    this.offsetY = offsetY;

	    this.dpr = dpr;

	    this.gap = gap;
	}

	ZRTextureAtlasSurfaceNode.prototype = {

	    constructor: ZRTextureAtlasSurfaceNode,

	    clear: function () {
	        this._x = 0;
	        this._y = 0;
	        this._rowHeight = 0;
	    },

	    /**
	     * Add shape to atlas
	     * @param {module:zrender/graphic/Displayable} shape
	     * @param {number} width
	     * @param {number} height
	     * @return {Array}
	     */
	    add: function (el, width, height) {
	        // FIXME Text element not consider textAlign and textVerticalAlign.

	        // TODO, inner text, shadow
	        var rect = el.getBoundingRect();

	        // FIXME aspect ratio
	        if (width == null) {
	            width = rect.width;
	        }
	        if (height == null) {
	            height = rect.height;
	        }
	        width *= this.dpr;
	        height *= this.dpr;

	        this._fitElement(el, width, height);

	        // var aspect = el.scale[1] / el.scale[0];
	        // Adjust aspect ratio to make the text more clearly
	        // FIXME If height > width, width is useless ?
	        // width = height * aspect;
	        // el.position[0] *= aspect;
	        // el.scale[0] = el.scale[1];

	        var x = this._x;
	        var y = this._y;

	        var canvasWidth = this.width * this.dpr;
	        var canvasHeight = this.height * this.dpr;
	        var gap = this.gap;

	        if (x + width + gap > canvasWidth) {
	            // Change a new row
	            x = this._x = 0;
	            y += this._rowHeight + gap;
	            this._y = y;
	            // Reset row height
	            this._rowHeight = 0;
	        }

	        this._x += width + gap;

	        this._rowHeight = Math.max(this._rowHeight, height);

	        if (y + height + gap > canvasHeight) {
	            // There is no space anymore
	            return null;
	        }

	        // Shift the el
	        el.position[0] += this.offsetX * this.dpr + x;
	        el.position[1] += this.offsetY * this.dpr + y;

	        this._zr.add(el);

	        var coordsOffset = [
	            this.offsetX / this.width,
	            this.offsetY / this.height
	        ];
	        var coords = [
	            [x / canvasWidth + coordsOffset[0], y / canvasHeight + coordsOffset[1]],
	            [(x + width) / canvasWidth + coordsOffset[0], (y + height) / canvasHeight + coordsOffset[1]]
	        ];

	        return coords;
	    },

	    /**
	     * Fit element size by correct its position and scaling
	     * @param {module:zrender/graphic/Displayable} el
	     * @param {number} spriteWidth
	     * @param {number} spriteHeight
	     */
	    _fitElement: function (el, spriteWidth, spriteHeight) {
	        // TODO, inner text, shadow
	        var rect = el.getBoundingRect();

	        var scaleX = spriteWidth / rect.width;
	        var scaleY = spriteHeight / rect.height;
	        el.position = [-rect.x * scaleX, -rect.y * scaleY];
	        el.scale = [scaleX, scaleY];
	        el.update();
	    }
	}
	/**
	 * constructor
	 * @alias module:echarts-gl/util/ZRTextureAtlasSurface
	 * @param {number} opt.width
	 * @param {number} opt.height
	 * @param {number} opt.devicePixelRatio
	 * @param {number} opt.gap Gap for safe.
	 * @param {Function} opt.onupdate
	 */
	function ZRTextureAtlasSurface (opt) {

	    opt = opt || {};
	    opt.width = opt.width || 512;
	    opt.height = opt.height || 512;
	    opt.devicePixelRatio = opt.devicePixelRatio || 1;
	    opt.gap = opt.gap == null ? 2 : opt.gap;

	    var canvas = document.createElement('canvas');
	    canvas.width = opt.width * opt.devicePixelRatio;
	    canvas.height = opt.height * opt.devicePixelRatio;

	    this._canvas = canvas;

	    this._texture = new Texture2D({
	        image: canvas,
	        flipY: false
	    });

	    var self = this;
	    /**
	     * zrender instance in the Chart
	     * @type {zrender~ZRender}
	     */
	    this._zr = echarts.zrender.init(canvas);
	    var oldRefreshImmediately = this._zr.refreshImmediately;
	    this._zr.refreshImmediately = function () {
	        oldRefreshImmediately.call(this);
	        self._texture.dirty();
	        self.onupdate && self.onupdate();
	    };

	    this._dpr = opt.devicePixelRatio;

	    /**
	     * Texture coords map for each sprite image
	     * @type {Object}
	     */
	    this._coords = {};

	    this.onupdate = opt.onupdate;

	    this._gap = opt.gap;

	    // Left sub atlas.
	    this._textureAtlasNodes = [new ZRTextureAtlasSurfaceNode(
	        this._zr, 0, 0, opt.width, opt.height, this._gap, this._dpr
	    )];

	    this._nodeWidth = opt.width;
	    this._nodeHeight = opt.height;
	}

	ZRTextureAtlasSurface.prototype = {

	    /**
	     * Clear the texture atlas
	     */
	    clear: function () {

	        for (var i = 0; i < this._textureAtlasNodes.length; i++) {
	            this._textureAtlasNodes[i].clear();
	        }

	        this._zr.clear();
	        this._coords = {};
	    },

	    /**
	     * @return {number}
	     */
	    getWidth: function () {
	        return this._width;
	    },

	    /**
	     * @return {number}
	     */
	    getHeight: function () {
	        return this._height;
	    },

	    /**
	     * @return {number}
	     */
	    getTexture: function () {
	        return this._texture;
	    },

	    /**
	     * @return {number}
	     */
	    getDevicePixelRatio: function () {
	        return this._dpr;
	    },

	    getZr: function () {
	        return this._zr;
	    },

	    _getCurrentNode: function () {
	        return this._textureAtlasNodes[this._textureAtlasNodes.length - 1];
	    },

	    _expand: function () {
	        var maxSize = 4096 / this._dpr;
	        var textureAtlasNodes = this._textureAtlasNodes;
	        var nodeLen = textureAtlasNodes.length;
	        var offsetX = (nodeLen * this._nodeWidth) % maxSize;
	        var offsetY = Math.floor(nodeLen * this._nodeWidth / maxSize) * this._nodeHeight;
	        if (offsetY >= maxSize) {
	            // Failed if image is too large.
	            if (true) {
	                console.error('Too much labels. Some will be ignored.');
	            }
	            return;
	        }

	        var width = (offsetX + this._nodeWidth) * this._dpr;
	        var height = (offsetY + this._nodeHeight) * this._dpr;
	        try {
	            // Resize will error in node.
	            this._zr.resize({
	                width: width,
	                height: height
	            });
	        }
	        catch (e) {
	            this._canvas.width = width;
	            this._canvas.height = height;
	        }

	        var newNode = new ZRTextureAtlasSurfaceNode(
	            this._zr, offsetX, offsetY, this._nodeWidth, this._nodeHeight, this._gap, this._dpr
	        );
	        this._textureAtlasNodes.push(newNode);

	        return newNode;
	    },

	    add: function (el, width, height) {
	        if (this._coords[el.id]) {
	            if (true) {
	                console.warn('Element already been add');
	            }
	            return this._coords[el.id];
	        }
	        var coords = this._getCurrentNode().add(el, width, height);
	        if (!coords) {
	            var newNode = this._expand();
	            if (!newNode) {
	                // To maximum
	                return;
	            }
	            coords = newNode.add(el, width, height);
	        }

	        this._coords[el.id] = coords;

	        return coords;
	    },

	    /**
	     * Get coord scale after texture atlas is expanded.
	     * @return {Array.<number>}
	     */
	    getCoordsScale: function () {
	        var dpr = this._dpr;
	        return [this._nodeWidth / this._canvas.width * dpr, this._nodeHeight / this._canvas.height * dpr];
	    },

	    /**
	     * Get texture coords of sprite image
	     * @param  {string} id Image id
	     * @return {Array}
	     */
	    getCoords: function (id) {
	        return this._coords[id];
	    }
	};

	module.exports = ZRTextureAtlasSurface;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var graphicGL = __webpack_require__(31);

	function LightHelper(rootNode) {
	    this.initLight();

	    this._root = rootNode;

	    rootNode.add(this.mainLight);
	    rootNode.add(this.ambientLight);
	}

	LightHelper.prototype = {
	    constructor: LightHelper,

	    initLight: function () {
	        /**
	         * @type {qtek.light.Directional}
	         */
	        this.mainLight = new graphicGL.DirectionalLight({
	            shadowBias: 0.005
	        });

	        /**
	         * @type {qtek.light.Ambient}
	         */
	        this.ambientLight = new graphicGL.AmbientLight();
	    },

	    updateLight: function (componentModel) {

	        var mainLight = this.mainLight;
	        var ambientLight = this.ambientLight;

	        var lightModel = componentModel.getModel('light');
	        var mainLightModel = lightModel.getModel('main');
	        var ambientLightModel = lightModel.getModel('ambient');

	        mainLight.intensity = mainLightModel.get('intensity');
	        ambientLight.intensity = ambientLightModel.get('intensity');
	        mainLight.color = graphicGL.parseColor(mainLightModel.get('color')).slice(0, 3);
	        ambientLight.color = graphicGL.parseColor(ambientLightModel.get('color')).slice(0, 3);

	        var alpha = mainLightModel.get('alpha') || 0;
	        var beta = mainLightModel.get('beta') || 0;
	        mainLight.position.setArray(graphicGL.directionFromAlphaBeta(alpha, beta));
	        mainLight.lookAt(graphicGL.Vector3.ZERO);

	        mainLight.castShadow = mainLightModel.get('shadow');
	        mainLight.shadowResolution = graphicGL.getShadowResolution(mainLightModel.get('shadowQuality'));
	    },

	    updateAmbientCubemap: function (renderer, componentModel, api) {
	        var ambientCubemapModel = componentModel.getModel('light.ambientCubemap');

	        var textureUrl = ambientCubemapModel.get('texture');
	        if (textureUrl) {
	            this._cubemapLightsCache = this._cubemapLightsCache || {};
	            var lights = this._cubemapLightsCache[textureUrl];
	            if (!lights) {
	                lights = this._cubemapLightsCache[textureUrl]
	                    = graphicGL.createAmbientCubemap(ambientCubemapModel.option, renderer, api);
	            }
	            this._root.add(lights.diffuse);
	            this._root.add(lights.specular);

	            this._currentCubemapLights = lights;
	        }
	        else if (this._currentCubemapLights) {
	            this._root.remove(this._currentCubemapLights.diffuse);
	            this._root.remove(this._currentCubemapLights.specular);
	            this._currentCubemapLights = null;
	        }
	    }
	};

	module.exports = LightHelper;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var retrieve = __webpack_require__(69);
	var Lines3DGeometry = __webpack_require__(99);
	var QuadsGeometry = __webpack_require__(104);
	var firstNotNull = retrieve.firstNotNull;
	var ifIgnoreOnTick = __webpack_require__(105);

	var dimIndicesMap = {
	    // Left to right
	    x: 0,
	    // Far to near
	    y: 2,
	    // Bottom to up
	    z: 1
	};

	function updateFacePlane(node, plane, otherAxis, dir) {
	    var coord = [0, 0, 0];
	    var distance = dir < 0 ? otherAxis.getExtentMin() : otherAxis.getExtentMax();
	    coord[dimIndicesMap[otherAxis.dim]] = distance;
	    node.position.setArray(coord);
	    node.rotation.identity();

	    // Negative distance because on the opposite of normal direction.
	    plane.distance = -Math.abs(distance);
	    plane.normal.set(0, 0, 0);
	    if (otherAxis.dim === 'x') {
	        node.rotation.rotateY(dir * Math.PI / 2);
	        plane.normal.x = -dir;
	    }
	    else if (otherAxis.dim === 'z') {
	        node.rotation.rotateX(-dir * Math.PI / 2);
	        plane.normal.y = -dir;
	    }
	    else {
	        if (dir > 0) {
	            node.rotation.rotateY(Math.PI);
	        }
	        plane.normal.z = -dir;
	    }
	}


	function Grid3DFace(faceInfo, linesMaterial, quadsMaterial) {
	    this.rootNode = new graphicGL.Node();

	    var linesMesh = new graphicGL.Mesh({
	        geometry: new Lines3DGeometry({ useNativeLine: false }),
	        material: linesMaterial,
	        castShadow: false,
	        ignorePicking: true, renderOrder: 1
	    });
	    var quadsMesh = new graphicGL.Mesh({
	        geometry: new QuadsGeometry(),
	        material: quadsMaterial,
	        castShadow: false,
	        culling: false, ignorePicking: true, renderOrder: 0
	    });
	    // Quads are behind lines.
	    this.rootNode.add(quadsMesh);
	    this.rootNode.add(linesMesh);

	    this.faceInfo = faceInfo;
	    this.plane =new graphicGL.Plane();
	    this.linesMesh =linesMesh;
	    this.quadsMesh =quadsMesh;
	}

	Grid3DFace.prototype.update = function (labelIntervalFuncs, grid3DModel, ecModel, api) {
	    var cartesian = grid3DModel.coordinateSystem;
	    var axes = [
	        cartesian.getAxis(this.faceInfo[0]),
	        cartesian.getAxis(this.faceInfo[1])
	    ];
	    var lineGeometry = this.linesMesh.geometry;
	    var quadsGeometry = this.quadsMesh.geometry;

	    lineGeometry.convertToDynamicArray(true);
	    quadsGeometry.convertToDynamicArray(true);
	    this._updateSplitLines(lineGeometry, axes, grid3DModel, labelIntervalFuncs, api);
	    this._udpateSplitAreas(quadsGeometry, axes, grid3DModel, labelIntervalFuncs, api);
	    lineGeometry.convertToTypedArray();
	    quadsGeometry.convertToTypedArray();


	    var otherAxis = cartesian.getAxis(this.faceInfo[2]);
	    updateFacePlane(this.rootNode, this.plane, otherAxis, this.faceInfo[3]);
	};

	Grid3DFace.prototype._updateSplitLines = function (geometry, axes, grid3DModel, labelIntervalFuncs, api) {
	    var dpr = api.getDevicePixelRatio();
	    axes.forEach(function (axis, idx) {
	        var axisModel = axis.model;
	        var otherExtent = axes[1 - idx].getExtent();

	        if (axis.scale.isBlank()) {
	            return;
	        }

	        var splitLineModel = axisModel.getModel('splitLine', grid3DModel.getModel('splitLine'));
	        // Render splitLines
	        if (splitLineModel.get('show')) {
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');
	            var opacity = firstNotNull(lineStyleModel.get('opacity'), 1.0);
	            var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);
	            // TODO Automatic interval
	            var intervalFunc = splitLineModel.get('interval');
	            if (intervalFunc == null || intervalFunc === 'auto') {
	                intervalFunc = labelIntervalFuncs[axis.dim];
	            }
	            lineColors = echarts.util.isArray(lineColors) ? lineColors : [lineColors];

	            var ticksCoords = axis.getTicksCoords();

	            var count = 0;
	            for (var i = 0; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, intervalFunc)) {
	                    continue;
	                }
	                var tickCoord = ticksCoords[i];
	                var lineColor = graphicGL.parseColor(lineColors[count % lineColors.length]);
	                lineColor[3] *= opacity;

	                var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
	                // 0 - x, 1 - y
	                p0[idx] = p1[idx] = tickCoord;
	                p0[1 - idx] = otherExtent[0];
	                p1[1 - idx] = otherExtent[1];

	                geometry.addLine(p0, p1, lineColor, lineWidth * dpr);

	                count++;
	            }
	        }
	    });
	};

	Grid3DFace.prototype._udpateSplitAreas = function (geometry, axes, grid3DModel, labelIntervalFuncs, api) {
	    axes.forEach(function (axis, idx) {
	        var axisModel = axis.model;
	        var otherExtent = axes[1 - idx].getExtent();

	        if (axis.scale.isBlank()) {
	            return;
	        }

	        var splitAreaModel = axisModel.getModel('splitArea', grid3DModel.getModel('splitArea'));
	        // Render splitAreas
	        if (splitAreaModel.get('show')) {
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var colors = areaStyleModel.get('color');
	            var opacity = firstNotNull(areaStyleModel.get('opacity'), 1.0);
	            // TODO Automatic interval
	            var intervalFunc = splitAreaModel.get('interval');
	            if (intervalFunc == null || intervalFunc === 'auto') {
	                intervalFunc = labelIntervalFuncs[axis.dim];
	            }

	            colors = echarts.util.isArray(colors) ? colors : [colors];

	            var ticksCoords = axis.getTicksCoords();

	            var count = 0;
	            var prevP0 = [0, 0, 0];
	            var prevP1 = [0, 0, 0];
	            // 0 - x, 1 - y
	            for (var i = 0; i < ticksCoords.length; i++) {
	                var tickCoord = ticksCoords[i];

	                var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
	                // 0 - x, 1 - y
	                p0[idx] = p1[idx] = tickCoord;
	                p0[1 - idx] = otherExtent[0];
	                p1[1 - idx] = otherExtent[1];

	                if (i === 0) {
	                    prevP0 = p0;
	                    prevP1 = p1;
	                    continue;
	                }

	                if (ifIgnoreOnTick(axis, i, intervalFunc)) {
	                    continue;
	                }

	                var color = graphicGL.parseColor(colors[count % colors.length]);
	                color[3] *= opacity;
	                geometry.addQuad([prevP0, p0, p1, prevP1], color);

	                prevP0 = p0;
	                prevP1 = p1;

	                count++;
	            }
	        }
	    });
	};

	module.exports = Grid3DFace;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts-gl/util/geometry/QuadsGeometry
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var StaticGeometry = __webpack_require__(35);
	var vec3 = __webpack_require__(15).vec3;
	var echarts = __webpack_require__(2);
	var dynamicConvertMixin = __webpack_require__(100);

	/**
	 * @constructor
	 * @alias module:echarts-gl/util/geometry/QuadsGeometry
	 * @extends qtek.StaticGeometry
	 */

	var QuadsGeometry = StaticGeometry.extend(function () {
	    return {

	        segmentScale: 1,

	        /**
	         * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
	         */
	        useNativeLine: true,

	        attributes: {
	            position: new StaticGeometry.Attribute('position', 'float', 3, 'POSITION'),
	            normal: new StaticGeometry.Attribute('normal', 'float', 3, 'NORMAL'),
	            color: new StaticGeometry.Attribute('color', 'float', 4, 'COLOR')
	        }
	    };
	},
	/** @lends module: echarts-gl/util/geometry/QuadsGeometry.prototype */
	{

	    /**
	     * Reset offset
	     */
	    resetOffset: function () {
	        this._vertexOffset = 0;
	        this._faceOffset = 0;
	    },

	    /**
	     * @param {number} nQuad
	     */
	    setQuadCount: function (nQuad) {
	        var attributes = this.attributes;
	        var vertexCount = this.getQuadVertexCount() * nQuad;
	        var triangleCount = this.getQuadTriangleCount() * nQuad;
	        if (this.vertexCount !== vertexCount) {
	            attributes.position.init(vertexCount);
	            attributes.normal.init(vertexCount);
	            attributes.color.init(vertexCount);
	        }
	        if (this.triangleCount !== triangleCount) {
	            this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);
	        }
	    },

	    getQuadVertexCount: function () {
	        return 4;
	    },

	    getQuadTriangleCount: function () {
	        return 2;
	    },

	    /**
	     * Add a quad, which in following order:
	     * 0-----1
	     * 3-----2
	     */
	    addQuad: (function () {
	        var a = vec3.create();
	        var b = vec3.create();
	        var normal = vec3.create();
	        var indices = [0, 3, 1, 3, 2, 1];
	        return function (coords,  color) {
	            var positionAttr = this.attributes.position;
	            var normalAttr = this.attributes.normal;
	            var colorAttr = this.attributes.color;

	            vec3.sub(a, coords[1], coords[0]);
	            vec3.sub(b, coords[2], coords[1]);
	            vec3.cross(normal, a, b);
	            vec3.normalize(normal, normal);

	            for (var i = 0; i < 4; i++) {
	                positionAttr.set(this._vertexOffset + i, coords[i]);
	                colorAttr.set(this._vertexOffset + i, color);
	                normalAttr.set(this._vertexOffset + i, normal);
	            }
	            var idx = this._faceOffset * 3;
	            for (var i = 0; i < 6; i++) {
	                this.indices[idx + i] = indices[i] + this._vertexOffset;
	            }
	            this._vertexOffset += 4;
	            this._faceOffset += 2;
	        };
	    })()
	});

	echarts.util.defaults(QuadsGeometry.prototype, dynamicConvertMixin);

	module.exports = QuadsGeometry;

/***/ },
/* 105 */
/***/ function(module, exports) {

	module.exports = function ifIgnoreOnTick(axis, i, interval) {
	    var rawTick;
	    var scale = axis.scale;
	    return scale.type === 'ordinal'
	        && (
	            typeof interval === 'function'
	                ? (
	                    rawTick = scale.getTicks()[i],
	                    !interval(rawTick, scale.getLabel(rawTick))
	                )
	                : i % (interval + 1)
	        );
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var Lines3DGeometry = __webpack_require__(99);
	var retrieve = __webpack_require__(69);
	var LabelsMesh = __webpack_require__(107);
	var firstNotNull = retrieve.firstNotNull;
	var ifIgnoreOnTick = __webpack_require__(105);

	var dimIndicesMap = {
	    // Left to right
	    x: 0,
	    // Far to near
	    y: 2,
	    // Bottom to up
	    z: 1
	};

	function Grid3DAxis(dim, linesMaterial) {
	    var linesMesh = new graphicGL.Mesh({
	        geometry: new Lines3DGeometry({ useNativeLine: false }),
	        material: linesMaterial,
	        castShadow: false,
	        ignorePicking: true, renderOrder: 2
	    });
	    var axisLabelsMesh = new LabelsMesh();
	    axisLabelsMesh.material.depthMask = false;

	    var rootNode = new graphicGL.Node();
	    rootNode.add(linesMesh);
	    rootNode.add(axisLabelsMesh);

	    this.rootNode = rootNode;
	    this.dim = dim;

	    this.linesMesh = linesMesh;
	    this.labelsMesh = axisLabelsMesh;
	    this.axisLineCoords = null;
	    this.labelElements = [];
	}

	var otherDim = {
	    x: 'y', y: 'x', z: 'y'
	};
	Grid3DAxis.prototype.update = function (
	    grid3DModel, labelIntervalFuncs, axisLabelSurface, api
	) {
	    var cartesian = grid3DModel.coordinateSystem;
	    var axis = cartesian.getAxis(this.dim);
	    var labelIntervalFunc = labelIntervalFuncs[this.dim];

	    var linesGeo = this.linesMesh.geometry;
	    var labelsGeo = this.labelsMesh.geometry;
	    linesGeo.convertToDynamicArray(true);
	    labelsGeo.convertToDynamicArray(true);
	    var axisModel = axis.model;
	    var extent = axis.getExtent();

	    var dpr = api.getDevicePixelRatio();
	    var axisLineModel = axisModel.getModel('axisLine', grid3DModel.getModel('axisLine'));
	    var axisTickModel = axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));
	    var axisLabelModel = axisModel.getModel('axisLabel', grid3DModel.getModel('axisLabel'));
	    var axisLineColor = axisLineModel.get('lineStyle.color');
	    // Render axisLine
	    if (axisLineModel.get('show')) {
	        var axisLineStyleModel = axisLineModel.getModel('lineStyle');
	        var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
	        var idx = dimIndicesMap[axis.dim];
	        p0[idx] = extent[0];
	        p1[idx] = extent[1];

	        // Save some useful info.
	        this.axisLineCoords =[p0, p1];

	        var color = graphicGL.parseColor(axisLineColor);
	        var lineWidth = firstNotNull(axisLineStyleModel.get('width'), 1.0);
	        var opacity = firstNotNull(axisLineStyleModel.get('opacity'), 1.0);
	        color[3] *= opacity;
	        linesGeo.addLine(p0, p1, color, lineWidth * dpr);
	    }
	    // Render axis ticksCoords
	    if (axisTickModel.get('show')) {
	        var lineStyleModel = axisTickModel.getModel('lineStyle');
	        var lineColor = graphicGL.parseColor(
	            firstNotNull(lineStyleModel.get('color'), axisLineColor)
	        );
	        var lineWidth = firstNotNull(lineStyleModel.get('width'), 1.0);
	        lineColor[3] *= firstNotNull(lineStyleModel.get('opacity'), 1.0);
	        var ticksCoords = axis.getTicksCoords();
	        // TODO Automatic interval
	        var intervalFunc = axisTickModel.get('interval');
	        if (intervalFunc == null || intervalFunc === 'auto') {
	            intervalFunc = labelIntervalFunc;
	        }
	        var tickLength = axisTickModel.get('length');

	        for (var i = 0; i < ticksCoords.length; i++) {
	            if (ifIgnoreOnTick(axis, i, intervalFunc)) {
	                continue;
	            }
	            var tickCoord = ticksCoords[i];

	            var p0 = [0, 0, 0]; var p1 = [0, 0, 0];
	            var idx = dimIndicesMap[axis.dim];
	            var otherIdx = dimIndicesMap[otherDim[axis.dim]];
	            // 0 : x, 1 : y
	            p0[idx] = p1[idx] = tickCoord;
	            p1[otherIdx] = tickLength;

	            linesGeo.addLine(p0, p1, lineColor, lineWidth * dpr);
	        }
	    }

	    this.labelElements = [];
	    var dpr = api.getDevicePixelRatio();
	    if (axisLabelModel.get('show')) {
	        var textStyleModel = axisLabelModel.getModel('textStyle');
	        var labelsCoords = axis.getLabelsCoords();
	        // TODO color callback.
	        var labelColor = firstNotNull(textStyleModel.get('color'), axisLineColor);
	        var opacity = firstNotNull(textStyleModel.get('opacity'), 1.0);
	        var strokeColor = textStyleModel.get('borderColor');
	        var lineWidth = textStyleModel.get('borderWidth');
	        // TODO Automatic interval
	        var intervalFunc = labelIntervalFunc;

	        var labelMargin = axisLabelModel.get('margin');

	        var labels = axisModel.getFormattedLabels();
	        for (var i = 0; i < labelsCoords.length; i++) {
	            if (ifIgnoreOnTick(axis, i, intervalFunc)) {
	                continue;
	            }
	            var tickCoord = labelsCoords[i];

	            var p = [0, 0, 0];
	            var idx = dimIndicesMap[axis.dim];
	            var otherIdx = dimIndicesMap[otherDim[axis.dim]];
	            // 0 : x, 1 : y
	            p[idx] = p[idx] = tickCoord;
	            p[otherIdx] = labelMargin;

	            var textEl = new echarts.graphic.Text({
	                style: {
	                    text: labels[i],
	                    fill: labelColor,
	                    stroke: strokeColor,
	                    lineWidth: lineWidth,
	                    font: textStyleModel.getFont(),
	                    textVerticalAlign: 'top',
	                    textAlign: 'left'
	                }
	            });
	            var coords = axisLabelSurface.add(textEl);
	            var rect = textEl.getBoundingRect();
	            labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);

	            this.labelElements.push(textEl);
	        }
	    }

	    if (axisModel.get('name')) {
	        var nameTextStyleModel = axisModel.getModel('nameTextStyle');
	        var p = [0, 0, 0];
	        var idx = dimIndicesMap[axis.dim];
	        var otherIdx = dimIndicesMap[otherDim[axis.dim]];
	        var labelColor = firstNotNull(nameTextStyleModel.get('color'), axisLineColor);
	        var opacity = firstNotNull(nameTextStyleModel.get('opacity'), 1.0);
	        var strokeColor = nameTextStyleModel.get('borderColor');
	        var lineWidth = nameTextStyleModel.get('borderWidth');
	        // TODO start and end
	        p[idx] = p[idx] = (extent[0] + extent[1]) / 2;
	        p[otherIdx] = axisModel.get('nameGap');

	        var textEl = new echarts.graphic.Text({
	            style: {
	                text: axisModel.get('name'),
	                fill: labelColor,
	                stroke: strokeColor,
	                lineWidth: lineWidth,
	                font: nameTextStyleModel.getFont(),
	                textVerticalAlign: 'top',
	                textAlign: 'left',
	                opacity: opacity
	            }
	        });
	        var coords = axisLabelSurface.add(textEl);
	        var rect = textEl.getBoundingRect();
	        labelsGeo.addSprite(p, [rect.width * dpr, rect.height * dpr], coords);

	        textEl.__idx = this.labelElements.length;
	        this.nameLabelElement = textEl;
	    }

	    this.labelsMesh.material.set('textureAtlas', axisLabelSurface.getTexture());
	    this.labelsMesh.material.set('uvScale', axisLabelSurface.getCoordsScale());

	    linesGeo.convertToTypedArray();
	    labelsGeo.convertToTypedArray();
	};

	Grid3DAxis.prototype.setSpriteAlign = function (textAlign, textVerticalAlign, api) {
	    var dpr = api.getDevicePixelRatio();
	    var labelGeo = this.labelsMesh.geometry;
	    for (var i = 0; i < this.labelElements.length; i++) {
	        var labelEl = this.labelElements[i];
	        var rect = labelEl.getBoundingRect();

	        labelGeo.setSpriteAlign(i, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);
	    }
	    // name label
	    var nameLabelEl = this.nameLabelElement;
	    if (nameLabelEl) {
	        var rect = nameLabelEl.getBoundingRect();
	        labelGeo.setSpriteAlign(nameLabelEl.__idx, [rect.width * dpr, rect.height * dpr], textAlign, textVerticalAlign);
	        labelGeo.dirty();
	    }

	    this.textAlign = textAlign;
	    this.textVerticalAlign = textVerticalAlign;
	};

	module.exports = Grid3DAxis;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var graphicGL = __webpack_require__(31);
	var SpritesGeometry = __webpack_require__(108);

	graphicGL.Shader.import(__webpack_require__(109));

	module.exports = graphicGL.Mesh.extend(function () {
	    var geometry = new SpritesGeometry({
	        dynamic: true
	    });
	    var material = new graphicGL.Material({
	        shader: graphicGL.createShader('ecgl.labels3D'),
	        transparent: true,
	        depthMask: false
	    });

	    return {
	        geometry: geometry,
	        material: material,
	        culling: false,
	        castShadow: false,
	        ignorePicking: true
	    };
	});

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Geometry collecting sprites
	 *
	 * @module echarts-gl/util/geometry/Sprites
	 * @author Yi Shen(https://github.com/pissang)
	 */
	var echarts = __webpack_require__(2);
	var StaticGeometry = __webpack_require__(35);
	var dynamicConvertMixin = __webpack_require__(100);

	var squareTriangles = [
	    0, 1, 2, 0, 2, 3
	];

	var SpritesGeometry = StaticGeometry.extend(function () {
	    return {
	        attributes: {
	            position: new StaticGeometry.Attribute('position', 'float', 3, 'POSITION'),
	            texcoord: new StaticGeometry.Attribute('texcoord', 'float', 2, 'TEXCOORD_0'),
	            offset: new StaticGeometry.Attribute('offset', 'float', 2),
	            color: new StaticGeometry.Attribute('color', 'float', 4, 'COLOR')
	        }
	    };
	}, {
	    resetOffset: function () {
	        this._vertexOffset = 0;
	        this._faceOffset = 0;
	    },
	    setSpriteCount: function (spriteCount) {
	        this._spriteCount = spriteCount;

	        var vertexCount = spriteCount * 4;
	        var triangleCount = spriteCount * 2;

	        if (this.vertexCount !== vertexCount) {
	            this.attributes.position.init(vertexCount);
	            this.attributes.offset.init(vertexCount);
	            this.attributes.color.init(vertexCount);
	        }
	        if (this.triangleCount !== triangleCount) {
	            this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);
	        }
	    },

	    setSpriteAlign: function (spriteOffset, size, align, verticalAlign, margin) {
	        if (align == null) {
	            align = 'left';
	        }
	        if (verticalAlign == null) {
	            verticalAlign = 'top';
	        }

	        var leftOffset, topOffset, rightOffset, bottomOffset;
	        margin = margin || 0;
	        switch (align) {
	            case 'left':
	                leftOffset = margin;
	                rightOffset = size[0] + margin;
	                break;
	            case 'center':
	            case 'middle':
	                leftOffset = -size[0] / 2;
	                rightOffset = size[0] / 2;
	                break;
	            case 'right':
	                leftOffset = -size[0] - margin;
	                rightOffset = -margin;
	                break;
	        }
	        switch (verticalAlign) {
	            case 'bottom':
	                topOffset = margin;
	                bottomOffset = size[1] + margin;
	                break;
	            case 'middle':
	                topOffset = -size[1] / 2;
	                bottomOffset = size[1] / 2;
	                break;
	            case 'top':
	                topOffset = -size[1] - margin;
	                bottomOffset = -margin;
	                break;
	        }
	        // 3----2
	        // 0----1
	        var vertexOffset = spriteOffset * 4;
	        var offsetAttr = this.attributes.offset;
	        offsetAttr.set(vertexOffset, [leftOffset, bottomOffset]);
	        offsetAttr.set(vertexOffset + 1, [rightOffset, bottomOffset]);
	        offsetAttr.set(vertexOffset + 2, [rightOffset, topOffset]);
	        offsetAttr.set(vertexOffset + 3, [leftOffset, topOffset]);
	    },
	    /**
	     * Add sprite
	     * @param {Array.<number>} position
	     * @param {Array.<number>} size [width, height]
	     * @param {Array.<Array>} coords [leftBottom, rightTop]
	     * @param {string} [align='left'] 'left' 'center' 'right'
	     * @param {string} [verticalAlign='top'] 'top' 'middle' 'bottom'
	     * @param {number} [screenMargin=0]
	     */
	    addSprite: function (position, size, coords, align, verticalAlign, screenMargin) {
	        var vertexOffset = this._vertexOffset;
	        this.setSprite(
	            this._vertexOffset / 4, position, size, coords, align, verticalAlign, screenMargin
	        )
	        for (var i = 0; i < squareTriangles.length; i++) {
	            this.indices[this._faceOffset * 3 + i] = squareTriangles[i] + vertexOffset;
	        }
	        this._faceOffset += 2;
	        this._vertexOffset += 4;

	        return vertexOffset / 4;
	    },

	    setSprite: function (spriteOffset, position, size, coords, align, verticalAlign, screenMargin) {
	        var vertexOffset = spriteOffset * 4;

	        var attributes = this.attributes;
	        for (var i = 0; i < 4; i++) {
	            attributes.position.set(vertexOffset + i, position);
	        }
	        // 3----2
	        // 0----1
	        var texcoordAttr = attributes.texcoord;

	        texcoordAttr.set(vertexOffset, [coords[0][0], coords[0][1]]);
	        texcoordAttr.set(vertexOffset + 1, [coords[1][0], coords[0][1]]);
	        texcoordAttr.set(vertexOffset + 2, [coords[1][0], coords[1][1]]);
	        texcoordAttr.set(vertexOffset + 3, [coords[0][0], coords[1][1]]);

	        this.setSpriteAlign(spriteOffset, size, align, verticalAlign, screenMargin);
	    }
	});

	echarts.util.defaults(SpritesGeometry.prototype, dynamicConvertMixin);

	module.exports = SpritesGeometry;

/***/ },
/* 109 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.labels3D.vertex\n\n// https://mattdesl.svbtle.com/drawing-lines-is-hard\nattribute vec3 position: POSITION;\nattribute vec2 texcoord: TEXCOORD_0;\nattribute vec2 offset;\n#ifdef VERTEX_COLOR\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n#endif\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n    vec4 proj = worldViewProjection * vec4(position, 1.0);\n\n    vec2 screen = (proj.xy / abs(proj.w) + 1.0) * 0.5 * viewport.zw;\n\n    screen += offset;\n\n    proj.xy = (screen / viewport.zw - 0.5) * 2.0 * abs(proj.w);\n    gl_Position = proj;\n#ifdef VERTEX_COLOR\n    v_Color = a_Color;\n#endif\n    v_Texcoord = texcoord;\n\n    gl_PointSize = 10.0;\n}\n@end\n\n\n@export ecgl.labels3D.fragment\n\nuniform vec3 color : [1.0, 1.0, 1.0];\nuniform float alpha : 1.0;\nuniform sampler2D textureAtlas;\nuniform vec2 uvScale: [1.0, 1.0];\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n#endif\nvarying float v_Miter;\n\nvarying vec2 v_Texcoord;\n\nvoid main()\n{\n    gl_FragColor = vec4(color, alpha) * texture2D(textureAtlas, v_Texcoord * uvScale);\n#ifdef VERTEX_COLOR\n    gl_FragColor *= v_Color;\n#endif\n}\n\n@end"

/***/ },
/* 110 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.lines3D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\nvoid main()\n{\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n    v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\n@import qtek.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n    gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n    gl_FragColor = color * v_Color;\n#endif\n}\n@end\n\n\n@export ecgl.meshLines3D.vertex\n\n// https://mattdesl.svbtle.com/drawing-lines-is-hard\nattribute vec3 position: POSITION;\nattribute vec3 positionPrev;\nattribute vec3 positionNext;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\nuniform float near : NEAR;\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvarying vec2 v_PosScreen;\n\n@import ecgl.wireframe.common.vertexHeader\n\nvec4 clipNear(vec4 p1, vec4 p2) {\n    float n = (p1.w - near) / (p1.w - p2.w);\n    // PENDING\n    return vec4(mix(p1.xy, p2.xy, n), -near, near);\n}\n\nvoid main()\n{\n    vec4 prevProj = worldViewProjection * vec4(positionPrev, 1.0);\n    vec4 currProj = worldViewProjection * vec4(position, 1.0);\n    vec4 nextProj = worldViewProjection * vec4(positionNext, 1.0);\n\n    if (currProj.w < 0.0) {\n        if (prevProj.w < 0.0) {\n            currProj = clipNear(currProj, nextProj);\n        }\n        else {\n            currProj = clipNear(currProj, prevProj);\n        }\n    }\n\n    vec2 prevScreen = (prevProj.xy / abs(prevProj.w) + 1.0) * 0.5 * viewport.zw;\n    vec2 currScreen = (currProj.xy / abs(currProj.w) + 1.0) * 0.5 * viewport.zw;\n    vec2 nextScreen = (nextProj.xy / abs(nextProj.w) + 1.0) * 0.5 * viewport.zw;\n\n    v_PosScreen = currScreen;\n\n    vec2 dir;\n    float len = offset;\n    // Start point\n    if (position == positionPrev) {\n        dir = normalize(nextScreen - currScreen);\n        v_Miter = 1.0;\n    }\n    // End point\n    else if (position == positionNext) {\n        dir = normalize(currScreen - prevScreen);\n        v_Miter = 1.0;\n    }\n    else {\n        vec2 dirA = normalize(currScreen - prevScreen);\n        vec2 dirB = normalize(nextScreen - currScreen);\n\n        vec2 tanget = normalize(dirA + dirB);\n\n        // TODO, simple miterLimit\n        v_Miter = 1.0 / max(dot(tanget, dirA), 0.5);\n        len *= v_Miter;\n        dir = tanget;\n    }\n\n    dir = vec2(-dir.y, dir.x) * len;\n    currScreen += dir;\n\n    currProj.xy = (currScreen / viewport.zw - 0.5) * 2.0 * abs(currProj.w);\n    gl_Position = currProj;\n\n    v_Color = a_Color;\n\n    @import ecgl.wireframe.common.vertexMain\n}\n@end\n\n\n@export ecgl.meshLines3D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvarying vec2 v_PosScreen;\n\n@import ecgl.wireframe.common.fragmentHeader\n\n@import qtek.util.srgb\n\nvoid main()\n{\n#ifdef SRGB_DECODE\n    gl_FragColor = sRGBToLinear(color * v_Color);\n#else\n    gl_FragColor = color * v_Color;\n#endif\n\n    @import ecgl.wireframe.common.fragmentMain\n}\n\n@end"

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var Cartesian3D = __webpack_require__(112);
	var Axis3D = __webpack_require__(114);
	var echarts = __webpack_require__(2);
	var layoutUtil = __webpack_require__(115);
	var ViewGL = __webpack_require__(122);
	var retrieve = __webpack_require__(69);

	function resizeCartesian3D(grid3DModel, api) {
	    // Use left/top/width/height
	    var boxLayoutOption = grid3DModel.getBoxLayoutParams();

	    var viewport = layoutUtil.getLayoutRect(boxLayoutOption, {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });

	    // Flip Y
	    viewport.y = api.getHeight() - viewport.y - viewport.height;

	    this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

	    var boxWidth = grid3DModel.get('boxWidth');
	    var boxHeight = grid3DModel.get('boxHeight');
	    var boxDepth = grid3DModel.get('boxDepth');

	    if (true) {
	        ['x', 'y', 'z'].forEach(function (dim) {
	            if (!this.getAxis(dim)) {
	                throw new Error('Grid' + grid3DModel.id + ' don\'t have ' + dim + 'Axis');
	            }
	        }, this);
	    }
	    this.getAxis('x').setExtent(-boxWidth / 2, boxWidth / 2);
	    // From near to far
	    this.getAxis('y').setExtent(boxDepth / 2, -boxDepth / 2);
	    this.getAxis('z').setExtent(-boxHeight / 2, boxHeight / 2);

	    this.size = [boxWidth, boxHeight, boxDepth];
	}

	var grid3DCreator = {

	    dimensions: Cartesian3D.prototype.dimensions,

	    create: function (ecModel, api) {

	        var cartesian3DList = [];

	        ecModel.eachComponent('grid3D', function (grid3DModel) {
	            // FIXME
	            grid3DModel.__viewGL = grid3DModel.__viewGL || new ViewGL();

	            var cartesian3D = new Cartesian3D();
	            cartesian3D.model = grid3DModel;
	            cartesian3D.viewGL = grid3DModel.__viewGL;

	            grid3DModel.coordinateSystem = cartesian3D;
	            cartesian3DList.push(cartesian3D);

	            // Inject resize
	            cartesian3D.resize = resizeCartesian3D;
	        });

	        var dataExtents = {
	            x: [],
	            y: [],
	            z: []
	        };
	        function unionDataExtents(dim, idx, extent) {
	            dataExtents[dim][idx] = dataExtents[dim][idx] || [Infinity, -Infinity];
	            dataExtents[dim][idx][0] = Math.min(extent[0], dataExtents[dim][idx][0]);
	            dataExtents[dim][idx][1] = Math.max(extent[1], dataExtents[dim][idx][1]);
	        }
	        // Get data extents for scale.
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {
	                return;
	            }
	            var data = seriesModel.getData();
	            Cartesian3D.prototype.dimensions.forEach(function (dim) {
	                var axisType = dim + 'Axis3D';
	                var axisModel = seriesModel.getReferringComponents(axisType)[0];
	                if (!axisModel) {
	                    if (true) {
	                        throw new Error(axisType + ' "' + retrieve.firstNotNull(
	                            seriesModel.get(axisType + 'Index'),
	                            seriesModel.get(axisType + 'Id'),
	                            0
	                        ) + '" not found');
	                    }
	                }
	                else {
	                    unionDataExtents(
	                        dim, axisModel.componentIndex,
	                        data.getDataExtent(seriesModel.coordDimToDataDim(dim)[0])
	                    );
	                }
	            });
	        });

	        ['xAxis3D', 'yAxis3D', 'zAxis3D'].forEach(function (axisType) {
	            ecModel.eachComponent(axisType, function (axisModel) {
	                var dim = axisType.charAt(0);
	                var grid3DModel = axisModel.getReferringComponents('grid3D')[0];
	                if (true) {
	                    if (!grid3DModel) {
	                        throw new Error('grid3D "' + retrieve.firstNotNull(
	                            axisModel.get('grid3DIndex'),
	                            axisModel.get('grid3DId'),
	                            0
	                        ) + '" not found');
	                    }
	                }
	                var cartesian3D = grid3DModel.coordinateSystem;
	                var axis = cartesian3D.getAxis(dim);
	                if (axis) {
	                    if (true) {
	                        console.warn('Can\'t have two %s in one grid3D', axisType);
	                    }
	                    return;
	                }
	                var scale = echarts.helper.createScale(
	                    dataExtents[dim][axisModel.componentIndex] || [Infinity, -Infinity], axisModel
	                );
	                axis = new Axis3D(dim, scale);
	                axis.type = axisModel.get('type');
	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');

	                axisModel.axis = axis;
	                axis.model = axisModel;

	                cartesian3D.addAxis(axis);
	            });
	        });

	        var axesTypes = ['xAxis3D', 'yAxis3D', 'zAxis3D'];
	        function findAxesModels(seriesModel, ecModel) {
	            return axesTypes.map(function (axisType) {
	                var axisModel = seriesModel.getReferringComponents(axisType)[0];
	                if (axisModel == null) {
	                    axisModel = ecModel.getComponent(axisType);
	                }
	                if (true) {
	                    if (!axisModel) {
	                        throw new Error(axisType + ' "' + retrieve.firstNotNull(
	                            seriesModel.get(axisType + 'Index'),
	                            seriesModel.get(axisType + 'Id'),
	                            0
	                        ) + '" not found');
	                    }
	                }
	                return axisModel;
	            });
	        }

	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') !== 'cartesian3D') {
	                return;
	            }
	            var firstGridModel = seriesModel.getReferringComponents('grid3D')[0];

	            if (firstGridModel == null) {
	                var axesModels = findAxesModels(seriesModel, ecModel);
	                var firstGridModel = axesModels[0].getCoordSysModel();
	                axesModels.forEach(function (axisModel) {
	                    var grid3DModel = axisModel.getCoordSysModel();
	                    if (true) {
	                        if (!grid3DModel) {
	                            throw new Error(
	                                'grid3D "' + retrieve.firstNotNull(
	                                    axisModel.get('gridIndex'),
	                                    axisModel.get('gridId'),
	                                    0
	                                ) + '" not found'
	                            );
	                        }
	                        if (grid3DModel !== firstGridModel) {
	                            throw new Error('xAxis3D, yAxis3D, zAxis3D must use the same grid');
	                        }
	                    }
	                });
	            }

	            var coordSys = firstGridModel.coordinateSystem;
	            seriesModel.coordinateSystem = coordSys;
	        });

	        ecModel.eachComponent('grid3D', function (grid3DModel) {
	            grid3DModel.coordinateSystem.resize(grid3DModel, api);
	        });

	        return cartesian3DList;
	    }
	};

	echarts.registerCoordinateSystem('grid3D', grid3DCreator);

	module.exports = grid3DCreator;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var Cartesian = __webpack_require__(113);

	function Cartesian3D(name) {

	    Cartesian.call(this, name);

	    this.size = [0, 0, 0];
	}

	Cartesian3D.prototype = {

	    constructor: Cartesian3D,

	    type: 'cartesian3D',

	    dimensions: ['x', 'y', 'z'],

	    model: null,

	    containPoint: function (point) {
	        return this.getAxis('x').contain(point[0])
	            && this.getAxis('y').contain(point[2])
	            && this.getAxis('z').contain(point[1]);
	    },

	    containData: function (data) {
	        return this.getAxis('x').containData(data[0])
	            && this.getAxis('y').containData(data[1])
	            && this.getAxis('z').containData(data[2]);
	    },

	    dataToPoint: function (data, out, clamp) {
	        out = out || [];
	        out[0] = this.getAxis('x').dataToCoord(data[0], clamp);
	        out[2] = this.getAxis('y').dataToCoord(data[1], clamp);
	        out[1] = this.getAxis('z').dataToCoord(data[2], clamp);
	        return out;
	    },

	    pointToData: function (point, out, clamp) {
	        out = out || [];
	        out[0] = this.getAxis('x').coordToData(point[0], clamp);
	        out[1] = this.getAxis('y').coordToData(point[2], clamp);
	        out[2] = this.getAxis('z').coordToData(point[1], clamp);
	        return out;
	    }
	};

	echarts.util.inherits(Cartesian3D, Cartesian);

	module.exports = Cartesian3D;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */


	    var zrUtil = __webpack_require__(75);

	    function dimAxisMapper(dim) {
	        return this._axes[dim];
	    }

	    /**
	     * @alias module:echarts/coord/Cartesian
	     * @constructor
	     */
	    var Cartesian = function (name) {
	        this._axes = {};

	        this._dimList = [];

	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	    };

	    Cartesian.prototype = {

	        constructor: Cartesian,

	        type: 'cartesian',

	        /**
	         * Get axis
	         * @param  {number|string} dim
	         * @return {module:echarts/coord/Cartesian~Axis}
	         */
	        getAxis: function (dim) {
	            return this._axes[dim];
	        },

	        /**
	         * Get axes list
	         * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	         */
	        getAxes: function () {
	            return zrUtil.map(this._dimList, dimAxisMapper, this);
	        },

	        /**
	         * Get axes list by given scale type
	         */
	        getAxesByScale: function (scaleType) {
	            scaleType = scaleType.toLowerCase();
	            return zrUtil.filter(
	                this.getAxes(),
	                function (axis) {
	                    return axis.scale.type === scaleType;
	                }
	            );
	        },

	        /**
	         * Add axis
	         * @param {module:echarts/coord/Cartesian.Axis}
	         */
	        addAxis: function (axis) {
	            var dim = axis.dim;

	            this._axes[dim] = axis;

	            this._dimList.push(dim);
	        },

	        /**
	         * Convert data to coord in nd space
	         * @param {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        dataToCoord: function (val) {
	            return this._dataCoordConvert(val, 'dataToCoord');
	        },

	        /**
	         * Convert coord in nd space to data
	         * @param  {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        coordToData: function (val) {
	            return this._dataCoordConvert(val, 'coordToData');
	        },

	        _dataCoordConvert: function (input, method) {
	            var dimList = this._dimList;

	            var output = input instanceof Array ? [] : {};

	            for (var i = 0; i < dimList.length; i++) {
	                var dim = dimList[i];
	                var axis = this._axes[dim];

	                output[dim] = axis[method](input[dim]);
	            }

	            return output;
	        }
	    };

	    module.exports = Cartesian;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	function Axis3D(dim, scale, extent) {

	    echarts.Axis.call(this, dim, scale, extent);
	}

	Axis3D.prototype = {
	    constructor: Axis3D,

	    getExtentMin: function () {
	        var extent = this._extent;
	        return Math.min(extent[0], extent[1]);
	    },

	    getExtentMax: function () {
	        var extent = this._extent;
	        return Math.max(extent[0], extent[1]);
	    }
	};

	echarts.util.inherits(Axis3D, echarts.Axis);

	module.exports = Axis3D;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Layout helpers for each component positioning


	    var zrUtil = __webpack_require__(75);
	    var BoundingRect = __webpack_require__(116);
	    var numberUtil = __webpack_require__(119);
	    var formatUtil = __webpack_require__(120);
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;

	    var layout = {};

	    /**
	     * @public
	     */
	    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [
	        'left', 'right', 'top', 'bottom', 'width', 'height'
	    ];

	    /**
	     * @public
	     */
	    var HV_NAMES = layout.HV_NAMES = [
	        ['width', 'left', 'right'],
	        ['height', 'top', 'bottom']
	    ];

	    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	        var x = 0;
	        var y = 0;
	        if (maxWidth == null) {
	            maxWidth = Infinity;
	        }
	        if (maxHeight == null) {
	            maxHeight = Infinity;
	        }
	        var currentLineMaxSize = 0;
	        group.eachChild(function (child, idx) {
	            var position = child.position;
	            var rect = child.getBoundingRect();
	            var nextChild = group.childAt(idx + 1);
	            var nextChildRect = nextChild && nextChild.getBoundingRect();
	            var nextX;
	            var nextY;
	            if (orient === 'horizontal') {
	                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);
	                nextX = x + moveX;
	                // Wrap when width exceeds maxWidth or meet a `newline` group
	                if (nextX > maxWidth || child.newline) {
	                    x = 0;
	                    nextX = moveX;
	                    y += currentLineMaxSize + gap;
	                    currentLineMaxSize = rect.height;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	                }
	            }
	            else {
	                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);
	                nextY = y + moveY;
	                // Wrap when width exceeds maxHeight or meet a `newline` group
	                if (nextY > maxHeight || child.newline) {
	                    x += currentLineMaxSize + gap;
	                    y = 0;
	                    nextY = moveY;
	                    currentLineMaxSize = rect.width;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	                }
	            }

	            if (child.newline) {
	                return;
	            }

	            position[0] = x;
	            position[1] = y;

	            orient === 'horizontal'
	                ? (x = nextX + gap)
	                : (y = nextY + gap);
	        });
	    }

	    /**
	     * VBox or HBox layouting
	     * @param {string} orient
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.box = boxLayout;

	    /**
	     * VBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.vbox = zrUtil.curry(boxLayout, 'vertical');

	    /**
	     * HBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');

	    /**
	     * If x or x2 is not specified or 'center' 'left' 'right',
	     * the width would be as long as possible.
	     * If y or y2 is not specified or 'middle' 'top' 'bottom',
	     * the height would be as long as possible.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.x]
	     * @param {number|string} [positionInfo.y]
	     * @param {number|string} [positionInfo.x2]
	     * @param {number|string} [positionInfo.y2]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @return {Object} {width, height}
	     */
	    layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;

	        var x = parsePercent(positionInfo.x, containerWidth);
	        var y = parsePercent(positionInfo.y, containerHeight);
	        var x2 = parsePercent(positionInfo.x2, containerWidth);
	        var y2 = parsePercent(positionInfo.y2, containerHeight);

	        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);

	        margin = formatUtil.normalizeCssArray(margin || 0);

	        return {
	            width: Math.max(x2 - x - margin[1] - margin[3], 0),
	            height: Math.max(y2 - y - margin[0] - margin[2], 0)
	        };
	    };

	    /**
	     * Parse position info.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {number|string} [positionInfo.width]
	     * @param {number|string} [positionInfo.height]
	     * @param {number|string} [positionInfo.aspect] Aspect is width / height
	     * @param {Object} containerRect
	     * @param {string|number} [margin]
	     *
	     * @return {module:zrender/core/BoundingRect}
	     */
	    layout.getLayoutRect = function (
	        positionInfo, containerRect, margin
	    ) {
	        margin = formatUtil.normalizeCssArray(margin || 0);

	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;

	        var left = parsePercent(positionInfo.left, containerWidth);
	        var top = parsePercent(positionInfo.top, containerHeight);
	        var right = parsePercent(positionInfo.right, containerWidth);
	        var bottom = parsePercent(positionInfo.bottom, containerHeight);
	        var width = parsePercent(positionInfo.width, containerWidth);
	        var height = parsePercent(positionInfo.height, containerHeight);

	        var verticalMargin = margin[2] + margin[0];
	        var horizontalMargin = margin[1] + margin[3];
	        var aspect = positionInfo.aspect;

	        // If width is not specified, calculate width from left and right
	        if (isNaN(width)) {
	            width = containerWidth - right - horizontalMargin - left;
	        }
	        if (isNaN(height)) {
	            height = containerHeight - bottom - verticalMargin - top;
	        }

	        // If width and height are not given
	        // 1. Graph should not exceeds the container
	        // 2. Aspect must be keeped
	        // 3. Graph should take the space as more as possible
	        if (isNaN(width) && isNaN(height)) {
	            if (aspect > containerWidth / containerHeight) {
	                width = containerWidth * 0.8;
	            }
	            else {
	                height = containerHeight * 0.8;
	            }
	        }

	        if (aspect != null) {
	            // Calculate width or height with given aspect
	            if (isNaN(width)) {
	                width = aspect * height;
	            }
	            if (isNaN(height)) {
	                height = width / aspect;
	            }
	        }

	        // If left is not specified, calculate left from right and width
	        if (isNaN(left)) {
	            left = containerWidth - right - width - horizontalMargin;
	        }
	        if (isNaN(top)) {
	            top = containerHeight - bottom - height - verticalMargin;
	        }

	        // Align left and top
	        switch (positionInfo.left || positionInfo.right) {
	            case 'center':
	                left = containerWidth / 2 - width / 2 - margin[3];
	                break;
	            case 'right':
	                left = containerWidth - width - horizontalMargin;
	                break;
	        }
	        switch (positionInfo.top || positionInfo.bottom) {
	            case 'middle':
	            case 'center':
	                top = containerHeight / 2 - height / 2 - margin[0];
	                break;
	            case 'bottom':
	                top = containerHeight - height - verticalMargin;
	                break;
	        }
	        // If something is wrong and left, top, width, height are calculated as NaN
	        left = left || 0;
	        top = top || 0;
	        if (isNaN(width)) {
	            // Width may be NaN if only one value is given except width
	            width = containerWidth - left - (right || 0);
	        }
	        if (isNaN(height)) {
	            // Height may be NaN if only one value is given except height
	            height = containerHeight - top - (bottom || 0);
	        }

	        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	        rect.margin = margin;
	        return rect;
	    };


	    /**
	     * Position a zr element in viewport
	     *  Group position is specified by either
	     *  {left, top}, {right, bottom}
	     *  If all properties exists, right and bottom will be igonred.
	     *
	     * Logic:
	     *     1. Scale (against origin point in parent coord)
	     *     2. Rotate (against origin point in parent coord)
	     *     3. Traslate (with el.position by this method)
	     * So this method only fixes the last step 'Traslate', which does not affect
	     * scaling and rotating.
	     *
	     * If be called repeatly with the same input el, the same result will be gotten.
	     *
	     * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @param {Object} [opt]
	     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	     * @param {Array.<number>} [opt.boundingMode='all']
	     *        Specify how to calculate boundingRect when locating.
	     *        'all': Position the boundingRect that is transformed and uioned
	     *               both itself and its descendants.
	     *               This mode simplies confine the elements in the bounding
	     *               of their container (e.g., using 'right: 0').
	     *        'raw': Position the boundingRect that is not transformed and only itself.
	     *               This mode is useful when you want a element can overflow its
	     *               container. (Consider a rotated circle needs to be located in a corner.)
	     *               In this mode positionInfo.width/height can only be number.
	     */
	    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {
	        var h = !opt || !opt.hv || opt.hv[0];
	        var v = !opt || !opt.hv || opt.hv[1];
	        var boundingMode = opt && opt.boundingMode || 'all';

	        if (!h && !v) {
	            return;
	        }

	        var rect;
	        if (boundingMode === 'raw') {
	            rect = el.type === 'group'
	                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)
	                : el.getBoundingRect();
	        }
	        else {
	            rect = el.getBoundingRect();
	            if (el.needLocalTransform()) {
	                var transform = el.getLocalTransform();
	                // Notice: raw rect may be inner object of el,
	                // which should not be modified.
	                rect = rect.clone();
	                rect.applyTransform(transform);
	            }
	        }

	        positionInfo = layout.getLayoutRect(
	            zrUtil.defaults(
	                {width: rect.width, height: rect.height},
	                positionInfo
	            ),
	            containerRect,
	            margin
	        );

	        // Because 'tranlate' is the last step in transform
	        // (see zrender/core/Transformable#getLocalTransfrom),
	        // we can just only modify el.position to get final result.
	        var elPos = el.position;
	        var dx = h ? positionInfo.x - rect.x : 0;
	        var dy = v ? positionInfo.y - rect.y : 0;

	        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	    };

	    /**
	     * @param {Object} option Contains some of the properties in HV_NAMES.
	     * @param {number} hvIdx 0: horizontal; 1: vertical.
	     */
	    layout.sizeCalculable = function (option, hvIdx) {
	        return option[HV_NAMES[hvIdx][0]] != null
	            || (option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null);
	    };

	    /**
	     * Consider Case:
	     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	     * through setOption or media query, using normal zrUtil.merge will cause
	     * {right: 0} does not take effect.
	     *
	     * @example
	     * ComponentModel.extend({
	     *     init: function () {
	     *         ...
	     *         var inputPositionParams = layout.getLayoutParams(option);
	     *         this.mergeOption(inputPositionParams);
	     *     },
	     *     mergeOption: function (newOption) {
	     *         newOption && zrUtil.merge(thisOption, newOption, true);
	     *         layout.mergeLayoutParam(thisOption, newOption);
	     *     }
	     * });
	     *
	     * @param {Object} targetOption
	     * @param {Object} newOption
	     * @param {Object|string} [opt]
	     * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Some component must has width and height.
	     */
	    layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	        !zrUtil.isObject(opt) && (opt = {});

	        var ignoreSize = opt.ignoreSize;
	        !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);

	        var hResult = merge(HV_NAMES[0], 0);
	        var vResult = merge(HV_NAMES[1], 1);

	        copy(HV_NAMES[0], targetOption, hResult);
	        copy(HV_NAMES[1], targetOption, vResult);

	        function merge(names, hvIdx) {
	            var newParams = {};
	            var newValueCount = 0;
	            var merged = {};
	            var mergedValueCount = 0;
	            var enoughParamNumber = 2;

	            each(names, function (name) {
	                merged[name] = targetOption[name];
	            });
	            each(names, function (name) {
	                // Consider case: newOption.width is null, which is
	                // set by user for removing width setting.
	                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	                hasValue(newParams, name) && newValueCount++;
	                hasValue(merged, name) && mergedValueCount++;
	            });

	            if (ignoreSize[hvIdx]) {
	                // Only one of left/height is premitted to exist.
	                hasValue(newOption, names[2]) && (merged[names[1]] = null);
	                hasValue(newOption, names[1]) && (merged[names[2]] = null);
	                return merged;
	            }

	            // Case: newOption: {width: ..., right: ...},
	            // or targetOption: {right: ...} and newOption: {width: ...},
	            // There is no conflict when merged only has params count
	            // little than enoughParamNumber.
	            if (mergedValueCount === enoughParamNumber || !newValueCount) {
	                return merged;
	            }
	            // Case: newOption: {width: ..., right: ...},
	            // Than we can make sure user only want those two, and ignore
	            // all origin params in targetOption.
	            else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            }
	            else {
	                // Chose another param from targetOption by priority.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	        }

	        function hasProp(obj, name) {
	            return obj.hasOwnProperty(name);
	        }

	        function hasValue(obj, name) {
	            return obj[name] != null && obj[name] !== 'auto';
	        }

	        function copy(names, target, source) {
	            each(names, function (name) {
	                target[name] = source[name];
	            });
	        }
	    };

	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.getLayoutParams = function (source) {
	        return layout.copyLayoutParams({}, source);
	    };

	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.copyLayoutParams = function (target, source) {
	        source && target && each(LOCATION_PARAMS, function (name) {
	            source.hasOwnProperty(name) && (target[name] = source[name]);
	        });
	        return target;
	    };

	    module.exports = layout;



/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/core/BoundingRect
	 */


	    var vec2 = __webpack_require__(117);
	    var matrix = __webpack_require__(118);

	    var v2ApplyTransform = vec2.applyTransform;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    /**
	     * @alias module:echarts/core/BoundingRect
	     */
	    function BoundingRect(x, y, width, height) {

	        if (width < 0) {
	            x = x + width;
	            width = -width;
	        }
	        if (height < 0) {
	            y = y + height;
	            height = -height;
	        }

	        /**
	         * @type {number}
	         */
	        this.x = x;
	        /**
	         * @type {number}
	         */
	        this.y = y;
	        /**
	         * @type {number}
	         */
	        this.width = width;
	        /**
	         * @type {number}
	         */
	        this.height = height;
	    }

	    BoundingRect.prototype = {

	        constructor: BoundingRect,

	        /**
	         * @param {module:echarts/core/BoundingRect} other
	         */
	        union: function (other) {
	            var x = mathMin(other.x, this.x);
	            var y = mathMin(other.y, this.y);

	            this.width = mathMax(
	                    other.x + other.width,
	                    this.x + this.width
	                ) - x;
	            this.height = mathMax(
	                    other.y + other.height,
	                    this.y + this.height
	                ) - y;
	            this.x = x;
	            this.y = y;
	        },

	        /**
	         * @param {Array.<number>} m
	         * @methods
	         */
	        applyTransform: (function () {
	            var lt = [];
	            var rb = [];
	            var lb = [];
	            var rt = [];
	            return function (m) {
	                // In case usage like this
	                // el.getBoundingRect().applyTransform(el.transform)
	                // And element has no transform
	                if (!m) {
	                    return;
	                }
	                lt[0] = lb[0] = this.x;
	                lt[1] = rt[1] = this.y;
	                rb[0] = rt[0] = this.x + this.width;
	                rb[1] = lb[1] = this.y + this.height;

	                v2ApplyTransform(lt, lt, m);
	                v2ApplyTransform(rb, rb, m);
	                v2ApplyTransform(lb, lb, m);
	                v2ApplyTransform(rt, rt, m);

	                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	                this.width = maxX - this.x;
	                this.height = maxY - this.y;
	            };
	        })(),

	        /**
	         * Calculate matrix of transforming from self to target rect
	         * @param  {module:zrender/core/BoundingRect} b
	         * @return {Array.<number>}
	         */
	        calculateTransform: function (b) {
	            var a = this;
	            var sx = b.width / a.width;
	            var sy = b.height / a.height;

	            var m = matrix.create();

	            // 矩阵右乘
	            matrix.translate(m, m, [-a.x, -a.y]);
	            matrix.scale(m, m, [sx, sy]);
	            matrix.translate(m, m, [b.x, b.y]);

	            return m;
	        },

	        /**
	         * @param {(module:echarts/core/BoundingRect|Object)} b
	         * @return {boolean}
	         */
	        intersect: function (b) {
	            if (!b) {
	                return false;
	            }

	            if (!(b instanceof BoundingRect)) {
	                // Normalize negative width/height.
	                b = BoundingRect.create(b);
	            }

	            var a = this;
	            var ax0 = a.x;
	            var ax1 = a.x + a.width;
	            var ay0 = a.y;
	            var ay1 = a.y + a.height;

	            var bx0 = b.x;
	            var bx1 = b.x + b.width;
	            var by0 = b.y;
	            var by1 = b.y + b.height;

	            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	        },

	        contain: function (x, y) {
	            var rect = this;
	            return x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height);
	        },

	        /**
	         * @return {module:echarts/core/BoundingRect}
	         */
	        clone: function () {
	            return new BoundingRect(this.x, this.y, this.width, this.height);
	        },

	        /**
	         * Copy from another rect
	         */
	        copy: function (other) {
	            this.x = other.x;
	            this.y = other.y;
	            this.width = other.width;
	            this.height = other.height;
	        },

	        plain: function () {
	            return {
	                x: this.x,
	                y: this.y,
	                width: this.width,
	                height: this.height
	            };
	        }
	    };

	    /**
	     * @param {Object|module:zrender/core/BoundingRect} rect
	     * @param {number} rect.x
	     * @param {number} rect.y
	     * @param {number} rect.width
	     * @param {number} rect.height
	     * @return {module:zrender/core/BoundingRect}
	     */
	    BoundingRect.create = function (rect) {
	        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	    };

	    module.exports = BoundingRect;


/***/ },
/* 117 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;

	    /**
	     * @typedef {Float32Array|Array.<number>} Vector2
	     */
	    /**
	     * 二维向量类
	     * @exports zrender/tool/vector
	     */
	    var vector = {
	        /**
	         * 创建一个向量
	         * @param {number} [x=0]
	         * @param {number} [y=0]
	         * @return {Vector2}
	         */
	        create: function (x, y) {
	            var out = new ArrayCtor(2);
	            if (x == null) {
	                x = 0;
	            }
	            if (y == null) {
	                y = 0;
	            }
	            out[0] = x;
	            out[1] = y;
	            return out;
	        },

	        /**
	         * 复制向量数据
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        copy: function (out, v) {
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },

	        /**
	         * 克隆一个向量
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        clone: function (v) {
	            var out = new ArrayCtor(2);
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },

	        /**
	         * 设置向量的两个项
	         * @param {Vector2} out
	         * @param {number} a
	         * @param {number} b
	         * @return {Vector2} 结果
	         */
	        set: function (out, a, b) {
	            out[0] = a;
	            out[1] = b;
	            return out;
	        },

	        /**
	         * 向量相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        add: function (out, v1, v2) {
	            out[0] = v1[0] + v2[0];
	            out[1] = v1[1] + v2[1];
	            return out;
	        },

	        /**
	         * 向量缩放后相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} a
	         */
	        scaleAndAdd: function (out, v1, v2, a) {
	            out[0] = v1[0] + v2[0] * a;
	            out[1] = v1[1] + v2[1] * a;
	            return out;
	        },

	        /**
	         * 向量相减
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        sub: function (out, v1, v2) {
	            out[0] = v1[0] - v2[0];
	            out[1] = v1[1] - v2[1];
	            return out;
	        },

	        /**
	         * 向量长度
	         * @param {Vector2} v
	         * @return {number}
	         */
	        len: function (v) {
	            return Math.sqrt(this.lenSquare(v));
	        },

	        /**
	         * 向量长度平方
	         * @param {Vector2} v
	         * @return {number}
	         */
	        lenSquare: function (v) {
	            return v[0] * v[0] + v[1] * v[1];
	        },

	        /**
	         * 向量乘法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        mul: function (out, v1, v2) {
	            out[0] = v1[0] * v2[0];
	            out[1] = v1[1] * v2[1];
	            return out;
	        },

	        /**
	         * 向量除法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        div: function (out, v1, v2) {
	            out[0] = v1[0] / v2[0];
	            out[1] = v1[1] / v2[1];
	            return out;
	        },

	        /**
	         * 向量点乘
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        dot: function (v1, v2) {
	            return v1[0] * v2[0] + v1[1] * v2[1];
	        },

	        /**
	         * 向量缩放
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {number} s
	         */
	        scale: function (out, v, s) {
	            out[0] = v[0] * s;
	            out[1] = v[1] * s;
	            return out;
	        },

	        /**
	         * 向量归一化
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        normalize: function (out, v) {
	            var d = vector.len(v);
	            if (d === 0) {
	                out[0] = 0;
	                out[1] = 0;
	            }
	            else {
	                out[0] = v[0] / d;
	                out[1] = v[1] / d;
	            }
	            return out;
	        },

	        /**
	         * 计算向量间距离
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distance: function (v1, v2) {
	            return Math.sqrt(
	                (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1])
	            );
	        },

	        /**
	         * 向量距离平方
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distanceSquare: function (v1, v2) {
	            return (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	        },

	        /**
	         * 求负向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        negate: function (out, v) {
	            out[0] = -v[0];
	            out[1] = -v[1];
	            return out;
	        },

	        /**
	         * 插值两个点
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} t
	         */
	        lerp: function (out, v1, v2, t) {
	            out[0] = v1[0] + t * (v2[0] - v1[0]);
	            out[1] = v1[1] + t * (v2[1] - v1[1]);
	            return out;
	        },

	        /**
	         * 矩阵左乘向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {Vector2} m
	         */
	        applyTransform: function (out, v, m) {
	            var x = v[0];
	            var y = v[1];
	            out[0] = m[0] * x + m[2] * y + m[4];
	            out[1] = m[1] * x + m[3] * y + m[5];
	            return out;
	        },
	        /**
	         * 求两个向量最小值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        min: function (out, v1, v2) {
	            out[0] = Math.min(v1[0], v2[0]);
	            out[1] = Math.min(v1[1], v2[1]);
	            return out;
	        },
	        /**
	         * 求两个向量最大值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        max: function (out, v1, v2) {
	            out[0] = Math.max(v1[0], v2[0]);
	            out[1] = Math.max(v1[1], v2[1]);
	            return out;
	        }
	    };

	    vector.length = vector.len;
	    vector.lengthSquare = vector.lenSquare;
	    vector.dist = vector.distance;
	    vector.distSquare = vector.distanceSquare;

	    module.exports = vector;



/***/ },
/* 118 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;
	    /**
	     * 3x2矩阵操作类
	     * @exports zrender/tool/matrix
	     */
	    var matrix = {
	        /**
	         * 创建一个单位矩阵
	         * @return {Float32Array|Array.<number>}
	         */
	        create : function() {
	            var out = new ArrayCtor(6);
	            matrix.identity(out);

	            return out;
	        },
	        /**
	         * 设置矩阵为单位矩阵
	         * @param {Float32Array|Array.<number>} out
	         */
	        identity : function(out) {
	            out[0] = 1;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            out[4] = 0;
	            out[5] = 0;
	            return out;
	        },
	        /**
	         * 复制矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m
	         */
	        copy: function(out, m) {
	            out[0] = m[0];
	            out[1] = m[1];
	            out[2] = m[2];
	            out[3] = m[3];
	            out[4] = m[4];
	            out[5] = m[5];
	            return out;
	        },
	        /**
	         * 矩阵相乘
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m1
	         * @param {Float32Array|Array.<number>} m2
	         */
	        mul : function (out, m1, m2) {
	            // Consider matrix.mul(m, m2, m);
	            // where out is the same as m2.
	            // So use temp variable to escape error.
	            var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	            var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	            var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	            var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	            out[0] = out0;
	            out[1] = out1;
	            out[2] = out2;
	            out[3] = out3;
	            out[4] = out4;
	            out[5] = out5;
	            return out;
	        },
	        /**
	         * 平移变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        translate : function(out, a, v) {
	            out[0] = a[0];
	            out[1] = a[1];
	            out[2] = a[2];
	            out[3] = a[3];
	            out[4] = a[4] + v[0];
	            out[5] = a[5] + v[1];
	            return out;
	        },
	        /**
	         * 旋转变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {number} rad
	         */
	        rotate : function(out, a, rad) {
	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];
	            var st = Math.sin(rad);
	            var ct = Math.cos(rad);

	            out[0] = aa * ct + ab * st;
	            out[1] = -aa * st + ab * ct;
	            out[2] = ac * ct + ad * st;
	            out[3] = -ac * st + ct * ad;
	            out[4] = ct * atx + st * aty;
	            out[5] = ct * aty - st * atx;
	            return out;
	        },
	        /**
	         * 缩放变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        scale : function(out, a, v) {
	            var vx = v[0];
	            var vy = v[1];
	            out[0] = a[0] * vx;
	            out[1] = a[1] * vy;
	            out[2] = a[2] * vx;
	            out[3] = a[3] * vy;
	            out[4] = a[4] * vx;
	            out[5] = a[5] * vy;
	            return out;
	        },
	        /**
	         * 求逆矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         */
	        invert : function(out, a) {

	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];

	            var det = aa * ad - ab * ac;
	            if (!det) {
	                return null;
	            }
	            det = 1.0 / det;

	            out[0] = ad * det;
	            out[1] = -ab * det;
	            out[2] = -ac * det;
	            out[3] = aa * det;
	            out[4] = (ac * aty - ad * atx) * det;
	            out[5] = (ab * atx - aa * aty) * det;
	            return out;
	        }
	    };

	    module.exports = matrix;



/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * 数值处理模块
	 * @module echarts/util/number
	 */



	    var number = {};

	    var RADIAN_EPSILON = 1e-4;

	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }

	    /**
	     * Linear mapping a value from domain to range
	     * @memberOf module:echarts/util/number
	     * @param  {(number|Array.<number>)} val
	     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	     * @param  {boolean} clamp
	     * @return {(number|Array.<number>}
	     */
	    number.linearMap = function (val, domain, range, clamp) {
	        var subDomain = domain[1] - domain[0];
	        var subRange = range[1] - range[0];

	        if (subDomain === 0) {
	            return subRange === 0
	                ? range[0]
	                : (range[0] + range[1]) / 2;
	        }

	        // Avoid accuracy problem in edge, such as
	        // 146.39 - 62.83 === 83.55999999999999.
	        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	        // It is a little verbose for efficiency considering this method
	        // is a hotspot.
	        if (clamp) {
	            if (subDomain > 0) {
	                if (val <= domain[0]) {
	                    return range[0];
	                }
	                else if (val >= domain[1]) {
	                    return range[1];
	                }
	            }
	            else {
	                if (val >= domain[0]) {
	                    return range[0];
	                }
	                else if (val <= domain[1]) {
	                    return range[1];
	                }
	            }
	        }
	        else {
	            if (val === domain[0]) {
	                return range[0];
	            }
	            if (val === domain[1]) {
	                return range[1];
	            }
	        }

	        return (val - domain[0]) / subDomain * subRange + range[0];
	    };

	    /**
	     * Convert a percent string to absolute number.
	     * Returns NaN if percent is not a valid string or number
	     * @memberOf module:echarts/util/number
	     * @param {string|number} percent
	     * @param {number} all
	     * @return {number}
	     */
	    number.parsePercent = function(percent, all) {
	        switch (percent) {
	            case 'center':
	            case 'middle':
	                percent = '50%';
	                break;
	            case 'left':
	            case 'top':
	                percent = '0%';
	                break;
	            case 'right':
	            case 'bottom':
	                percent = '100%';
	                break;
	        }
	        if (typeof percent === 'string') {
	            if (_trim(percent).match(/%$/)) {
	                return parseFloat(percent) / 100 * all;
	            }

	            return parseFloat(percent);
	        }

	        return percent == null ? NaN : +percent;
	    };

	    /**
	     * Fix rounding error of float numbers
	     * @param {number} x
	     * @param {number} [precision]
	     * @param {boolean} [returnStr]
	     * @return {number|string}
	     */
	    number.round = function (x, precision, returnStr) {
	        if (precision == null) {
	            precision = 10;
	        }
	        // Avoid range error
	        precision = Math.min(Math.max(0, precision), 20);
	        x = (+x).toFixed(precision);
	        return returnStr ? x : +x;
	    };

	    number.asc = function (arr) {
	        arr.sort(function (a, b) {
	            return a - b;
	        });
	        return arr;
	    };

	    /**
	     * Get precision
	     * @param {number} val
	     */
	    number.getPrecision = function (val) {
	        val = +val;
	        if (isNaN(val)) {
	            return 0;
	        }
	        // It is much faster than methods converting number to string as follows
	        //      var tmp = val.toString();
	        //      return tmp.length - 1 - tmp.indexOf('.');
	        // especially when precision is low
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    };

	    number.getPrecisionSafe = function (val) {
	        var str = val.toString();
	        var dotIndex = str.indexOf('.');
	        if (dotIndex < 0) {
	            return 0;
	        }
	        return str.length - 1 - dotIndex;
	    };

	    /**
	     * Minimal dicernible data precisioin according to a single pixel.
	     * @param {Array.<number>} dataExtent
	     * @param {Array.<number>} pixelExtent
	     * @return {number} precision
	     */
	    number.getPixelPrecision = function (dataExtent, pixelExtent) {
	        var log = Math.log;
	        var LN10 = Math.LN10;
	        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	        // toFixed() digits argument must be between 0 and 20.
	        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	        return !isFinite(precision) ? 20 : precision;
	    };

	    // Number.MAX_SAFE_INTEGER, ie do not support.
	    number.MAX_SAFE_INTEGER = 9007199254740991;

	    /**
	     * To 0 - 2 * PI, considering negative radian.
	     * @param {number} radian
	     * @return {number}
	     */
	    number.remRadian = function (radian) {
	        var pi2 = Math.PI * 2;
	        return (radian % pi2 + pi2) % pi2;
	    };

	    /**
	     * @param {type} radian
	     * @return {boolean}
	     */
	    number.isRadianAroundZero = function (val) {
	        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	    };

	    var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(?:Z|([\+\-]\d\d):?\d\d)?)?)?)?)?$/; // jshint ignore:line
	    var TIMEZONE_OFFSET = (new Date()).getTimezoneOffset();

	    /**
	     * @param {string|Date|number} value These values can be accepted:
	     *   + An instance of Date, represent a time in its own time zone.
	     *   + Or string in a subset of ISO 8601, only including:
	     *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
	     *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
	     *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
	     *     all of which will be treated as they reperent a time in UTC
	     *     if time zone is not specified.
	     *   + Or other string format, including:
	     *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
	     *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
	     *   + a timestamp, which represent a time in UTC.
	     * @return {Date} date
	     */
	    number.parseDate = function (value) {
	        if (value instanceof Date) {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            // Different browsers parse date in different way, so we parse it manually.
	            // Some other issues:
	            // new Date('1970-01-01') is UTC,
	            // new Date('1970/01/01') and new Date('1970-1-01') is local.
	            // See issue #3623
	            var match = TIME_REG.exec(value);

	            if (!match) {
	                // return Invalid Date.
	                return new Date(NaN);
	            }

	            // match[n] can only be string or undefined.
	            // But take care of '12' + 1 => '121'.
	            return new Date(
	                +match[1],
	                +(match[2] || 1) - 1,
	                +match[3] || 1,
	                +match[4] || 0,
	                +(match[5] || 0) - (match[8] || 0) * 60 - TIMEZONE_OFFSET,
	                +match[6] || 0,
	                +match[7] || 0
	            );
	        }
	        else if (value == null) {
	            return new Date(NaN);
	        }

	        return new Date(Math.round(value));
	    };

	    /**
	     * Quantity of a number. e.g. 0.1, 1, 10, 100
	     * @param  {number} val
	     * @return {number}
	     */
	    number.quantity = function (val) {
	        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));
	    };

	    // "Nice Numbers for Graph Labels" of Graphic Gems
	    /**
	     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	     * @param  {number} val
	     * @param  {boolean} round
	     * @return {number}
	     */
	    number.nice = function (val, round) {
	        var exp10 = number.quantity(val);
	        var f = val / exp10; // between 1 and 10
	        var nf;
	        if (round) {
	            if (f < 1.5) { nf = 1; }
	            else if (f < 2.5) { nf = 2; }
	            else if (f < 4) { nf = 3; }
	            else if (f < 7) { nf = 5; }
	            else { nf = 10; }
	        }
	        else {
	            if (f < 1) { nf = 1; }
	            else if (f < 2) { nf = 2; }
	            else if (f < 3) { nf = 3; }
	            else if (f < 5) { nf = 5; }
	            else { nf = 10; }
	        }
	        return nf * exp10;
	    };

	    /**
	     * Order intervals asc, and split them when overlap.
	     * expect(numberUtil.reformIntervals([
	     *     {interval: [18, 62], close: [1, 1]},
	     *     {interval: [-Infinity, -70], close: [0, 0]},
	     *     {interval: [-70, -26], close: [1, 1]},
	     *     {interval: [-26, 18], close: [1, 1]},
	     *     {interval: [62, 150], close: [1, 1]},
	     *     {interval: [106, 150], close: [1, 1]},
	     *     {interval: [150, Infinity], close: [0, 0]}
	     * ])).toEqual([
	     *     {interval: [-Infinity, -70], close: [0, 0]},
	     *     {interval: [-70, -26], close: [1, 1]},
	     *     {interval: [-26, 18], close: [0, 1]},
	     *     {interval: [18, 62], close: [0, 1]},
	     *     {interval: [62, 150], close: [0, 1]},
	     *     {interval: [150, Infinity], close: [0, 0]}
	     * ]);
	     * @param {Array.<Object>} list, where `close` mean open or close
	     *        of the interval, and Infinity can be used.
	     * @return {Array.<Object>} The origin list, which has been reformed.
	     */
	    number.reformIntervals = function (list) {
	        list.sort(function (a, b) {
	            return littleThan(a, b, 0) ? -1 : 1;
	        });

	        var curr = -Infinity;
	        var currClose = 1;
	        for (var i = 0; i < list.length;) {
	            var interval = list[i].interval;
	            var close = list[i].close;

	            for (var lg = 0; lg < 2; lg++) {
	                if (interval[lg] <= curr) {
	                    interval[lg] = curr;
	                    close[lg] = !lg ? 1 - currClose : 1;
	                }
	                curr = interval[lg];
	                currClose = close[lg];
	            }

	            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	                list.splice(i, 1);
	            }
	            else {
	                i++;
	            }
	        }

	        return list;

	        function littleThan(a, b, lg) {
	            return a.interval[lg] < b.interval[lg]
	                || (
	                    a.interval[lg] === b.interval[lg]
	                    && (
	                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))
	                        || (!lg && littleThan(a, b, 1))
	                    )
	                );
	        }
	    };

	    /**
	     * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	     * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	     * subtraction forces infinities to NaN
	     * @param {*} v
	     * @return {boolean}
	     */
	    number.isNumeric = function (v) {
	        return v - parseFloat(v) >= 0;
	    };

	    module.exports = number;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(75);
	    var numberUtil = __webpack_require__(119);
	    var textContain = __webpack_require__(121);

	    var formatUtil = {};
	    /**
	     * 每三位默认加,格式化
	     * @type {string|number} x
	     */
	    formatUtil.addCommas = function (x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,')
	               + (x.length > 1 ? ('.' + x[1]) : '');
	    };

	    /**
	     * @param {string} str
	     * @param {boolean} [upperCaseFirst=false]
	     * @return {string} str
	     */
	    formatUtil.toCamelCase = function (str, upperCaseFirst) {
	        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {
	            return group1.toUpperCase();
	        });

	        if (upperCaseFirst && str) {
	            str = str.charAt(0).toUpperCase() + str.slice(1);
	        }

	        return str;
	    };

	    /**
	     * Normalize css liked array configuration
	     * e.g.
	     *  3 => [3, 3, 3, 3]
	     *  [4, 2] => [4, 2, 4, 2]
	     *  [4, 3, 2] => [4, 3, 2, 3]
	     * @param {number|Array.<number>} val
	     */
	    formatUtil.normalizeCssArray = function (val) {
	        var len = val.length;
	        if (typeof (val) === 'number') {
	            return [val, val, val, val];
	        }
	        else if (len === 2) {
	            // vertical | horizontal
	            return [val[0], val[1], val[0], val[1]];
	        }
	        else if (len === 3) {
	            // top | horizontal | bottom
	            return [val[0], val[1], val[2], val[1]];
	        }
	        return val;
	    };

	    var encodeHTML = formatUtil.encodeHTML = function (source) {
	        return String(source)
	            .replace(/&/g, '&amp;')
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;')
	            .replace(/"/g, '&quot;')
	            .replace(/'/g, '&#39;');
	    };

	    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

	    var wrapVar = function (varName, seriesIdx) {
	        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	    };

	    /**
	     * Template formatter
	     * @param {string} tpl
	     * @param {Array.<Object>|Object} paramsList
	     * @param {boolean} [encode=false]
	     * @return {string}
	     */
	    formatUtil.formatTpl = function (tpl, paramsList, encode) {
	        if (!zrUtil.isArray(paramsList)) {
	            paramsList = [paramsList];
	        }
	        var seriesLen = paramsList.length;
	        if (!seriesLen) {
	            return '';
	        }

	        var $vars = paramsList[0].$vars || [];
	        for (var i = 0; i < $vars.length; i++) {
	            var alias = TPL_VAR_ALIAS[i];
	            var val = wrapVar(alias, 0);
	            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);
	        }
	        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	            for (var k = 0; k < $vars.length; k++) {
	                var val = paramsList[seriesIdx][$vars[k]];
	                tpl = tpl.replace(
	                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),
	                    encode ? encodeHTML(val) : val
	                );
	            }
	        }

	        return tpl;
	    };

	    /**
	     * simple Template formatter
	     *
	     * @param {string} tpl
	     * @param {Object} param
	     * @param {boolean} [encode=false]
	     * @return {string}
	     */
	    formatUtil.formatTplSimple = function (tpl, param, encode) {
	        zrUtil.each(param, function (value, key) {
	            tpl = tpl.replace(
	                '{' + key + '}',
	                encode ? encodeHTML(value) : value
	            );
	        });
	        return tpl;
	    };


	    /**
	     * @param {string} str
	     * @return {string}
	     * @inner
	     */
	    var s2d = function (str) {
	        return str < 10 ? ('0' + str) : str;
	    };

	    /**
	     * ISO Date format
	     * @param {string} tpl
	     * @param {number} value
	     * @param {boolean} [isLocal=false] Default use UTC
	     *  Why default UTC? In most case, time provided by user is
	     *  understood in UTC. For example, new Date('2012-01-01')
	     *  or a string '2012-01-01' or a timestamp. So it is
	     *  recommended to format time in UTC.
	     *  (see `echarts/util/number.js#parseDate`);
	     * @inner
	     */
	    formatUtil.formatTime = function (tpl, value, isLocal) {
	        if (tpl === 'week'
	            || tpl === 'month'
	            || tpl === 'quarter'
	            || tpl === 'half-year'
	            || tpl === 'year'
	        ) {
	            tpl = 'MM-dd\nyyyy';
	        }

	        var date = numberUtil.parseDate(value);
	        var utc = isLocal ? '' : 'UTC';
	        var y = date['get' + utc + 'FullYear']();
	        var M = date['get' + utc + 'Month']() + 1;
	        var d = date['get' + utc + 'Date']();
	        var h = date['get' + utc + 'Hours']();
	        var m = date['get' + utc + 'Minutes']();
	        var s = date['get' + utc + 'Seconds']();

	        tpl = tpl.replace('MM', s2d(M))
	            .toLowerCase()
	            .replace('yyyy', y)
	            .replace('yy', y % 100)
	            .replace('dd', s2d(d))
	            .replace('d', d)
	            .replace('hh', s2d(h))
	            .replace('h', h)
	            .replace('mm', s2d(m))
	            .replace('m', m)
	            .replace('ss', s2d(s))
	            .replace('s', s);

	        return tpl;
	    };

	    /**
	     * Capital first
	     * @param {string} str
	     * @return {string}
	     */
	    formatUtil.capitalFirst = function (str) {
	        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	    };

	    formatUtil.truncateText = textContain.truncateText;

	    module.exports = formatUtil;



/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	

	    var textWidthCache = {};
	    var textWidthCacheCounter = 0;
	    var TEXT_CACHE_MAX = 5000;

	    var util = __webpack_require__(75);
	    var BoundingRect = __webpack_require__(116);
	    var retrieve = util.retrieve;

	    function getTextWidth(text, textFont) {
	        var key = text + ':' + textFont;
	        if (textWidthCache[key]) {
	            return textWidthCache[key];
	        }

	        var textLines = (text + '').split('\n');
	        var width = 0;

	        for (var i = 0, l = textLines.length; i < l; i++) {
	            // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);
	        }

	        if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	            textWidthCacheCounter = 0;
	            textWidthCache = {};
	        }
	        textWidthCacheCounter++;
	        textWidthCache[key] = width;

	        return width;
	    }

	    function getTextRect(text, textFont, textAlign, textBaseline) {
	        var textLineLen = ((text || '') + '').split('\n').length;

	        var width = getTextWidth(text, textFont);
	        // FIXME 高度计算比较粗暴
	        var lineHeight = getTextWidth('国', textFont);
	        var height = textLineLen * lineHeight;

	        var rect = new BoundingRect(0, 0, width, height);
	        // Text has a special line height property
	        rect.lineHeight = lineHeight;

	        switch (textBaseline) {
	            case 'bottom':
	            case 'alphabetic':
	                rect.y -= lineHeight;
	                break;
	            case 'middle':
	                rect.y -= lineHeight / 2;
	                break;
	            // case 'hanging':
	            // case 'top':
	        }

	        // FIXME Right to left language
	        switch (textAlign) {
	            case 'end':
	            case 'right':
	                rect.x -= rect.width;
	                break;
	            case 'center':
	                rect.x -= rect.width / 2;
	                break;
	            // case 'start':
	            // case 'left':
	        }

	        return rect;
	    }

	    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {

	        var x = rect.x;
	        var y = rect.y;

	        var height = rect.height;
	        var width = rect.width;

	        var textHeight = textRect.height;

	        var lineHeight = textRect.lineHeight;
	        var halfHeight = height / 2 - textHeight / 2 + lineHeight;

	        var textAlign = 'left';

	        switch (textPosition) {
	            case 'left':
	                x -= distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'right':
	                x += distance + width;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'top':
	                x += width / 2;
	                y -= distance + textHeight - lineHeight;
	                textAlign = 'center';
	                break;
	            case 'bottom':
	                x += width / 2;
	                y += height + distance + lineHeight;
	                textAlign = 'center';
	                break;
	            case 'inside':
	                x += width / 2;
	                y += halfHeight;
	                textAlign = 'center';
	                break;
	            case 'insideLeft':
	                x += distance;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'insideRight':
	                x += width - distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'insideTop':
	                x += width / 2;
	                y += distance;
	                textAlign = 'center';
	                break;
	            case 'insideBottom':
	                x += width / 2;
	                y += height - textHeight - distance + lineHeight;
	                textAlign = 'center';
	                break;
	            case 'insideTopLeft':
	                x += distance;
	                y += distance;
	                textAlign = 'left';
	                break;
	            case 'insideTopRight':
	                x += width - distance;
	                y += distance;
	                textAlign = 'right';
	                break;
	            case 'insideBottomLeft':
	                x += distance;
	                y += height - textHeight - distance + lineHeight;
	                break;
	            case 'insideBottomRight':
	                x += width - distance;
	                y += height - textHeight - distance + lineHeight;
	                textAlign = 'right';
	                break;
	        }

	        return {
	            x: x,
	            y: y,
	            textAlign: textAlign,
	            textBaseline: 'alphabetic'
	        };
	    }

	    /**
	     * Show ellipsis if overflow.
	     *
	     * @param  {string} text
	     * @param  {string} containerWidth
	     * @param  {string} textFont
	     * @param  {number} [ellipsis='...']
	     * @param  {Object} [options]
	     * @param  {number} [options.maxIterations=3]
	     * @param  {number} [options.minChar=0] If truncate result are less
	     *                  then minChar, ellipsis will not show, which is
	     *                  better for user hint in some cases.
	     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	     * @return {string}
	     */
	    function truncateText(text, containerWidth, textFont, ellipsis, options) {
	        if (!containerWidth) {
	            return '';
	        }

	        options = options || {};

	        ellipsis = retrieve(ellipsis, '...');
	        var maxIterations = retrieve(options.maxIterations, 2);
	        var minChar = retrieve(options.minChar, 0);
	        // FIXME
	        // Other languages?
	        var cnCharWidth = getTextWidth('国', textFont);
	        // FIXME
	        // Consider proportional font?
	        var ascCharWidth = getTextWidth('a', textFont);
	        var placeholder = retrieve(options.placeholder, '');

	        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.
	        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.
	        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	            contentWidth -= ascCharWidth;
	        }

	        var ellipsisWidth = getTextWidth(ellipsis);
	        if (ellipsisWidth > contentWidth) {
	            ellipsis = '';
	            ellipsisWidth = 0;
	        }

	        contentWidth = containerWidth - ellipsisWidth;

	        var textLines = (text + '').split('\n');

	        for (var i = 0, len = textLines.length; i < len; i++) {
	            var textLine = textLines[i];
	            var lineWidth = getTextWidth(textLine, textFont);

	            if (lineWidth <= containerWidth) {
	                continue;
	            }

	            for (var j = 0;; j++) {
	                if (lineWidth <= contentWidth || j >= maxIterations) {
	                    textLine += ellipsis;
	                    break;
	                }

	                var subLength = j === 0
	                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)
	                    : lineWidth > 0
	                    ? Math.floor(textLine.length * contentWidth / lineWidth)
	                    : 0;

	                textLine = textLine.substr(0, subLength);
	                lineWidth = getTextWidth(textLine, textFont);
	            }

	            if (textLine === '') {
	                textLine = placeholder;
	            }

	            textLines[i] = textLine;
	        }

	        return textLines.join('\n');
	    }

	    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	        var width = 0;
	        var i = 0;
	        for (var len = text.length; i < len && width < contentWidth; i++) {
	            var charCode = text.charCodeAt(i);
	            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;
	        }
	        return i;
	    }

	    var textContain = {

	        getWidth: getTextWidth,

	        getBoundingRect: getTextRect,

	        adjustTextPositionOnRect: adjustTextPositionOnRect,

	        truncateText: truncateText,

	        measureText: function (text, textFont) {
	            var ctx = util.getContext();
	            ctx.font = textFont || '12px sans-serif';
	            return ctx.measureText(text);
	        }
	    };

	    module.exports = textContain;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * @module echarts-gl/core/ViewGL
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var echarts = __webpack_require__(2);

	var Scene = __webpack_require__(37);
	var ShadowMapPass = __webpack_require__(123);
	var PerspectiveCamera = __webpack_require__(44);
	var OrthographicCamera = __webpack_require__(58);
	var Matrix4 = __webpack_require__(16);
	var Vector3 = __webpack_require__(14);
	var Vector2 = __webpack_require__(22);

	var notifier = __webpack_require__(8);

	var EffectCompositor = __webpack_require__(126);
	var TemporalSuperSampling = __webpack_require__(149);
	var halton = __webpack_require__(150);

	/**
	 * @constructor
	 * @alias module:echarts-gl/core/ViewGL
	 * @param {string} [cameraType='perspective']
	 */
	function ViewGL(cameraType) {

	    cameraType = cameraType || 'perspective';

	    /**
	     * @type {module:echarts-gl/core/LayerGL}
	     */
	    this.layer = null;
	    /**
	     * @type {qtek.Scene}
	     */
	    this.scene = new Scene();

	    this.viewport = {
	        x: 0, y: 0, width: 0, height: 0
	    };

	    this.setCameraType(cameraType);

	    this._compositor = new EffectCompositor();

	    this._temporalSS = new TemporalSuperSampling();

	    this._shadowMapPass = new ShadowMapPass();

	    var pcfKernels = [];
	    var off = 0;
	    for (var i = 0; i < 30; i++) {
	        var pcfKernel = [];
	        for (var k = 0; k < 6; k++) {
	            pcfKernel.push(halton(off, 2) * 4.0 - 2.0);
	            pcfKernel.push(halton(off, 3) * 4.0 - 2.0);
	            off++;
	        }
	        pcfKernels.push(pcfKernel);
	    }
	    this._pcfKernels = pcfKernels;

	    this.scene.on('beforerender', function (renderer, scene, camera) {
	        if (this.needsTemporalSS()) {
	            this._temporalSS.jitterProjection(renderer, camera);
	        }
	    }, this);


	}

	/**
	 * Set camera type of group
	 * @param {string} cameraType 'perspective' | 'orthographic'
	 */
	ViewGL.prototype.setCameraType = function (cameraType) {
	    var oldCamera = this.camera;
	    oldCamera && oldCamera.update();
	    if (cameraType === 'perspective') {
	        if (!(this.camera instanceof PerspectiveCamera)) {
	            this.camera = new PerspectiveCamera();
	            if (oldCamera) {
	                this.camera.setLocalTransform(oldCamera.localTransform);
	            }
	        }
	    }
	    else {
	        if (!(this.camera instanceof OrthographicCamera)) {
	            this.camera = new OrthographicCamera();
	            if (oldCamera) {
	                this.camera.setLocalTransform(oldCamera.localTransform);
	            }
	        }
	    }
	};

	/**
	 * Set viewport of group
	 * @param {number} x Viewport left bottom x
	 * @param {number} y Viewport left bottom y
	 * @param {number} width Viewport height
	 * @param {number} height Viewport height
	 * @param {number} [dpr=1]
	 */
	ViewGL.prototype.setViewport = function (x, y, width, height, dpr) {
	    if (this.camera instanceof PerspectiveCamera) {
	        this.camera.aspect = width / height;
	    }
	    dpr = dpr || 1;

	    this.viewport.x = x;
	    this.viewport.y = y;
	    this.viewport.width = width;
	    this.viewport.height = height;
	    this.viewport.devicePixelRatio = dpr;

	    // Source and output of compositor use high dpr texture.
	    // But the intermediate texture of bloom, dof effects use fixed 1.0 dpr
	    this._compositor.resize(width * dpr, height * dpr);
	    this._temporalSS.resize(width * dpr, height * dpr);
	};

	/**
	 * If contain screen point x, y
	 * @param {number} x offsetX
	 * @param {number} y offsetY
	 * @return {boolean}
	 */
	ViewGL.prototype.containPoint = function (x, y) {
	    var viewport = this.viewport;
	    var height = this.layer.renderer.getHeight();
	    // Flip y;
	    y = height - y;
	    return x >= viewport.x && y >= viewport.y
	        && x <= viewport.x + viewport.width && y <= viewport.y + viewport.height;
	};

	/**
	 * Cast a ray
	 * @param {number} x offsetX
	 * @param {number} y offsetY
	 * @param {qtek.math.Ray} out
	 * @return {qtek.math.Ray}
	 */
	var ndc = new Vector2();
	ViewGL.prototype.castRay = function (x, y, out) {
	    var renderer = this.layer.renderer;

	    var oldViewport = renderer.viewport;
	    renderer.viewport = this.viewport;
	    renderer.screenToNDC(x, y, ndc);
	    this.camera.castRay(ndc, out);
	    renderer.viewport = oldViewport;

	    return out;
	};

	/**
	 * Prepare and update scene before render
	 */
	ViewGL.prototype.prepareRender = function () {
	    this.scene.update();
	    this.camera.update();

	    this._needsSortProgressively = false;
	    // If has any transparent mesh needs sort triangles progressively.
	    for (var i = 0; i < this.scene.transparentQueue.length; i++) {
	        var renderable = this.scene.transparentQueue[i];
	        var geometry = renderable.geometry;
	        if (geometry.needsSortVerticesProgressively && geometry.needsSortVerticesProgressively()) {
	            this._needsSortProgressively = true;
	        }
	        if (geometry.needsSortTrianglesProgressively && geometry.needsSortTrianglesProgressively()) {
	            this._needsSortProgressively = true;
	        }
	    }

	    this._frame = 0;
	    this._temporalSS.resetFrame();
	};

	ViewGL.prototype.render = function (renderer, accumulating) {
	    this._doRender(renderer, accumulating, this._frame);
	    this._frame++;
	};

	ViewGL.prototype.needsAccumulate = function () {
	    return this.needsTemporalSS() || this._needsSortProgressively;
	};

	ViewGL.prototype.needsTemporalSS = function () {
	    var enableTemporalSS = this._enableTemporalSS;
	    if (enableTemporalSS == 'auto') {
	        enableTemporalSS = this._enablePostEffect;
	    }
	    return enableTemporalSS;
	};

	ViewGL.prototype.hasDOF = function () {
	    return this._enableDOF;
	};

	ViewGL.prototype.isAccumulateFinished = function () {
	    return this.needsTemporalSS() ? this._temporalSS.isFinished()
	        : (this._frame > 20);
	};

	ViewGL.prototype._doRender = function (renderer, accumulating, accumFrame) {

	    var scene = this.scene;
	    var camera = this.camera;

	    var v3 = new Vector3();
	    var invWorldTransform = new Matrix4();
	    var cameraWorldPosition = camera.getWorldPosition();
	    accumFrame = accumFrame || 0;
	    // Sort transparent object.
	    for (var i = 0; i < scene.transparentQueue.length; i++) {
	        var renderable = scene.transparentQueue[i];
	        var geometry = renderable.geometry;
	        Matrix4.invert(invWorldTransform, renderable.worldTransform);
	        Vector3.transformMat4(v3, cameraWorldPosition, invWorldTransform);
	        if (geometry.needsSortTriangles && geometry.needsSortTriangles()) {
	            geometry.doSortTriangles(v3, accumFrame);
	        }
	        if (geometry.needsSortVertices && geometry.needsSortVertices()) {
	            geometry.doSortVertices(v3, accumFrame);
	        }
	    }

	    if (!accumulating) {
	        // Not render shadowmap pass in accumulating frame.
	        this._shadowMapPass.render(renderer, scene, camera, true);
	    }

	    this._updateShadowPCFKernel(accumFrame);

	    // Shadowmap will set clearColor.
	    renderer.gl.clearColor(0.0, 0.0, 0.0, 0.0);

	    if (this._enablePostEffect) {
	        var frameBuffer = this._compositor.getSourceFrameBuffer();
	        frameBuffer.bind(renderer);
	        renderer.gl.clear(renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT);
	        renderer.render(scene, camera, true);
	        frameBuffer.unbind(renderer);
	        if (this._enableSSAO) {
	            this._compositor.updateSSAO(renderer, camera, accumFrame);
	            this._compositor.blendSSAO(renderer, this._compositor.getSourceTexture());
	        }

	        if (this.needsTemporalSS() && accumulating) {
	            this._compositor.composite(renderer, camera, this._temporalSS.getSourceFrameBuffer(), accumFrame);
	            renderer.setViewport(this.viewport);
	            this._temporalSS.render(renderer);
	        }
	        else {
	            renderer.setViewport(this.viewport);
	            this._compositor.composite(renderer, camera, null, accumFrame);
	        }
	    }
	    else {
	        if (this.needsTemporalSS() && accumulating) {
	            var frameBuffer = this._temporalSS.getSourceFrameBuffer();
	            frameBuffer.bind(renderer);
	            renderer.saveClear();
	            renderer.clearBit = renderer.gl.DEPTH_BUFFER_BIT | renderer.gl.COLOR_BUFFER_BIT;
	            renderer.render(scene, camera, true);
	            renderer.restoreClear();
	            frameBuffer.unbind(renderer);

	            renderer.setViewport(this.viewport);
	            this._temporalSS.render(renderer);
	        }
	        else {
	            renderer.setViewport(this.viewport);
	            renderer.render(scene, camera, true);
	        }
	    }

	    // this._shadowMapPass.renderDebug(renderer);
	};

	ViewGL.prototype._updateShadowPCFKernel = function (frame) {
	    var pcfKernel = this._pcfKernels[frame % this._pcfKernels.length];
	    var opaqueQueue = this.scene.opaqueQueue;
	    for (var i = 0; i < opaqueQueue.length; i++) {
	        if (opaqueQueue[i].receiveShadow) {
	            opaqueQueue[i].material.set('pcfKernel', pcfKernel);
	            opaqueQueue[i].material.shader.define('fragment', 'PCF_KERNEL_SIZE', pcfKernel.length / 2);
	        }
	    }
	};

	ViewGL.prototype.dispose = function (renderer) {
	    this._compositor.dispose(renderer.gl);
	    this._temporalSS.dispose(renderer.gl);
	    this._shadowMapPass.dispose(renderer);
	};
	/**
	 * @param {module:echarts/Model} Post effect model
	 */
	ViewGL.prototype.setPostEffect = function (postEffectModel) {
	    var compositor = this._compositor;
	    this._enablePostEffect = postEffectModel.get('enable');
	    var bloomModel = postEffectModel.getModel('bloom');
	    var dofModel = postEffectModel.getModel('depthOfField');
	    var ssaoModel = postEffectModel.getModel('SSAO');
	    var fxaaModel = postEffectModel.getModel('FXAA');
	    fxaaModel.get('enable') ? compositor.enableFXAA() : compositor.disableFXAA();
	    bloomModel.get('enable') ? compositor.enableBloom() : compositor.disableBloom();
	    dofModel.get('enable') ? compositor.enableDOF() : compositor.disableDOF();

	    this._enableDOF = dofModel.get('enable');
	    this._enableSSAO = ssaoModel.get('enable');
	    this._enableSSAO ? compositor.enableSSAO() : compositor.disableSSAO();

	    compositor.setBloomIntensity(bloomModel.get('intensity'));
	    compositor.setSSAORadius(ssaoModel.get('radius'));
	    compositor.setSSAOQuality(ssaoModel.get('quality'));
	    compositor.setSSAOIntensity(ssaoModel.get('intensity'));

	    compositor.setDOFFocalDistance(dofModel.get('focalDistance'));
	    compositor.setDOFFocalRange(dofModel.get('focalRange'));
	    compositor.setDOFBlurSize(dofModel.get('blurRadius'));
	    compositor.setDOFFStop(dofModel.get('fstop'));
	};

	ViewGL.prototype.setDOFFocusOnPoint = function (depth) {
	    if (this._enablePostEffect) {

	        if (depth > this.camera.far || depth < this.camera.near) {
	            return;
	        }

	        this._compositor.setDOFFocalDistance(depth);
	        return true;
	    }
	};

	ViewGL.prototype.setTemporalSuperSampling = function (temporalSuperSamplingModel) {
	    this._enableTemporalSS = temporalSuperSamplingModel.get('enable');
	};

	ViewGL.prototype.isLinearSpace = function () {
	    return this._enablePostEffect;
	};

	// Proxies
	ViewGL.prototype.add = function (node3D) {
	    this.scene.add(node3D);
	};
	ViewGL.prototype.remove = function (node3D) {
	    this.scene.remove(node3D);
	};
	ViewGL.prototype.removeAll = function (node3D) {
	    this.scene.removeAll(node3D);
	};

	echarts.util.extend(ViewGL.prototype, notifier);

	module.exports = ViewGL;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Base = __webpack_require__(6);
	    var glenum = __webpack_require__(11);
	    var Vector3 = __webpack_require__(14);
	    var BoundingBox = __webpack_require__(13);
	    var Frustum = __webpack_require__(46);
	    var Matrix4 = __webpack_require__(16);
	    var Renderer = __webpack_require__(5);
	    var Shader = __webpack_require__(18);
	    var Light = __webpack_require__(38);
	    var Mesh = __webpack_require__(32);
	    var SpotLight = __webpack_require__(84);
	    var DirectionalLight = __webpack_require__(82);
	    var PointLight = __webpack_require__(83);
	    var shaderLibrary = __webpack_require__(17);
	    var Material = __webpack_require__(20);
	    var FrameBuffer = __webpack_require__(48);
	    var Texture = __webpack_require__(21);
	    var Texture2D = __webpack_require__(33);
	    var TextureCube = __webpack_require__(41);
	    var PerspectiveCamera = __webpack_require__(44);
	    var OrthoCamera = __webpack_require__(58);

	    var Pass = __webpack_require__(57);
	    var TexturePool = __webpack_require__(124);

	    var glMatrix = __webpack_require__(15);
	    var mat4 = glMatrix.mat4;
	    var vec3 = glMatrix.vec3;

	    var targets = ['px', 'nx', 'py', 'ny', 'pz', 'nz'];

	    Shader['import'](__webpack_require__(125));

	    /**
	     * Pass rendering shadow map.
	     *
	     * @constructor qtek.prePass.ShadowMap
	     * @extends qtek.core.Base
	     * @example
	     *     var shadowMapPass = new qtek.prePass.ShadowMap({
	     *         softShadow: qtek.prePass.ShadowMap.VSM
	     *     });
	     *     ...
	     *     animation.on('frame', function (frameTime) {
	     *         shadowMapPass.render(renderer, scene, camera);
	     *         renderer.render(scene, camera);
	     *     });
	     */
	    var ShadowMapPass = Base.extend(function () {
	        return /** @lends qtek.prePass.ShadowMap# */ {
	            /**
	             * Soft shadow technique.
	             * Can be {@link qtek.prePass.ShadowMap.PCF} or {@link qtek.prePass.ShadowMap.VSM}
	             * @type {number}
	             */
	            softShadow: ShadowMapPass.PCF,

	            /**
	             * Soft shadow blur size
	             * @type {number}
	             */
	            shadowBlur: 1.0,

	            lightFrustumBias: 2,

	            kernelPCF: new Float32Array([
	                1, 0,
	                1, 1,
	                -1, 1,
	                0, 1,
	                -1, 0,
	                -1, -1,
	                1, -1,
	                0, -1
	            ]),

	            _frameBuffer: new FrameBuffer(),

	            _textures: {},
	            _shadowMapNumber: {
	                'POINT_LIGHT': 0,
	                'DIRECTIONAL_LIGHT': 0,
	                'SPOT_LIGHT': 0
	            },

	            _meshMaterials: {},
	            _depthMaterials: {},
	            _depthShaders: {},
	            _distanceMaterials: {},

	            _opaqueCasters: [],
	            _receivers: [],
	            _lightsCastShadow: [],

	            _lightCameras: {},

	            _texturePool: new TexturePool()
	        };
	    }, function () {
	        // Gaussian filter pass for VSM
	        this._gaussianPassH = new Pass({
	            fragment: Shader.source('qtek.compositor.gaussian_blur')
	        });
	        this._gaussianPassV = new Pass({
	            fragment: Shader.source('qtek.compositor.gaussian_blur')
	        });
	        this._gaussianPassH.setUniform('blurSize', this.shadowBlur);
	        this._gaussianPassH.setUniform('blurDir', 0.0);
	        this._gaussianPassV.setUniform('blurSize', this.shadowBlur);
	        this._gaussianPassV.setUniform('blurDir', 1.0);

	        this._outputDepthPass = new Pass({
	            fragment: Shader.source('qtek.sm.debug_depth')
	        });
	    }, {
	        /**
	         * Render scene to shadow textures
	         * @param  {qtek.Renderer} renderer
	         * @param  {qtek.Scene} scene
	         * @param  {qtek.Camera} sceneCamera
	         * @param  {boolean} [notUpdateScene=false]
	         * @memberOf qtek.prePass.ShadowMap.prototype
	         */
	        render: function (renderer, scene, sceneCamera, notUpdateScene) {
	            this.trigger('beforerender', this, renderer, scene, sceneCamera);
	            this._renderShadowPass(renderer, scene, sceneCamera, notUpdateScene);
	            this.trigger('afterrender', this, renderer, scene, sceneCamera);
	        },

	        /**
	         * Debug rendering of shadow textures
	         * @param  {qtek.Renderer} renderer
	         * @param  {number} size
	         * @memberOf qtek.prePass.ShadowMap.prototype
	         */
	        renderDebug: function (renderer, size) {
	            renderer.saveClear();
	            var viewport = renderer.viewport;
	            var x = 0, y = 0;
	            var width = size || viewport.width / 4;
	            var height = width;
	            if (this.softShadow === ShadowMapPass.VSM) {
	                this._outputDepthPass.material.shader.define('fragment', 'USE_VSM');
	            }
	            else {
	                this._outputDepthPass.material.shader.unDefine('fragment', 'USE_VSM');
	            }
	            for (var name in this._textures) {
	                var texture = this._textures[name];
	                renderer.setViewport(x, y, width * texture.width / texture.height, height);
	                this._outputDepthPass.setUniform('depthMap', texture);
	                this._outputDepthPass.render(renderer);
	                x += width * texture.width / texture.height;
	            }
	            renderer.setViewport(viewport);
	            renderer.restoreClear();
	        },

	        _bindDepthMaterial: function (casters, bias, slopeScale) {
	            for (var i = 0; i < casters.length; i++) {
	                var mesh = casters[i];
	                var isShadowTransparent = mesh.material.shadowTransparentMap instanceof Texture2D;
	                var transparentMap = mesh.material.shadowTransparentMap;
	                var nJoints = mesh.joints && mesh.joints.length;
	                var matHashKey;
	                var shaderHashKey;
	                if (isShadowTransparent) {
	                    matHashKey = nJoints + '-' + transparentMap.__GUID__;
	                    shaderHashKey = nJoints + 's';
	                }
	                else {
	                    matHashKey = nJoints;
	                    shaderHashKey = nJoints;
	                }
	                var depthMaterial = this._depthMaterials[matHashKey];
	                var depthShader = this._depthShaders[shaderHashKey];

	                if (mesh.material !== depthMaterial) {  // Not binded yet
	                    if (!depthShader) {
	                        depthShader = new Shader({
	                            vertex: Shader.source('qtek.sm.depth.vertex'),
	                            fragment: Shader.source('qtek.sm.depth.fragment')
	                        });
	                        if (nJoints > 0) {
	                            depthShader.define('vertex', 'SKINNING');
	                            depthShader.define('vertex', 'JOINT_COUNT', nJoints);
	                        }
	                        if (isShadowTransparent) {
	                            depthShader.define('both', 'SHADOW_TRANSPARENT');
	                        }
	                        this._depthShaders[shaderHashKey] = depthShader;
	                    }
	                    if (!depthMaterial) {
	                        // Skinned mesh
	                        depthMaterial = new Material({
	                            shader: depthShader
	                        });
	                        this._depthMaterials[matHashKey] = depthMaterial;
	                    }

	                    mesh.material = depthMaterial;

	                    if (this.softShadow === ShadowMapPass.VSM) {
	                        depthShader.define('fragment', 'USE_VSM');
	                    }
	                    else {
	                        depthShader.unDefine('fragment', 'USE_VSM');
	                    }

	                    depthMaterial.setUniform('bias', bias);
	                    depthMaterial.setUniform('slopeScale', slopeScale);
	                    if (isShadowTransparent) {
	                        depthMaterial.set('shadowTransparentMap', transparentMap);
	                    }
	                }
	            }
	        },

	        _bindDistanceMaterial: function (casters, light) {
	            var lightPosition = light.getWorldPosition()._array;
	            for (var i = 0; i < casters.length; i++) {
	                var mesh = casters[i];
	                var nJoints = mesh.joints && mesh.joints.length;
	                var distanceMaterial = this._distanceMaterials[nJoints];
	                if (mesh.material !== distanceMaterial) {
	                    if (!distanceMaterial) {
	                        // Skinned mesh
	                        distanceMaterial = new Material({
	                            shader: new Shader({
	                                vertex: Shader.source('qtek.sm.distance.vertex'),
	                                fragment: Shader.source('qtek.sm.distance.fragment')
	                            })
	                        });
	                        if (nJoints > 0) {
	                            distanceMaterial.shader.define('vertex', 'SKINNING');
	                            distanceMaterial.shader.define('vertex', 'JOINT_COUNT', nJoints);
	                        }
	                        this._distanceMaterials[nJoints] = distanceMaterial;
	                    }
	                    mesh.material = distanceMaterial;

	                    if (this.softShadow === ShadowMapPass.VSM) {
	                        distanceMaterial.shader.define('fragment', 'USE_VSM');
	                    }
	                    else {
	                        distanceMaterial.shader.unDefine('fragment', 'USE_VSM');
	                    }
	                }

	                distanceMaterial.set('lightPosition', lightPosition);
	                distanceMaterial.set('range', light.range);
	            }
	        },

	        saveMaterial: function (casters) {
	            for (var i = 0; i < casters.length; i++) {
	                var mesh = casters[i];
	                this._meshMaterials[mesh.__GUID__] = mesh.material;
	            }
	        },

	        restoreMaterial: function (casters) {
	            for (var i = 0; i < casters.length; i++) {
	                var mesh = casters[i];
	                var material = this._meshMaterials[mesh.__GUID__];
	                // In case restoreMaterial when no shadowMap is rendered
	                if (material) {
	                    mesh.material = material;
	                }
	            }
	        },

	        _updateCasterAndReceiver: function (mesh) {
	            if (mesh.castShadow) {
	                this._opaqueCasters.push(mesh);
	            }
	            if (mesh.receiveShadow) {
	                this._receivers.push(mesh);
	                mesh.material.set('shadowEnabled', 1);

	                mesh.material.set('pcfKernel', this.kernelPCF);
	            }
	            else {
	                mesh.material.set('shadowEnabled', 0);
	            }

	            var shader = mesh.material.shader;
	            if (this.softShadow === ShadowMapPass.VSM) {
	                shader.define('fragment', 'USE_VSM');
	                shader.unDefine('fragment', 'PCF_KERNEL_SIZE');
	            }
	            else {
	                shader.unDefine('fragment', 'USE_VSM');
	                var kernelPCF = this.kernelPCF;
	                if (kernelPCF && kernelPCF.length) {
	                    shader.define('fragment', 'PCF_KERNEL_SIZE', kernelPCF.length / 2);
	                }
	                else {
	                    shader.unDefine('fragment', 'PCF_KERNEL_SIZE');
	                }
	            }
	        },

	        _update: function (scene) {
	            for (var i = 0; i < scene.opaqueQueue.length; i++) {
	                this._updateCasterAndReceiver(scene.opaqueQueue[i]);
	            }
	            for (var i = 0; i < scene.transparentQueue.length; i++) {
	                // TODO Transparent object receive shadow will be very slow
	                // in stealth demo, still not find the reason
	                this._updateCasterAndReceiver(scene.transparentQueue[i]);
	            }
	            for (var i = 0; i < scene.lights.length; i++) {
	                var light = scene.lights[i];
	                if (light.castShadow) {
	                    this._lightsCastShadow.push(light);
	                }
	            }
	        },

	        _renderShadowPass: function (renderer, scene, sceneCamera, notUpdateScene) {
	            // reset
	            for (var name in this._shadowMapNumber) {
	                this._shadowMapNumber[name] = 0;
	            }
	            this._lightsCastShadow.length = 0;
	            this._opaqueCasters.length = 0;
	            this._receivers.length = 0;

	            var _gl = renderer.gl;

	            if (!notUpdateScene) {
	                scene.update();
	            }

	            this._update(scene);

	            if (!this._lightsCastShadow.length) {
	                return;
	            }

	            _gl.enable(_gl.DEPTH_TEST);
	            _gl.depthMask(true);
	            _gl.disable(_gl.BLEND);

	            // Clear with high-z, so the part not rendered will not been shadowed
	            // TODO
	            // TODO restore
	            _gl.clearColor(1.0, 1.0, 1.0, 1.0);

	            // Shadow uniforms
	            var spotLightShadowMaps = [];
	            var spotLightMatrices = [];
	            var directionalLightShadowMaps = [];
	            var directionalLightMatrices = [];
	            var shadowCascadeClips = [];
	            var pointLightShadowMaps = [];

	            this.saveMaterial(this._opaqueCasters);

	            var dirLightHasCascade;
	            // Create textures for shadow map
	            for (var i = 0; i < this._lightsCastShadow.length; i++) {
	                var light = this._lightsCastShadow[i];
	                if (light instanceof DirectionalLight) {

	                    if (dirLightHasCascade) {
	                        console.warn('Only one dire light supported with shadow cascade');
	                        continue;
	                    }
	                    if (light.shadowCascade > 1) {
	                        dirLightHasCascade = light;

	                        if (light.shadowCascade > 4) {
	                            console.warn('Support at most 4 cascade');
	                            continue;
	                        }
	                    }

	                    this.renderDirectionalLightShadow(
	                        renderer,
	                        scene,
	                        sceneCamera,
	                        light,
	                        this._opaqueCasters,
	                        shadowCascadeClips,
	                        directionalLightMatrices,
	                        directionalLightShadowMaps
	                    );
	                }
	                else if (light instanceof SpotLight) {
	                    this.renderSpotLightShadow(
	                        renderer,
	                        light,
	                        this._opaqueCasters,
	                        spotLightMatrices,
	                        spotLightShadowMaps
	                    );
	                }
	                else if (light instanceof PointLight) {
	                    this.renderPointLightShadow(
	                        renderer,
	                        light,
	                        this._opaqueCasters,
	                        pointLightShadowMaps
	                    );
	                }

	                this._shadowMapNumber[light.type]++;
	            }
	            this.restoreMaterial(this._opaqueCasters);

	            var shadowCascadeClipsNear = shadowCascadeClips.slice();
	            var shadowCascadeClipsFar = shadowCascadeClips.slice();
	            shadowCascadeClipsNear.pop();
	            shadowCascadeClipsFar.shift();

	            // Iterate from far to near
	            shadowCascadeClipsNear.reverse();
	            shadowCascadeClipsFar.reverse();
	            // directionalLightShadowMaps.reverse();
	            directionalLightMatrices.reverse();

	            function getSize(texture) {
	                return texture.height;
	            }
	            var spotLightShadowMapSizes = spotLightShadowMaps.map(getSize);
	            var directionalLightShadowMapSizes = directionalLightShadowMaps.map(getSize);

	            var shadowDefineUpdatedShader = {};

	            for (var i = 0; i < this._receivers.length; i++) {
	                var mesh = this._receivers[i];
	                var material = mesh.material;

	                var shader = material.shader;

	                if (!shadowDefineUpdatedShader[shader.__GUID__]) {
	                    var shaderNeedsUpdate = false;
	                    for (var lightType in this._shadowMapNumber) {
	                        var number = this._shadowMapNumber[lightType];
	                        var key = lightType + '_SHADOWMAP_COUNT';

	                        if (shader.fragmentDefines[key] !== number && number > 0) {
	                            shader.fragmentDefines[key] = number;
	                            shaderNeedsUpdate = true;
	                        }
	                    }
	                    if (shaderNeedsUpdate) {
	                        shader.dirty();
	                    }
	                    if (dirLightHasCascade) {
	                        shader.define('fragment', 'SHADOW_CASCADE', dirLightHasCascade.shadowCascade);
	                    }
	                    else {
	                        shader.unDefine('fragment', 'SHADOW_CASCADE');
	                    }
	                    shadowDefineUpdatedShader[shader.__GUID__] = true;
	                }

	                if (spotLightShadowMaps.length > 0) {
	                    material.setUniform('spotLightShadowMaps', spotLightShadowMaps);
	                    material.setUniform('spotLightMatrices', spotLightMatrices);
	                    material.setUniform('spotLightShadowMapSizes', spotLightShadowMapSizes);
	                }
	                if (directionalLightShadowMaps.length > 0) {
	                    material.setUniform('directionalLightShadowMaps', directionalLightShadowMaps);
	                    if (dirLightHasCascade) {
	                        material.setUniform('shadowCascadeClipsNear', shadowCascadeClipsNear);
	                        material.setUniform('shadowCascadeClipsFar', shadowCascadeClipsFar);
	                    }
	                    material.setUniform('directionalLightMatrices', directionalLightMatrices);
	                    material.setUniform('directionalLightShadowMapSizes', directionalLightShadowMapSizes);
	                }
	                if (pointLightShadowMaps.length > 0) {
	                    material.setUniform('pointLightShadowMaps', pointLightShadowMaps);
	                }
	            }
	        },

	        renderDirectionalLightShadow: (function () {

	            var splitFrustum = new Frustum();
	            var splitProjMatrix = new Matrix4();
	            var cropBBox = new BoundingBox();
	            var cropMatrix = new Matrix4();
	            var lightViewMatrix = new Matrix4();
	            var lightViewProjMatrix = new Matrix4();
	            var lightProjMatrix = new Matrix4();

	            return function (renderer, scene, sceneCamera, light, casters, shadowCascadeClips, directionalLightMatrices, directionalLightShadowMaps) {

	                var shadowBias = light.shadowBias;
	                this._bindDepthMaterial(casters, shadowBias, light.shadowSlopeScale);

	                casters.sort(Renderer.opaqueSortFunc);

	                // Considering moving speed since the bounding box is from last frame
	                // TODO: add a bias
	                var clippedFar = Math.min(-scene.viewBoundingBoxLastFrame.min.z, sceneCamera.far);
	                var clippedNear = Math.max(-scene.viewBoundingBoxLastFrame.max.z, sceneCamera.near);

	                var lightCamera = this._getDirectionalLightCamera(light, scene, sceneCamera);

	                var lvpMat4Arr = lightViewProjMatrix._array;
	                lightProjMatrix.copy(lightCamera.projectionMatrix);
	                mat4.invert(lightViewMatrix._array, lightCamera.worldTransform._array);
	                mat4.multiply(lightViewMatrix._array, lightViewMatrix._array, sceneCamera.worldTransform._array);
	                mat4.multiply(lvpMat4Arr, lightProjMatrix._array, lightViewMatrix._array);

	                var clipPlanes = [];
	                var rad = sceneCamera.fov / 180 * Math.PI;
	                var aspect = sceneCamera.aspect;

	                var scaleZ = (sceneCamera.near + sceneCamera.far) / (sceneCamera.near - sceneCamera.far);
	                var offsetZ = 2 * sceneCamera.near * sceneCamera.far / (sceneCamera.near - sceneCamera.far);
	                for (var i = 0; i <= light.shadowCascade; i++) {
	                    var clog = clippedNear * Math.pow(clippedFar / clippedNear, i / light.shadowCascade);
	                    var cuni = clippedNear + (clippedFar - clippedNear) * i / light.shadowCascade;
	                    var c = clog * light.cascadeSplitLogFactor + cuni * (1 - light.cascadeSplitLogFactor);
	                    clipPlanes.push(c);
	                    shadowCascadeClips.push(-(-c * scaleZ + offsetZ) / -c);
	                }
	                var texture = this._getTexture(light, light.shadowCascade);
	                directionalLightShadowMaps.push(texture);

	                var viewport = renderer.viewport;

	                var _gl = renderer.gl;
	                this._frameBuffer.attach(texture);
	                this._frameBuffer.bind(renderer);
	                _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

	                for (var i = 0; i < light.shadowCascade; i++) {
	                    // Get the splitted frustum
	                    var nearPlane = clipPlanes[i];
	                    var farPlane = clipPlanes[i+1];
	                    mat4.perspective(splitProjMatrix._array, rad, aspect, nearPlane, farPlane);
	                    splitFrustum.setFromProjection(splitProjMatrix);
	                    splitFrustum.getTransformedBoundingBox(cropBBox, lightViewMatrix);
	                    cropBBox.applyProjection(lightProjMatrix);
	                    var _min = cropBBox.min._array;
	                    var _max = cropBBox.max._array;
	                    cropMatrix.ortho(_min[0], _max[0], _min[1], _max[1], 1, -1);
	                    lightCamera.projectionMatrix.multiplyLeft(cropMatrix);

	                    var shadowSize = light.shadowResolution || 512;

	                    // Reversed, left to right => far to near
	                    renderer.setViewport((light.shadowCascade - i - 1) * shadowSize, 0, shadowSize, shadowSize, 1);

	                    // Set bias seperately for each cascade
	                    // TODO Simply divide 1.5 ?
	                    for (var key in this._depthMaterials) {
	                        this._depthMaterials[key].set('shadowBias', shadowBias);
	                    }

	                    renderer.renderQueue(casters, lightCamera);

	                    // Filter for VSM
	                    if (this.softShadow === ShadowMapPass.VSM) {
	                        this._gaussianFilter(renderer, texture, texture.width);
	                    }

	                    var matrix = new Matrix4();
	                    matrix.copy(lightCamera.worldTransform)
	                        .invert()
	                        .multiplyLeft(lightCamera.projectionMatrix);

	                    directionalLightMatrices.push(matrix._array);

	                    lightCamera.projectionMatrix.copy(lightProjMatrix);
	                }

	                this._frameBuffer.unbind(renderer);

	                renderer.setViewport(viewport);
	            };
	        })(),

	        renderSpotLightShadow: function (renderer, light, casters, spotLightMatrices, spotLightShadowMaps) {

	            this._bindDepthMaterial(casters, light.shadowBias, light.shadowSlopeScale);
	            casters.sort(Renderer.opaqueSortFunc);

	            var texture = this._getTexture(light);
	            var camera = this._getSpotLightCamera(light);
	            var _gl = renderer.gl;

	            this._frameBuffer.attach(texture);
	            this._frameBuffer.bind(renderer);

	            _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

	            renderer.renderQueue(casters, camera);

	            this._frameBuffer.unbind(renderer);

	            // Filter for VSM
	            if (this.softShadow === ShadowMapPass.VSM) {
	                this._gaussianFilter(renderer, texture, texture.width);
	            }

	            var matrix = new Matrix4();
	            matrix.copy(camera.worldTransform)
	                .invert()
	                .multiplyLeft(camera.projectionMatrix);

	            spotLightShadowMaps.push(texture);
	            spotLightMatrices.push(matrix._array);
	        },

	        renderPointLightShadow: function (renderer, light, casters, pointLightShadowMaps) {
	            var texture = this._getTexture(light);
	            var _gl = renderer.gl;
	            pointLightShadowMaps.push(texture);

	            this._bindDistanceMaterial(casters, light);
	            for (var i = 0; i < 6; i++) {
	                var target = targets[i];
	                var camera = this._getPointLightCamera(light, target);

	                this._frameBuffer.attach(texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
	                this._frameBuffer.bind(renderer);
	                _gl.clear(_gl.COLOR_BUFFER_BIT | _gl.DEPTH_BUFFER_BIT);

	                renderer.renderQueue(casters, camera);
	            }
	                this._frameBuffer.unbind(renderer);
	        },

	        _gaussianFilter: function (renderer, texture, size) {
	            var parameter = {
	                width: size,
	                height: size,
	                type: Texture.FLOAT
	            };
	            var _gl = renderer.gl;
	            var tmpTexture = this._texturePool.get(parameter);

	            this._frameBuffer.attach(tmpTexture);
	            this._frameBuffer.bind(renderer);
	            this._gaussianPassH.setUniform('texture', texture);
	            this._gaussianPassH.setUniform('textureWidth', size);
	            this._gaussianPassH.render(renderer);

	            this._frameBuffer.attach(texture);
	            this._gaussianPassV.setUniform('texture', tmpTexture);
	            this._gaussianPassV.setUniform('textureHeight', size);
	            this._gaussianPassV.render(renderer);
	            this._frameBuffer.unbind(renderer);

	            this._texturePool.put(tmpTexture);
	        },

	        _getTexture: function (light, cascade) {
	            var key = light.__GUID__;
	            var texture = this._textures[key];
	            var resolution = light.shadowResolution || 512;
	            cascade = cascade || 1;
	            if (!texture) {
	                if (light instanceof PointLight) {
	                    texture = new TextureCube();
	                }
	                else {
	                    texture = new Texture2D();
	                }
	                // At most 4 cascade
	                // TODO share with height ?
	                texture.width = resolution * cascade;
	                texture.height = resolution;
	                if (this.softShadow === ShadowMapPass.VSM) {
	                    texture.type = Texture.FLOAT;
	                    texture.anisotropic = 4;
	                }
	                else {
	                    texture.minFilter = glenum.NEAREST;
	                    texture.magFilter = glenum.NEAREST;
	                    texture.useMipmap = false;
	                }
	                this._textures[key] = texture;
	            }

	            return texture;
	        },

	        _getPointLightCamera: function (light, target) {
	            if (!this._lightCameras.point) {
	                this._lightCameras.point = {
	                    px: new PerspectiveCamera(),
	                    nx: new PerspectiveCamera(),
	                    py: new PerspectiveCamera(),
	                    ny: new PerspectiveCamera(),
	                    pz: new PerspectiveCamera(),
	                    nz: new PerspectiveCamera()
	                };
	            }
	            var camera = this._lightCameras.point[target];

	            camera.far = light.range;
	            camera.fov = 90;
	            camera.position.set(0, 0, 0);
	            switch (target) {
	                case 'px':
	                    camera.lookAt(Vector3.POSITIVE_X, Vector3.NEGATIVE_Y);
	                    break;
	                case 'nx':
	                    camera.lookAt(Vector3.NEGATIVE_X, Vector3.NEGATIVE_Y);
	                    break;
	                case 'py':
	                    camera.lookAt(Vector3.POSITIVE_Y, Vector3.POSITIVE_Z);
	                    break;
	                case 'ny':
	                    camera.lookAt(Vector3.NEGATIVE_Y, Vector3.NEGATIVE_Z);
	                    break;
	                case 'pz':
	                    camera.lookAt(Vector3.POSITIVE_Z, Vector3.NEGATIVE_Y);
	                    break;
	                case 'nz':
	                    camera.lookAt(Vector3.NEGATIVE_Z, Vector3.NEGATIVE_Y);
	                    break;
	            }
	            light.getWorldPosition(camera.position);
	            camera.update();

	            return camera;
	        },

	        _getDirectionalLightCamera: (function () {
	            var lightViewMatrix = new Matrix4();
	            var sceneViewBoundingBox = new BoundingBox();
	            var lightViewBBox = new BoundingBox();
	            // Camera of directional light will be adjusted
	            // to contain the view frustum and scene bounding box as tightly as possible
	            return function (light, scene, sceneCamera) {
	                if (!this._lightCameras.directional) {
	                    this._lightCameras.directional = new OrthoCamera();
	                }
	                var camera = this._lightCameras.directional;

	                sceneViewBoundingBox.copy(scene.viewBoundingBoxLastFrame);
	                sceneViewBoundingBox.intersection(sceneCamera.frustum.boundingBox);
	                // Move to the center of frustum(in world space)
	                camera.position
	                    .copy(sceneViewBoundingBox.min)
	                    .add(sceneViewBoundingBox.max)
	                    .scale(0.5)
	                    .transformMat4(sceneCamera.worldTransform);
	                camera.rotation.copy(light.rotation);
	                camera.scale.copy(light.scale);
	                camera.updateLocalTransform();
	                camera.updateWorldTransform();

	                // Transform to light view space
	                lightViewMatrix
	                    .copy(camera.worldTransform)
	                    .invert()
	                    .multiply(sceneCamera.worldTransform);

	                // FIXME boundingBox becomes much larger after transformd.
	                lightViewBBox.copy(sceneViewBoundingBox).applyTransform(lightViewMatrix);
	                var min = lightViewBBox.min._array;
	                var max = lightViewBBox.max._array;

	                // Move camera to adjust the near to 0
	                // TODO: some scene object cast shadow in view will also be culled
	                // add a bias?
	                camera.position.scaleAndAdd(camera.worldTransform.z, max[2] + this.lightFrustumBias);
	                camera.near = 0;
	                camera.far = -min[2] + max[2] + this.lightFrustumBias;
	                camera.left = min[0] - this.lightFrustumBias;
	                camera.right = max[0] + this.lightFrustumBias;
	                camera.top = max[1] + this.lightFrustumBias;
	                camera.bottom = min[1] - this.lightFrustumBias;
	                camera.update(true);

	                return camera;
	            };
	        })(),

	        _getSpotLightCamera: function (light) {
	            if (!this._lightCameras.spot) {
	                this._lightCameras.spot = new PerspectiveCamera();
	            }
	            var camera = this._lightCameras.spot;
	            // Update properties
	            camera.fov = light.penumbraAngle * 2;
	            camera.far = light.range;
	            camera.worldTransform.copy(light.worldTransform);
	            camera.updateProjectionMatrix();
	            mat4.invert(camera.viewMatrix._array, camera.worldTransform._array);

	            return camera;
	        },

	        /**
	         * @param  {qtek.Renderer|WebGLRenderingContext} [renderer]
	         * @memberOf qtek.prePass.ShadowMap.prototype
	         */
	        // PENDING Renderer or WebGLRenderingContext
	        dispose: function (renderer) {
	            var _gl = renderer.gl || renderer;

	            for (var guid in this._depthMaterials) {
	                var mat = this._depthMaterials[guid];
	                mat.dispose(_gl);
	            }
	            for (var guid in this._distanceMaterials) {
	                var mat = this._distanceMaterials[guid];
	                mat.dispose(_gl);
	            }

	            if (this._frameBuffer) {
	                this._frameBuffer.dispose(_gl);
	            }

	            for (var name in this._textures) {
	                this._textures[name].dispose(_gl);
	            }

	            this._texturePool.clear(renderer.gl);

	            this._depthMaterials = {};
	            this._distanceMaterials = {};
	            this._textures = {};
	            this._lightCameras = {};
	            this._shadowMapNumber = {
	                'POINT_LIGHT': 0,
	                'DIRECTIONAL_LIGHT': 0,
	                'SPOT_LIGHT': 0
	            };
	            this._meshMaterials = {};

	            for (var i = 0; i < this._receivers.length; i++) {
	                var mesh = this._receivers[i];
	                // Mesh may be disposed
	                if (mesh.material && mesh.material.shader) {
	                    var material = mesh.material;
	                    var shader = material.shader;
	                    shader.unDefine('fragment', 'POINT_LIGHT_SHADOW_COUNT');
	                    shader.unDefine('fragment', 'DIRECTIONAL_LIGHT_SHADOW_COUNT');
	                    shader.unDefine('fragment', 'AMBIENT_LIGHT_SHADOW_COUNT');
	                    material.set('shadowEnabled', 0);
	                }
	            }

	            this._opaqueCasters = [];
	            this._receivers = [];
	            this._lightsCastShadow = [];
	        }
	    });

	    /**
	     * @name qtek.prePass.ShadowMap.VSM
	     * @type {number}
	     */
	    ShadowMapPass.VSM = 1;

	    /**
	     * @name qtek.prePass.ShadowMap.PCF
	     * @type {number}
	     */
	    ShadowMapPass.PCF = 2;

	    module.exports = ShadowMapPass;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Texture2D = __webpack_require__(33);
	    var glenum = __webpack_require__(11);
	    var util = __webpack_require__(9);

	    var TexturePool = function () {

	        this._pool = {};

	        this._allocatedTextures = [];
	    };

	    TexturePool.prototype = {

	        constructor: TexturePool,

	        get: function (parameters) {
	            var key = generateKey(parameters);
	            if (!this._pool.hasOwnProperty(key)) {
	                this._pool[key] = [];
	            }
	            var list = this._pool[key];
	            if (!list.length) {
	                var texture = new Texture2D(parameters);
	                this._allocatedTextures.push(texture);
	                return texture;
	            }
	            return list.pop();
	        },

	        put: function (texture) {
	            var key = generateKey(texture);
	            if (!this._pool.hasOwnProperty(key)) {
	                this._pool[key] = [];
	            }
	            var list = this._pool[key];
	            list.push(texture);
	        },

	        clear: function (gl) {
	            for (var i = 0; i < this._allocatedTextures.length; i++) {
	                this._allocatedTextures[i].dispose(gl);
	            }
	            this._pool = {};
	            this._allocatedTextures = [];
	        }
	    };

	    var defaultParams = {
	        width: 512,
	        height: 512,
	        type: glenum.UNSIGNED_BYTE,
	        format: glenum.RGBA,
	        wrapS: glenum.CLAMP_TO_EDGE,
	        wrapT: glenum.CLAMP_TO_EDGE,
	        minFilter: glenum.LINEAR_MIPMAP_LINEAR,
	        magFilter: glenum.LINEAR,
	        useMipmap: true,
	        anisotropic: 1,
	        flipY: true,
	        unpackAlignment: 4,
	        premultiplyAlpha: false
	    };

	    var defaultParamPropList = Object.keys(defaultParams);

	    function generateKey(parameters) {
	        util.defaultsWithPropList(parameters, defaultParams, defaultParamPropList);
	        fallBack(parameters);

	        var key = '';
	        for (var i = 0; i < defaultParamPropList.length; i++) {
	            var name = defaultParamPropList[i];
	            var chunk = parameters[name].toString();
	            key += chunk;
	        }
	        return key;
	    }

	    function fallBack(target) {

	        var IPOT = isPowerOfTwo(target.width, target.height);

	        if (target.format === glenum.DEPTH_COMPONENT) {
	            target.useMipmap = false;
	        }

	        if (!IPOT || !target.useMipmap) {
	            if (target.minFilter == glenum.NEAREST_MIPMAP_NEAREST ||
	                target.minFilter == glenum.NEAREST_MIPMAP_LINEAR) {
	                target.minFilter = glenum.NEAREST;
	            } else if (
	                target.minFilter == glenum.LINEAR_MIPMAP_LINEAR ||
	                target.minFilter == glenum.LINEAR_MIPMAP_NEAREST
	            ) {
	                target.minFilter = glenum.LINEAR;
	            }

	            target.wrapS = glenum.CLAMP_TO_EDGE;
	            target.wrapT = glenum.CLAMP_TO_EDGE;
	        }
	    }

	    function isPowerOfTwo(width, height) {
	        return (width & (width-1)) === 0 &&
	                (height & (height-1)) === 0;
	    }

	    module.exports = TexturePool;


/***/ },
/* 125 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.sm.depth.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec3 position : POSITION;\n\n#ifdef SHADOW_TRANSPARENT\nattribute vec2 texcoord : TEXCOORD_0;\n#endif\n\n#ifdef SKINNING\nattribute vec3 weight : WEIGHT;\nattribute vec4 joint : JOINT;\n\nuniform mat4 skinMatrix[JOINT_COUNT] : SKIN_MATRIX;\n#endif\n\nvarying vec4 v_ViewPosition;\n\n#ifdef SHADOW_TRANSPARENT\nvarying vec2 v_Texcoord;\n#endif\n\nvoid main(){\n\n    vec3 skinnedPosition = position;\n\n#ifdef SKINNING\n\n    @import qtek.chunk.skin_matrix\n\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n\n    v_ViewPosition = worldViewProjection * vec4(skinnedPosition, 1.0);\n    gl_Position = v_ViewPosition;\n\n#ifdef SHADOW_TRANSPARENT\n    v_Texcoord = texcoord;\n#endif\n}\n@end\n\n@export qtek.sm.depth.fragment\n\nvarying vec4 v_ViewPosition;\n\n#ifdef SHADOW_TRANSPARENT\nvarying vec2 v_Texcoord;\n#endif\n\nuniform float bias : 0.001;\nuniform float slopeScale : 1.0;\n\n#ifdef SHADOW_TRANSPARENT\nuniform sampler2D transparentMap;\n#endif\n\n@import qtek.util.encode_float\n\nvoid main(){\n            float depth = v_ViewPosition.z / v_ViewPosition.w;\n    \n#ifdef USE_VSM\n    depth = depth * 0.5 + 0.5;\n    float moment1 = depth;\n    float moment2 = depth * depth;\n\n        float dx = dFdx(depth);\n    float dy = dFdy(depth);\n    moment2 += 0.25*(dx*dx+dy*dy);\n\n    gl_FragColor = vec4(moment1, moment2, 0.0, 1.0);\n#else\n        float dx = dFdx(depth);\n    float dy = dFdy(depth);\n    depth += sqrt(dx*dx + dy*dy) * slopeScale + bias;\n\n#ifdef SHADOW_TRANSPARENT\n    if (texture2D(transparentMap, v_Texcoord).a <= 0.1) {\n                gl_FragColor = encodeFloat(0.9999);\n        return;\n    }\n#endif\n\n    gl_FragColor = encodeFloat(depth * 0.5 + 0.5);\n#endif\n}\n@end\n\n@export qtek.sm.debug_depth\n\nuniform sampler2D depthMap;\nvarying vec2 v_Texcoord;\n\n@import qtek.util.decode_float\n\nvoid main() {\n    vec4 tex = texture2D(depthMap, v_Texcoord);\n#ifdef USE_VSM\n    gl_FragColor = vec4(tex.rgb, 1.0);\n#else\n    float depth = decodeFloat(tex);\n    gl_FragColor = vec4(depth, depth, depth, 1.0);\n#endif\n}\n\n@end\n\n\n@export qtek.sm.distance.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform mat4 world : WORLD;\n\nattribute vec3 position : POSITION;\n\n#ifdef SKINNING\nattribute vec3 boneWeight;\nattribute vec4 boneIndex;\n\nuniform mat4 skinMatrix[JOINT_COUNT] : SKIN_MATRIX;\n#endif\n\nvarying vec3 v_WorldPosition;\n\nvoid main (){\n\n    vec3 skinnedPosition = position;\n#ifdef SKINNING\n    @import qtek.chunk.skin_matrix\n\n    skinnedPosition = (skinMatrixWS * vec4(position, 1.0)).xyz;\n#endif\n\n    gl_Position = worldViewProjection * vec4(skinnedPosition , 1.0);\n    v_WorldPosition = (world * vec4(skinnedPosition, 1.0)).xyz;\n}\n\n@end\n\n@export qtek.sm.distance.fragment\n\nuniform vec3 lightPosition;\nuniform float range : 100;\n\nvarying vec3 v_WorldPosition;\n\n@import qtek.util.encode_float\n\nvoid main(){\n    float dist = distance(lightPosition, v_WorldPosition);\n#ifdef USE_VSM\n    gl_FragColor = vec4(dist, dist * dist, 0.0, 0.0);\n#else\n    dist = dist / range;\n    gl_FragColor = encodeFloat(dist);\n#endif\n}\n@end\n\n@export qtek.plugin.shadow_map_common\n\n@import qtek.util.decode_float\n\nfloat tapShadowMap(sampler2D map, vec2 uv, float z){\n    vec4 tex = texture2D(map, uv);\n            return step(z, decodeFloat(tex) * 2.0 - 1.0);\n}\n\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize, vec2 scale) {\n\n    float shadowContrib = tapShadowMap(map, uv, z);\n    vec2 offset = vec2(1.0 / textureSize) * scale;\n#ifdef PCF_KERNEL_SIZE\n    for (int _idx_ = 0; _idx_ < PCF_KERNEL_SIZE; _idx_++) {{\n        shadowContrib += tapShadowMap(map, uv + offset * pcfKernel[_idx_], z);\n    }}\n\n    return shadowContrib / float(PCF_KERNEL_SIZE + 1);\n#endif\n    shadowContrib += tapShadowMap(map, uv+vec2(offset.x, 0.0), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(offset.x, offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(0.0, offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, 0.0), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(-offset.x, -offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(offset.x, -offset.y), z);\n    shadowContrib += tapShadowMap(map, uv+vec2(0.0, -offset.y), z);\n\n    return shadowContrib;\n}\n\nfloat pcf(sampler2D map, vec2 uv, float z, float textureSize) {\n    return pcf(map, uv, z, textureSize, vec2(1.0));\n}\n\nfloat chebyshevUpperBound(vec2 moments, float z){\n    float p = 0.0;\n    z = z * 0.5 + 0.5;\n    if (z <= moments.x) {\n        p = 1.0;\n    }\n    float variance = moments.y - moments.x * moments.x;\n        variance = max(variance, 0.0000001);\n        float mD = moments.x - z;\n    float pMax = variance / (variance + mD * mD);\n            pMax = clamp((pMax-0.4)/(1.0-0.4), 0.0, 1.0);\n    return max(p, pMax);\n}\nfloat computeShadowContrib(\n    sampler2D map, mat4 lightVPM, vec3 position, float textureSize, vec2 scale, vec2 offset\n) {\n\n    vec4 posInLightSpace = lightVPM * vec4(position, 1.0);\n    posInLightSpace.xyz /= posInLightSpace.w;\n    float z = posInLightSpace.z;\n        if(all(greaterThan(posInLightSpace.xyz, vec3(-0.99, -0.99, -1.0))) &&\n        all(lessThan(posInLightSpace.xyz, vec3(0.99, 0.99, 1.0)))){\n                vec2 uv = (posInLightSpace.xy+1.0) / 2.0;\n\n        #ifdef USE_VSM\n            vec2 moments = texture2D(map, uv * scale + offset).xy;\n            return chebyshevUpperBound(moments, z);\n        #else\n            return pcf(map, uv * scale + offset, z, textureSize, scale);\n        #endif\n    }\n    return 1.0;\n}\n\nfloat computeShadowContrib(sampler2D map, mat4 lightVPM, vec3 position, float textureSize) {\n    return computeShadowContrib(map, lightVPM, position, textureSize, vec2(1.0), vec2(0.0));\n}\n\nfloat computeShadowContribOmni(samplerCube map, vec3 direction, float range)\n{\n    float dist = length(direction);\n    vec4 shadowTex = textureCube(map, direction);\n\n#ifdef USE_VSM\n    vec2 moments = shadowTex.xy;\n    float variance = moments.y - moments.x * moments.x;\n    float mD = moments.x - dist;\n    float p = variance / (variance + mD * mD);\n    if(moments.x + 0.001 < dist){\n        return clamp(p, 0.0, 1.0);\n    }else{\n        return 1.0;\n    }\n#else\n    return step(dist, (decodeFloat(shadowTex) + 0.0002) * range);\n#endif\n}\n\n@end\n\n\n\n@export qtek.plugin.compute_shadow_map\n\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT) || defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT) || defined(POINT_LIGHT_SHADOWMAP_COUNT)\n\n#ifdef SPOT_LIGHT_SHADOWMAP_COUNT\nuniform sampler2D spotLightShadowMaps[SPOT_LIGHT_SHADOWMAP_COUNT];\nuniform mat4 spotLightMatrices[SPOT_LIGHT_SHADOWMAP_COUNT];\nuniform float spotLightShadowMapSizes[SPOT_LIGHT_SHADOWMAP_COUNT];\n#endif\n\n#ifdef DIRECTIONAL_LIGHT_SHADOWMAP_COUNT\n#if defined(SHADOW_CASCADE)\nuniform sampler2D directionalLightShadowMaps[1];\nuniform mat4 directionalLightMatrices[SHADOW_CASCADE];\nuniform float directionalLightShadowMapSizes[1];\nuniform float shadowCascadeClipsNear[SHADOW_CASCADE];\nuniform float shadowCascadeClipsFar[SHADOW_CASCADE];\n#else\nuniform sampler2D directionalLightShadowMaps[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT];\nuniform mat4 directionalLightMatrices[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT];\nuniform float directionalLightShadowMapSizes[DIRECTIONAL_LIGHT_SHADOWMAP_COUNT];\n#endif\n#endif\n\n#ifdef POINT_LIGHT_SHADOWMAP_COUNT\nuniform samplerCube pointLightShadowMaps[POINT_LIGHT_SHADOWMAP_COUNT];\nuniform float pointLightShadowMapSizes[POINT_LIGHT_SHADOWMAP_COUNT];\n#endif\n\nuniform bool shadowEnabled : true;\n\n#ifdef PCF_KERNEL_SIZE\nuniform vec2 pcfKernel[PCF_KERNEL_SIZE];\n#endif\n\n@import qtek.plugin.shadow_map_common\n\n#if defined(SPOT_LIGHT_SHADOWMAP_COUNT)\n\nvoid computeShadowOfSpotLights(vec3 position, inout float shadowContribs[SPOT_LIGHT_COUNT] ) {\n    float shadowContrib;\n    for(int _idx_ = 0; _idx_ < SPOT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n        shadowContrib = computeShadowContrib(\n            spotLightShadowMaps[_idx_], spotLightMatrices[_idx_], position,\n            spotLightShadowMapSizes[_idx_]\n        );\n        shadowContribs[_idx_] = shadowContrib;\n    }}\n        for(int _idx_ = SPOT_LIGHT_SHADOWMAP_COUNT; _idx_ < SPOT_LIGHT_COUNT; _idx_++){{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n\n#endif\n\n\n#if defined(DIRECTIONAL_LIGHT_SHADOWMAP_COUNT)\n\n#ifdef SHADOW_CASCADE\n\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n        float depth = (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far)\n                    / (gl_DepthRange.far - gl_DepthRange.near);\n\n    float shadowContrib;\n            shadowContribs[0] = 1.0;\n\n    for (int _idx_ = 0; _idx_ < SHADOW_CASCADE; _idx_++) {{\n        if (\n            depth >= shadowCascadeClipsNear[_idx_] &&\n            depth <= shadowCascadeClipsFar[_idx_]\n        ) {\n            shadowContrib = computeShadowContrib(\n                directionalLightShadowMaps[0], directionalLightMatrices[_idx_], position,\n                directionalLightShadowMapSizes[0],\n                vec2(1.0 / float(SHADOW_CASCADE), 1.0),\n                vec2(float(_idx_) / float(SHADOW_CASCADE), 0.0)\n            );\n                        shadowContribs[0] = shadowContrib;\n        }\n    }}\n        for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n\n#else\n\nvoid computeShadowOfDirectionalLights(vec3 position, inout float shadowContribs[DIRECTIONAL_LIGHT_COUNT]){\n    float shadowContrib;\n\n    for(int _idx_ = 0; _idx_ < DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n        shadowContrib = computeShadowContrib(\n            directionalLightShadowMaps[_idx_], directionalLightMatrices[_idx_], position,\n            directionalLightShadowMapSizes[_idx_]\n        );\n        shadowContribs[_idx_] = shadowContrib;\n    }}\n        for(int _idx_ = DIRECTIONAL_LIGHT_SHADOWMAP_COUNT; _idx_ < DIRECTIONAL_LIGHT_COUNT; _idx_++) {{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n#endif\n\n#endif\n\n\n#if defined(POINT_LIGHT_SHADOWMAP_COUNT)\n\nvoid computeShadowOfPointLights(vec3 position, inout float shadowContribs[POINT_LIGHT_COUNT] ){\n    vec3 lightPosition;\n    vec3 direction;\n    for(int _idx_ = 0; _idx_ < POINT_LIGHT_SHADOWMAP_COUNT; _idx_++) {{\n        lightPosition = pointLightPosition[_idx_];\n        direction = position - lightPosition;\n        shadowContribs[_idx_] = computeShadowContribOmni(pointLightShadowMaps[_idx_], direction, pointLightRange[_idx_]);\n    }}\n    for(int _idx_ = POINT_LIGHT_SHADOWMAP_COUNT; _idx_ < POINT_LIGHT_COUNT; _idx_++) {{\n        shadowContribs[_idx_] = 1.0;\n    }}\n}\n\n#endif\n\n#endif\n\n@end";


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var Compositor = __webpack_require__(127);
	var Shader = __webpack_require__(18);
	var Texture2D = __webpack_require__(33);
	var Texture = __webpack_require__(21);
	var FrameBuffer = __webpack_require__(48);
	var FXLoader = __webpack_require__(130);
	var SSAOPass = __webpack_require__(134);

	var effectJson = JSON.parse(__webpack_require__(136));

	Shader['import'](__webpack_require__(137));
	Shader['import'](__webpack_require__(138));
	Shader['import'](__webpack_require__(139));
	Shader['import'](__webpack_require__(140));
	Shader['import'](__webpack_require__(141));
	Shader['import'](__webpack_require__(142));
	Shader['import'](__webpack_require__(143));
	Shader['import'](__webpack_require__(144));
	Shader['import'](__webpack_require__(145));
	Shader['import'](__webpack_require__(146));
	Shader['import'](__webpack_require__(147));
	Shader['import'](__webpack_require__(148));

	function EffectCompositor() {
	    this._sourceTexture = new Texture2D({
	        type: Texture.HALF_FLOAT
	    });
	    this._depthTexture = new Texture2D({
	        format: Texture.DEPTH_COMPONENT,
	        type: Texture.UNSIGNED_INT
	    });

	    this._framebuffer = new FrameBuffer();
	    this._framebuffer.attach(this._sourceTexture);
	    this._framebuffer.attach(this._depthTexture, FrameBuffer.DEPTH_ATTACHMENT)

	    var loader = new FXLoader();
	    this._compositor = loader.parse(effectJson);

	    var sourceNode = this._compositor.getNodeByName('source');
	    sourceNode.texture = this._sourceTexture;
	    var cocNode = this._compositor.getNodeByName('coc');
	    cocNode.setParameter('depth', this._depthTexture);

	    this._sourceNode = sourceNode;
	    this._cocNode = cocNode;
	    this._compositeNode = this._compositor.getNodeByName('composite');
	    this._fxaaNode = this._compositor.getNodeByName('FXAA');

	    this._ssaoPass = new SSAOPass({
	        depthTexture: this._depthTexture
	    });

	    this._dofBlurNodes = ['dof_far_blur', 'dof_near_blur', 'dof_coc_blur'].map(function (name) {
	        return this._compositor.getNodeByName(name);
	    }, this);
	}


	EffectCompositor.prototype.resize = function (width, height, dpr) {
	    dpr = dpr || 1;
	    var width = width * dpr;
	    var height = height * dpr;
	    var sourceTexture = this._sourceTexture;
	    var depthTexture = this._depthTexture;
	    if (sourceTexture.width !== width || sourceTexture.height !== height) {
	        sourceTexture.width = width;
	        sourceTexture.height = height;
	        sourceTexture.dirty();
	        depthTexture.width = width;
	        depthTexture.height = height;
	        depthTexture.dirty();
	    }
	};

	/**
	 * Render SSAO after render the scene, before compositing
	 */
	EffectCompositor.prototype.updateSSAO = function (renderer, camera, frame) {
	    this._ssaoPass.update(renderer, camera, frame);
	};

	/**
	 * Render SSAO after render the scene, before compositing
	 */
	EffectCompositor.prototype.blendSSAO = function (renderer, camera) {
	    this._ssaoPass.blend(renderer, camera);
	};

	/**
	 * @return {qtek.FrameBuffer}
	 */
	EffectCompositor.prototype.getSourceFrameBuffer = function () {
	    return this._framebuffer;
	};

	/**
	 * @return {qtek.Texture2D}
	 */
	EffectCompositor.prototype.getSourceTexture = function () {
	    return this._sourceTexture;
	};

	/**
	 * Disable ssao effect
	 */
	EffectCompositor.prototype.disableSSAO = function () {
	    this._sourceNode.texture = this._sourceTexture;
	};

	/**
	 * Enable ssao effect
	 */
	EffectCompositor.prototype.enableSSAO = function () {
	    this._sourceNode.texture = this._ssaoPass.getTargetTexture();
	};

	/**
	 * Disable fxaa effect
	 */
	EffectCompositor.prototype.disableFXAA = function () {
	    this._compositor.removeNode(this._fxaaNode);
	    if (this._compositeNode.outputs) {
	        this._compositeNode.__outputs = this._compositeNode.outputs;
	    }
	    this._compositeNode.outputs = null;
	};

	/**
	 * Enable fxaa effect
	 */
	EffectCompositor.prototype.enableFXAA = function () {
	    this._compositor.addNode(this._fxaaNode);
	    if (this._compositeNode.__outputs) {
	        this._compositeNode.outputs = this._compositeNode.__outputs;
	    }
	};
	/**
	 * Enable bloom effect
	 */
	EffectCompositor.prototype.enableBloom = function () {
	    this._compositeNode.inputs.bloom = 'bloom_composite';
	};

	/**
	 * Disable bloom effect
	 */
	EffectCompositor.prototype.disableBloom = function () {
	    this._compositeNode.inputs.bloom = null;
	};

	/**
	 * Enable depth of field effect
	 */
	EffectCompositor.prototype.enableDOF = function () {
	    this._compositeNode.inputs.texture = 'dof_composite';
	};
	/**
	 * Disable depth of field effect
	 */
	EffectCompositor.prototype.disableDOF = function () {
	    this._compositeNode.inputs.texture = 'source';
	};

	EffectCompositor.prototype.setBloomIntensity = function (value) {
	    this._compositeNode.setParameter('bloom', value);
	};

	EffectCompositor.prototype.setSSAORadius = function (value) {
	    this._ssaoPass.setParameter('radius', value);
	};
	EffectCompositor.prototype.setSSAOIntensity = function (value) {
	    this._ssaoPass.setParameter('ssaoIntensity', value);
	};

	EffectCompositor.prototype.setSSAOQuality = function (value) {
	    var kernelSize = ({
	        low: 8,
	        medium: 16,
	        high: 64,
	        ultra: 128
	    })[value] || 16;
	    this._ssaoPass.setParameter('kernelSize', kernelSize);
	};

	EffectCompositor.prototype.setDOFFocalDistance = function (focalDist) {
	    this._cocNode.setParameter('focalDist', focalDist);
	};

	EffectCompositor.prototype.setDOFFocalRange = function (focalRange) {
	    this._cocNode.setParameter('focalRange', focalRange);
	};
	EffectCompositor.prototype.setDOFFStop = function (fstop) {
	    this._cocNode.setParameter('fstop', fstop);
	};

	EffectCompositor.prototype.setDOFBlurSize = function (blurSize) {
	    for (var i = 0; i < this._dofBlurNodes.length; i++) {
	        this._dofBlurNodes[i].setParameter('blurSize', blurSize);
	    }
	};

	EffectCompositor.prototype.composite = function (renderer, camera, framebuffer, frame) {
	    for (var i = 0; i < this._dofBlurNodes.length; i++) {
	        this._dofBlurNodes[i].setParameter('percent', frame / 30.0);
	    }
	    this._cocNode.setParameter('zNear', camera.near);
	    this._cocNode.setParameter('zFar', camera.far);
	    this._compositor.render(renderer, framebuffer);
	};

	EffectCompositor.prototype.dispose = function (gl) {
	    this._sourceTexture.dispose(gl);
	    this._depthTexture.dispose(gl);
	    this._framebuffer.dispose(gl);
	    this._compositor.dispose(gl);
	};

	module.exports = EffectCompositor;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Graph = __webpack_require__(128);
	    var TexturePool = __webpack_require__(124);
	    var FrameBuffer = __webpack_require__(48);

	    /**
	     * Compositor provide graph based post processing
	     *
	     * @constructor qtek.compositor.Compositor
	     * @extends qtek.compositor.Graph
	     *
	     */
	    var Compositor = Graph.extend(function() {
	        return {
	            // Output node
	            _outputs: [],

	            _texturePool: new TexturePool(),

	            _frameBuffer: new FrameBuffer({
	                depthBuffer: false
	            })
	        };
	    },
	    /** @lends qtek.compositor.Compositor.prototype */
	    {
	        addNode: function(node) {
	            Graph.prototype.addNode.call(this, node);
	            node._compositor = this;
	        },
	        /**
	         * @param  {qtek.Renderer} renderer
	         */
	        render: function(renderer, frameBuffer) {
	            if (this._dirty) {
	                this.update();
	                this._dirty = false;

	                this._outputs.length = 0;
	                for (var i = 0; i < this.nodes.length; i++) {
	                    if (!this.nodes[i].outputs) {
	                        this._outputs.push(this.nodes[i]);
	                    }
	                }
	            }

	            for (var i = 0; i < this.nodes.length; i++) {
	                // Update the reference number of each output texture
	                this.nodes[i].beforeFrame();
	            }

	            for (var i = 0; i < this._outputs.length; i++) {
	                this._outputs[i].updateReference();
	            }

	            for (var i = 0; i < this._outputs.length; i++) {
	                this._outputs[i].render(renderer, frameBuffer);
	            }

	            for (var i = 0; i < this.nodes.length; i++) {
	                // Clear up
	                this.nodes[i].afterFrame();
	            }
	        },

	        allocateTexture: function (parameters) {
	            return this._texturePool.get(parameters);
	        },

	        releaseTexture: function (parameters) {
	            this._texturePool.put(parameters);
	        },

	        getFrameBuffer: function () {
	            return this._frameBuffer;
	        },

	        /**
	         * Dispose compositor
	         * @param {WebGLRenderingContext|qtek.Renderer} renderer
	         */
	        dispose: function (renderer) {
	            this._texturePool.clear(renderer.gl || renderer);
	        }
	    });

	    module.exports = Compositor;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var GraphNode = __webpack_require__(129);

	    /**
	     * @constructor qtek.compositor.Graph
	     * @extends qtek.core.Base
	     */
	    var Graph = Base.extend(function () {
	        return /** @lends qtek.compositor.Graph# */ {
	            /**
	             * @type {Array.<qtek.compositor.Node>}
	             */
	            nodes: []
	        };
	    },
	    /** @lends qtek.compositor.Graph.prototype */
	    {

	        /**
	         * Mark to update
	         */
	        dirty: function () {
	            this._dirty = true;
	        },
	        /**
	         * @param {qtek.compositor.Node} node
	         */
	        addNode: function (node) {

	            if (this.nodes.indexOf(node) >= 0) {
	                return;
	            }

	            this.nodes.push(node);

	            this._dirty = true;
	        },
	        /**
	         * @param  {qtek.compositor.Node|string} node
	         */
	        removeNode: function (node) {
	            if (typeof node === 'string') {
	                node = this.getNodeByName(node);
	            }
	            var idx = this.nodes.indexOf(node);
	            if (idx >= 0) {
	                this.nodes.splice(idx, 1);
	                this._dirty = true;
	            }
	        },
	        /**
	         * @param {string} name
	         * @return {qtek.compositor.Node}
	         */
	        getNodeByName: function (name) {
	            for (var i = 0; i < this.nodes.length; i++) {
	                if (this.nodes[i].name === name) {
	                    return this.nodes[i];
	                }
	            }
	        },
	        /**
	         * Update links of graph
	         */
	        update: function () {
	            for (var i = 0; i < this.nodes.length; i++) {
	                this.nodes[i].clear();
	            }
	            // Traverse all the nodes and build the graph
	            for (var i = 0; i < this.nodes.length; i++) {
	                var node = this.nodes[i];

	                if (!node.inputs) {
	                    continue;
	                }
	                for (var inputName in node.inputs) {
	                    if (!node.inputs[inputName]) {
	                        continue;
	                    }
	                    if (node.pass && !node.pass.material.isUniformEnabled(inputName)) {
	                        console.warn('Pin '  + node.name + '.' + inputName + ' not used.');
	                        continue;
	                    }
	                    var fromPinInfo = node.inputs[inputName];

	                    var fromPin = this.findPin(fromPinInfo);
	                    if (fromPin) {
	                        node.link(inputName, fromPin.node, fromPin.pin);
	                    }
	                    else {
	                        if (typeof fromPinInfo === 'string') {
	                            console.warn('Node ' + fromPinInfo + ' not exist');
	                        }
	                        else {
	                            console.warn('Pin of ' + fromPinInfo.node + '.' + fromPinInfo.pin + ' not exist');
	                        }
	                    }
	                }
	            }
	        },

	        findPin: function (input) {
	            var node;
	            // Try to take input as a directly a node
	            if (typeof input === 'string' || input instanceof GraphNode) {
	                input = {
	                    node: input
	                };
	            }

	            if (typeof input.node === 'string') {
	                for (var i = 0; i < this.nodes.length; i++) {
	                    var tmp = this.nodes[i];
	                    if (tmp.name === input.node) {
	                        node = tmp;
	                    }
	                }
	            }
	            else {
	                node = input.node;
	            }
	            if (node) {
	                var inputPin = input.pin;
	                if (!inputPin) {
	                    // Use first pin defaultly
	                    if (node.outputs) {
	                        inputPin = Object.keys(node.outputs)[0];
	                    }
	                }
	                if (node.outputs[inputPin]) {
	                    return {
	                        node: node,
	                        pin: inputPin
	                    };
	                }
	            }
	        }
	    });

	    module.exports = Graph;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);

	    // PENDING
	    // Use topological sort ?

	    /**
	     * Node of graph based post processing.
	     *
	     * @constructor qtek.compositor.Node
	     * @extends qtek.core.Base
	     *
	     */
	    var Node = Base.extend(function () {
	        return /** @lends qtek.compositor.Node# */ {
	            /**
	             * @type {string}
	             */
	            name: '',

	            /**
	             * Input links, will be updated by the graph
	             * @example:
	             *     inputName: {
	             *         node: someNode,
	             *         pin: 'xxxx'
	             *     }
	             * @type {Object}
	             */
	            inputLinks: {},

	            /**
	             * Output links, will be updated by the graph
	             * @example:
	             *     outputName: {
	             *         node: someNode,
	             *         pin: 'xxxx'
	             *     }
	             * @type {Object}
	             */
	            outputLinks: {},

	            // Save the output texture of previous frame
	            // Will be used when there exist a circular reference
	            _prevOutputTextures: {},
	            _outputTextures: {},

	            // Example: { name: 2 }
	            _outputReferences: {},

	            _rendering: false,
	            // If rendered in this frame
	            _rendered: false,

	            _compositor: null
	        };
	    },
	    /** @lends qtek.compositor.Node.prototype */
	    {

	        // TODO Remove parameter function callback
	        updateParameter: function (outputName, renderer) {
	            var outputInfo = this.outputs[outputName];
	            var parameters = outputInfo.parameters;
	            var parametersCopy = outputInfo._parametersCopy;
	            if (!parametersCopy) {
	                parametersCopy = outputInfo._parametersCopy = {};
	            }
	            if (parameters) {
	                for (var key in parameters) {
	                    if (key !== 'width' && key !== 'height') {
	                        parametersCopy[key] = parameters[key];
	                    }
	                }
	            }
	            var width, height;
	            if (parameters.width instanceof Function) {
	                width = parameters.width.call(this, renderer);
	            }
	            else {
	                width = parameters.width;
	            }
	            if (parameters.height instanceof Function) {
	                height = parameters.height.call(this, renderer);
	            }
	            else {
	                height = parameters.height;
	            }
	            if (
	                parametersCopy.width !== width
	                || parametersCopy.height !== height
	            ) {
	                if (this._outputTextures[outputName]) {
	                    this._outputTextures[outputName].dispose(renderer.gl);
	                }
	            }
	            parametersCopy.width = width;
	            parametersCopy.height = height;

	            return parametersCopy;
	        },

	        /**
	         * Set parameter
	         * @param {string} name
	         * @param {} value
	         */
	        setParameter: function (name, value) {},
	        /**
	         * Get parameter value
	         * @param  {string} name
	         * @return {}
	         */
	        getParameter: function (name) {},
	        /**
	         * Set parameters
	         * @param {Object} obj
	         */
	        setParameters: function (obj) {
	            for (var name in obj) {
	                this.setParameter(name, obj[name]);
	            }
	        },

	        render: function () {},

	        getOutput: function (renderer /*optional*/, name) {
	            if (name == null) {
	                // Return the output texture without rendering
	                name = renderer;
	                return this._outputTextures[name];
	            }
	            var outputInfo = this.outputs[name];
	            if (!outputInfo) {
	                return ;
	            }

	            // Already been rendered in this frame
	            if (this._rendered) {
	                // Force return texture in last frame
	                if (outputInfo.outputLastFrame) {
	                    return this._prevOutputTextures[name];
	                }
	                else {
	                    return this._outputTextures[name];
	                }
	            }
	            else if (
	                // TODO
	                this._rendering   // Solve Circular Reference
	            ) {
	                if (!this._prevOutputTextures[name]) {
	                    // Create a blank texture at first pass
	                    this._prevOutputTextures[name] = this._compositor.allocateTexture(outputInfo.parameters || {});
	                }
	                return this._prevOutputTextures[name];
	            }

	            this.render(renderer);

	            return this._outputTextures[name];
	        },

	        removeReference: function (outputName) {
	            this._outputReferences[outputName]--;
	            if (this._outputReferences[outputName] === 0) {
	                var outputInfo = this.outputs[outputName];
	                if (outputInfo.keepLastFrame) {
	                    if (this._prevOutputTextures[outputName]) {
	                        this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
	                    }
	                    this._prevOutputTextures[outputName] = this._outputTextures[outputName];
	                }
	                else {
	                    // Output of this node have alreay been used by all other nodes
	                    // Put the texture back to the pool.
	                    this._compositor.releaseTexture(this._outputTextures[outputName]);
	                }
	            }
	        },

	        link: function (inputPinName, fromNode, fromPinName) {

	            // The relationship from output pin to input pin is one-on-multiple
	            this.inputLinks[inputPinName] = {
	                node: fromNode,
	                pin: fromPinName
	            };
	            if (!fromNode.outputLinks[fromPinName]) {
	                fromNode.outputLinks[fromPinName] = [];
	            }
	            fromNode.outputLinks[fromPinName].push({
	                node: this,
	                pin: inputPinName
	            });

	            // Enabled the pin texture in shader
	            var shader = this.pass.material.shader;
	            shader.enableTexture(inputPinName);
	        },

	        clear: function () {
	            this.inputLinks = {};
	            this.outputLinks = {};
	        },

	        updateReference: function (outputName) {
	            if (!this._rendering) {
	                this._rendering = true;
	                for (var inputName in this.inputLinks) {
	                    var link = this.inputLinks[inputName];
	                    link.node.updateReference(link.pin);
	                }
	                this._rendering = false;
	            }
	            if (outputName) {
	                this._outputReferences[outputName] ++;
	            }
	        },

	        beforeFrame: function () {
	            this._rendered = false;

	            for (var name in this.outputLinks) {
	                this._outputReferences[name] = 0;
	            }
	        },

	        afterFrame: function () {
	            // Put back all the textures to pool
	            for (var name in this.outputLinks) {
	                if (this._outputReferences[name] > 0) {
	                    var outputInfo = this.outputs[name];
	                    if (outputInfo.keepLastFrame) {
	                        if (this._prevOutputTextures[name]) {
	                            this._compositor.releaseTexture(this._prevOutputTextures[name]);
	                        }
	                        this._prevOutputTextures[name] = this._outputTextures[name];
	                    }
	                    else {
	                        this._compositor.releaseTexture(this._outputTextures[name]);
	                    }
	                }
	            }
	        }
	    });

	    module.exports = Node;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Base = __webpack_require__(6);
	    var request = __webpack_require__(42);
	    var util = __webpack_require__(9);
	    var Compositor = __webpack_require__(127);
	    var CompoNode = __webpack_require__(129);
	    var CompoSceneNode = __webpack_require__(131);
	    var CompoTextureNode = __webpack_require__(132);
	    var CompoFilterNode = __webpack_require__(133);
	    var Shader = __webpack_require__(18);
	    var Texture = __webpack_require__(21);
	    var Texture2D = __webpack_require__(33);
	    var TextureCube = __webpack_require__(41);

	    var shaderSourceReg = /#source\((.*?)\)/;
	    var urlReg = /#url\((.*?)\)/;

	    /**
	     * @constructor qtek.loader.FX
	     * @extends qtek.core.Base
	     */
	    var FXLoader = Base.extend(
	    /** @lends qtek.loader.FX# */
	    {
	        /**
	         * @type {string}
	         */
	        rootPath: '',
	        /**
	         * @type {string}
	         */
	        textureRootPath: '',
	        /**
	         * @type {string}
	         */
	        shaderRootPath: '',

	        /**
	         * @type {qtek.Scene}
	         */
	        scene: null,

	        /**
	         * @type {qtek.Camera}
	         */
	        camera: null
	    },
	    /** @lends qtek.loader.FX.prototype */
	    {
	        /**
	         * @param  {string} url
	         */
	        load: function(url) {
	            var self = this;

	            if (!this.rootPath) {
	                this.rootPath = url.slice(0, url.lastIndexOf('/'));
	            }

	            request.get({
	                url: url,
	                onprogress: function(percent, loaded, total) {
	                    self.trigger('progress', percent, loaded, total);
	                },
	                onerror: function(e) {
	                    self.trigger('error', e);
	                },
	                responseType: 'text',
	                onload: function(data) {
	                    self.parse(JSON.parse(data));
	                }
	            });
	        },

	        /**
	         * @param {Object} json
	         * @return {qtek.compositor.Compositor}
	         */
	        parse: function(json) {
	            var self = this;
	            var compositor = new Compositor();

	            var lib = {
	                textures: {},
	                shaders: {},
	                parameters: {}
	            };
	            var afterLoad = function(shaderLib, textureLib) {
	                for (var i = 0; i < json.nodes.length; i++) {
	                    var nodeInfo = json.nodes[i];
	                    var node = self._createNode(nodeInfo, lib);
	                    if (node) {
	                        compositor.addNode(node);
	                    }
	                }

	                self.trigger('success', compositor);
	            };

	            for (var name in json.parameters) {
	                var paramInfo = json.parameters[name];
	                lib.parameters[name] = this._convertParameter(paramInfo);
	            }
	            this._loadShaders(json, function(shaderLib) {
	                // TODO load texture asynchronous
	                self._loadTextures(json, lib, function(textureLib) {
	                    lib.textures = textureLib;
	                    lib.shaders = shaderLib;
	                    afterLoad();
	                });
	            });

	            return compositor;
	        },

	        _createNode: function(nodeInfo, lib) {
	            var type = nodeInfo.type || 'filter';
	            var shaderSource;
	            var inputs;
	            var outputs;

	            if (type === 'filter') {
	                var shaderExp = nodeInfo.shader.trim();
	                var res = shaderSourceReg.exec(shaderExp);
	                if (res) {
	                    shaderSource = Shader.source(res[1].trim());
	                }
	                else if (shaderExp.charAt(0) === '#') {
	                    shaderSource = lib.shaders[shaderExp.substr(1)];
	                }
	                if (!shaderSource) {
	                    shaderSource = shaderExp;
	                }
	                if (!shaderSource) {
	                    return;
	                }
	            }

	            if (nodeInfo.inputs) {
	                inputs = {};
	                for (var name in nodeInfo.inputs) {
	                    if (typeof nodeInfo.inputs[name] === 'string') {
	                        inputs[name] = nodeInfo.inputs[name];
	                    }
	                    else {
	                        inputs[name] = {
	                            node: nodeInfo.inputs[name].node,
	                            pin: nodeInfo.inputs[name].pin
	                        };
	                    }
	                }
	            }
	            if (nodeInfo.outputs) {
	                outputs = {};
	                for (var name in nodeInfo.outputs) {
	                    var outputInfo = nodeInfo.outputs[name];
	                    outputs[name] = {};
	                    if (outputInfo.attachment != null) {
	                        outputs[name].attachment = outputInfo.attachment;
	                    }
	                    if (outputInfo.keepLastFrame != null) {
	                        outputs[name].keepLastFrame = outputInfo.keepLastFrame;
	                    }
	                    if (outputInfo.outputLastFrame != null) {
	                        outputs[name].outputLastFrame = outputInfo.outputLastFrame;
	                    }
	                    if (typeof(outputInfo.parameters) === 'string') {
	                        var paramExp = outputInfo.parameters;
	                        if (paramExp.charAt(0) === '#') {
	                            outputs[name].parameters = lib.parameters[paramExp.substr(1)];
	                        }
	                    }
	                    else if (outputInfo.parameters) {
	                        outputs[name].parameters = this._convertParameter(outputInfo.parameters);
	                    }
	                }
	            }
	            var node;
	            if (type === 'scene') {
	                node = new CompoSceneNode({
	                    name: nodeInfo.name,
	                    scene: this.scene,
	                    camera: this.camera,
	                    outputs: outputs
	                });
	            }
	            else if (type === 'texture') {
	                node = new CompoTextureNode({
	                    name: nodeInfo.name,
	                    outputs: outputs
	                });
	            }
	            // Default is filter
	            else {
	                node = new CompoFilterNode({
	                    name: nodeInfo.name,
	                    shader: shaderSource,
	                    inputs: inputs,
	                    outputs: outputs
	                });
	            }
	            if (node) {
	                if (nodeInfo.parameters) {
	                    for (var name in nodeInfo.parameters) {
	                        var val = nodeInfo.parameters[name];
	                        if (typeof(val) === 'string') {
	                            val = val.trim();
	                            if (val.charAt(0) === '#') {
	                                val = lib.textures[val.substr(1)];
	                            }
	                            else {
	                                node.on(
	                                    'beforerender', createSizeSetHandler(
	                                        name, tryConvertExpr(val)
	                                    )
	                                );
	                            }
	                        }
	                        node.setParameter(name, val);
	                    }
	                }
	                if (nodeInfo.defines && node.pass) {
	                    for (var name in nodeInfo.defines) {
	                        var val = nodeInfo.defines[name];
	                        node.pass.material.shader.define('fragment', name, val);
	                    }
	                }
	            }
	            return node;
	        },

	        _convertParameter: function(paramInfo) {
	            var param = {};
	            if (!paramInfo) {
	                return param;
	            }
	            ['type', 'minFilter', 'magFilter', 'wrapS', 'wrapT', 'flipY', 'useMipmap']
	                .forEach(function(name) {
	                    var val = paramInfo[name];
	                    if (val != null) {
	                        // Convert string to enum
	                        if (typeof val === 'string') {
	                            val = Texture[val];
	                        }
	                        param[name] = val;
	                    }
	                });
	            ['width', 'height']
	                .forEach(function(name) {
	                    if (paramInfo[name] != null) {
	                        var val = paramInfo[name];
	                        if (typeof val === 'string') {
	                            val = val.trim();
	                            param[name] = createSizeParser(
	                                name, tryConvertExpr(val)
	                            );
	                        }
	                        else {
	                            param[name] = val;
	                        }
	                    }
	                });
	            if (paramInfo.useMipmap != null) {
	                param.useMipmap = paramInfo.useMipmap;
	            }
	            return param;
	        },

	        _loadShaders: function(json, callback) {
	            if (!json.shaders) {
	                callback({});
	                return;
	            }
	            var shaders = {};
	            var loading = 0;
	            var cbd = false;
	            var shaderRootPath = this.shaderRootPath || this.rootPath;
	            util.each(json.shaders, function(shaderExp, name) {
	                var res = urlReg.exec(shaderExp);
	                if (res) {
	                    var path = res[1];
	                    path = util.relative2absolute(path, shaderRootPath);
	                    loading++;
	                    request.get({
	                        url: path,
	                        onload: function(shaderSource) {
	                            shaders[name] = shaderSource;
	                            Shader['import'](shaderSource);
	                            loading--;
	                            if (loading === 0) {
	                                callback(shaders);
	                                cbd = true;
	                            }
	                        }
	                    });
	                }
	                else {
	                    shaders[name] = shaderExp;
	                    // Try import shader
	                    Shader['import'](shaderExp);
	                }
	            }, this);
	            if (loading === 0 && !cbd) {
	                callback(shaders);
	            }
	        },

	        _loadTextures: function(json, lib, callback) {
	            if (!json.textures) {
	                callback({});
	                return;
	            }
	            var textures = {};
	            var loading = 0;

	            var cbd = false;
	            var textureRootPath = this.textureRootPath || this.rootPath;
	            util.each(json.textures, function(textureInfo, name) {
	                var texture;
	                var path = textureInfo.path;
	                var parameters = this._convertParameter(textureInfo.parameters);
	                if (path instanceof Array && path.length === 6) {
	                    path = path.map(function(item) {
	                        return util.relative2absolute(item, textureRootPath);
	                    });
	                    texture = new TextureCube(parameters);
	                }
	                else if(typeof path === 'string') {
	                    path = util.relative2absolute(path, textureRootPath);
	                    texture = new Texture2D(parameters);
	                }
	                else {
	                    return;
	                }

	                texture.load(path);
	                loading++;
	                texture.once('success', function() {
	                    textures[name] = texture;
	                    loading--;
	                    if (loading === 0) {
	                        callback(textures);
	                        cbd = true;
	                    }
	                });
	            }, this);

	            if (loading === 0 && !cbd) {
	                callback(textures);
	            }
	        }
	    });

	    function createSizeSetHandler(name, exprFunc) {
	        return function (renderer) {
	            // PENDING viewport size or window size
	            var dpr = renderer.getDevicePixelRatio();
	            // PENDING If multiply dpr ?
	            var width = renderer.getWidth();
	            var height = renderer.getHeight();
	            var result = exprFunc(width, height, dpr);
	            this.setParameter(name, result);
	        };
	    }

	    function createSizeParser(name, exprFunc) {
	        return function (renderer) {
	            var dpr = renderer.getDevicePixelRatio();
	            var width = renderer.getWidth();
	            var height = renderer.getHeight();
	            return exprFunc(width, height, dpr);
	        };
	    }

	    function tryConvertExpr(string) {
	        // PENDING
	        var exprRes = /^expr\((.*)\)$/.exec(string);
	        if (exprRes) {
	            try {
	                var func = new Function('width', 'height', 'dpr', 'return ' + exprRes[1]);
	                // Try run t
	                func(1, 1);

	                return func;
	            }
	            catch (e) {
	                throw new Error('Invalid expression.');
	            }
	        }
	    }

	    module.exports = FXLoader;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Node = __webpack_require__(129);
	    var glinfo = __webpack_require__(10);
	    var glenum = __webpack_require__(11);
	    var FrameBuffer = __webpack_require__(48);

	    /**
	     * @constructor qtek.compositor.SceneNode
	     * @extends qtek.compositor.Node
	     */
	    var SceneNode = Node.extend(
	    /** @lends qtek.compositor.SceneNode# */
	    {
	        name: 'scene',
	        /**
	         * @type {qtek.Scene}
	         */
	        scene: null,
	        /**
	         * @type {qtek.Camera}
	         */
	        camera: null,
	        /**
	         * @type {boolean}
	         */
	        autoUpdateScene: true,
	        /**
	         * @type {boolean}
	         */
	        preZ: false

	    }, function() {
	        this.frameBuffer = new FrameBuffer();
	    }, {
	        render: function(renderer) {

	            this._rendering = true;
	            var _gl = renderer.gl;

	            this.trigger('beforerender');

	            var renderInfo;

	            if (!this.outputs) {

	                renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);

	            }
	            else {

	                var frameBuffer = this.frameBuffer;
	                for (var name in this.outputs) {
	                    var parameters = this.updateParameter(name, renderer);
	                    var outputInfo = this.outputs[name];
	                    var texture = this._compositor.allocateTexture(parameters);
	                    this._outputTextures[name] = texture;

	                    var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
	                    if (typeof(attachment) == 'string') {
	                        attachment = _gl[attachment];
	                    }
	                    frameBuffer.attach(texture, attachment);
	                }
	                frameBuffer.bind(renderer);

	                // MRT Support in chrome
	                // https://www.khronos.org/registry/webgl/sdk/tests/conformance/extensions/ext-draw-buffers.html
	                var ext = glinfo.getExtension(_gl, 'EXT_draw_buffers');
	                if (ext) {
	                    var bufs = [];
	                    for (var attachment in this.outputs) {
	                        attachment = parseInt(attachment);
	                        if (attachment >= _gl.COLOR_ATTACHMENT0 && attachment <= _gl.COLOR_ATTACHMENT0 + 8) {
	                            bufs.push(attachment);
	                        }
	                    }
	                    ext.drawBuffersEXT(bufs);
	                }

	                // Always clear
	                // PENDING
	                renderer.saveClear();
	                renderer.clearBit = glenum.DEPTH_BUFFER_BIT | glenum.COLOR_BUFFER_BIT;
	                renderInfo = renderer.render(this.scene, this.camera, !this.autoUpdateScene, this.preZ);
	                renderer.restoreClear();

	                frameBuffer.unbind(renderer);
	            }

	            this.trigger('afterrender', renderInfo);

	            this._rendering = false;
	            this._rendered = true;
	        }
	    });

	    module.exports = SceneNode;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Node = __webpack_require__(129);

	    /**
	     * @constructor qtek.compositor.TextureNode
	     * @extends qtek.compositor.Node
	     */
	    var TextureNode = Node.extend(function() {
	        return /** @lends qtek.compositor.TextureNode# */ {
	            /**
	             * @type {qtek.Texture2D}
	             */
	            texture: null,

	            // Texture node must have output without parameters
	            outputs: {
	                color: {}
	            }
	        };
	    }, function () {
	    }, {

	        getOutput: function (renderer, name) {
	            return this.texture;
	        },

	        // Do nothing
	        beforeFrame: function () {},
	        afterFrame: function () {}
	    });

	    module.exports = TextureNode;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var Pass = __webpack_require__(57);
	    var Node = __webpack_require__(129);

	    // TODO curlnoise demo wrong

	    // PENDING
	    // Use topological sort ?

	    /**
	     * Filter node
	     *
	     * @constructor qtek.compositor.FilterNode
	     * @extends qtek.compositor.Node
	     *
	     * @example
	        var node = new qtek.compositor.Node({
	            name: 'fxaa',
	            shader: qtek.Shader.source('qtek.compositor.fxaa'),
	            inputs: {
	                texture: {
	                     node: 'scene',
	                     pin: 'color'
	                }
	            },
	            // Multiple outputs is preserved for MRT support in WebGL2.0
	            outputs: {
	                color: {
	                    attachment: qtek.FrameBuffer.COLOR_ATTACHMENT0
	                    parameters: {
	                        format: qtek.Texture.RGBA,
	                        width: 512,
	                        height: 512
	                    },
	                    // Node will keep the RTT rendered in last frame
	                    keepLastFrame: true,
	                    // Force the node output the RTT rendered in last frame
	                    outputLastFrame: true
	                }
	            }
	        });
	     *
	     */
	    var FilterNode = Node.extend(function () {
	        return /** @lends qtek.compositor.Node# */ {
	            /**
	             * @type {string}
	             */
	            name: '',

	            /**
	             * @type {Object}
	             */
	            inputs: {},

	            /**
	             * @type {Object}
	             */
	            outputs: null,

	            /**
	             * @type {string}
	             */
	            shader: '',

	            /**
	             * Input links, will be updated by the graph
	             * @example:
	             *     inputName: {
	             *         node: someNode,
	             *         pin: 'xxxx'
	             *     }
	             * @type {Object}
	             */
	            inputLinks: {},

	            /**
	             * Output links, will be updated by the graph
	             * @example:
	             *     outputName: {
	             *         node: someNode,
	             *         pin: 'xxxx'
	             *     }
	             * @type {Object}
	             */
	            outputLinks: {},

	            /**
	             * @type {qtek.compositor.Pass}
	             */
	            pass: null,

	            // Save the output texture of previous frame
	            // Will be used when there exist a circular reference
	            _prevOutputTextures: {},
	            _outputTextures: {},

	            // Example: { name: 2 }
	            _outputReferences: {},

	            _rendering: false,
	            // If rendered in this frame
	            _rendered: false,

	            _compositor: null
	        };
	    }, function () {

	        var pass = new Pass({
	            fragment: this.shader
	        });
	        this.pass = pass;
	    },
	    /** @lends qtek.compositor.Node.prototype */
	    {
	        /**
	         * @param  {qtek.Renderer} renderer
	         */
	        render: function (renderer, frameBuffer) {
	            this.trigger('beforerender', renderer);

	            this._rendering = true;

	            var _gl = renderer.gl;

	            for (var inputName in this.inputLinks) {
	                var link = this.inputLinks[inputName];
	                var inputTexture = link.node.getOutput(renderer, link.pin);
	                this.pass.setUniform(inputName, inputTexture);
	            }
	            // Output
	            if (!this.outputs) {
	                this.pass.outputs = null;

	                this._compositor.getFrameBuffer().unbind(renderer);

	                this.pass.render(renderer, frameBuffer);
	            }
	            else {
	                this.pass.outputs = {};

	                var attachedTextures = {};
	                for (var name in this.outputs) {
	                    var parameters = this.updateParameter(name, renderer);
	                    if (isNaN(parameters.width)) {
	                        this.updateParameter(name, renderer);
	                    }
	                    var outputInfo = this.outputs[name];
	                    var texture = this._compositor.allocateTexture(parameters);
	                    this._outputTextures[name] = texture;
	                    var attachment = outputInfo.attachment || _gl.COLOR_ATTACHMENT0;
	                    if (typeof(attachment) == 'string') {
	                        attachment = _gl[attachment];
	                    }
	                    attachedTextures[attachment] = texture;
	                }
	                this._compositor.getFrameBuffer().bind(renderer);

	                for (var attachment in attachedTextures) {
	                    // FIXME attachment changes in different nodes
	                    this._compositor.getFrameBuffer().attach(
	                        attachedTextures[attachment], attachment
	                    );
	                }

	                this.pass.render(renderer);

	                // Because the data of texture is changed over time,
	                // Here update the mipmaps of texture each time after rendered;
	                this._compositor.getFrameBuffer().updateMipmap(renderer.gl);
	            }

	            for (var inputName in this.inputLinks) {
	                var link = this.inputLinks[inputName];
	                link.node.removeReference(link.pin);
	            }

	            this._rendering = false;
	            this._rendered = true;

	            this.trigger('afterrender', renderer);
	        },

	        // TODO Remove parameter function callback
	        updateParameter: function (outputName, renderer) {
	            var outputInfo = this.outputs[outputName];
	            var parameters = outputInfo.parameters;
	            var parametersCopy = outputInfo._parametersCopy;
	            if (!parametersCopy) {
	                parametersCopy = outputInfo._parametersCopy = {};
	            }
	            if (parameters) {
	                for (var key in parameters) {
	                    if (key !== 'width' && key !== 'height') {
	                        parametersCopy[key] = parameters[key];
	                    }
	                }
	            }
	            var width, height;
	            if (parameters.width instanceof Function) {
	                width = parameters.width.call(this, renderer);
	            }
	            else {
	                width = parameters.width;
	            }
	            if (parameters.height instanceof Function) {
	                height = parameters.height.call(this, renderer);
	            }
	            else {
	                height = parameters.height;
	            }
	            if (
	                parametersCopy.width !== width
	                || parametersCopy.height !== height
	            ) {
	                if (this._outputTextures[outputName]) {
	                    this._outputTextures[outputName].dispose(renderer.gl);
	                }
	            }
	            parametersCopy.width = width;
	            parametersCopy.height = height;

	            return parametersCopy;
	        },

	        /**
	         * Set parameter
	         * @param {string} name
	         * @param {} value
	         */
	        setParameter: function (name, value) {
	            this.pass.setUniform(name, value);
	        },
	        /**
	         * Get parameter value
	         * @param  {string} name
	         * @return {}
	         */
	        getParameter: function (name) {
	            return this.pass.getUniform(name);
	        },
	        /**
	         * Set parameters
	         * @param {Object} obj
	         */
	        setParameters: function (obj) {
	            for (var name in obj) {
	                this.setParameter(name, obj[name]);
	            }
	        },
	        /**
	         * Set shader code
	         * @param {string} shaderStr
	         */
	        setShader: function (shaderStr) {
	            var material = this.pass.material;
	            material.shader.setFragment(shaderStr);
	            material.attachShader(material.shader, true);
	        },
	        /**
	         * Proxy of pass.material.shader.define('fragment', xxx);
	         * @param  {string} symbol
	         * @param  {number} [val]
	         */
	        shaderDefine: function (symbol, val) {
	            this.pass.material.shader.define('fragment', symbol, val);
	        },

	        /**
	         * Proxy of pass.material.shader.unDefine('fragment', xxx)
	         * @param  {string} symbol
	         */
	        shaderUnDefine: function (symbol) {
	            this.pass.material.shader.unDefine('fragment', symbol);
	        },

	        removeReference: function (outputName) {
	            this._outputReferences[outputName]--;
	            if (this._outputReferences[outputName] === 0) {
	                var outputInfo = this.outputs[outputName];
	                if (outputInfo.keepLastFrame) {
	                    if (this._prevOutputTextures[outputName]) {
	                        this._compositor.releaseTexture(this._prevOutputTextures[outputName]);
	                    }
	                    this._prevOutputTextures[outputName] = this._outputTextures[outputName];
	                }
	                else {
	                    // Output of this node have alreay been used by all other nodes
	                    // Put the texture back to the pool.
	                    this._compositor.releaseTexture(this._outputTextures[outputName]);
	                }
	            }
	        },

	        link: function (inputPinName, fromNode, fromPinName) {

	            // The relationship from output pin to input pin is one-on-multiple
	            this.inputLinks[inputPinName] = {
	                node: fromNode,
	                pin: fromPinName
	            };
	            if (!fromNode.outputLinks[fromPinName]) {
	                fromNode.outputLinks[fromPinName] = [];
	            }
	            fromNode.outputLinks[ fromPinName ].push({
	                node: this,
	                pin: inputPinName
	            });

	            // Enabled the pin texture in shader
	            var shader = this.pass.material.shader;
	            shader.enableTexture(inputPinName);
	        },

	        clear: function () {
	            Node.prototype.clear.call(this);

	            var shader = this.pass.material.shader;
	            // Default disable all texture
	            shader.disableTexturesAll();
	        },

	        updateReference: function (outputName) {
	            if (!this._rendering) {
	                this._rendering = true;
	                for (var inputName in this.inputLinks) {
	                    var link = this.inputLinks[inputName];
	                    link.node.updateReference(link.pin);
	                }
	                this._rendering = false;
	            }
	            if (outputName) {
	                this._outputReferences[outputName] ++;
	            }
	        },

	        beforeFrame: function () {
	            this._rendered = false;

	            for (var name in this.outputLinks) {
	                this._outputReferences[name] = 0;
	            }
	        },

	        afterFrame: function () {
	            // Put back all the textures to pool
	            for (var name in this.outputLinks) {
	                if (this._outputReferences[name] > 0) {
	                    var outputInfo = this.outputs[name];
	                    if (outputInfo.keepLastFrame) {
	                        if (this._prevOutputTextures[name]) {
	                            this._compositor.releaseTexture(this._prevOutputTextures[name]);
	                        }
	                        this._prevOutputTextures[name] = this._outputTextures[name];
	                    }
	                    else {
	                        this._compositor.releaseTexture(this._outputTextures[name]);
	                    }
	                }
	            }
	        }
	    });

	    module.exports = FilterNode;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var Matrix4 = __webpack_require__(16);
	var Vector3 = __webpack_require__(14);
	var Texture2D = __webpack_require__(33);
	var Texture = __webpack_require__(21);
	var Pass = __webpack_require__(57);
	var Shader = __webpack_require__(18);
	var FrameBuffer = __webpack_require__(48);

	Shader.import(__webpack_require__(135));

	function generateNoiseData(size) {
	    var data = new Uint8Array(size * size * 4);
	    var n = 0;
	    var v3 = new Vector3();
	    for (var i = 0; i < size; i++) {
	        for (var j = 0; j < size; j++) {
	            v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, 0).normalize();
	            data[n++] = (v3.x * 0.5 + 0.5) * 255;
	            data[n++] = (v3.y * 0.5 + 0.5) * 255;
	            data[n++] = 0;
	            data[n++] = 255;
	        }
	    }
	    return data;
	}

	function generateNoiseTexture(size) {
	    return new Texture2D({
	        pixels: generateNoiseData(size),
	        wrapS: Texture.REPEAT,
	        wrapT: Texture.REPEAT,
	        width: size,
	        height: size
	    });
	}

	function generateKernel(size) {
	    var kernel = new Float32Array(size * 3);
	    var v3 = new Vector3();
	    for (var i = 0; i < size; i++) {
	        v3.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1)
	            .normalize().scale(Math.random());
	        kernel[i * 3] = v3.x;
	        kernel[i * 3 + 1] = v3.y;
	        kernel[i * 3 + 2] = v3.z;
	    }
	    return kernel;
	}

	function SSAOPass(opt) {
	    opt = opt || {};

	    this._ssaoPass = new Pass({
	        fragment: Shader.source('ecgl.ssao.estimate')
	    });
	    this._blendPass = new Pass({
	        fragment: Shader.source('ecgl.ssao.blur')
	    });
	    this._framebuffer = new FrameBuffer();
	    this._ssaoTexture = new Texture2D();

	    this._targetTexture = new Texture2D({
	        type: Texture.HALF_FLOAT
	    });

	    this._depthTexture = opt.depthTexture;

	    this.setNoiseSize(4);
	    this.setKernelSize(opt.kernelSize || 16);
	    this.setParameter('blurSize', Math.round(opt.blurSize || 4));
	    if (opt.radius != null) {
	        this.setParameter('radius', opt.radius);
	    }
	    if (opt.power != null) {
	        this.setParameter('power', opt.power);
	    }
	}

	SSAOPass.prototype.setDepthTexture = function (depthTex) {
	    this._depthTexture = depthTex;
	};

	SSAOPass.prototype.update = function (renderer, camera, frame) {
	    var width = renderer.getWidth();
	    var height = renderer.getHeight();

	    var ssaoPass = this._ssaoPass;

	    ssaoPass.setUniform('kernel', this._kernels[frame % this._kernels.length]);
	    ssaoPass.setUniform('depthTex', this._depthTexture);
	    ssaoPass.setUniform('depthTexSize', [this._depthTexture.width, this._depthTexture.height]);

	    var viewInverseTranspose = new Matrix4();
	    Matrix4.transpose(viewInverseTranspose, camera.worldTransform);

	    ssaoPass.setUniform('projection', camera.projectionMatrix._array);
	    ssaoPass.setUniform('projectionInv', camera.invProjectionMatrix._array);
	    ssaoPass.setUniform('viewInverseTranspose', viewInverseTranspose._array);

	    var ssaoTexture = this._ssaoTexture;
	    if (width !== ssaoTexture.width || height !== ssaoTexture.height) {
	        ssaoTexture.width = width;
	        ssaoTexture.height = height;
	        ssaoTexture.dirty();
	    }
	    this._framebuffer.attach(ssaoTexture);
	    this._framebuffer.bind(renderer);
	    renderer.gl.clearColor(1, 1, 1, 1);
	    renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
	    ssaoPass.render(renderer);
	    this._framebuffer.unbind(renderer);
	};

	SSAOPass.prototype.getTargetTexture = function () {
	    return this._targetTexture;
	}

	SSAOPass.prototype.blend = function (renderer, sourceTexture) {
	    var blendPass = this._blendPass;
	    var width = this._depthTexture.width;
	    var height = this._depthTexture.height;

	    var targetTexture = this._targetTexture;
	    if (sourceTexture.width !== targetTexture.width
	        || sourceTexture.height !== targetTexture.height
	    ) {
	        targetTexture.width = sourceTexture.width;
	        targetTexture.height = sourceTexture.height;
	        targetTexture.dirty();
	    }
	    this._framebuffer.attach(targetTexture);
	    this._framebuffer.bind(renderer);

	    blendPass.setUniform('textureSize', [width, height]);
	    blendPass.setUniform('ssaoTexture', this._ssaoTexture);
	    blendPass.setUniform('sourceTexture', sourceTexture);
	    blendPass.render(renderer);

	    this._framebuffer.unbind(renderer);
	};

	SSAOPass.prototype.setParameter = function (name, val) {
	    if (name === 'noiseTexSize') {
	        this.setNoiseSize(val);
	    }
	    else if (name === 'kernelSize') {
	        this.setKernelSize(val);
	    }
	    else if (name === 'blurSize') {
	        this._blendPass.material.shader.define('fragment', 'BLUR_SIZE', val);
	    }
	    else if (name === 'ssaoIntensity') {
	        this._blendPass.material.set('ssaoIntensity', val);
	    }
	    else {
	        this._ssaoPass.setUniform(name, val);
	    }
	};

	SSAOPass.prototype.setKernelSize = function (size) {
	    this._ssaoPass.material.shader.define('fragment', 'KERNEL_SIZE', size);
	    this._kernels = this._kernels || [];
	    for (var i = 0; i < 30; i++) {
	        this._kernels[i] = generateKernel(size);
	    }
	};

	SSAOPass.prototype.setNoiseSize = function (size) {
	    var texture = this._ssaoPass.getUniform('noiseTex');
	    if (!texture) {
	        texture = generateNoiseTexture(size);
	        this._ssaoPass.setUniform('noiseTex', generateNoiseTexture(size));
	    }
	    else {
	        texture.data = generateNoiseData(size);
	        texture.width = texture.height = size;
	        texture.dirty();
	    }

	    this._ssaoPass.setUniform('noiseTexSize', [size, size]);
	};

	module.exports = SSAOPass;

/***/ },
/* 135 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.ssao.estimate\n\nuniform sampler2D depthTex;\n\nuniform sampler2D noiseTex;\n\nuniform vec2 depthTexSize;\n\nuniform vec2 noiseTexSize;\n\nuniform mat4 projection;\n\nuniform mat4 projectionInv;\n\nuniform mat4 viewInverseTranspose;\n\nuniform vec3 kernel[KERNEL_SIZE];\n\nuniform float radius : 1;\n\nuniform float power : 2;\n\nuniform float bias: 1e-2;\n\nvarying vec2 v_Texcoord;\n\n#ifdef DEPTH_ENCODED\n@import qtek.util.decode_float\n#endif\n\nvec3 ssaoEstimator(in vec3 originPos) {\n    float occlusion = 0.0;\n\n    for (int i = 0; i < KERNEL_SIZE; i++) {\n        vec3 samplePos = kernel[i] * radius + originPos;\n\n        vec4 texCoord = projection * vec4(samplePos, 1.0);\n        texCoord.xy /= texCoord.w;\n\n        vec4 depthTexel = texture2D(depthTex, texCoord.xy * 0.5 + 0.5);\n#ifdef DEPTH_ENCODED\n        depthTexel.rgb /= depthTexel.a;\n        float sampleDepth = decodeFloat(depthTexel) * 2.0 - 1.0;\n#else\n        float sampleDepth = depthTexel.r * 2.0 - 1.0;\n#endif\n\n        sampleDepth = projection[3][2] / (sampleDepth * projection[2][3] - projection[2][2]);\n\n        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - sampleDepth));\n        occlusion += rangeCheck * step(samplePos.z, sampleDepth - bias);\n    }\n    occlusion = 1.0 - clamp((occlusion / float(KERNEL_SIZE) - 0.6) * 2.5, 0.0, 1.0);\n    return vec3(pow(occlusion, power));\n}\n\nvoid main()\n{\n\n    vec4 depthTexel = texture2D(depthTex, v_Texcoord);\n#ifdef DEPTH_ENCODED\n    depthTexel.rgb /= depthTexel.a;\n    float z = decodeFloat(depthTexel) * 2.0 - 1.0;\n#else\n    float z = depthTexel.r * 2.0 - 1.0;\n#endif\n\n    vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, z, 1.0);\n    vec4 p4 = projectionInv * projectedPos;\n\n    vec3 position = p4.xyz / p4.w;\n\n    vec2 noiseTexCoord = depthTexSize / vec2(noiseTexSize) * v_Texcoord;\n    vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;\n\n    gl_FragColor = vec4(vec3(ssaoEstimator(position)), 1.0);\n}\n\n@end\n\n\n@export ecgl.ssao.blur\n\nuniform sampler2D ssaoTexture;\nuniform sampler2D sourceTexture;\n\nuniform float ssaoIntensity: 1.0;\n\nuniform vec2 textureSize;\n\nvarying vec2 v_Texcoord;\n\nvoid main ()\n{\n\n    vec2 texelSize = 1.0 / textureSize;\n\n    float ao = float(0.0);\n    vec2 hlim = vec2(float(-BLUR_SIZE) * 0.5 + 0.5);\n    float centerAo = texture2D(ssaoTexture, v_Texcoord).r;\n    float weightAll = 0.0;\n    float boxWeight = 1.0 / float(BLUR_SIZE) * float(BLUR_SIZE);\n    for (int x = 0; x < BLUR_SIZE; x++) {\n        for (int y = 0; y < BLUR_SIZE; y++) {\n            vec2 coord = (vec2(float(x), float(y)) + hlim) * texelSize + v_Texcoord;\n            float sampleAo = texture2D(ssaoTexture, coord).r;\n            // http://stackoverflow.com/questions/6538310/anyone-know-where-i-can-find-a-glsl-implementation-of-a-bilateral-filter-blur\n            // PENDING\n            float closeness = 1.0 - distance(sampleAo, centerAo) / sqrt(3.0);\n            float weight = boxWeight * closeness;\n            ao += weight * sampleAo;\n            weightAll += weight;\n        }\n    }\n\n    vec4 color = texture2D(sourceTexture, v_Texcoord);\n    color.rgb *= clamp(1.0 - (1.0 - ao / weightAll) * ssaoIntensity, 0.0, 1.0);\n    gl_FragColor = color;\n}\n@end"

/***/ },
/* 136 */
/***/ function(module, exports) {

	module.exports = "{\n    \"type\" : \"compositor\",\n    \"nodes\" : [\n\n        {\n            \"name\": \"source\",\n            \"type\": \"texture\",\n            \"outputs\": {\n                \"color\": {}\n            }\n        },\n        {\n            \"name\": \"source_half\",\n            \"shader\": \"#source(qtek.compositor.downsample)\",\n            \"inputs\": {\n                \"texture\": \"source\"\n            },\n            \"outputs\": {\n                \"color\": {\n                    \"parameters\": {\n                        \"width\": \"expr(width * 1.0 / 2)\",\n                        \"height\": \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"textureSize\": \"expr( [width * 1.0, height * 1.0] )\"\n            }\n        },\n\n\n        {\n            \"name\" : \"bright\",\n            \"shader\" : \"#source(qtek.compositor.bright)\",\n            \"inputs\" : {\n                \"texture\" : \"source_half\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"threshold\" : 2,\n                \"scale\": 4,\n                \"textureSize\": \"expr([width * 1.0 / 2, height / 2])\"\n            }\n        },\n        {\n            \"name\" : \"bright2\",\n            \"shader\" : \"#source(qtek.compositor.bright)\",\n            \"inputs\" : {\n                \"texture\": \"source_half\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"threshold\": 20,\n                \"scale\": 0.01\n            }\n        },\n\n        {\n            \"name\": \"bright_downsample_4\",\n            \"shader\" : \"#source(qtek.compositor.downsample)\",\n            \"inputs\" : {\n                \"texture\" : \"bright\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 4)\",\n                        \"height\" : \"expr(height * 1.0 / 4)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"textureSize\": \"expr( [width * 1.0 / 2, height / 2] )\"\n            }\n        },\n        {\n            \"name\": \"bright_downsample_8\",\n            \"shader\" : \"#source(qtek.compositor.downsample)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_4\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 8)\",\n                        \"height\" : \"expr(height * 1.0 / 8)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"textureSize\": \"expr( [width * 1.0 / 4, height / 4] )\"\n            }\n        },\n        {\n            \"name\": \"bright_downsample_16\",\n            \"shader\" : \"#source(qtek.compositor.downsample)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_8\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 16)\",\n                        \"height\" : \"expr(height * 1.0 / 16)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"textureSize\": \"expr( [width * 1.0 / 8, height / 8] )\"\n            }\n        },\n        {\n            \"name\": \"bright_downsample_32\",\n            \"shader\" : \"#source(qtek.compositor.downsample)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_16\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 32)\",\n                        \"height\" : \"expr(height * 1.0 / 32)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"textureSize\": \"expr( [width * 1.0 / 16, height / 16] )\"\n            }\n        },\n\n\n        {\n            \"name\" : \"bright_upsample_16_blur_h\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_32\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 16)\",\n                        \"height\" : \"expr(height * 1.0 / 16)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 0.0,\n                \"textureSize\": \"expr( [width * 1.0 / 32, height / 32] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_16_blur_v\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_upsample_16_blur_h\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 16)\",\n                        \"height\" : \"expr(height * 1.0 / 16)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 1.0,\n                \"textureSize\": \"expr( [width * 1.0 / 32, height * 1.0 / 32] )\"\n            }\n        },\n\n\n\n        {\n            \"name\" : \"bright_upsample_8_blur_h\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_16\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 8)\",\n                        \"height\" : \"expr(height * 1.0 / 8)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 0.0,\n                \"textureSize\": \"expr( [width * 1.0 / 16, height * 1.0 / 16] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_8_blur_v\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_upsample_8_blur_h\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 8)\",\n                        \"height\" : \"expr(height * 1.0 / 8)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 1.0,\n                \"textureSize\": \"expr( [width * 1.0 / 16, height * 1.0 / 16] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_8_blend\",\n            \"shader\" : \"#source(qtek.compositor.blend)\",\n            \"inputs\" : {\n                \"texture1\" : \"bright_upsample_8_blur_v\",\n                \"texture2\" : \"bright_upsample_16_blur_v\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 8)\",\n                        \"height\" : \"expr(height * 1.0 / 8)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"weight1\" : 0.3,\n                \"weight2\" : 0.7\n            }\n        },\n\n\n        {\n            \"name\" : \"bright_upsample_4_blur_h\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_8\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 4)\",\n                        \"height\" : \"expr(height * 1.0 / 4)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 0.0,\n                \"textureSize\": \"expr( [width * 1.0 / 8, height * 1.0 / 8] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_4_blur_v\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_upsample_4_blur_h\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 4)\",\n                        \"height\" : \"expr(height * 1.0 / 4)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 1.0,\n                \"textureSize\": \"expr( [width * 1.0 / 8, height * 1.0 / 8] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_4_blend\",\n            \"shader\" : \"#source(qtek.compositor.blend)\",\n            \"inputs\" : {\n                \"texture1\" : \"bright_upsample_4_blur_v\",\n                \"texture2\" : \"bright_upsample_8_blend\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 4)\",\n                        \"height\" : \"expr(height * 1.0 / 4)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"weight1\" : 0.3,\n                \"weight2\" : 0.7\n            }\n        },\n\n\n\n\n\n        {\n            \"name\" : \"bright_upsample_2_blur_h\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_downsample_4\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 0.0,\n                \"textureSize\": \"expr( [width * 1.0 / 4, height * 1.0 / 4] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_2_blur_v\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_upsample_2_blur_h\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 1.0,\n                \"textureSize\": \"expr( [width * 1.0 / 4, height * 1.0 / 4] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_2_blend\",\n            \"shader\" : \"#source(qtek.compositor.blend)\",\n            \"inputs\" : {\n                \"texture1\" : \"bright_upsample_2_blur_v\",\n                \"texture2\" : \"bright_upsample_4_blend\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"weight1\" : 0.3,\n                \"weight2\" : 0.7\n            }\n        },\n\n\n\n        {\n            \"name\" : \"bright_upsample_full_blur_h\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0)\",\n                        \"height\" : \"expr(height * 1.0)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 0.0,\n                \"textureSize\": \"expr( [width * 1.0 / 2, height * 1.0 / 2] )\"\n            }\n        },\n        {\n            \"name\" : \"bright_upsample_full_blur_v\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"bright_upsample_full_blur_h\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0)\",\n                        \"height\" : \"expr(height * 1.0)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 1.0,\n                \"textureSize\": \"expr( [width * 1.0 / 2, height * 1.0 / 2] )\"\n            }\n        },\n        {\n            \"name\" : \"bloom_composite\",\n            \"shader\" : \"#source(qtek.compositor.blend)\",\n            \"inputs\" : {\n                \"texture1\" : \"bright_upsample_full_blur_v\",\n                \"texture2\" : \"bright_upsample_2_blend\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0)\",\n                        \"height\" : \"expr(height * 1.0)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"weight1\" : 0.3,\n                \"weight2\" : 0.7\n            }\n        },\n\n\n        {\n            \"name\": \"coc\",\n            \"shader\": \"#source(qtek.compositor.dof.coc)\",\n            \"outputs\": {\n                \"color\": {\n                    \"parameters\": {\n                        \"minFilter\": \"NEAREST\",\n                        \"magFilter\": \"NEAREST\",\n                        \"width\": \"expr(width * 1.0)\",\n                        \"height\": \"expr(height * 1.0)\"\n                    }\n                }\n            },\n            \"parameters\": {\n                \"focalDist\": 50,\n                \"focalRange\": 30\n            }\n        },\n\n        {\n            \"name\": \"dof_far_blur\",\n            \"shader\": \"#source(ecgl.dof.diskBlur)\",\n            \"inputs\": {\n                \"texture\": \"source\",\n                \"coc\": \"coc\"\n            },\n            \"outputs\": {\n                \"color\": {\n                    \"parameters\": {\n                        \"width\": \"expr(width * 1.0)\",\n                        \"height\": \"expr(height * 1.0)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\": {\n                \"textureSize\": \"expr( [width * 1.0, height * 1.0] )\"\n            }\n        },\n        {\n            \"name\": \"dof_near_blur\",\n            \"shader\": \"#source(ecgl.dof.diskBlur)\",\n            \"inputs\": {\n                \"texture\": \"source\",\n                \"coc\": \"coc\"\n            },\n            \"outputs\": {\n                \"color\": {\n                    \"parameters\": {\n                        \"width\": \"expr(width * 1.0)\",\n                        \"height\": \"expr(height * 1.0)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\": {\n                \"textureSize\": \"expr( [width * 1.0, height * 1.0] )\"\n            },\n            \"defines\": {\n                \"BLUR_NEARFIELD\": null\n            }\n        },\n\n\n        {\n            \"name\": \"dof_coc_blur\",\n            \"shader\": \"#source(ecgl.dof.diskBlur)\",\n            \"inputs\": {\n                \"texture\": \"coc\"\n            },\n            \"outputs\": {\n                \"color\": {\n                    \"parameters\": {\n                        \"minFilter\": \"NEAREST\",\n                        \"magFilter\": \"NEAREST\",\n                        \"width\": \"expr(width * 1.0)\",\n                        \"height\": \"expr(height * 1.0)\"\n                    }\n                }\n            },\n            \"parameters\": {\n                \"textureSize\": \"expr( [width * 1.0, height * 1.0] )\"\n            },\n            \"defines\": {\n                \"BLUR_COC\": null\n            }\n        },\n\n        {\n            \"name\": \"dof_composite\",\n            \"shader\": \"#source(qtek.compositor.dof.composite)\",\n            \"inputs\": {\n                \"original\": \"source\",\n                \"blurred\": \"dof_far_blur\",\n                \"nearfield\": \"dof_near_blur\",\n                \"coc\": \"coc\",\n                \"nearcoc\": \"dof_coc_blur\"\n            },\n            \"outputs\": {\n                \"color\": {\n                    \"parameters\": {\n                        \"width\": \"expr(width * 1.0)\",\n                        \"height\": \"expr(height * 1.0)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            }\n        },\n\n        {\n            \"name\" : \"lensflare\",\n            \"shader\" : \"#source(qtek.compositor.lensflare)\",\n            \"inputs\" : {\n                \"texture\" : \"bright2\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"textureSize\" : \"expr([width * 1.0 / 2, height * 1.0 / 2])\",\n                \"lensColor\" : \"#lenscolor\"\n            }\n        },\n        {\n            \"name\" : \"lensflare_blur_h\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"lensflare\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 0.0,\n                \"textureSize\" : \"expr([width * 1.0 / 2, height * 1.0 / 2])\"\n            }\n        },\n        {\n            \"name\" : \"lensflare_blur_v\",\n            \"shader\" : \"#source(qtek.compositor.gaussian_blur)\",\n            \"inputs\" : {\n                \"texture\" : \"lensflare_blur_h\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0 / 2)\",\n                        \"height\" : \"expr(height * 1.0 / 2)\",\n                        \"type\": \"HALF_FLOAT\"\n                    }\n                }\n            },\n            \"parameters\" : {\n                \"blurSize\" : 1,\n                \"blurDir\": 1.0,\n                \"textureSize\" : \"expr([width * 1.0 / 2, height * 1.0 / 2])\"\n            }\n        },\n        {\n            \"name\" : \"composite\",\n            \"shader\" : \"#source(qtek.compositor.hdr.composite)\",\n            \"inputs\" : {\n                \"texture\": \"source\",\n                \"bloom\" : \"bloom_composite\"\n            },\n            \"outputs\" : {\n                \"color\" : {\n                    \"parameters\" : {\n                        \"width\" : \"expr(width * 1.0)\",\n                        \"height\" : \"expr(height * 1.0)\"\n                    }\n                }\n            },\n            \"parameters\": {\n                \"bloomIntensity\": 0.03\n            },\n            \"defines\": {\n                \"PREMULTIPLY_ALPHA\": null\n            }\n        },\n        {\n            \"name\" : \"FXAA\",\n            \"shader\" : \"#source(qtek.compositor.fxaa)\",\n            \"inputs\" : {\n                \"texture\" : \"composite\"\n            }\n        }\n    ]\n}"

/***/ },
/* 137 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.kernel.gaussian_9\nfloat gaussianKernel[9];\ngaussianKernel[0] = 0.07;\ngaussianKernel[1] = 0.09;\ngaussianKernel[2] = 0.12;\ngaussianKernel[3] = 0.14;\ngaussianKernel[4] = 0.16;\ngaussianKernel[5] = 0.14;\ngaussianKernel[6] = 0.12;\ngaussianKernel[7] = 0.09;\ngaussianKernel[8] = 0.07;\n@end\n\n@export qtek.compositor.kernel.gaussian_13\n\nfloat gaussianKernel[13];\n\ngaussianKernel[0] = 0.02;\ngaussianKernel[1] = 0.03;\ngaussianKernel[2] = 0.06;\ngaussianKernel[3] = 0.08;\ngaussianKernel[4] = 0.11;\ngaussianKernel[5] = 0.13;\ngaussianKernel[6] = 0.14;\ngaussianKernel[7] = 0.13;\ngaussianKernel[8] = 0.11;\ngaussianKernel[9] = 0.08;\ngaussianKernel[10] = 0.06;\ngaussianKernel[11] = 0.03;\ngaussianKernel[12] = 0.02;\n\n@end\n\n\n@export qtek.compositor.gaussian_blur\n\nuniform sampler2D texture; varying vec2 v_Texcoord;\n\nuniform float blurSize : 2.0;\nuniform vec2 textureSize : [512.0, 512.0];\nuniform float blurDir : 0.0;\n\n@import qtek.util.rgbm\n@import qtek.util.clamp_sample\n\nvoid main (void)\n{\n    @import qtek.compositor.kernel.gaussian_9\n\n    vec2 off = blurSize / textureSize;\n    off *= vec2(1.0 - blurDir, blurDir);\n\n    vec4 sum = vec4(0.0);\n    float weightAll = 0.0;\n\n        for (int i = 0; i < 9; i++) {\n        float w = gaussianKernel[i];\n                sum += decodeHDR(clampSample(texture, v_Texcoord + float(i - 4) * off)) * w;\n        weightAll += w;\n    }\n    gl_FragColor = encodeHDR(sum / weightAll);\n}\n\n@end\n\n@export qtek.compositor.box_blur\n\nuniform sampler2D texture;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 3.0;\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n@import qtek.util.clamp_sample\n\nvoid main(void)\n{\n\n    vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n    vec2 offset = blurSize / textureSize;\n\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(offset.x, 0.0) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(offset.x, offset.y) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(-offset.x, offset.y) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(0.0, offset.y) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(-offset.x, 0.0) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(-offset.x, -offset.y) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(offset.x, -offset.y) ));\n    tex += decodeHDR(clampSample(texture, v_Texcoord + vec2(0.0, -offset.y) ));\n\n    tex /= 9.0;\n\n    \n    gl_FragColor = encodeHDR(tex);\n}\n\n@end";


/***/ },
/* 138 */
/***/ function(module, exports) {

	
	module.exports = "\n@export qtek.compositor.lut\n\nvarying vec2 v_Texcoord;\n\nuniform sampler2D texture;\nuniform sampler2D lookup;\n\nvoid main()\n{\n\n    vec4 tex = texture2D(texture, v_Texcoord);\n\n    float blueColor = tex.b * 63.0;\n\n    vec2 quad1;\n    quad1.y = floor(floor(blueColor) / 8.0);\n    quad1.x = floor(blueColor) - (quad1.y * 8.0);\n\n    vec2 quad2;\n    quad2.y = floor(ceil(blueColor) / 8.0);\n    quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n\n    vec2 texPos1;\n    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n\n    vec2 texPos2;\n    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.r);\n    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * tex.g);\n\n    vec4 newColor1 = texture2D(lookup, texPos1);\n    vec4 newColor2 = texture2D(lookup, texPos2);\n\n    vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n    gl_FragColor = vec4(newColor.rgb, tex.w);\n}\n\n@end";


/***/ },
/* 139 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.output\n\n#define OUTPUT_ALPHA\n\nvarying vec2 v_Texcoord;\n\nuniform sampler2D texture;\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n    vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n\n    gl_FragColor.rgb = tex.rgb;\n\n#ifdef OUTPUT_ALPHA\n    gl_FragColor.a = tex.a;\n#else\n    gl_FragColor.a = 1.0;\n#endif\n\n    gl_FragColor = encodeHDR(gl_FragColor);\n\n        #ifdef PREMULTIPLY_ALPHA\n    gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n\n@end";


/***/ },
/* 140 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.bright\n\nuniform sampler2D texture;\n\nuniform float threshold : 1;\nuniform float scale : 1.0;\n\nuniform vec2 textureSize: [512, 512];\n\nvarying vec2 v_Texcoord;\n\nconst vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);\n\n@import qtek.util.rgbm\n\n\nvec3 median(vec3 a, vec3 b, vec3 c)\n{\n    return a + b + c - min(min(a, b), c) - max(max(a, b), c);\n}\n\nvoid main()\n{\n    vec3 texel = decodeHDR(texture2D(texture, v_Texcoord)).rgb;\n\n#ifdef ANTI_FLICKER\n            vec3 d = 1.0 / textureSize.xyx * vec3(1.0, 1.0, 0.0);\n\n    vec3 s1 = decodeHDR(texture2D(texture, v_Texcoord - d.xz)).rgb;\n    vec3 s2 = decodeHDR(texture2D(texture, v_Texcoord + d.xz)).rgb;\n    vec3 s3 = decodeHDR(texture2D(texture, v_Texcoord - d.zy)).rgb;\n    vec3 s4 = decodeHDR(texture2D(texture, v_Texcoord + d.zy)).rgb;\n    texel = median(median(texel, s1, s2), s3, s4);\n\n#endif\n\n    float lum = dot(texel, lumWeight);\n    vec4 color;\n    if (lum > threshold)\n    {\n        color.rgb = texel * scale;\n    }\n    else\n    {\n        color.rgb = vec3(0.0);\n    }\n    color.a = 1.0;\n\n    gl_FragColor = encodeHDR(color);\n}\n@end\n";


/***/ },
/* 141 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.downsample\n\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\nfloat brightness(vec3 c)\n{\n    return max(max(c.r, c.g), c.b);\n}\n\n@import qtek.util.clamp_sample\n\nvoid main()\n{\n    vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n\n#ifdef ANTI_FLICKER\n            vec3 s1 = decodeHDR(clampSample(texture, v_Texcoord + d.xy)).rgb;\n    vec3 s2 = decodeHDR(clampSample(texture, v_Texcoord + d.zy)).rgb;\n    vec3 s3 = decodeHDR(clampSample(texture, v_Texcoord + d.xw)).rgb;\n    vec3 s4 = decodeHDR(clampSample(texture, v_Texcoord + d.zw)).rgb;\n\n        float s1w = 1.0 / (brightness(s1) + 1.0);\n    float s2w = 1.0 / (brightness(s2) + 1.0);\n    float s3w = 1.0 / (brightness(s3) + 1.0);\n    float s4w = 1.0 / (brightness(s4) + 1.0);\n    float oneDivideSum = 1.0 / (s1w + s2w + s3w + s4w);\n\n    vec4 color = vec4(\n        (s1 * s1w + s2 * s2w + s3 * s3w + s4 * s4w) * oneDivideSum,\n        1.0\n    );\n#else\n    vec4 color = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n    color += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n    color += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n    color += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n    color *= 0.25;\n#endif\n\n    gl_FragColor = encodeHDR(color);\n}\n\n@end";


/***/ },
/* 142 */
/***/ function(module, exports) {

	
	module.exports = "\n@export qtek.compositor.upsample\n\n#define HIGH_QUALITY\n\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\n\nuniform float sampleScale: 0.5;\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n\n@import qtek.util.clamp_sample\n\nvoid main()\n{\n\n#ifdef HIGH_QUALITY\n        vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy * sampleScale;\n\n    vec4 s;\n    s  = decodeHDR(clampSample(texture, v_Texcoord - d.xy));\n    s += decodeHDR(clampSample(texture, v_Texcoord - d.wy)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord - d.zy));\n\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zw)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord       )) * 4.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.xw)) * 2.0;\n\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.wy)) * 2.0;\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n\n    gl_FragColor = encodeHDR(s / 16.0);\n#else\n        vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n\n    vec4 s;\n    s  = decodeHDR(clampSample(texture, v_Texcoord + d.xy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zy));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.xw));\n    s += decodeHDR(clampSample(texture, v_Texcoord + d.zw));\n\n    gl_FragColor = encodeHDR(s / 4.0);\n#endif\n}\n\n@end";


/***/ },
/* 143 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.hdr.log_lum\n\nvarying vec2 v_Texcoord;\n\nuniform sampler2D texture;\n\nconst vec3 w = vec3(0.2125, 0.7154, 0.0721);\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n    vec4 tex = decodeHDR(texture2D(texture, v_Texcoord));\n    float luminance = dot(tex.rgb, w);\n    luminance = log(luminance + 0.001);\n\n    gl_FragColor = encodeHDR(vec4(vec3(luminance), 1.0));\n}\n\n@end\n\n@export qtek.compositor.hdr.lum_adaption\nvarying vec2 v_Texcoord;\n\nuniform sampler2D adaptedLum;\nuniform sampler2D currentLum;\n\nuniform float frameTime : 0.02;\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n    float fAdaptedLum = decodeHDR(texture2D(adaptedLum, vec2(0.5, 0.5))).r;\n    float fCurrentLum = exp(encodeHDR(texture2D(currentLum, vec2(0.5, 0.5))).r);\n\n    fAdaptedLum += (fCurrentLum - fAdaptedLum) * (1.0 - pow(0.98, 30.0 * frameTime));\n    gl_FragColor = encodeHDR(vec4(vec3(fAdaptedLum), 1.0));\n}\n@end\n\n@export qtek.compositor.hdr.composite\n\nuniform sampler2D texture;\n#ifdef BLOOM_ENABLED\nuniform sampler2D bloom;\n#endif\n#ifdef LENSFLARE_ENABLED\nuniform sampler2D lensflare;\nuniform sampler2D lensdirt;\n#endif\n\n#ifdef LUM_ENABLED\nuniform sampler2D lum;\n#endif\n\n#ifdef LUT_ENABLED\nuniform sampler2D lut;\n#endif\n\n#ifdef VIGNETTE\nuniform float vignetteDarkness: 1.0;\nuniform float vignetteOffset: 1.0;\n#endif\n\nuniform float exposure : 1.0;\nuniform float bloomIntensity : 0.25;\nuniform float lensflareIntensity : 1;\n\nvarying vec2 v_Texcoord;\n\nconst vec3 whiteScale = vec3(11.2);\n\n@import qtek.util.srgb\n\nvec3 uncharted2ToneMap(vec3 x)\n{\n    const float A = 0.22;       const float B = 0.30;       const float C = 0.10;       const float D = 0.20;       const float E = 0.01;       const float F = 0.30;   \n    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\nvec3 filmicToneMap(vec3 color)\n{\n    vec3 x = max(vec3(0.0), color - 0.004);\n    return (x*(6.2*x+0.5))/(x*(6.2*x+1.7)+0.06);\n}\n\nvec3 ACESToneMapping(vec3 color)\n{\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n\nfloat eyeAdaption(float fLum)\n{\n    return mix(0.2, fLum, 0.5);\n}\n\n#ifdef LUT_ENABLED\nvec3 lutTransform(vec3 color) {\n    float blueColor = color.b * 63.0;\n\n    vec2 quad1;\n    quad1.y = floor(floor(blueColor) / 8.0);\n    quad1.x = floor(blueColor) - (quad1.y * 8.0);\n\n    vec2 quad2;\n    quad2.y = floor(ceil(blueColor) / 8.0);\n    quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n\n    vec2 texPos1;\n    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n\n    vec2 texPos2;\n    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.r);\n    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * color.g);\n\n    vec4 newColor1 = texture2D(lut, texPos1);\n    vec4 newColor2 = texture2D(lut, texPos2);\n\n    vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n    return newColor.rgb;\n}\n#endif\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n        vec4 texel = vec4(0.0);\n#ifdef TEXTURE_ENABLED\n    texel += decodeHDR(texture2D(texture, v_Texcoord));\n#endif\n\n#ifdef BLOOM_ENABLED\n    texel += decodeHDR(texture2D(bloom, v_Texcoord)) * bloomIntensity;\n#endif\n\n#ifdef LENSFLARE_ENABLED\n    texel += decodeHDR(texture2D(lensflare, v_Texcoord)) * texture2D(lensdirt, v_Texcoord) * lensflareIntensity;\n#endif\n\n#ifdef LUM_ENABLED\n    float fLum = texture2D(lum, vec2(0.5, 0.5)).r;\n    float adaptedLumDest = 3.0 / (max(0.1, 1.0 + 10.0*eyeAdaption(fLum)));\n    float exposureBias = adaptedLumDest * exposure;\n#else\n    float exposureBias = exposure;\n#endif\n    texel.rgb *= exposureBias;\n\n                texel.rgb = ACESToneMapping(texel.rgb);\n    texel = linearTosRGB(texel);\n\n#ifdef LUT_ENABLED\n    texel.rgb = lutTransform(clamp(texel.rgb,vec3(0.0),vec3(1.0)));\n#endif\n\n#ifdef VIGNETTE\n    vec2 uv = (v_Texcoord - vec2(0.5)) * vec2(vignetteOffset);\n    texel.rgb = mix(texel.rgb, vec3(1.0 - vignetteDarkness), dot(uv, uv));\n#endif\n\n    gl_FragColor = encodeHDR(texel);\n\n#ifdef DEBUG\n        #if DEBUG == 1\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(texture, v_Texcoord)));\n        #elif DEBUG == 2\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(bloom, v_Texcoord)) * bloomIntensity);\n        #elif DEBUG == 3\n    gl_FragColor = encodeHDR(decodeHDR(texture2D(lensflare, v_Texcoord) * lensflareIntensity));\n    #endif\n#endif\n        #ifdef PREMULTIPLY_ALPHA\n    gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n\n@end";


/***/ },
/* 144 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.dof.coc\n\nuniform sampler2D depth;\n\nuniform float zNear: 0.1;\nuniform float zFar: 2000;\n\nuniform float focalDist: 3;\nuniform float focalRange: 1;\nuniform float focalLength: 30;\nuniform float fstop: 0.36;\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.encode_float\n\nvoid main()\n{\n    float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n\n    float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n\n    float aperture = 1.0 / fstop;\n\n    float coc;\n\n    float uppper = focalDist + focalRange;\n    float lower = focalDist - focalRange;\n    if (dist <= uppper && dist >= lower) {\n                coc = 0.5;\n    }\n    else {\n                float focalAdjusted = dist > uppper ? uppper : lower;\n\n                coc = abs(aperture * (focalLength * (dist - focalAdjusted)) / (dist * (focalAdjusted - focalLength)));\n                                coc = clamp(coc, 0.0, 0.4) / 0.4000001;\n\n                if (dist < lower) {\n            coc = -coc;\n        }\n        coc = coc * 0.5 + 0.5;\n    }\n\n        gl_FragColor = encodeFloat(coc);\n}\n\n@end\n\n@export qtek.compositor.dof.premultiply\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n\n@import qtek.util.decode_float\n\nvoid main() {\n    float fCoc = max(abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0), 0.1);\n    gl_FragColor = encodeHDR(\n        vec4(decodeHDR(texture2D(texture, v_Texcoord)).rgb * fCoc, 1.0)\n    );\n}\n@end\n\n\n@export qtek.compositor.dof.min_coc\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.float\n\nvoid main()\n{\n    vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n\n    float fCoc = decodeFloat(texture2D(coc, v_Texcoord + d.xy));\n    fCoc = min(fCoc, decodeFloat(texture2D(coc, v_Texcoord + d.zy)));\n    fCoc = min(fCoc, decodeFloat(texture2D(coc, v_Texcoord + d.xw)));\n    fCoc = min(fCoc, decodeFloat(texture2D(coc, v_Texcoord + d.zw)));\n\n    gl_FragColor = encodeFloat(fCoc);\n}\n\n@end\n\n\n@export qtek.compositor.dof.max_coc\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.float\n\nvoid main()\n{\n\n    vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n\n    float fCoc = decodeFloat(texture2D(coc, v_Texcoord + d.xy));\n    fCoc = max(fCoc, decodeFloat(texture2D(coc, v_Texcoord + d.zy)));\n    fCoc = max(fCoc, decodeFloat(texture2D(coc, v_Texcoord + d.xw)));\n    fCoc = max(fCoc, decodeFloat(texture2D(coc, v_Texcoord + d.zw)));\n\n    gl_FragColor = encodeFloat(fCoc);\n}\n\n@end\n\n\n\n\n@export qtek.compositor.dof.coc_upsample\n\n#define HIGH_QUALITY\n\nuniform sampler2D coc;\nuniform vec2 textureSize : [512, 512];\n\nuniform float sampleScale: 0.5;\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.float\n\nvoid main()\n{\n\n#ifdef HIGH_QUALITY\n        vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy * sampleScale;\n\n    float s;\n    s  = decodeFloat(texture2D(coc, v_Texcoord - d.xy));\n    s += decodeFloat(texture2D(coc, v_Texcoord - d.wy)) * 2.0;\n    s += decodeFloat(texture2D(coc, v_Texcoord - d.zy));\n\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.zw)) * 2.0;\n    s += decodeFloat(texture2D(coc, v_Texcoord       )) * 4.0;\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.xw)) * 2.0;\n\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.zy));\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.wy)) * 2.0;\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.xy));\n\n    gl_FragColor = encodeFloat(s / 16.0);\n#else\n        vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n\n    float s;\n    s  = decodeFloat(texture2D(coc, v_Texcoord + d.xy));\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.zy));\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.xw));\n    s += decodeFloat(texture2D(coc, v_Texcoord + d.zw));\n\n    gl_FragColor = encodeFloat(s / 4.0);\n#endif\n}\n\n@end\n\n\n\n@export qtek.compositor.dof.upsample\n\n#define HIGH_QUALITY\n\nuniform sampler2D coc;\nuniform sampler2D texture;\nuniform vec2 textureSize : [512, 512];\n\nuniform float sampleScale: 0.5;\n\nvarying vec2 v_Texcoord;\n\n\n@import qtek.util.rgbm\n\n@import qtek.util.decode_float\n\nfloat tap(vec2 uv, inout vec4 color, float baseWeight) {\n    float weight = abs(decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0) * baseWeight;\n    color += decodeHDR(texture2D(texture, uv)) * weight;\n    return weight;\n}\n\nvoid main()\n{\n#ifdef HIGH_QUALITY\n        vec4 d = vec4(1.0, 1.0, -1.0, 0.0) / textureSize.xyxy * sampleScale;\n\n    vec4 color = vec4(0.0);\n    float baseWeight = 1.0 / 16.0;\n    float w  = tap(v_Texcoord - d.xy, color, baseWeight);\n    w += tap(v_Texcoord - d.wy, color, baseWeight * 2.0);\n    w += tap(v_Texcoord - d.zy, color, baseWeight);\n\n    w += tap(v_Texcoord + d.zw, color, baseWeight * 2.0);\n    w += tap(v_Texcoord       , color, baseWeight * 4.0);\n    w += tap(v_Texcoord + d.xw, color, baseWeight * 2.0);\n\n    w += tap(v_Texcoord + d.zy, color, baseWeight);\n    w += tap(v_Texcoord + d.wy, color, baseWeight * 2.0);\n    w += tap(v_Texcoord + d.xy, color, baseWeight);\n\n    gl_FragColor = encodeHDR(color / w);\n#else\n        vec4 d = vec4(-1.0, -1.0, +1.0, +1.0) / textureSize.xyxy;\n\n    vec4 color = vec4(0.0);\n    float baseWeight = 1.0 / 4.0;\n    float w  = tap(v_Texcoord + d.xy, color, baseWeight);\n    w += tap(v_Texcoord + d.zy, color, baseWeight);\n    w += tap(v_Texcoord + d.xw, color, baseWeight);\n    w += tap(v_Texcoord + d.zw, color, baseWeight);\n\n    gl_FragColor = encodeHDR(color / w);\n#endif\n}\n\n@end\n\n\n\n@export qtek.compositor.dof.downsample\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nuniform vec2 textureSize : [512, 512];\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n\n@import qtek.util.decode_float\n\nfloat tap(vec2 uv, inout vec4 color) {\n    float weight = abs(decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0) * 0.25;\n    color += decodeHDR(texture2D(texture, uv)) * weight;\n    return weight;\n}\n\nvoid main()\n{\n    vec4 d = vec4(-1.0, -1.0, 1.0, 1.0) / textureSize.xyxy;\n\n    vec4 color = vec4(0.0);\n    float weight = tap(v_Texcoord + d.xy, color);\n    weight += tap(v_Texcoord + d.zy, color);\n    weight += tap(v_Texcoord + d.xw, color);\n    weight += tap(v_Texcoord + d.zw, color);\n    color /= weight;\n\n    gl_FragColor = encodeHDR(color);\n}\n\n@end\n\n\n\n@export qtek.compositor.dof.hexagonal_blur_frag\n\n@import qtek.util.float\n\n\nvec4 doBlur(sampler2D targetTexture, vec2 offset) {\n#ifdef BLUR_COC\n    float cocSum = 0.0;\n#else\n    vec4 color = vec4(0.0);\n#endif\n\n    float weightSum = 0.0;\n    float kernelWeight = 1.0 / float(KERNEL_SIZE);\n\n    for (int i = 0; i < KERNEL_SIZE; i++) {\n        vec2 coord = v_Texcoord + offset * float(i);\n\n        float w = kernelWeight;\n#ifdef BLUR_COC\n        float fCoc = decodeFloat(texture2D(targetTexture, coord)) * 2.0 - 1.0;\n                cocSum += clamp(fCoc, -1.0, 0.0) * w;\n#else\n        float fCoc = decodeFloat(texture2D(coc, coord)) * 2.0 - 1.0;\n        vec4 texel = texture2D(targetTexture, coord);\n    #if !defined(BLUR_NEARFIELD)\n        w *= abs(fCoc);\n    #endif\n        color += decodeHDR(texel) * w;\n#endif\n\n        weightSum += w;\n    }\n#ifdef BLUR_COC\n    return encodeFloat(clamp(cocSum / weightSum, -1.0, 0.0) * 0.5 + 0.5);\n#else\n    return color / weightSum;\n#endif\n}\n\n@end\n\n\n@export qtek.compositor.dof.hexagonal_blur_1\n\n#define KERNEL_SIZE 5\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 1.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n\n@import qtek.compositor.dof.hexagonal_blur_frag\n\nvoid main()\n{\n    vec2 offset = blurSize / textureSize;\n\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n    offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n        gl_FragColor = doBlur(texture, vec2(0.0, offset.y));\n#if !defined(BLUR_COC)\n    gl_FragColor = encodeHDR(gl_FragColor);\n#endif\n}\n\n@end\n\n@export qtek.compositor.dof.hexagonal_blur_2\n\n#define KERNEL_SIZE 5\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 1.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n\n@import qtek.compositor.dof.hexagonal_blur_frag\n\nvoid main()\n{\n    vec2 offset = blurSize / textureSize;\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n    offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n    offset.y /= 2.0;\n\n        gl_FragColor = doBlur(texture, -offset);\n#if !defined(BLUR_COC)\n    gl_FragColor = encodeHDR(gl_FragColor);\n#endif\n}\n@end\n\n@export qtek.compositor.dof.hexagonal_blur_3\n\n#define KERNEL_SIZE 5\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D coc;\n\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 1.0;\n\nuniform vec2 textureSize : [512.0, 512.0];\n\n@import qtek.util.rgbm\n\n@import qtek.compositor.dof.hexagonal_blur_frag\n\nvoid main()\n{\n    vec2 offset = blurSize / textureSize;\n\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n    offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n    offset.y /= 2.0;\n    vec2 vDownRight = vec2(offset.x, -offset.y);\n\n        vec4 texel1 = doBlur(texture1, -offset);\n        vec4 texel2 = doBlur(texture1, vDownRight);\n        vec4 texel3 = doBlur(texture2, vDownRight);\n\n#ifdef BLUR_COC\n    float coc1 = decodeFloat(texel1) * 2.0 - 1.0;\n    float coc2 = decodeFloat(texel2) * 2.0 - 1.0;\n    float coc3 = decodeFloat(texel3) * 2.0 - 1.0;\n    gl_FragColor = encodeFloat(\n        ((coc1 + coc2 + coc3) / 3.0) * 0.5 + 0.5\n    );\n\n#else\n    vec4 color = (texel1 + texel2 + texel3) / 3.0;\n    gl_FragColor = encodeHDR(color);\n#endif\n}\n\n@end\n\n@export qtek.compositor.dof.composite\n\n#define DEBUG 0\n\nuniform sampler2D original;\nuniform sampler2D blurred;\nuniform sampler2D nearfield;\nuniform sampler2D coc;\nuniform sampler2D nearcoc;\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n@import qtek.util.float\n\nvoid main()\n{\n    vec4 blurredColor = decodeHDR(texture2D(blurred, v_Texcoord));\n    vec4 originalColor = decodeHDR(texture2D(original, v_Texcoord));\n\n    float fCoc = decodeFloat(texture2D(coc, v_Texcoord));\n\n            fCoc = abs(fCoc * 2.0 - 1.0);\n\n    float weight = smoothstep(0.0, 1.0, fCoc);\n    \n#ifdef NEARFIELD_ENABLED\n    vec4 nearfieldColor = decodeHDR(texture2D(nearfield, v_Texcoord));\n    float fNearCoc = decodeFloat(texture2D(nearcoc, v_Texcoord));\n    fNearCoc = abs(fNearCoc * 2.0 - 1.0);\n\n        gl_FragColor = encodeHDR(\n        mix(\n            nearfieldColor, mix(originalColor, blurredColor, weight),\n                        pow(1.0 - fNearCoc, 4.0)\n        )\n    );\n#else\n    gl_FragColor = encodeHDR(mix(originalColor, blurredColor, weight));\n#endif\n\n#if DEBUG == 1\n        gl_FragColor = vec4(vec3(fCoc), 1.0);\n#elif DEBUG == 2\n        gl_FragColor = vec4(vec3(fNearCoc), 1.0);\n#elif DEBUG == 3\n    gl_FragColor = encodeHDR(blurredColor);\n#elif DEBUG == 4\n        gl_FragColor = encodeHDR(nearfieldColor);\n#endif\n}\n\n@end";


/***/ },
/* 145 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.lensflare\n\n#define SAMPLE_NUMBER 8\n\nuniform sampler2D texture;\nuniform sampler2D lenscolor;\n\nuniform vec2 textureSize : [512, 512];\n\nuniform float dispersal : 0.3;\nuniform float haloWidth : 0.4;\nuniform float distortion : 1.0;\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n\nvec4 textureDistorted(\n    in vec2 texcoord,\n    in vec2 direction,\n    in vec3 distortion\n) {\n    return vec4(\n        decodeHDR(texture2D(texture, texcoord + direction * distortion.r)).r,\n        decodeHDR(texture2D(texture, texcoord + direction * distortion.g)).g,\n        decodeHDR(texture2D(texture, texcoord + direction * distortion.b)).b,\n        1.0\n    );\n}\n\nvoid main()\n{\n    vec2 texcoord = -v_Texcoord + vec2(1.0);     vec2 textureOffset = 1.0 / textureSize;\n\n    vec2 ghostVec = (vec2(0.5) - texcoord) * dispersal;\n    vec2 haloVec = normalize(ghostVec) * haloWidth;\n\n    vec3 distortion = vec3(-textureOffset.x * distortion, 0.0, textureOffset.x * distortion);\n        vec4 result = vec4(0.0);\n    for (int i = 0; i < SAMPLE_NUMBER; i++)\n    {\n        vec2 offset = fract(texcoord + ghostVec * float(i));\n\n        float weight = length(vec2(0.5) - offset) / length(vec2(0.5));\n        weight = pow(1.0 - weight, 10.0);\n\n        result += textureDistorted(offset, normalize(ghostVec), distortion) * weight;\n    }\n\n    result *= texture2D(lenscolor, vec2(length(vec2(0.5) - texcoord)) / length(vec2(0.5)));\n        float weight = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));\n    weight = pow(1.0 - weight, 10.0);\n    vec2 offset = fract(texcoord + haloVec);\n    result += textureDistorted(offset, normalize(ghostVec), distortion) * weight;\n\n    gl_FragColor = result;\n}\n@end";


/***/ },
/* 146 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.blend\n#ifdef TEXTURE1_ENABLED\nuniform sampler2D texture1;\nuniform float weight1 : 1.0;\n#endif\n#ifdef TEXTURE2_ENABLED\nuniform sampler2D texture2;\nuniform float weight2 : 1.0;\n#endif\n#ifdef TEXTURE3_ENABLED\nuniform sampler2D texture3;\nuniform float weight3 : 1.0;\n#endif\n#ifdef TEXTURE4_ENABLED\nuniform sampler2D texture4;\nuniform float weight4 : 1.0;\n#endif\n#ifdef TEXTURE5_ENABLED\nuniform sampler2D texture5;\nuniform float weight5 : 1.0;\n#endif\n#ifdef TEXTURE6_ENABLED\nuniform sampler2D texture6;\nuniform float weight6 : 1.0;\n#endif\n\nvarying vec2 v_Texcoord;\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n    vec4 tex = vec4(0.0);\n#ifdef TEXTURE1_ENABLED\n    tex += decodeHDR(texture2D(texture1, v_Texcoord)) * weight1;\n#endif\n#ifdef TEXTURE2_ENABLED\n    tex += decodeHDR(texture2D(texture2, v_Texcoord)) * weight2;\n#endif\n#ifdef TEXTURE3_ENABLED\n    tex += decodeHDR(texture2D(texture3, v_Texcoord)) * weight3;\n#endif\n#ifdef TEXTURE4_ENABLED\n    tex += decodeHDR(texture2D(texture4, v_Texcoord)) * weight4;\n#endif\n#ifdef TEXTURE5_ENABLED\n    tex += decodeHDR(texture2D(texture5, v_Texcoord)) * weight5;\n#endif\n#ifdef TEXTURE6_ENABLED\n    tex += decodeHDR(texture2D(texture6, v_Texcoord)) * weight6;\n#endif\n\n    gl_FragColor = encodeHDR(tex);\n}\n@end";


/***/ },
/* 147 */
/***/ function(module, exports) {

	
	module.exports = "@export qtek.compositor.fxaa\n\nuniform sampler2D texture;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec2 v_Texcoord;\n\n#define FXAA_REDUCE_MIN   (1.0/128.0)\n#define FXAA_REDUCE_MUL   (1.0/8.0)\n#define FXAA_SPAN_MAX     8.0\n\n@import qtek.util.rgbm\n\nvoid main()\n{\n    vec2 resolution = 1.0 / viewport.zw;\n    vec3 rgbNW =  decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ) ).xyz;\n    vec3 rgbNE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ) ).xyz;\n    vec3 rgbSW = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ) ).xyz;\n    vec3 rgbSE = decodeHDR( texture2D( texture, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ) ).xyz;\n    vec4 rgbaM  = decodeHDR( texture2D( texture,  gl_FragCoord.xy  * resolution ) );\n    vec3 rgbM  = rgbaM.xyz;\n    float opacity  = rgbaM.w;\n\n    vec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n    float lumaNW = dot( rgbNW, luma );\n    float lumaNE = dot( rgbNE, luma );\n    float lumaSW = dot( rgbSW, luma );\n    float lumaSE = dot( rgbSE, luma );\n    float lumaM  = dot( rgbM,  luma );\n    float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\n    float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\n\n    float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\n    dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n                dir * rcpDirMin)) * resolution;\n\n    vec3 rgbA = decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ) ).xyz;\n    rgbA += decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ) ).xyz;\n    rgbA *= 0.5;\n\n    vec3 rgbB = decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * -0.5 ) ).xyz;\n    rgbB += decodeHDR( texture2D( texture, gl_FragCoord.xy  * resolution + dir * 0.5 ) ).xyz;\n    rgbB *= 0.25;\n    rgbB += rgbA * 0.5;\n\n    float lumaB = dot( rgbB, luma );\n\n    if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) )\n    {\n                gl_FragColor = vec4( rgbA, opacity );\n\n    }\n    else {\n\n        gl_FragColor = vec4( rgbB, opacity );\n\n    }\n}\n\n@end";


/***/ },
/* 148 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.dof.diskBlur\n\n#define POISSON_KERNEL_SIZE 16;\n\nuniform sampler2D texture;\nuniform sampler2D coc;\nvarying vec2 v_Texcoord;\n\nuniform float blurSize : 10.0;\nuniform vec2 textureSize : [512.0, 512.0];\n\nuniform float percent;\n\nfloat nrand(const in vec2 n) {\n    return fract(sin(dot(n.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n@import qtek.util.rgbm\n@import qtek.util.float\n\n\nvoid main()\n{\n    vec2 fTaps_Poisson[POISSON_KERNEL_SIZE];\n    // https://github.com/bartwronski/PoissonSamplingGenerator\n    fTaps_Poisson[0] = vec2(-0.399691779231, 0.728591545584);\n    fTaps_Poisson[1] = vec2(-0.48622557676, -0.84016533712);\n    fTaps_Poisson[2] = vec2(0.770309468987, -0.24906070432);\n    fTaps_Poisson[3] = vec2(0.556596796154, 0.820359876432);\n    fTaps_Poisson[4] = vec2(-0.933902004071, 0.0600539051593);\n    fTaps_Poisson[5] = vec2(0.330144964342, 0.207477293384);\n    fTaps_Poisson[6] = vec2(0.289013230975, -0.686749271417);\n    fTaps_Poisson[7] = vec2(-0.0832470893559, -0.187351643125);\n    fTaps_Poisson[8] = vec2(-0.296314525615, 0.254474834305);\n    fTaps_Poisson[9] = vec2(-0.850977666059, 0.484642744689);\n    fTaps_Poisson[10] = vec2(0.829287915319, 0.2345063545);\n    fTaps_Poisson[11] = vec2(-0.773042143899, -0.543741521254);\n    fTaps_Poisson[12] = vec2(0.0561133030864, 0.928419742597);\n    fTaps_Poisson[13] = vec2(-0.205799249508, -0.562072714492);\n    fTaps_Poisson[14] = vec2(-0.526991665882, -0.193690188118);\n    fTaps_Poisson[15] = vec2(-0.051789270667, -0.935374050821);\n\n    vec2 offset = blurSize / textureSize;\n\n    float rnd = 6.28318 * nrand(v_Texcoord + 0.07 * percent );\n    float cosa = cos(rnd);\n    float sina = sin(rnd);\n    vec4 basis = vec4(cosa, -sina, sina, cosa);\n\n#if !defined(BLUR_NEARFIELD) && !defined(BLUR_COC)\n    offset *= abs(decodeFloat(texture2D(coc, v_Texcoord)) * 2.0 - 1.0);\n#endif\n\n#ifdef BLUR_COC\n    float cocSum = 0.0;\n#else\n    vec4 color = vec4(0.0);\n#endif\n\n\n    float weightSum = 0.0;\n\n    for (int i = 0; i < POISSON_KERNEL_SIZE; i++) {\n        vec2 ofs = fTaps_Poisson[i];\n\n        ofs = vec2(dot(ofs, basis.xy), dot(ofs, basis.zw));\n\n        vec2 uv = v_Texcoord + ofs * offset;\n        vec4 texel = texture2D(texture, uv);\n\n        float w = 1.0;\n#ifdef BLUR_COC\n        float fCoc = decodeFloat(texel) * 2.0 - 1.0;\n        // Blur coc in nearfield\n        cocSum += clamp(fCoc, -1.0, 0.0) * w;\n#else\n        texel = decodeHDR(texel);\n    #if !defined(BLUR_NEARFIELD)\n        float fCoc = decodeFloat(texture2D(coc, uv)) * 2.0 - 1.0;\n        // TODO DOF premult to avoid bleeding, can be tweaked (currently x^3)\n        // tradeoff between bleeding dof and out of focus object that shrinks too much\n        w *= abs(fCoc);\n    #endif\n        color += texel * w;\n#endif\n\n        weightSum += w;\n    }\n\n#ifdef BLUR_COC\n    gl_FragColor = encodeFloat(clamp(cocSum / weightSum, -1.0, 0.0) * 0.5 + 0.5);\n#else\n    color /= weightSum;\n    // TODO Windows will not be totally transparent if color.rgb is not 0 and color.a is 0.\n    gl_FragColor = encodeHDR(color);\n#endif\n}\n\n@end"

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	// Temporal Super Sample for static Scene
	var halton = __webpack_require__(150);
	var Pass = __webpack_require__(57);
	var FrameBuffer = __webpack_require__(48);
	var Texture2D = __webpack_require__(33);
	var Shader = __webpack_require__(18);

	function TemporalSuperSampling () {
	    var haltonSequence = [];

	    for (var i = 0; i < 30; i++) {
	        haltonSequence.push([
	            halton(i, 2), halton(i, 3)
	        ]);
	    }

	    this._haltonSequence = haltonSequence;

	    this._frame = 0;

	    this._sourceTex = new Texture2D();
	    this._sourceFb = new FrameBuffer();
	    this._sourceFb.attach(this._sourceTex);

	    // Frame texture before temporal supersampling
	    this._prevFrameTex = new Texture2D();
	    this._outputTex = new Texture2D();

	    var blendPass = this._blendPass = new Pass({
	        fragment: Shader.source('qtek.compositor.blend')
	    });
	    blendPass.material.shader.disableTexturesAll();
	    blendPass.material.shader.enableTexture(['texture1', 'texture2']);

	    this._blendFb = new FrameBuffer({
	        depthBuffer: false
	    });

	    this._outputPass = new Pass({
	        fragment: Shader.source('qtek.compositor.output'),
	        // TODO, alpha is premultiplied?
	        blendWithPrevious: true
	    });
	    this._outputPass.material.shader.define('fragment', 'OUTPUT_ALPHA');
	    this._outputPass.material.blend = function (_gl) {
	        // FIXME.
	        // Output is premultiplied alpha when BLEND is enabled ?
	        // http://stackoverflow.com/questions/2171085/opengl-blending-with-previous-contents-of-framebuffer
	        _gl.blendEquationSeparate(_gl.FUNC_ADD, _gl.FUNC_ADD);
	        _gl.blendFuncSeparate(_gl.ONE, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA);
	    }
	}

	TemporalSuperSampling.prototype = {

	    constructor: TemporalSuperSampling,

	    /**
	     * Jitter camera projectionMatrix
	     * @parma {qtek.Renderer} renderer
	     * @param {qtek.Camera} camera
	     */
	    jitterProjection: function (renderer, camera) {
	        var viewport = renderer.viewport;
	        var dpr = viewport.devicePixelRatio || renderer.getDevicePixelRatio();
	        var width = viewport.width * dpr;
	        var height = viewport.height * dpr;

	        var offset = this._haltonSequence[this._frame];
	        camera.projectionMatrix._array[8] += (offset[0] * 2.0 - 1.0) / width;
	        camera.projectionMatrix._array[9] += (offset[1] * 2.0 - 1.0) / height;
	    },

	    /**
	     * Reset accumulating frame
	     */
	    resetFrame: function () {
	        this._frame = 0;
	    },

	    /**
	     * Return current frame
	     */
	    getFrame: function () {
	        return this._frame;
	    },

	    /**
	     * Get source framebuffer for usage
	     */
	    getSourceFrameBuffer: function () {
	        return this._sourceFb;
	    },

	    resize: function (width, height) {
	        if (this._sourceTex.width !== width || this._sourceTex.height !== height) {

	            this._prevFrameTex.width = width;
	            this._prevFrameTex.height = height;

	            this._outputTex.width = width;
	            this._outputTex.height = height;

	            this._sourceTex.width = width;
	            this._sourceTex.height = height;

	            this._prevFrameTex.dirty();
	            this._outputTex.dirty();
	            this._sourceTex.dirty();
	        }
	    },

	    isFinished: function () {
	        return this._frame >= this._haltonSequence.length;
	    },

	    render: function (renderer) {
	        var blendPass = this._blendPass;
	        if (this._frame === 0) {
	            // Direct output
	            blendPass.setUniform('weight1', 0);
	            blendPass.setUniform('weight2', 1);
	        }
	        else {
	            blendPass.setUniform('weight1', 0.9);
	            blendPass.setUniform('weight2', 0.1);
	        }
	        blendPass.setUniform('texture1', this._prevFrameTex);
	        blendPass.setUniform('texture2', this._sourceTex);

	        this._blendFb.attach(this._outputTex);
	        this._blendFb.bind(renderer);
	        blendPass.render(renderer);
	        this._blendFb.unbind(renderer);

	        this._outputPass.setUniform('texture', this._outputTex);
	        this._outputPass.render(renderer);

	        // Swap texture
	        var tmp = this._prevFrameTex;
	        this._prevFrameTex = this._outputTex;
	        this._outputTex = tmp;

	        this._frame++;
	    },

	    dispose: function (gl) {
	        this._sourceFb.dispose(gl);
	        this._blendFb.dispose(gl);
	        this._prevFrameTex.dispose(gl);
	        this._outputTex.dispose(gl);
	        this._sourceTex.dispose(gl);
	        this._outputPass.dispose(gl);
	        this._blendPass.dispose(gl);
	    }
	};

	module.exports = TemporalSuperSampling;

/***/ },
/* 150 */
/***/ function(module, exports) {

	
	// Generate halton sequence
	// https://en.wikipedia.org/wiki/Halton_sequence
	function halton(index, base) {

	    var result = 0;
	    var f = 1 / base;
	    var i = index;
	    while (i > 0) {
	        result = result + f * (i % base);
	        i = Math.floor(i / base);
	        f = f / base;
	    }
	    return result;
	}


	module.exports = halton;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(152);
	__webpack_require__(155);

	__webpack_require__(162);

	echarts.registerAction({
	    type: 'geo3DChangeCamera',
	    event: 'geo3dcamerachanged',
	    update: 'series:updateCamera'
	}, function (payload, ecModel) {
	    ecModel.eachComponent({
	        mainType: 'geo3D', query: payload
	    }, function (componentModel) {
	        componentModel.setView(payload);
	    });
	});

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var componentViewControlMixin = __webpack_require__(94);
	var componentPostEffectMixin = __webpack_require__(95);
	var componentLightMixin = __webpack_require__(96);
	var componentShadingMixin = __webpack_require__(153);
	var geo3DModelMixin = __webpack_require__(154);

	var Geo3DModel = echarts.extendComponentModel({

	    type: 'geo3D',

	    layoutMode: 'box',

	    coordinateSystem: null,

	    optionUpdated: function () {
	        var option = this.option;

	        option.regions = this.getFilledRegions(option.regions, option.map);

	        var dimensions = echarts.helper.completeDimensions(['value'], option.data);
	        var list = new echarts.List(dimensions, this);
	        list.initData(option.regions);

	        var regionModelMap = {};
	        list.each(function (idx) {
	            var name = list.getName(idx);
	            var itemModel = list.getItemModel(idx);
	            regionModelMap[name] = itemModel;
	        });

	        this._regionModelMap = regionModelMap;

	        this._data = list;
	    },

	    getData: function () {
	        return this._data;
	    },

	    getRegionModel: function (name) {
	        return this._regionModelMap[name] || new echarts.Model(null, this);
	    },

	    /**
	     * Format label
	     * @param {string} name Region name
	     * @param {string} [status='normal'] 'normal' or 'emphasis'
	     * @return {string}
	     */
	    getFormattedLabel: function (dataIndex, status) {
	        var name = this._data.getName(dataIndex);
	        var regionModel = this.getRegionModel(name);
	        var formatter = regionModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);
	        if (formatter == null) {
	            formatter = regionModel.get(['label', 'formatter']);
	        }
	        var params = {
	            name: name
	        };
	        if (typeof formatter === 'function') {
	            params.status = status;
	            return formatter(params);
	        }
	        else if (typeof formatter === 'string') {
	            var serName = params.seriesName;
	            return formatter.replace('{a}', serName != null ? serName : '');
	        }
	        else {
	            return name;
	        }
	    },

	    defaultOption: {

	        // itemStyle: {},
	        // height,
	        // label: {}
	        // realisticMaterial
	        // baseTexture
	        regions: []
	    }
	});

	echarts.util.merge(Geo3DModel.prototype, geo3DModelMixin);

	echarts.util.merge(Geo3DModel.prototype, componentViewControlMixin);
	echarts.util.merge(Geo3DModel.prototype, componentPostEffectMixin);
	echarts.util.merge(Geo3DModel.prototype, componentLightMixin);
	echarts.util.merge(Geo3DModel.prototype, componentShadingMixin);

	module.exports = Geo3DModel;

/***/ },
/* 153 */
/***/ function(module, exports) {

	module.exports = {
	    defaultOption: {
	        shading: null,

	        realisticMaterial: {
	            textureTiling: 1,
	            textureOffset: 0,

	            baseTexture: null

	            // roughness: 0.5
	            // metalness: 0
	        },

	        lambertMaterial: {
	            textureTiling: 1,
	            textureOffset: 0,

	            baseTexture: null
	        },

	        colorMaterial: {
	            textureTiling: 1,
	            textureOffset: 0,

	            baseTexture: null
	        }
	    }
	};

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	module.exports = {

	    getFilledRegions: function (regions, map) {
	        var regionsArr = (regions || []).slice();

	        var map = echarts.getMap(map);
	        var geoJson = map && map.geoJson;
	        if (!geoJson) {
	            if (true) {
	                console.error('Map ' + map + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
	            }
	            return [];
	        }

	        var dataNameMap = {};
	        var features = geoJson.features;
	        for (var i = 0; i < regionsArr.length; i++) {
	            dataNameMap[regionsArr[i].name] = regionsArr[i];
	        }

	        for (var i = 0; i < features.length; i++) {
	            var name = features[i].properties.name;
	            if (!dataNameMap[name]) {
	                regionsArr.push({
	                    name: name
	                });
	            }
	        }

	        return regionsArr;
	    },

	    defaultOption: {
	        show: true,

	        zlevel: -10,

	        // geoJson used by geo3D
	        map: '',

	        // Layout used for viewport
	        left: 0,
	        top: 0,
	        width: '100%',
	        height: '100%',

	        boxWidth: 100,
	        boxHeight: 3,
	        boxDepth: 'auto',

	        groundPlane: {
	            show: false,
	            color: '#aaa'
	        },

	        // If enable instancing if it's too much
	        instancing: false,

	        shading: 'lambert',

	        light: {
	            main: {
	                alpha: 40,
	                beta: 30
	            }
	        },

	        viewControl: {
	            alpha: 40,
	            beta: 0,
	            distance: 100,

	            minAlpha: 5,
	            minBeta: -80,
	            maxBeta: 80
	        },

	        label: {
	            show: false,
	            // Distance in 3d space.
	            distance: 2,

	            textStyle: {
	                fontSize: 20,
	                color: '#000',
	                borderWidth: 1,
	                borderColor: '#fff'
	            }
	        },
	        // labelLine

	        // light
	        // postEffect
	        // temporalSuperSampling
	        // viewControl

	        itemStyle: {
	            areaColor: '#fff',
	            borderWidth: 0,
	            borderColor: '#333'
	        },

	        emphasis: {
	            itemStyle: {
	                // areaColor: '#f94b59'
	                areaColor: '#639fc0'
	            },
	            label: {
	                show: true
	            }
	        }
	    }
	};

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var Geo3DBuilder = __webpack_require__(156);
	var echarts = __webpack_require__(2);

	var graphicGL = __webpack_require__(31);
	var OrbitControl = __webpack_require__(98);
	var LightHelper = __webpack_require__(102);

	module.exports = echarts.extendComponentView({

	    type: 'geo3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this._geo3DBuilder = new Geo3DBuilder(api);
	        this.groupGL = new graphicGL.Node();

	        this._lightRoot = new graphicGL.Node();
	        this._lightHelper = new LightHelper(this._lightRoot);

	        this._control = new OrbitControl({
	            zr: api.getZr()
	        });
	        this._control.init();
	    },

	    render: function (geo3DModel, ecModel, api) {
	        this.groupGL.add(this._geo3DBuilder.rootNode);

	        var geo3D = geo3DModel.coordinateSystem;

	        if (!geo3D || !geo3D.viewGL) {
	            return;
	        }

	        // Always have light.
	        geo3D.viewGL.add(this._lightRoot);

	        if (geo3DModel.get('show')) {
	            geo3D.viewGL.add(this.groupGL);
	        }
	        else {
	            geo3D.viewGL.remove(this.groupGL);
	        }

	        var control = this._control;
	        control.setCamera(geo3D.viewGL.camera);
	        control.setViewGL(geo3D.viewGL);

	        var viewControlModel = geo3DModel.getModel('viewControl');
	        control.setFromViewControlModel(viewControlModel, 0);

	        this._lightHelper.updateLight(geo3DModel);

	        // Set post effect
	        geo3D.viewGL.setPostEffect(geo3DModel.getModel('postEffect'));
	        geo3D.viewGL.setTemporalSuperSampling(geo3DModel.getModel('temporalSuperSampling'));

	        // Must update after geo3D.viewGL.setPostEffect
	        this._geo3DBuilder.update(geo3DModel, ecModel, api);

	        var silent = geo3DModel.get('silent');
	        this.groupGL && this.groupGL.traverse(function (mesh) {
	            if (mesh.isRenderable && mesh.isRenderable()) {
	                mesh.ignorePicking = mesh.$ignorePicking != null
	                    ? mesh.$ignorePicking : silent;
	            }
	        });

	        control.off('update');
	        control.on('update', function () {
	            api.dispatchAction({
	                type: 'geo3DChangeCamera',
	                alpha: control.getAlpha(),
	                beta: control.getBeta(),
	                distance: control.getDistance(),
	                from: this.uid,
	                geo3DId: geo3DModel.id
	            });
	        });
	    },

	    afterRender: function (geo3DModel, ecModel, api, layerGL) {
	        var renderer = layerGL.renderer;
	        this._lightHelper.updateAmbientCubemap(renderer, geo3DModel, api);
	    },

	    dispose: function () {
	        this._control.dispose();
	    }
	});

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var Triangulation = __webpack_require__(157);
	var LinesGeo = __webpack_require__(99);
	var retrieve = __webpack_require__(69);
	var glmatrix = __webpack_require__(15);
	var trianglesSortMixin = __webpack_require__(159);
	var LabelsBuilder = __webpack_require__(161);

	var vec3 = glmatrix.vec3;

	graphicGL.Shader.import(__webpack_require__(110));

	function Geo3DBuilder(api) {

	    this.rootNode = new graphicGL.Node();

	    this._currentMap = '';

	    // Cache triangulation result
	    this._triangulationResults = {};

	    this._triangulator = new Triangulation();

	    this._shadersMap = graphicGL.COMMON_SHADERS.reduce(function (obj, shaderName) {
	        obj[shaderName] = graphicGL.createShader('ecgl.' + shaderName);
	        obj[shaderName].define('fragment', 'DOUBLE_SIDE');
	        // obj[shaderName].define('both', 'WIREFRAME_TRIANGLE');
	        return obj;
	    }, {});

	    this._linesShader = graphicGL.createShader('ecgl.meshLines3D');

	    var groundMaterials = {};
	    graphicGL.COMMON_SHADERS.forEach(function (shading) {
	        groundMaterials[shading] = new graphicGL.Material({
	            shader: graphicGL.createShader('ecgl.' + shading)
	        });
	    });
	    this._groundMaterials = groundMaterials;

	    this._groundMesh = new graphicGL.Mesh({
	        geometry: new graphicGL.PlaneGeometry(),
	        castShadow: false,
	        $ignorePicking: true
	    });
	    this._groundMesh.rotation.rotateX(-Math.PI / 2);
	    this._groundMesh.scale.set(1000, 1000, 1);

	    this._labelsBuilder = new LabelsBuilder(1024, 1024, api);


	    // Give a large render order.
	    this._labelsBuilder.getMesh().renderOrder = 100;
	    this._labelsBuilder.getMesh().material.depthTest = false;

	    this._api = api;
	}

	Geo3DBuilder.prototype = {

	    constructor: Geo3DBuilder,

	    update: function (componentModel, ecModel, api) {
	        var geo3D = componentModel.coordinateSystem;
	        var enableInstancing = componentModel.get('instancing');
	        if (
	            geo3D.map !== this._currentMap
	            || (enableInstancing && !this._polygonMesh)
	            || (!enableInstancing && !this._polygonMeshesMap)
	        ) {
	            this._triangulation(geo3D);
	            this._currentMap = geo3D.map;

	            // Reset meshes
	            this._initMeshes(componentModel);

	            this.rootNode.add(this._labelsBuilder.getMesh());
	        }

	        var shader = this._getShader(componentModel.get('shading'));
	        var srgbDefineMethod = geo3D.viewGL.isLinearSpace() ? 'define' : 'unDefine';
	        shader[srgbDefineMethod]('fragment', 'SRGB_DECODE');

	        var data = componentModel.getData();


	        if (enableInstancing) {
	            this._updateInstancingMesh(componentModel, shader, api);
	        }
	        this._updateRegionMesh(componentModel, shader, api, enableInstancing);

	        this._updateGroundPlane(componentModel);
	        this._groundMesh.material.shader[srgbDefineMethod]('fragment', 'SRGB_DECODE');

	        this._labelsBuilder.updateData(data);
	        this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {
	            var itemModel = data.getItemModel(dataIndex);
	            var name = data.getName(dataIndex);
	            var region = geo3D.getRegion(name);
	            var center = region.center;

	            var height = itemModel.get('height') + distance;
	            return geo3D.dataToPoint([center[0], center[1], height]);
	        };

	        this._data = data;

	        this._labelsBuilder.updateLabels();

	        this._updateDebugWireframe(componentModel);
	    },

	    _updateInstancingMesh: function (componentModel, shader, api) {
	        var geo3D = componentModel.coordinateSystem;

	        var vertexCount = 0;
	        var triangleCount = 0;
	        // TODO Lines
	        geo3D.regions.forEach(function (region) {
	            var info = this._getRegionPolygonGeoInfo(region);
	            vertexCount += info.vertexCount;
	            triangleCount += info.triangleCount;
	        }, this);

	        var polygonMesh = this._polygonMesh;
	        var polygonGeo = polygonMesh.geometry;
	        ['position', 'normal', 'texcoord0', 'color'].forEach(function (attrName) {
	            polygonGeo.attributes[attrName].init(vertexCount);
	        });

	        polygonGeo.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);

	        if (polygonMesh.material.shader !== shader) {
	            polygonMesh.material.attachShader(shader, true);
	        }
	    },

	    _updateRegionMesh: function (componentModel, shader, api, instancing) {

	        var data = componentModel.getData();
	        var geo3D = componentModel.coordinateSystem;

	        var vertexOffset = 0;
	        var triangleOffset = 0;

	        if (instancing) {
	            // Materials configurations.
	            graphicGL.setMaterialFromModel(shader.__shading, this._polygonMesh.material, componentModel, api);
	        }
	        var hasTranparentRegion = false;

	        geo3D.regions.forEach(function (region) {
	            var dataIndex = data.indexOfName(region.name);

	            var polygonMesh = instancing ? this._polygonMesh : this._polygonMeshesMap[region.name];
	            var linesMesh = instancing ? this._linesMesh : this._linesMeshesMap[region.name];
	            if (polygonMesh.material.shader !== shader) {
	                polygonMesh.material.attachShader(shader, true);
	            }
	            // Get bunch of visual properties.
	            var regionModel = componentModel.getRegionModel(region.name);
	            var itemStyleModel = regionModel.getModel('itemStyle');
	            var color = itemStyleModel.get('areaColor');
	            var opacity = retrieve.firstNotNull(itemStyleModel.get('opacity'), 1.0);

	            // Use visual color if it is encoded by visualMap component
	            var visualColor = data.getItemVisual(dataIndex, 'color', true);
	            if (visualColor != null && data.hasValue(dataIndex)) {
	                color = visualColor;
	            }
	            // Set color, opacity to visual for label usage.
	            data.setItemVisual(dataIndex, 'color', color);
	            data.setItemVisual(dataIndex, 'opacity', opacity);

	            color = graphicGL.parseColor(color);
	            var borderColor = graphicGL.parseColor(itemStyleModel.get('borderColor'));

	            color[3] *= opacity;
	            borderColor[3] *= opacity;

	            var isTransparent = color[3] < 0.99;
	            if (!instancing) {
	                // Materials configurations.
	                graphicGL.setMaterialFromModel(shader.__shading, polygonMesh.material, regionModel, api);
	                polygonMesh.material.set({ color: color });
	                polygonMesh.material.transparent = isTransparent;
	                polygonMesh.material.depthMask = !isTransparent;
	            }
	            hasTranparentRegion = hasTranparentRegion || isTransparent;

	            var regionHeight = retrieve.firstNotNull(regionModel.get('height', true), geo3D.size[1]);

	            if (instancing) {
	                var newOffsets = this._updatePolygonGeometry(
	                    polygonMesh.geometry, region, regionHeight, vertexOffset, triangleOffset, color
	                );
	                vertexOffset = newOffsets.vertexOffset;
	                triangleOffset = newOffsets.triangleOffset;
	            }
	            else {
	                this._updatePolygonGeometry(polygonMesh.geometry, region, regionHeight);
	            }

	            // Update lines.
	            // TODO INSTANCING LINES
	            var lineWidth = itemStyleModel.get('borderWidth');
	            var hasLine = lineWidth > 0;
	            if (!instancing) {
	                if (hasLine) {
	                    lineWidth *= api.getDevicePixelRatio();
	                    this._updateLinesGeometry(
	                        linesMesh.geometry, region, regionHeight, lineWidth, geo3D.transform
	                    );
	                }
	                linesMesh.invisible = !hasLine;
	                linesMesh.material.set({
	                    color: borderColor
	                });
	            }

	            // Move regions to center so they can be sorted right when material is transparent.
	            if (!instancing) {
	                this._moveRegionToCenter(polygonMesh, linesMesh, hasLine);
	                // Bind events.
	                polygonMesh.dataIndex = dataIndex;
	                polygonMesh.on('mouseover', this._onmouseover, this);
	                polygonMesh.on('mouseout', this._onmouseout, this);
	            }

	        }, this);

	        if (instancing) {
	            this._polygonMesh.material.transparent = hasTranparentRegion;
	            this._polygonMesh.material.depthMask = !hasTranparentRegion;
	            this._polygonMesh.geometry.updateBoundingBox();
	        }
	    },

	    _updateDebugWireframe: function (componentModel) {
	        var debugWireframeModel = componentModel.getModel('debug.wireframe');

	        // TODO Unshow
	        if (debugWireframeModel.get('show')) {
	            var color = graphicGL.parseColor(
	                debugWireframeModel.get('lineStyle.color')
	            );
	            var width = retrieve.firstNotNull(
	                debugWireframeModel.get('lineStyle.width'), 1
	            );

	            var setWireframe = function (mesh) {
	                mesh.geometry.generateBarycentric();
	                mesh.material.shader.define('both', 'WIREFRAME_TRIANGLE');
	                mesh.material.set('wireframeLineColor', color);
	                mesh.material.set('wireframeLineWidth', width);
	            }
	            if (this._polygonMeshesMap) {
	                componentModel.coordinateSystem.regions.forEach(function (region) {
	                    setWireframe(this._polygonMeshesMap[region.name]);
	                }, this);
	            }
	            else {
	                setWireframe(this._polygonMesh);
	            }
	        }
	    },

	    _onmouseover: function (e) {
	        if (e.target && e.target.dataIndex != null) {
	            this.highlight(e.target.dataIndex);

	            this._labelsBuilder.updateLabels([e.target.dataIndex]);
	        }
	    },

	    _onmouseout: function (e) {
	        if (e.target && e.target.dataIndex != null) {
	            this.downplay(e.target.dataIndex);

	            // TODO Merge with onmouseover
	            if (!e.relatedTarget) {
	                this._labelsBuilder.updateLabels();
	            }
	        }
	    },

	    _updateGroundPlane: function (componentModel) {
	        var groundModel = componentModel.getModel('groundPlane');

	        var shading = componentModel.get('shading');
	        var material = this._groundMaterials[shading];
	        if (!material) {
	            if (true) {
	                console.warn('Unkown shading ' + shading);
	            }
	            material = this._groundMaterials.lambert;
	        }
	        this._groundMesh.material = material;
	        this._groundMesh.material.set('color', graphicGL.parseColor(groundModel.get('color')));
	        this._groundMesh.invisible = !groundModel.get('show');
	    },

	    _initMeshes: function (componentModel) {
	        this.rootNode.removeAll();

	        var geo3D = componentModel.coordinateSystem;
	        var shader = this._getShader(componentModel.get('shading'));

	        function createPolygonMesh() {
	             var mesh = new graphicGL.Mesh({
	                material: new graphicGL.Material({
	                    shader: shader
	                }),
	                culling: false,
	                geometry: new graphicGL.Geometry({
	                    sortTriangles: true
	                })
	            });
	            echarts.util.extend(mesh.geometry, trianglesSortMixin);
	            return mesh;
	        }

	        function createLinesMesh() {
	            return new graphicGL.Mesh({
	                material: new graphicGL.Material({
	                    shader: this._linesShader
	                }),
	                castShadow: false,
	                ignorePicking: true,
	                geometry: new LinesGeo({
	                    useNativeLine: false
	                })
	            });
	        }

	        if (!componentModel.get('instancing')) {
	            var polygonMeshesMap = {};
	            var linesMeshesMap = {};
	            geo3D.regions.forEach(function (region) {
	                polygonMeshesMap[region.name] = createPolygonMesh();
	                linesMeshesMap[region.name] = createLinesMesh();

	                this.rootNode.add(polygonMeshesMap[region.name]);
	                this.rootNode.add(linesMeshesMap[region.name]);
	            }, this);
	            this._polygonMeshesMap = polygonMeshesMap;
	            this._linesMeshesMap = linesMeshesMap;
	        }
	        else {
	            var polygonMesh = createPolygonMesh();
	            var linesMesh = createLinesMesh();
	            this.rootNode.add(polygonMesh);
	            this.rootNode.add(linesMesh);

	            polygonMesh.material.shader.define('both', 'VERTEX_COLOR');

	            this._polygonMesh = polygonMesh;
	            this._linesMesh = linesMesh;

	            this._polygonMeshesMap = null;
	            this._linesMeshesMap = null;
	        }

	        this.rootNode.add(this._groundMesh);
	    },

	    _getShader: function (shading) {
	        var shader = this._shadersMap[shading];
	        if (!shader) {
	            if (true) {
	                console.warn('Unkown shading ' + shading);
	            }
	            // Default use lambert shader.
	            shader = this._shadersMap.lambert;
	        }
	        shader.__shading = shading;
	        return shader;
	    },

	    _triangulation: function (geo3D) {
	        this._triangulationResults = {};
	        var triangulator = this._triangulator;

	        var minAll = [Infinity, Infinity, Infinity];
	        var maxAll = [-Infinity, -Infinity, -Infinity];
	        geo3D.regions.forEach(function (region) {
	            var polygons = [];
	            for (var i = 0; i < region.geometries.length; i++) {
	                var exterior = region.geometries[i].exterior;
	                var interiors = region.geometries[i].interiors;
	                var points = [];
	                var holes = [];
	                if (exterior.length < 3) {
	                    continue;
	                }
	                var offset = 0;
	                for (var j = 0; j < exterior.length; j++) {
	                    var p = exterior[j];
	                    points[offset++] = p[0];
	                    points[offset++] = p[1];
	                }

	                for (var j = 0; j < interiors.length; j++) {
	                    if (interiors[j].length.length < 3) {
	                        continue;
	                    }
	                    var holePoints = [];
	                    for (var k = 0; k < interiors[j].length; k++) {
	                        var p = interiors[j][k];
	                        holePoints.push(p[0]);
	                        holePoints.push(p[1]);
	                    }

	                    holes.push(holePoints);
	                }
	                triangulator.triangulate(points, holes);
	                points = triangulator.points;

	                var points3 = new Float32Array(points.length / 2 * 3);
	                var pos = [];
	                var min = [Infinity, Infinity, Infinity];
	                var max = [-Infinity, -Infinity, -Infinity];
	                var off3 = 0;
	                for (var j = 0; j < points.length;) {
	                    pos[0] = points[j++];
	                    pos[1] = 0;
	                    pos[2] = points[j++];
	                    vec3.transformMat4(pos, pos, geo3D.transform);
	                    vec3.min(min, min, pos);
	                    vec3.max(max, max, pos);
	                    points3[off3++] = pos[0];
	                    points3[off3++] = pos[1];
	                    points3[off3++] = pos[2];
	                }
	                vec3.min(minAll, minAll, min);
	                vec3.max(maxAll, maxAll, max);
	                polygons.push({
	                    points: points3,
	                    minAll: minAll,
	                    maxAll: maxAll,
	                    indices: triangulator.triangles
	                });
	            }
	            this._triangulationResults[region.name] = polygons;
	        }, this);

	    },

	    /**
	     * Get region vertex and triangle count
	     */
	    _getRegionPolygonGeoInfo: function (region) {

	        var polygons = this._triangulationResults[region.name];

	        var sideVertexCount = 0;
	        var sideTriangleCount = 0;

	        for (var i = 0; i < polygons.length; i++) {
	            sideVertexCount += polygons[i].points.length / 3;
	            sideTriangleCount += polygons[i].indices.length / 3;
	        }

	        var vertexCount = sideVertexCount * 2 + sideVertexCount * 4;
	        var triangleCount = sideTriangleCount * 2 + sideVertexCount * 2;

	        return {
	            vertexCount: vertexCount,
	            triangleCount: triangleCount
	        };
	    },

	    _updatePolygonGeometry: function (
	        geometry, region, regionHeight, vertexOffset, triangleOffset, color
	    ) {
	        var positionAttr = geometry.attributes.position;
	        var normalAttr = geometry.attributes.normal;
	        var texcoordAttr = geometry.attributes.texcoord0;
	        var colorAttr = geometry.attributes.color;
	        var polygons = this._triangulationResults[region.name];

	        var hasColor = colorAttr.value && color;

	        var indices = geometry.indices;
	        var instancing = vertexOffset != null;
	        if (!instancing) {

	            var geoInfo = this._getRegionPolygonGeoInfo(region);
	            vertexOffset = triangleOffset = 0;

	            positionAttr.init(geoInfo.vertexCount);
	            normalAttr.init(geoInfo.vertexCount);
	            texcoordAttr.init(geoInfo.vertexCount);
	            indices = geometry.indices = geoInfo.vertexCount > 0xffff
	                ? new Uint32Array(geoInfo.triangleCount * 3)
	                : new Uint16Array(geoInfo.triangleCount * 3);
	        }

	        var min = polygons[0].minAll;
	        var max = polygons[0].maxAll;
	        var maxDimSize = Math.max(max[0] - min[0], max[2] - min[2]);

	        function addVertices(polygon, y, insideOffset) {
	            var points = polygon.points;

	            var pointsLen = points.length;
	            var currentPosition = [];
	            var uv = [];

	            for (var k = 0; k < pointsLen; k += 3) {
	                currentPosition[0] = points[k];
	                currentPosition[1] = y;
	                currentPosition[2] = points[k + 2];

	                uv[0] = (points[k] - min[0]) / maxDimSize;
	                uv[1] = (points[k + 2] - min[2]) / maxDimSize;

	                positionAttr.set(vertexOffset, currentPosition);
	                if (hasColor) {
	                    colorAttr.set(vertexOffset, color);
	                }
	                texcoordAttr.set(vertexOffset++, uv);
	            }
	        }

	        function buildTopBottom(polygon, y, insideOffset) {

	            var startVertexOffset = vertexOffset;

	            addVertices(polygon, y, insideOffset);

	            for (var k = 0; k < polygon.indices.length; k++) {
	                indices[triangleOffset * 3 + k] = polygon.indices[k] + startVertexOffset;
	            }
	            triangleOffset += polygon.indices.length / 3;
	        }

	        var normalTop = [0, 1, 0];
	        var normalBottom = [0, -1, 0];
	        for (var p = 0; p < polygons.length; p++) {
	            var startVertexOffset = vertexOffset;
	            var polygon = polygons[p];
	            // BOTTOM
	            buildTopBottom(polygon, 0, 0);
	            // TOP
	            buildTopBottom(polygon, regionHeight, 0);

	            var ringVertexCount = polygon.points.length / 3;
	            for (var v = 0; v < ringVertexCount; v++) {
	                normalAttr.set(startVertexOffset + v, normalBottom);
	                normalAttr.set(startVertexOffset + v + ringVertexCount, normalTop);
	            }

	            var quadToTriangle = [0, 3, 1, 1, 3, 2];

	            var quadPos = [[], [], [], []];
	            var a = [];
	            var b = [];
	            var normal = [];
	            var uv = [];
	            for (var v = 0; v < ringVertexCount; v++) {
	                var next = (v + 1) % ringVertexCount;
	                // 0----1
	                // 3----2
	                for (var k = 0; k < 4; k++) {
	                    var idx3 = ((k === 0 || k === 3) ? v : next) * 3;
	                    quadPos[k][0] = polygon.points[idx3];
	                    quadPos[k][1] = k > 1 ? regionHeight : 0;
	                    quadPos[k][2] = polygon.points[idx3 + 2];

	                    positionAttr.set(vertexOffset + k, quadPos[k]);

	                    // Make sure side uv and top uv have no seam.
	                    // PENDING
	                    uv[0] = (quadPos[k][0] - min[0]) / maxDimSize;
	                    uv[1] = (quadPos[k][2] - min[2]) / maxDimSize;
	                    if (k > 1) {
	                        // TODO left, right
	                        uv[0] -= regionHeight / maxDimSize;
	                    }
	                    texcoordAttr.set(vertexOffset + k, uv);
	                }
	                vec3.sub(a, quadPos[1], quadPos[0]);
	                vec3.sub(b, quadPos[3], quadPos[0]);
	                vec3.cross(normal, a, b);
	                vec3.normalize(normal, normal);

	                for (var k = 0; k < 4; k++) {
	                    normalAttr.set(vertexOffset + k, normal);
	                    if (hasColor) {
	                        colorAttr.set(vertexOffset + k, color);
	                    }
	                }

	                for (var k = 0; k < 6; k++) {
	                    indices[triangleOffset * 3 + k] = quadToTriangle[k] + vertexOffset;
	                }

	                vertexOffset += 4;
	                triangleOffset += 2;
	            }
	        }

	        if (!instancing) {
	            geometry.updateBoundingBox();
	        }

	        return {
	            vertexOffset: vertexOffset,
	            triangleOffset: triangleOffset
	        };
	    },

	    _getRegionLinesGeoInfo: function (region, geometry) {
	        var vertexCount = 0;
	        var triangleCount = 0;
	        region.geometries.forEach(function (geo) {
	            var exterior = geo.exterior;
	            var interiors = geo.interiors;
	            vertexCount += geometry.getPolylineVertexCount(exterior);
	            triangleCount += geometry.getPolylineTriangleCount(exterior);
	            for (var i = 0; i < interiors.length; i++) {
	                vertexCount += geometry.getPolylineVertexCount(interiors[i]);
	                triangleCount += geometry.getPolylineTriangleCount(interiors[i]);
	            }
	        }, this);

	    },

	    _updateLinesGeometry: function (
	        geometry, region, regionHeight, lineWidth, transform
	    ) {

	        var geoInfo = this._getRegionLinesGeoInfo(region, geometry);

	        geometry.resetOffset();
	        geometry.setVertexCount(geoInfo.vertexCount);
	        geometry.setTriangleCount(geoInfo.triangleCount);

	        function convertToPoints3(polygon) {
	            var points = new Float32Array(polygon.length * 3);
	            var offset = 0;
	            var pos = [];
	            for (var i = 0; i < polygon.length; i++) {
	                pos[0] = polygon[i][0];
	                // Add a offset to avoid z-fighting
	                pos[1] = regionHeight + 0.1;
	                pos[2] = polygon[i][1];
	                vec3.transformMat4(pos, pos, transform);

	                points[offset++] = pos[0];
	                points[offset++] = pos[1];
	                points[offset++] = pos[2];
	            }
	            return points;
	        };

	        var whiteColor = [1, 1, 1, 1];
	        region.geometries.forEach(function (geo) {
	            var exterior = geo.exterior;
	            var interiors = geo.interiors;

	            geometry.addPolyline(convertToPoints3(exterior), whiteColor, lineWidth);

	            for (var i = 0; i < interiors.length; i++) {
	                geometry.addPolyline(convertToPoints3(interiors[i]), whiteColor, lineWidth);
	            }
	        });

	        geometry.updateBoundingBox();
	    },

	    _moveRegionToCenter: function (polygonMesh, linesMesh, hasLine) {
	        var polygonGeo = polygonMesh.geometry;
	        var linesGeo = linesMesh.geometry;

	        var bbox = polygonMesh.geometry.boundingBox;
	        var cp = bbox.min.clone().add(bbox.max).scale(0.5);
	        var offset = cp._array;

	        bbox.min.sub(cp);
	        bbox.max.sub(cp);

	        var polygonPosArr = polygonGeo.attributes.position.value;
	        for (var i = 0; i < polygonPosArr.length;) {
	            polygonPosArr[i++] -= offset[0];
	            polygonPosArr[i++] -= offset[1];
	            polygonPosArr[i++] -= offset[2];
	        }
	        polygonMesh.position.copy(cp);

	        if (hasLine) {
	            linesGeo.boundingBox.min.sub(cp);
	            linesGeo.boundingBox.max.sub(cp);

	            var linesPosArr = linesGeo.attributes.position.value;
	            for (var i = 0; i < linesPosArr.length;) {
	                linesPosArr[i++] -= offset[0];
	                linesPosArr[i++] -= offset[1];
	                linesPosArr[i++] -= offset[2];
	            }
	            linesMesh.position.copy(cp);
	        }
	    },

	    highlight: function (dataIndex) {
	        var data = this._data;
	        if (!data) {
	            return;
	        }

	        var itemModel = data.getItemModel(dataIndex);
	        var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
	        var emphasisColor = emphasisItemStyleModel.get('areaColor');
	        var emphasisOpacity = emphasisItemStyleModel.get('opacity');
	        if (emphasisColor == null) {
	            var color = data.getItemVisual(dataIndex, 'color');
	            emphasisColor = echarts.color.lift(color, -0.4);
	        }
	        if (emphasisOpacity == null) {
	            emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
	        }
	        var colorArr = graphicGL.parseColor(emphasisColor);
	        colorArr[3] *= emphasisOpacity;

	        var polygonMesh = this._polygonMeshesMap[data.getName(dataIndex)];
	        if (polygonMesh) {
	            var material = polygonMesh.material;
	            material.set('color', colorArr);
	        }

	        this._api.getZr().refresh();
	    },

	    downplay: function (dataIndex) {

	        var data = this._data;
	        if (!data) {
	            return;
	        }

	        var color = data.getItemVisual(dataIndex, 'color');
	        var opacity = data.getItemVisual(dataIndex, 'opacity');

	        var colorArr = graphicGL.parseColor(color);
	        colorArr[3] *= opacity;

	        var polygonMesh = this._polygonMeshesMap[data.getName(dataIndex)];
	        if (polygonMesh) {
	            var material = polygonMesh.material;
	            material.set('color', colorArr);
	        }

	        this._api.getZr().refresh();
	    }
	};

	module.exports = Geo3DBuilder;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	// Ear clipping polygon triangulation.

	// https://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf

	// http://www.cosy.sbg.ac.at/~held/projects/triang/triang.html
	// Z Order Hash ?

	var LinkedList = __webpack_require__(158);

	// From x,y point cast a ray to right. and intersect with edge x0, y0, x1, y1;
	// Return x value of intersect point
	function intersectEdge(x0, y0, x1, y1, x, y) {
	    if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
	        return -Infinity;
	    }
	    // Ignore horizontal line
	    if (y1 === y0) {
	        return -Infinity;
	    }
	    var dir = y1 < y0 ? 1 : -1;
	    var t = (y - y0) / (y1 - y0);

	    // Avoid winding error when intersection point is the connect point of two line of polygon
	    if (t === 1 || t === 0) {
	        dir = y1 < y0 ? 0.5 : -0.5;
	    }

	    var x_ = t * (x1 - x0) + x0;

	    return x_;
	};

	function triangleArea(x0, y0, x1, y1, x2, y2) {
	    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);
	}

	function isPointInTriangle(x0, y0, x1, y1, x2, y2, xi, yi) {
	    return !(triangleArea(x0, y0, x2, y2, xi, yi) <= 0
	        || triangleArea(x0, y0, xi, yi, x1, y1) <= 0
	        || triangleArea(xi, yi, x2, y2, x1, y1) <= 0);
	}

	function area(points) {
	    // Signed polygon area
	    var n = points.length / 2;
	    if (n < 3) {
	        return 0;
	    }
	    var area = 0;
	    for (var i = (n - 1) * 2, j = 0; j < n * 2;) {
	        var x0 = points[i];
	        var y0 = points[i + 1];
	        var x1 = points[j];
	        var y1 = points[j + 1];
	        i = j;
	        j += 2;
	        area += x0 * y1 - x1 * y0;
	    }

	    return area;
	}

	function reverse(points, stride) {
	    var n = points.length / stride;
	    for (var i = 0; i < Math.floor(n / 2); i++) {
	        for (var j = 0; j < stride; j++) {
	            var a = i * stride + j;
	            var b = (n - i - 1) * stride + j;
	            var tmp = points[a];
	            points[a] = points[b];
	            points[b] = tmp;
	        }
	    }

	    return points;
	}

	var VERTEX_TYPE_CONVEX = 1;
	var VERTEX_TYPE_REFLEX = 2;

	var VERTEX_COUNT_NEEDS_GRID = 50;

	function Point(idx) {
	    this.idx = idx;
	}

	var TriangulationContext = function () {

	    this.points = [];

	    this.triangles = [];

	    this.maxGridNumber = 50;

	    this.minGridNumber = 4;

	    this._gridNumber = 20;

	    this._boundingBox = [[Infinity, Infinity], [-Infinity, -Infinity]];

	    this._nPoints = 0;

	    this._pointsTypes = [];

	    this._grids = [];

	    this._gridWidth = 0;
	    this._gridHeight = 0;

	    this._candidates = null;
	}

	/**
	 * @param {Array.<number>} exterior. Exterior points
	 *      exterior should be clockwise order. (When y is from bottom to top)
	 * @param {Array.<Array>} holes. holes should be counter clockwise order.
	 */
	TriangulationContext.prototype.triangulate = function (exterior, holes) {
	    this._nPoints = exterior.length / 2;
	    if (this._nPoints < 3) {
	        return;
	    }

	    // PENDING Dynamic grid number or fixed grid number ?
	    this._gridNumber = Math.ceil(Math.sqrt(this._nPoints) / 2);
	    this._gridNumber = Math.max(Math.min(this._gridNumber, this.maxGridNumber), this.minGridNumber);

	    this.points = exterior;

	    this._needsGreed = this._nPoints > VERTEX_COUNT_NEEDS_GRID;

	    if (area(this.points) > 0) {
	        // Don't konw why, but use slice is more faster than new Float32Array(this.points).
	        this.points = this.points.slice();
	        reverse(this.points, 2);
	    }

	    this.holes = (holes || []).map(function (hole) {
	        if (area(hole) < 0) {
	            hole = hole.slice();
	            reverse(hole, 2);
	        }
	        return hole;
	    });

	    this._reset();

	    this._prepare();

	    this._earClipping();
	}

	TriangulationContext.prototype._reset = function () {

	    this._candidates = new LinkedList();
	    this.triangles = [];

	    this._boundingBox[0][0] = this._boundingBox[0][1] = Infinity;
	    this._boundingBox[1][0] = this._boundingBox[1][1] = -Infinity;
	    // Initialize grid

	    var nGrids = this._gridNumber * this._gridNumber;
	    for (var i = 0; i < nGrids; i++) {
	        this._grids[i] = [];
	    }
	    this._grids.length = nGrids;
	}

	// Prepare points
	TriangulationContext.prototype._prepare = function () {
	    var bb = this._boundingBox;
	    var n = this._nPoints;
	    var points = this.points;

	    this._pointsTypes = [];
	    // Update bounding box and determine point type is reflex or convex
	    for (var i = 0, j = n - 1; i < n;) {
	        var k = (i + 1) % n;
	        var x0 = points[j * 2];
	        var y0 = points[j * 2 + 1];
	        var x1 = points[i * 2];
	        var y1 = points[i * 2 + 1];
	        var x2 = points[k * 2];
	        var y2 = points[k * 2 + 1];

	        if (this._needsGreed) {
	            if (x1 < bb[0][0]) { bb[0][0] = x1; }
	            if (y1 < bb[0][1]) { bb[0][1] = y1; }
	            if (x1 > bb[1][0]) { bb[1][0] = x1; }
	            if (y1 > bb[1][1]) { bb[1][1] = y1; }

	            // Make the bounding box a litte bigger
	            // Avoid the geometry hashing will touching the bound of the bounding box
	            bb[0][0] -= 0.1;
	            bb[0][1] -= 0.1;
	            bb[1][0] += 0.1;
	            bb[1][1] += 0.1;
	        }

	        var area = triangleArea(x0, y0, x1, y1, x2, y2);

	        this._pointsTypes[i] = area < 0 ? VERTEX_TYPE_CONVEX : VERTEX_TYPE_REFLEX;

	        j = i;
	        i++;
	    }

	    this._cutHoles();

	    // points may be changed after cutHoles.
	    n = this._nPoints;
	    points = this.points;

	    // Init candidates.
	    for (var i= 0; i < n; i++) {
	        this._candidates.insert(new Point(i));
	    }

	    // Put the points in the grids
	    if (this._needsGreed) {
	        this._gridWidth = (bb[1][0] - bb[0][0]) / this._gridNumber;
	        this._gridHeight = (bb[1][1] - bb[0][1]) / this._gridNumber;
	        for (var i = 0; i < n; i++) {
	            var x = points[i * 2];
	            var y = points[i * 2 + 1];
	            if (this._pointsTypes[i] == VERTEX_TYPE_REFLEX) {
	                var key = this._getPointHash(x, y);
	                this._grids[key].push(i);
	            }
	        }
	    }
	};

	// Finding Mutually Visible Vertices and cut the polygon to remove holes.
	TriangulationContext.prototype._cutHoles = function () {
	    var holes = this.holes;

	    if (!holes.length) {
	        return;
	    }
	    holes = holes.slice();
	    var xMaxOfHoles = [];
	    var xMaxIndicesOfHoles = [];
	    for (var i = 0; i < holes.length; i++) {
	        var hole = holes[i];
	        var holeMaxX = -Infinity;
	        var holeMaxXIndex = 0;
	        // Find index of xMax in the hole.
	        for (var k = 0; k < hole.length; k += 2) {
	            var x = hole[k * 2];
	            if (x > holeMaxX) {
	                holeMaxXIndex = k / 2;
	                holeMaxX = x;
	            }
	        }
	        xMaxOfHoles.push(holeMaxX);
	        xMaxIndicesOfHoles.push(holeMaxXIndex);
	    }

	    var self = this;
	    function cutHole() {
	        var points = self.points;
	        var nPoints = self._nPoints;

	        var holeMaxX = -Infinity;
	        var holeMaxXIndex = 0;
	        var holeIndex = 0;
	        // Find hole which xMax is rightest
	        for (var i = 0; i < xMaxOfHoles.length; i++) {
	            if (xMaxOfHoles[i] > holeMaxX) {
	                holeMaxX = xMaxOfHoles[i];
	                holeMaxXIndex = xMaxIndicesOfHoles[i];
	                holeIndex = i;
	            }
	        }

	        var holePoints = holes[holeIndex];

	        xMaxOfHoles.splice(holeIndex, 1);
	        xMaxIndicesOfHoles.splice(holeIndex, 1);
	        holes.splice(holeIndex, 1);

	        var holePointX = holePoints[holeMaxXIndex * 2];
	        var holePointY = holePoints[holeMaxXIndex * 2 + 1];
	        var minRayX = Infinity;
	        var edgeStartPointIndex = -1;
	        // Find nearest intersected line
	        for (var i = 0, j = points.length - 2; i < points.length; i += 2) {
	            var x0 = points[j], y0 = points[j + 1];
	            var x1 = points[i], y1 = points[i + 1];

	            var rayX = intersectEdge(x0, y0, x1, y1, holePointX, holePointY);
	            if (rayX >= holePointX) {
	                // Intersected.
	                if (rayX < minRayX) {
	                    minRayX = rayX;
	                    edgeStartPointIndex = j / 2;
	                }
	            }

	            j = i;
	        }
	        // Didn't find
	        if (edgeStartPointIndex < 0) {
	            if (true) {
	                console.warn('Hole must be inside exterior.');
	            }
	            return;
	        }
	        var edgeEndPointIndex = (edgeStartPointIndex + 1) % (points.length / 2);
	        // Point of seam edge/
	        var seamPointIndex = (points[edgeStartPointIndex * 2] > points[edgeEndPointIndex * 2]) ? edgeStartPointIndex : edgeEndPointIndex;
	        // Use maximum x of edge
	        var seamX = points[seamPointIndex * 2];
	        var seamY = points[seamPointIndex * 2 + 1];

	        var minimumAngleCos = Infinity;
	        // And figure out if any of reflex points is in the triangle,
	        // if has, use the reflex point with minimum angle with (1, 0)
	        for (var i = 0; i < nPoints; i++) {
	            if (self._pointsTypes[i] === VERTEX_TYPE_REFLEX) {
	                var xi = points[i * 2];
	                var yi = points[i * 2 + 1];
	                if (isPointInTriangle(holePointX, holePointY, minRayX, holePointY, seamX, seamY, xi, yi)) {
	                    // Use dot product with (1, 0) as angle
	                    var dx = xi - holePointX;
	                    var dy = yi - holePointY;
	                    var len = Math.sqrt(dx * dx + dy * dy);
	                    dx /= len; dy /= len;
	                    var angleCos = dx * dx;
	                    if (angleCos < minimumAngleCos) {
	                        minimumAngleCos = angleCos;
	                        // Replaced seam.
	                        seamPointIndex = i;
	                    }
	                }
	            }
	        }

	        // TODO Use splice to add maybe slow
	        var newPointsCount = nPoints + holePoints.length / 2 + 2;
	        var newPoints = new Float32Array(newPointsCount * 2);
	        var newPointsTypes = new Uint8Array(newPointsCount);
	        seamX = points[seamPointIndex * 2];
	        seamY = points[seamPointIndex * 2 + 1];

	        var offPt = 0;
	        var offType = 0;

	        // x, y, prevX, prevY, nextX, nextY is used for point type.
	        var x, y;
	        var prevX, prevY, nextX, nextY;
	        function copyPoints(idx, source) {
	            prevX = x;
	            prevY = y;
	            x = newPoints[offPt++] = source[idx * 2];
	            y = newPoints[offPt++] = source[idx * 2 + 1];
	        }
	        function guessAndAddPointType() {
	            var type = triangleArea(prevX, prevY, x, y, nextX, nextY) < 0 ? VERTEX_TYPE_CONVEX : VERTEX_TYPE_REFLEX;
	            newPointsTypes[offType++] = type;
	        }

	        for (var i = 0; i < seamPointIndex; i++) {
	            copyPoints(i, points);
	            newPointsTypes[offType++] = self._pointsTypes[i];
	        }
	        copyPoints(seamPointIndex, points);
	        if (0 === seamPointIndex) { // In case first point is seam.
	            prevX = points[nPoints * 2 - 2];
	            prevY = points[nPoints * 2 - 1];
	        }
	        nextX = holePoints[holeMaxXIndex * 2];
	        nextY = holePoints[holeMaxXIndex * 2 + 1];

	        guessAndAddPointType();

	        // Add hole
	        for (var i = 0, holePointsCount = holePoints.length / 2; i < holePointsCount; i++) {
	            var idx = (i + holeMaxXIndex) % holePointsCount;
	            copyPoints(idx, holePoints);

	            var nextIdx = (idx + 1) % holePointsCount;
	            nextX = holePoints[nextIdx * 2]; nextY = holePoints[nextIdx * 2 + 1];
	            guessAndAddPointType();
	        }
	        // Add another seam.
	        copyPoints(holeMaxXIndex, holePoints);
	        nextX = seamX; nextY = seamY;
	        guessAndAddPointType();
	        copyPoints(seamPointIndex, points);
	        var nextIdx = (seamPointIndex + 1) % nPoints;
	        nextX = points[nextIdx * 2]; nextY = points[nextIdx * 2 + 1];
	        guessAndAddPointType();

	        // Add rest
	        for (var i = seamPointIndex + 1; i < nPoints; i++) {
	            copyPoints(i, points);
	            newPointsTypes[offType++] = self._pointsTypes[i];
	        }

	        // Update points and pointsTypes
	        self.points = newPoints;
	        self._pointsTypes = newPointsTypes;
	        self._nPoints = newPointsCount;
	    }

	    var count = holes.length;
	    while (count--) {
	        cutHole();
	    }
	};

	TriangulationContext.prototype._earClipping = function () {
	    var candidates = this._candidates;
	    while (candidates.length() > 2) {
	        var isDesperate = true;
	        var entry = candidates.head;
	        while (entry) {
	            if (this._isEar(entry)) {
	                entry = this._clipEar(entry);
	                isDesperate = false;
	            }
	            else {
	                entry = entry.next;
	            }
	        }

	        if (isDesperate) {
	            // Random pick a convex vertex when there is no more ear
	            // can be clipped and there are more than 3 points left
	            // After clip the random picked vertex, go on finding ears again
	            // So it can be extremely slow in worst case
	            // TODO
	            this._clipEar(candidates.head);
	        }
	    }
	}

	TriangulationContext.prototype._isEar = function (pointEntry) {
	    if (this._pointsTypes[pointEntry.value.idx] === VERTEX_TYPE_REFLEX) {
	        return;
	    }

	    var points = this.points;

	    var prevPointEntry = pointEntry.prev || this._candidates.tail;
	    var nextPointEntry = pointEntry.next || this._candidates.head;
	    var p0 = prevPointEntry.value.idx;
	    var p1 = pointEntry.value.idx;
	    var p2 = nextPointEntry.value.idx;

	    p0 *= 2;
	    p1 *= 2;
	    p2 *= 2;
	    var x0 = points[p0];
	    var y0 = points[p0 + 1];
	    var x1 = points[p1];
	    var y1 = points[p1 + 1];
	    var x2 = points[p2];
	    var y2 = points[p2 + 1];

	    // Clipped the tiny triangles directly
	    // if (Math.abs(triangleArea(x0, y0, x1, y1, x2, y2)) < 1) {
	    //     return true;
	    // }

	    if (this._needsGreed) {
	        var range = this._getTriangleGrids(x0, y0, x1, y1, x2, y2);

	        // Find all the points in the grids covered by the triangle
	        // And figure out if any of them is in the triangle
	        for (var j = range[0][1]; j <= range[1][1]; j++) {
	            for (var i = range[0][0]; i <= range[1][0]; i++) {
	                var gridIdx = j * this._gridNumber + i;
	                var gridPoints = this._grids[gridIdx];

	                for (var k = 0; k < gridPoints.length; k++) {
	                    var idx = gridPoints[k];
	                    if (this._pointsTypes[idx] == VERTEX_TYPE_REFLEX) {
	                        var xi = points[idx * 2];
	                        var yi = points[idx * 2 + 1];
	                        if (isPointInTriangle(x0, y0, x1, y1, x2, y2, xi, yi)) {
	                            return false;
	                        }
	                    }
	                }
	            }
	        }
	    }
	    else {
	        var entry = this._candidates.head;
	        while (entry) {
	            var idx = entry.value.idx;
	            var xi = points[idx * 2];
	            var yi = points[idx * 2 + 1];
	            if (this._pointsTypes[idx] == VERTEX_TYPE_REFLEX) {
	                if (isPointInTriangle(x0, y0, x1, y1, x2, y2, xi, yi)) {
	                    return false;
	                }
	            }
	            entry = entry.next;
	        }
	    }

	    return true;
	}

	TriangulationContext.prototype._clipEar = function (pointEntry) {

	    var candidates = this._candidates;

	    var prevPointEntry = pointEntry.prev || candidates.tail;
	    var nextPointEntry = pointEntry.next || candidates.head;

	    var p0 = prevPointEntry.value.idx;
	    var p1 = pointEntry.value.idx;
	    var p2 = nextPointEntry.value.idx;

	    var triangles = this.triangles;
	    // FIXME e0 may same with e1
	    triangles.push(p0);
	    triangles.push(p1);
	    triangles.push(p2);

	    // PENDING
	    // The index in the grids also needs to be removed
	    // But because it needs `splice` and `indexOf`
	    // may cost too much
	    candidates.remove(pointEntry);

	    if (candidates.length() === 3) {
	        triangles.push(p0);
	        triangles.push(p2);
	        triangles.push((nextPointEntry.next || candidates.head).value.idx);
	        return;
	    }

	    var nextNextPointEntry = nextPointEntry.next || candidates.head;
	    var prevPrevPointEntry = prevPointEntry.prev || candidates.tail;

	    var p0 = prevPrevPointEntry.value.idx;
	    var p1 = prevPointEntry.value.idx;
	    var p2 = nextPointEntry.value.idx;
	    var p3 = nextNextPointEntry.value.idx;
	    // Update p1, p2, vertex type.
	    // New candidate after clipping (convex vertex)
	    this._pointsTypes[p1] = this.isTriangleConvex2(p0, p1, p2) ? VERTEX_TYPE_CONVEX : VERTEX_TYPE_REFLEX;
	    this._pointsTypes[p2] = this.isTriangleConvex2(p1, p2, p3) ? VERTEX_TYPE_CONVEX : VERTEX_TYPE_REFLEX;

	    return prevPointEntry;
	};

	// Get geometric hash of point
	// Actually it will find the grid index by giving the point (x y)
	TriangulationContext.prototype._getPointHash = function (x, y) {
	    var bb = this._boundingBox;
	    return Math.floor((y - bb[0][1]) / this._gridHeight) * this._gridNumber
	        + Math.floor((x - bb[0][0]) / this._gridWidth);
	};

	// Get the grid range covered by the triangle
	TriangulationContext.prototype._getTriangleGrids = (function () {
	    var range = [[-1, -1], [-1, -1]];
	    var minX, minY, maxX, maxY;
	    return function (x0, y0, x1, y1, x2, y2) {
	        var bb = this._boundingBox;

	        minX = maxX = x0;
	        minY = maxY = y0;
	        if (x1 < minX) { minX = x1; }
	        if (y1 < minY) { minY = y1; }
	        if (x1 > maxX) { maxX = x1; }
	        if (y1 > maxY) { maxY = y1; }
	        if (x2 < minX) { minX = x2; }
	        if (y2 < minY) { minY = y2; }
	        if (x2 > maxX) { maxX = x2; }
	        if (y2 > maxY) { maxY = y2; }

	        range[0][0] = Math.floor((minX - bb[0][0]) / this._gridWidth);
	        range[1][0] = Math.floor((maxX - bb[0][0]) / this._gridWidth);

	        range[0][1] = Math.floor((minY - bb[0][1]) / this._gridHeight);
	        range[1][1] = Math.floor((maxY - bb[0][1]) / this._gridHeight);

	        return range;
	    };
	})();

	TriangulationContext.prototype.isTriangleConvex2 = function (p0, p1, p2) {
	    return this.triangleArea(p0, p1, p2) < 0;
	};

	TriangulationContext.prototype.triangleArea = function (p0, p1, p2) {
	    var x0 = this.points[p0 * 2];
	    var y0 = this.points[p0 * 2 + 1];
	    var x1 = this.points[p1 * 2];
	    var y1 = this.points[p1 * 2 + 1];
	    var x2 = this.points[p2 * 2];
	    var y2 = this.points[p2 * 2 + 1];
	    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);
	};

	module.exports = TriangulationContext;

/***/ },
/* 158 */
/***/ function(module, exports) {

	'use strict';


	    /**
	     * Simple double linked list. Compared with array, it has O(1) remove operation.
	     * @constructor
	     * @alias qtek.core.LinkedList
	     */
	    var LinkedList = function () {

	        /**
	         * @type {qtek.core.LinkedList.Entry}
	         */
	        this.head = null;

	        /**
	         * @type {qtek.core.LinkedList.Entry}
	         */
	        this.tail = null;

	        this._length = 0;
	    };

	    /**
	     * Insert a new value at the tail
	     * @param  {} val
	     * @return {qtek.core.LinkedList.Entry}
	     */
	    LinkedList.prototype.insert = function (val) {
	        var entry = new LinkedList.Entry(val);
	        this.insertEntry(entry);
	        return entry;
	    };

	    /**
	     * Insert a new value at idx
	     * @param {number} idx
	     * @param  {} val
	     * @return {qtek.core.LinkedList.Entry}
	     */
	    LinkedList.prototype.insertAt = function (idx, val) {
	        if (idx < 0) {
	            return;
	        }
	        var next = this.head;
	        var cursor = 0;
	        while (next && cursor != idx) {
	            next = next.next;
	            cursor++;
	        }
	        if (next) {
	            var entry = new LinkedList.Entry(val);
	            var prev = next.prev;
	            if (!prev) { //next is head
	                this.head = entry;
	            }
	            else {
	                prev.next = entry;
	                entry.prev = prev;
	            }
	            entry.next = next;
	            next.prev = entry;
	        }
	        else {
	            this.insert(val);
	        }
	    };

	    LinkedList.prototype.insertBeforeEntry = function (val, next) {
	        var entry = new LinkedList.Entry(val);
	        var prev = next.prev;
	        if (!prev) { //next is head
	            this.head = entry;
	        }
	        else {
	            prev.next = entry;
	            entry.prev = prev;
	        }
	        entry.next = next;
	        next.prev = entry;

	        this._length++;
	    };

	    /**
	     * Insert an entry at the tail
	     * @param  {qtek.core.LinkedList.Entry} entry
	     */
	    LinkedList.prototype.insertEntry = function (entry) {
	        if (!this.head) {
	            this.head = this.tail = entry;
	        }
	        else {
	            this.tail.next = entry;
	            entry.prev = this.tail;
	            this.tail = entry;
	        }
	        this._length++;
	    };

	    /**
	     * Remove entry.
	     * @param  {qtek.core.LinkedList.Entry} entry
	     */
	    LinkedList.prototype.remove = function (entry) {
	        var prev = entry.prev;
	        var next = entry.next;
	        if (prev) {
	            prev.next = next;
	        }
	        else {
	            // Is head
	            this.head = next;
	        }
	        if (next) {
	            next.prev = prev;
	        }
	        else {
	            // Is tail
	            this.tail = prev;
	        }
	        entry.next = entry.prev = null;
	        this._length--;
	    };

	    /**
	     * Remove entry at index.
	     * @param  {number} idx
	     * @return {}
	     */
	    LinkedList.prototype.removeAt = function (idx) {
	        if (idx < 0) {
	            return;
	        }
	        var curr = this.head;
	        var cursor = 0;
	        while (curr && cursor != idx) {
	            curr = curr.next;
	            cursor++;
	        }
	        if (curr) {
	            this.remove(curr);
	            return curr.value;
	        }
	    };
	    /**
	     * Get head value
	     * @return {}
	     */
	    LinkedList.prototype.getHead = function () {
	        if (this.head) {
	            return this.head.value;
	        }
	    };
	    /**
	     * Get tail value
	     * @return {}
	     */
	    LinkedList.prototype.getTail = function () {
	        if (this.tail) {
	            return this.tail.value;
	        }
	    };
	    /**
	     * Get value at idx
	     * @param {number} idx
	     * @return {}
	     */
	    LinkedList.prototype.getAt = function (idx) {
	        if (idx < 0) {
	            return;
	        }
	        var curr = this.head;
	        var cursor = 0;
	        while (curr && cursor != idx) {
	            curr = curr.next;
	            cursor++;
	        }
	        return curr.value;
	    };

	    /**
	     * @param  {} value
	     * @return {number}
	     */
	    LinkedList.prototype.indexOf = function (value) {
	        var curr = this.head;
	        var cursor = 0;
	        while (curr) {
	            if (curr.value === value) {
	                return cursor;
	            }
	            curr = curr.next;
	            cursor++;
	        }
	    };

	    /**
	     * @return {number}
	     */
	    LinkedList.prototype.length = function () {
	        return this._length;
	    };

	    /**
	     * If list is empty
	     */
	    LinkedList.prototype.isEmpty = function () {
	        return this._length === 0;
	    };

	    /**
	     * @param  {Function} cb
	     * @param  {} context
	     */
	    LinkedList.prototype.forEach = function (cb, context) {
	        var curr = this.head;
	        var idx = 0;
	        var haveContext = typeof(context) != 'undefined';
	        while (curr) {
	            if (haveContext) {
	                cb.call(context, curr.value, idx);
	            }
	            else {
	                cb(curr.value, idx);
	            }
	            curr = curr.next;
	            idx++;
	        }
	    };

	    /**
	     * Clear the list
	     */
	    LinkedList.prototype.clear = function () {
	        this.tail = this.head = null;
	        this._length = 0;
	    };

	    /**
	     * @constructor
	     * @param {} val
	     */
	    LinkedList.Entry = function (val) {
	        /**
	         * @type {}
	         */
	        this.value = val;

	        /**
	         * @type {qtek.core.LinkedList.Entry}
	         */
	        this.next = null;

	        /**
	         * @type {qtek.core.LinkedList.Entry}
	         */
	        this.prev = null;
	    };

	    module.exports = LinkedList;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var vec3 = __webpack_require__(15).vec3;
	var ProgressiveQuickSort = __webpack_require__(160);

	var p0 = vec3.create();
	var p1 = vec3.create();
	var p2 = vec3.create();
	// var cp = vec3.create();

	module.exports = {

	    needsSortTriangles: function () {
	        return this.indices && this.sortTriangles;
	    },

	    needsSortTrianglesProgressively: function () {
	        return this.needsSortTriangles() && this.triangleCount >= 2e4;
	    },

	    doSortTriangles: function (cameraPos, frame) {
	        var indices = this.indices;
	        // Do progressive quick sort.
	        if (frame === 0) {
	            var posAttr = this.attributes.position;
	            var cameraPos = cameraPos._array;

	            if (!this._triangleZList || this._triangleZList.length !== this.triangleCount) {
	                this._triangleZList = new Float32Array(this.triangleCount);
	                this._sortedTriangleIndices = new Uint32Array(this.triangleCount);

	                this._indicesTmp = new indices.constructor(indices.length);
	                this._triangleZListTmp = new Float32Array(this.triangleCount);
	            }

	            var cursor = 0;
	            for (var i = 0; i < indices.length;) {
	                posAttr.get(indices[i++], p0);
	                posAttr.get(indices[i++], p1);
	                posAttr.get(indices[i++], p2);

	                // FIXME If use center ?
	                // cp[0] = (p0[0] + p1[0] + p2[0]) / 3;
	                // cp[1] = (p0[1] + p1[1] + p2[1]) / 3;
	                // cp[2] = (p0[2] + p1[2] + p2[2]) / 3;
	                // Camera position is in object space

	                // Use max of three points, PENDING
	                var z0 = vec3.sqrDist(p0, cameraPos);
	                var z1 = vec3.sqrDist(p1, cameraPos);
	                var z2 = vec3.sqrDist(p2, cameraPos);
	                var zMax = Math.min(z0, z1);
	                zMax = Math.min(zMax, z2);
	                this._triangleZList[cursor++] = zMax;
	            }
	        }


	        var sortedTriangleIndices = this._sortedTriangleIndices;
	        for (var i = 0; i < sortedTriangleIndices.length; i++) {
	            sortedTriangleIndices[i] = i;
	        }

	        if (this.triangleCount < 2e4) {
	            // Use simple timsort for simple geometries.
	            if (frame === 0) {
	                // Use native sort temporary.
	                this._simpleSort(true);
	            }
	        }
	        else {
	            for (var i = 0; i < 3; i++) {
	                this._progressiveQuickSort(frame * 3 + i);
	            }
	        }

	        var targetIndices = this._indicesTmp;
	        var targetTriangleZList = this._triangleZListTmp;
	        var faceZList = this._triangleZList;
	        for (var i = 0; i < this.triangleCount; i++) {
	            var fromIdx3 = sortedTriangleIndices[i] * 3;
	            var toIdx3 = i * 3;
	            targetIndices[toIdx3++] = indices[fromIdx3++];
	            targetIndices[toIdx3++] = indices[fromIdx3++];
	            targetIndices[toIdx3] = indices[fromIdx3];

	            targetTriangleZList[i] = faceZList[sortedTriangleIndices[i]];
	        }

	        // Swap indices.
	        var tmp = this._indicesTmp;
	        this._indicesTmp = this.indices;
	        this.indices = tmp;
	        var tmp = this._triangleZListTmp;
	        this._triangleZListTmp = this._triangleZList;
	        this._triangleZList = tmp;

	        this.dirtyIndices();
	    },

	    _simpleSort: function (useNativeQuickSort) {
	        var faceZList = this._triangleZList;
	        var sortedTriangleIndices = this._sortedTriangleIndices;

	        function compare(a, b) {
	            // Sort from far to near. which is descending order
	            return faceZList[b] - faceZList[a];
	        }
	        if (useNativeQuickSort) {
	            sortedTriangleIndices.sort(compare);
	        }
	        else {
	            ProgressiveQuickSort.sort(sortedTriangleIndices, compare, 0, sortedTriangleIndices.length - 1);
	        }
	    },

	    _progressiveQuickSort: function (frame) {
	        var faceZList = this._triangleZList;
	        var sortedTriangleIndices = this._sortedTriangleIndices;

	        this._quickSort = this._quickSort || new ProgressiveQuickSort();

	        this._quickSort.step(sortedTriangleIndices, function (a, b) {
	            return faceZList[b] - faceZList[a];
	        }, frame);
	    }
	};

/***/ },
/* 160 */
/***/ function(module, exports) {

	
	function swap(arr, a, b) {
	    var tmp = arr[a];
	    arr[a] = arr[b];
	    arr[b] = tmp;
	}
	function partition(arr, pivot, left, right, compare) {
	    var storeIndex = left;
	    var pivotValue = arr[pivot];

	    // put the pivot on the right
	    swap(arr, pivot, right);

	    // go through the rest
	    for(var v = left; v < right; v++) {
	        if(compare(arr[v], pivotValue) < 0) {
	            swap(arr, v, storeIndex);
	            storeIndex++;
	        }
	    }

	    // finally put the pivot in the correct place
	    swap(arr, right, storeIndex);

	    return storeIndex;
	}

	function quickSort(array, compare, left, right) {
	    if(left < right) {
	        var pivot = Math.floor((left + right) / 2);
	        var newPivot = partition(array, pivot, left, right, compare);
	        quickSort(array, compare, left, newPivot - 1);
	        quickSort(array, compare, newPivot + 1, right);
	    }

	}


	// TODO Test.
	function ProgressiveQuickSort() {

	    // this._pivotList = new LinkedList();
	    this._parts = [];
	}

	ProgressiveQuickSort.prototype.step = function (arr, compare, frame) {

	    var len = arr.length;
	    if (frame === 0) {
	        this._parts = [];
	        this._sorted = false;

	        // Pick a start pivot;
	        var pivot = Math.floor(len / 2);
	        this._parts.push({
	            pivot: pivot,
	            left: 0,
	            right: len - 1
	        });

	        this._currentSortPartIdx = 0;
	    }

	    if (this._sorted) {
	        return;
	    }

	    var parts = this._parts;
	    if (parts.length === 0) {
	        this._sorted = true;
	        // Already finished.
	        return true;
	    }
	    else if (parts.length < 512) {
	        // Sort large parts in about 10 frames.
	        for (var i = 0; i < parts.length; i++) {
	            // Partition and Modify the pivot index.
	            parts[i].pivot = partition(
	                arr, parts[i].pivot, parts[i].left, parts[i].right, compare
	            );
	        }

	        var subdividedParts = [];
	        for (var i = 0; i < parts.length; i++) {
	            // Subdivide left
	            var left = parts[i].left;
	            var right = parts[i].pivot - 1;
	            if (right > left) {
	                subdividedParts.push({
	                    pivot: Math.floor((right + left) / 2),
	                    left: left, right: right
	                });
	            }
	            // Subdivide right
	            var left = parts[i].pivot + 1;
	            var right = parts[i].right;
	            if (right > left) {
	                subdividedParts.push({
	                    pivot: Math.floor((right + left) / 2),
	                    left: left, right: right
	                });
	            }
	        }
	        parts = this._parts = subdividedParts;
	    }
	    else {
	        // console.time('sort');
	        // Finally quick sort each parts in 10 frames.
	        for (var i = 0; i < Math.floor(parts.length / 10); i++) {
	            // Sort near parts first.
	            var idx = parts.length - 1 - this._currentSortPartIdx;
	            quickSort(arr, compare, parts[idx].left, parts[idx].right);
	            this._currentSortPartIdx++;

	            // Finish sort
	            if (this._currentSortPartIdx === parts.length) {
	                this._sorted = true;
	                return true;
	            }
	        }
	        // console.timeEnd('sort');

	    }

	    return false;
	};

	ProgressiveQuickSort.sort = quickSort;

	module.exports = ProgressiveQuickSort;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var ZRTextureAtlasSurface = __webpack_require__(101);
	var LabelsMesh = __webpack_require__(107);

	var LABEL_NORMAL_SHOW_BIT = 1;
	var LABEL_EMPHASIS_SHOW_BIT = 2;

	function LabelsBuilder(width, height, api) {

	    this._labelsMesh = new LabelsMesh();

	    this._labelTextureSurface = new ZRTextureAtlasSurface({
	        width: 512,
	        height: 512,
	        devicePixelRatio: api.getDevicePixelRatio(),
	        onupdate: function () {
	            api.getZr().refresh();
	        }
	    });
	    this._api = api;

	    this._labelsMesh.material.set('textureAtlas', this._labelTextureSurface.getTexture());
	}

	LabelsBuilder.prototype.getLabelPosition = function (dataIndex, positionDesc, distance) {
	    return [0, 0, 0];
	};

	LabelsBuilder.prototype.getLabelDistance = function (dataIndex, positionDesc, distance) {
	    return 0;
	};

	LabelsBuilder.prototype.getMesh = function () {
	    return this._labelsMesh;
	};

	LabelsBuilder.prototype.updateData = function (data) {

	    if (!this._labelsVisibilitiesBits || this._labelsVisibilitiesBits.length !== data.count()) {
	        this._labelsVisibilitiesBits = new Uint8Array(data.count());
	    }
	    var normalLabelVisibilityQuery = ['label', 'show'];
	    var emphasisLabelVisibilityQuery = ['emphasis', 'label', 'show'];

	    data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var normalVisibility = itemModel.get(normalLabelVisibilityQuery);
	        var emphasisVisibility = itemModel.get(emphasisLabelVisibilityQuery);
	        if (emphasisVisibility == null) {
	            emphasisVisibility = normalVisibility;
	        }
	        var bit = (normalVisibility ? LABEL_NORMAL_SHOW_BIT : 0)
	            | (emphasisVisibility ? LABEL_EMPHASIS_SHOW_BIT : 0);
	        this._labelsVisibilitiesBits[idx] = bit;
	    }, false, this);

	    this._data = data;
	};

	LabelsBuilder.prototype.updateLabels = function (highlightDataIndices) {

	    if (!this._data) {
	        return;
	    }

	    highlightDataIndices = highlightDataIndices || [];

	    var hasHighlightData = highlightDataIndices.length > 0;
	    var highlightDataIndicesMap = {};
	    for (var i = 0; i < highlightDataIndices.length; i++) {
	        highlightDataIndicesMap[highlightDataIndices[i]] = true;
	    }

	    this._labelsMesh.geometry.convertToDynamicArray(true);
	    this._labelTextureSurface.clear();

	    var normalLabelQuery = ['label'];
	    var emphasisLabelQuery = ['emphasis', 'label'];
	    var seriesModel = this._data.hostModel;
	    var data = this._data;

	    var seriesLabelModel = seriesModel.getModel(normalLabelQuery);
	    var seriesLabelEmphasisModel = seriesModel.getModel(emphasisLabelQuery, seriesLabelModel);

	    var textAlignMap = {
	        left: 'right',
	        right: 'left',
	        top: 'center',
	        bottom: 'center'
	    };
	    var textVerticalAlignMap = {
	        left: 'middle',
	        right: 'middle',
	        top: 'bottom',
	        bottom: 'top'
	    };

	    data.each(function (dataIndex) {
	        var isEmphasis = false;
	        if (hasHighlightData && highlightDataIndicesMap[dataIndex]) {
	            isEmphasis = true;
	        }
	        var ifShow = this._labelsVisibilitiesBits[dataIndex]
	            & (isEmphasis ? LABEL_EMPHASIS_SHOW_BIT : LABEL_NORMAL_SHOW_BIT);
	        if (!ifShow) {
	            return;
	        }

	        var itemModel = data.getItemModel(dataIndex);
	        var labelModel = itemModel.getModel(
	            isEmphasis ? emphasisLabelQuery : normalLabelQuery,
	            isEmphasis ? seriesLabelEmphasisModel : seriesLabelModel
	        );
	        var distance = labelModel.get('distance') || 0;
	        var position = labelModel.get('position');
	        var textStyleModel = labelModel.getModel('textStyle');

	        var dpr = this._api.getDevicePixelRatio();
	        var text = seriesModel.getFormattedLabel(dataIndex, isEmphasis ? 'emphasis' : 'normal');
	        var textEl = new echarts.graphic.Text({
	            style: {
	                text: text,
	                font: textStyleModel.getFont(),
	                fill: textStyleModel.get('color') || data.getItemVisual(dataIndex, 'color') || '#000',
	                opacity: textStyleModel.get('opacity'),
	                stroke: textStyleModel.get('borderColor'),
	                lineWidth: textStyleModel.get('borderWidth') * 2,
	                textAlign: 'left',
	                textVerticalAlign: 'top'
	            }
	        });
	        var rect = textEl.getBoundingRect();

	        var coords = this._labelTextureSurface.add(textEl);

	        var textAlign = textAlignMap[position] || 'center';
	        var textVerticalAlign = textVerticalAlignMap[position] || 'bottom';

	        this._labelsMesh.geometry.addSprite(
	            this.getLabelPosition(dataIndex, position, distance),
	            [rect.width * dpr, rect.height * dpr], coords,
	            textAlign, textVerticalAlign,
	            this.getLabelDistance(dataIndex, position, distance) * dpr
	        );
	    }, false, this);

	    this._labelsMesh.material.set('uvScale', this._labelTextureSurface.getCoordsScale());

	    // var canvas = this._labelTextureSurface.getTexture().image;
	    // document.body.appendChild(canvas);
	    // canvas.style.cssText = 'position:absolute;z-index: 1000';

	    // Update image.
	    this._labelTextureSurface.getZr().refreshImmediately();
	    this._labelsMesh.geometry.convertToTypedArray();
	    this._labelsMesh.geometry.dirty();
	};

	module.exports = LabelsBuilder;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var Geo3D = __webpack_require__(163);
	var echarts = __webpack_require__(2);
	var layoutUtil = __webpack_require__(115);
	var ViewGL = __webpack_require__(122);
	var retrieve = __webpack_require__(69);

	function resizeGeo3D(geo3DModel, api) {
	    // Use left/top/width/height
	    var boxLayoutOption = geo3DModel.getBoxLayoutParams();

	    var viewport = layoutUtil.getLayoutRect(boxLayoutOption, {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });

	    // Flip Y
	    viewport.y = api.getHeight() - viewport.y - viewport.height;

	    this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

	    var geoRect = this.getGeoBoundingRect();
	    var aspect = geoRect.width / geoRect.height * 0.75;

	    var width = geo3DModel.get('boxWidth');
	    var depth = geo3DModel.get('boxDepth');
	    var height = geo3DModel.get('boxHeight');
	    if (height == null) {
	        height = 5;
	    }
	    if (isNaN(width) && isNaN(depth)) {
	        // Default to have 100 width
	        width = 100;
	    }
	    if (isNaN(depth)) {
	        depth = width / aspect;
	    }
	    else if (isNaN(width)) {
	        width = depth / aspect;
	    }

	    this.setSize(width, height, depth);
	}


	if (true) {
	    var mapNotExistsError = function (name) {
	        console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
	    };
	}

	var geo3DCreator = {

	    dimensions: Geo3D.prototype.dimensions,

	    create: function (ecModel, api) {

	        var geo3DList = [];

	        if (!echarts.getMap) {
	            throw new Error('geo3D component depends on geo component')
	        }

	        function createGeo3D(componentModel, idx) {
	            var name = componentModel.get('map');
	            var mapData = echarts.getMap(name);
	            if (true) {
	                if (!mapData) {
	                    mapNotExistsError(name);
	                }
	            }

	            // FIXME
	            componentModel.__viewGL = componentModel.__viewGL || new ViewGL();

	            var geo3D = new Geo3D(
	                name + idx, name,
	                mapData && mapData.geoJson, mapData && mapData.specialAreas,
	                componentModel.get('nameMap')
	            );
	            geo3D.viewGL = componentModel.__viewGL;

	            componentModel.coordinateSystem = geo3D;
	            geo3DList.push(geo3D);

	            // Inject resize
	            geo3D.resize = resizeGeo3D;
	            geo3D.resize(componentModel, api);
	        }

	        ecModel.eachComponent('geo3D', function (geo3DModel, idx) {
	            createGeo3D(geo3DModel, idx);
	        });

	        ecModel.eachSeriesByType('map3D', function (map3DModel, idx) {
	            createGeo3D(map3DModel, idx);
	        });

	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'geo3D') {
	                var geo3DModel = seriesModel.getReferringComponents('geo3D')[0];
	                if (!geo3DModel) {
	                    geo3DModel = ecModel.getComponent('geo3D');
	                }

	                if (!geo3DModel) {
	                    throw new Error('geo "' + retrieve.firstNotNull(
	                        seriesModel.get('geo3DIndex'),
	                        seriesModel.get('geo3DId'),
	                        0
	                    ) + '" not found');
	                }

	                seriesModel.coordinateSystem = geo3DModel.coordinateSystem;
	            }
	        });
	    }
	};

	echarts.registerCoordinateSystem('geo3D', geo3DCreator);

	module.exports = geo3DCreator;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var glmatrix = __webpack_require__(15);
	var vec3 = glmatrix.vec3;
	var mat4 = glmatrix.mat4;

	// Geo fix functions
	var geoFixFuncs = [
	    __webpack_require__(164),
	    __webpack_require__(165)
	];

	function Geo3D(name, map, geoJson, specialAreas, nameMap) {

	    this.name = name;

	    this.map = map;

	    this.regions = [];

	    this._nameCoordMap = {};

	    this.loadGeoJson(geoJson, specialAreas, nameMap);

	    this.transform = mat4.create();

	    this.invTransform = mat4.create();
	}

	Geo3D.prototype = {

	    constructor: Geo3D,

	    type: 'geo3D',

	    dimensions: ['lng', 'lat', 'alt'],

	    containPoint: function () {},

	    loadGeoJson: function (geoJson, specialAreas, nameMap) {
	        try {
	            this.regions = geoJson ? echarts.parseGeoJSON(geoJson) : [];
	        }
	        catch (e) {
	            throw 'Invalid geoJson format\n' + e;
	        }
	        specialAreas = specialAreas || {};
	        nameMap = nameMap || {};
	        var regions = this.regions;
	        var regionsMap = {};
	        for (var i = 0; i < regions.length; i++) {
	            var regionName = regions[i].name;
	            // Try use the alias in nameMap
	            regionName = nameMap[regionName] || regionName;
	            regions[i].name = regionName;

	            regionsMap[regionName] = regions[i];
	            // Add geoJson
	            this.addGeoCoord(regionName, regions[i].center);

	            // Some area like Alaska in USA map needs to be tansformed
	            // to look better
	            var specialArea = specialAreas[regionName];
	            if (specialArea) {
	                regions[i].transformTo(
	                    specialArea.left, specialArea.top, specialArea.width, specialArea.height
	                );
	            }
	        }

	        this._regionsMap = regionsMap;

	        this._geoRect = null;

	        geoFixFuncs.forEach(function (fixFunc) {
	            fixFunc(this);
	        }, this);
	    },

	    getGeoBoundingRect: function () {
	        if (this._geoRect) {
	            return this._geoRect;
	        }
	        var rect;

	        var regions = this.regions;
	        for (var i = 0; i < regions.length; i++) {
	            var regionRect = regions[i].getBoundingRect();
	            rect = rect || regionRect.clone();
	            rect.union(regionRect);
	        }
	        // FIXME Always return new ?
	        return (this._geoRect = rect || new echarts.graphic.BoundingRect(0, 0, 0, 0));
	    },

	    /**
	     * Add geoCoord for indexing by name
	     * @param {string} name
	     * @param {Array.<number>} geoCoord
	     */
	    addGeoCoord: function (name, geoCoord) {
	        this._nameCoordMap[name] = geoCoord;
	    },

	    /**
	     * @param {string} name
	     * @return {module:echarts/coord/geo/Region}
	     */
	    getRegion: function (name) {
	        return this._regionsMap[name];
	    },

	    getRegionByCoord: function (coord) {
	        var regions = this.regions;
	        for (var i = 0; i < regions.length; i++) {
	            if (regions[i].contain(coord)) {
	                return regions[i];
	            }
	        }
	    },

	    setSize: function (width, height, depth) {
	        this.size = [width, height, depth];

	        var rect = this.getGeoBoundingRect();

	        var scaleX = width / rect.width;
	        var scaleZ = -depth / rect.height;
	        var translateX = -width / 2 - rect.x * scaleX;
	        var translateZ = depth / 2 - rect.y * scaleZ;

	        var position = [translateX, 0, translateZ];
	        var scale = [scaleX, 1, scaleZ];

	        var m = this.transform;
	        mat4.identity(m);
	        mat4.translate(m, m, position);
	        mat4.scale(m, m, scale);

	        mat4.invert(this.invTransform, m);
	    },

	    dataToPoint: function (data, out) {
	        out = out || [];
	        // lng
	        out[0] = data[0];
	        // lat
	        out[2] = data[1];

	        // alt
	        out[1] = data[2];

	        if (isNaN(out[1])) {
	            out[1] = this.size[1];
	        }

	        vec3.transformMat4(out, out, this.transform);

	        return out;
	    },

	    pointToData: function (point, out) {
	        out = out || [];
	        // lng
	        out[0] = point[0];
	        // lat
	        out[1] = point[1];
	        // alt
	        out[2] = point[2];

	        vec3.transformMat4(out, out, this.invTransform);

	        return out;
	    }
	};

	module.exports = Geo3D;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(75);

	    var coordsOffsetMap = {
	        '南海诸岛' : [32, 80],
	        // 全国
	        '广东': [0, -10],
	        '香港': [10, 5],
	        '澳门': [-10, 10],
	        //'北京': [-10, 0],
	        '天津': [5, 5]
	    };

	    module.exports = function (geo) {
	        zrUtil.each(geo.regions, function (region) {
	            var coordFix = coordsOffsetMap[region.name];
	            if (coordFix) {
	                var cp = region.center;
	                cp[0] += coordFix[0] / 10.5;
	                cp[1] += -coordFix[1] / (10.5 / 0.75);
	            }
	        });
	    };


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(75);

	    var geoCoordMap = {
	        'Russia': [100, 60],
	        'United States': [-99, 38],
	        'United States of America': [-99, 38]
	    };

	    module.exports = function (geo) {
	        zrUtil.each(geo.regions, function (region) {
	            var geoCoord = geoCoordMap[region.name];
	            if (geoCoord) {
	                var cp = region.center;
	                cp[0] = geoCoord[0];
	                cp[1] = geoCoord[1];
	            }
	        });
	    };


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(167);
	__webpack_require__(168);

	__webpack_require__(170);

	echarts.registerAction({
	    type: 'globeChangeCamera',
	    event: 'globecamerachanged',
	    update: 'series:updateCamera'
	}, function (payload, ecModel) {
	    ecModel.eachComponent({
	        mainType: 'globe', query: payload
	    }, function (componentModel) {
	        componentModel.setView(payload);
	    });
	});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var componentViewControlMixin = __webpack_require__(94);
	var componentPostEffectMixin = __webpack_require__(95);
	var componentLightMixin = __webpack_require__(96);
	var componentShadingMixin = __webpack_require__(153);


	function defaultId(option, idx) {
	    option.id = option.id || option.name || (idx + '');
	}
	var GlobeModel = echarts.extendComponentModel({

	    type: 'globe',

	    layoutMode: 'box',

	    coordinateSystem: null,

	    init: function () {
	        GlobeModel.superApply(this, 'init', arguments);

	        echarts.util.each(this.option.layers, function (layerOption, idx) {
	            echarts.util.merge(layerOption, this.defaultLayerOption);
	            defaultId(layerOption);
	        }, this);
	    },

	    mergeOption: function (option) {
	        // TODO test
	        var oldLayers = this.option.layers;
	        this.option.layers = null;
	        GlobeModel.superApply(this, 'mergeOption', arguments);

	        function createLayerMap(layers) {
	            return echarts.util.reduce(layers, function (obj, layerOption, idx) {
	                defaultId(layerOption, idx);
	                obj[layerOption.id] = layerOption;
	                return obj;
	            }, {});
	        }
	        if (oldLayers && oldLayers.length) {
	            var newLayerMap = createLayerMap(option.layers);
	            var oldLayerMap = createLayerMap(oldLayers);
	            for (var id in newLayerMap) {
	                if (oldLayerMap[id]) {
	                    echarts.util.merge(oldLayerMap[id], newLayerMap[id], true);
	                }
	                else {
	                    oldLayers.push(option.layers[id]);
	                }
	            }
	            // Copy back
	            this.option.layers = oldLayers;
	        }
	        // else overwrite

	        // Set default
	        echarts.util.each(this.option.layers, function (layerOption) {
	            echarts.util.merge(layerOption, this.defaultLayerOption);
	        }, this);
	    },

	    defaultLayerOption: {
	        show: true,
	        type: 'overlay'
	    },

	    defaultOption: {

	        show: true,

	        zlevel: -10,

	        flat: false,

	        // Layout used for viewport
	        left: 0,
	        top: 0,
	        width: '100%',
	        height: '100%',

	        environmentTexture: '',

	        // Base albedo texture
	        baseTexture: '',

	        // Height texture for bump mapping and vertex displacement
	        heightTexture: '',

	        // Texture for vertex displacement, default use heightTexture
	        displacementTexture: '',
	        // Scale of vertex displacement, available only if displacementTexture is set.
	        displacementScale: 0,

	        // Detail of displacement. 'low', 'medium', 'high', 'ultra'
	        displacementQuality: 'medium',

	        globeRadius: 100,

	        // Shading of globe
	        shading: 'lambert',

	        // Extend light
	        light: {
	            // Main sun light
	            main: {
	                // Time, default it will use system time
	                time: ''
	            },
	            // Emission from emissive layers
	            emission: {
	                intensity: 1
	            }
	        },

	        // light
	        // postEffect
	        // temporalSuperSampling

	        viewControl: {
	            autoRotate: true
	        },


	        // {
	        //     show: true,
	        //     name: 'cloud',
	        //     type: 'overlay',
	        //     shading: 'lambert',
	        //     distance: 10,
	        //     texture: ''
	        // }
	        // {
	        //     type: 'blend',
	        //     blendTo: 'albedo'
	        //     blendType: 'source-over'
	        // }

	        layers: []
	    }
	});

	echarts.util.merge(GlobeModel.prototype, componentViewControlMixin);
	echarts.util.merge(GlobeModel.prototype, componentPostEffectMixin);
	echarts.util.merge(GlobeModel.prototype, componentLightMixin);
	echarts.util.merge(GlobeModel.prototype, componentShadingMixin);

	module.exports = GlobeModel;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	var graphicGL = __webpack_require__(31);
	var OrbitControl = __webpack_require__(98);
	var LightHelper = __webpack_require__(102);

	var sunCalc = __webpack_require__(169);
	var retrieve = __webpack_require__(69);

	module.exports = echarts.extendComponentView({

	    type: 'globe',

	    __ecgl__: true,

	    _displacementScale: 0,

	    init: function (ecModel, api) {
	        this.groupGL = new graphicGL.Node();

	        var materials = {};
	        graphicGL.COMMON_SHADERS.forEach(function (shading) {
	            materials[shading] = new graphicGL.Material({
	                shader: graphicGL.createShader('ecgl.' + shading)
	            });
	        });

	        this._materials = materials;

	        /**
	         * @type {qtek.geometry.Sphere}
	         * @private
	         */
	        this._sphereGeometry = new graphicGL.SphereGeometry({
	            widthSegments: 200,
	            heightSegments: 100,
	            dynamic: true
	        });
	        this._overlayGeometry = new graphicGL.SphereGeometry({
	            widthSegments: 80,
	            heightSegments: 40
	        });

	        /**
	         * @type {qtek.geometry.Plane}
	         */
	        this._planeGeometry = new graphicGL.PlaneGeometry();

	        /**
	         * @type {qtek.geometry.Mesh}
	         */
	        this._earthMesh = new graphicGL.Mesh({
	            name: 'earth'
	        });

	        this._lightRoot = new graphicGL.Node();
	        this._lightHelper = new LightHelper(this._lightRoot);

	        this.groupGL.add(this._earthMesh);

	        this._control = new OrbitControl({
	            zr: api.getZr()
	        });

	        this._control.init();

	        this._layerMeshes = {};
	    },

	    render: function (globeModel, ecModel, api) {
	        var coordSys = globeModel.coordinateSystem;
	        var shading = globeModel.get('shading');

	        // Always have light.
	        coordSys.viewGL.add(this._lightRoot);

	        if (globeModel.get('show')) {
	            // Add self to scene;
	            coordSys.viewGL.add(this.groupGL);
	        }
	        else {
	            coordSys.viewGL.remove(this.groupGL);
	        }

	        // Set post effect
	        coordSys.viewGL.setPostEffect(globeModel.getModel('postEffect'));
	        coordSys.viewGL.setTemporalSuperSampling(globeModel.getModel('temporalSuperSampling'));

	        var earthMesh = this._earthMesh;

	        earthMesh.geometry = this._sphereGeometry;

	        if (this._materials[shading]) {
	            earthMesh.material = this._materials[shading];
	        }
	        else {
	            if (true) {
	                console.warn('Unkown shading ' + shading);
	            }
	            earthMesh.material = this._materials.lambert;
	        }
	        if (shading === 'realistic') {
	            var matModel = globeModel.getModel('realisticMaterial');
	            earthMesh.material.set({
	                roughness: retrieve.firstNotNull(matModel.get('roughness'), 0.5),
	                metalness: matModel.get('metalness') || 0
	            });
	        }

	        earthMesh.scale.set(coordSys.radius, coordSys.radius, coordSys.radius);

	        var diffuseTexture = earthMesh.material.setTextureImage('diffuseMap', globeModel.get('baseTexture'), api, {
	            flipY: false,
	            anisotropic: 8
	        });
	        if (diffuseTexture && diffuseTexture.surface) {
	            diffuseTexture.surface.attachToMesh(earthMesh);
	        }

	        // Update bump map
	        var bumpTexture = earthMesh.material.setTextureImage('bumpMap', globeModel.get('heightTexture'), api, {
	            flipY: false,
	            anisotropic: 8
	        });
	        if (bumpTexture && bumpTexture.surface) {
	            bumpTexture.surface.attachToMesh(earthMesh);
	        }

	        earthMesh.material.shader[globeModel.get('postEffect.enable') ? 'define' : 'unDefine']('fragment', 'SRGB_DECODE');

	        this._updateLight(globeModel, api);

	        this._displaceVertices(globeModel, api);

	        this._updateViewControl(globeModel, api);

	        this._updateLayers(globeModel, api);
	    },

	    afterRender: function (globeModel, ecModel, api, layerGL) {
	        // Create ambient cubemap after render because we need to know the renderer.
	        // TODO
	        var renderer = layerGL.renderer;

	        this._lightHelper.updateAmbientCubemap(renderer, globeModel, api);
	    },


	    _updateLayers: function (globeModel, api) {
	        var coordSys = globeModel.coordinateSystem;
	        var layers = globeModel.get('layers');

	        var lastDistance = coordSys.radius;
	        var layerDiffuseTextures = [];
	        var layerEmissiveTextures = [];
	        echarts.util.each(layers, function (layerOption) {
	            var layerModel = new echarts.Model(layerOption);
	            var layerType = layerModel.get('type');

	            var texture = graphicGL.loadTexture(layerModel.get('texture'), api, {
	                flipY: false,
	                anisotropic: 8
	            });
	            if (texture.surface) {
	                texture.surface.attachToMesh(this._earthMesh);
	            }

	            if (layerType === 'blend') {
	                var blendTo = layerModel.get('blendTo');
	                if (blendTo === 'emission') {
	                    layerEmissiveTextures.push(texture);
	                }
	                else { // Default is albedo
	                    layerDiffuseTextures.push(texture);
	                }
	            }
	            else { // Default use overlay
	                var id = layerModel.get('id');
	                var overlayMesh = this._layerMeshes[id];
	                if (!overlayMesh) {
	                    overlayMesh = this._layerMeshes[id] = new graphicGL.Mesh({
	                        geometry: this._overlayGeometry,
	                        castShadow: false,
	                        ignorePicking: true
	                    });
	                }
	                var shading = layerModel.get('shading');
	                if (shading === 'lambert') {
	                    overlayMesh.material = overlayMesh.__lambertMaterial || new graphicGL.Material({
	                        shader: graphicGL.createShader('ecgl.lambert'),
	                        transparent: true,
	                        depthMask: false
	                    });
	                    overlayMesh.__lambertMaterial = overlayMesh.material;
	                }
	                else { // color
	                    overlayMesh.material = overlayMesh.__colorMaterial || new graphicGL.Material({
	                        shader: graphicGL.createShader('ecgl.color'),
	                        transparent: true,
	                        depthMask: false
	                    });
	                    overlayMesh.__colorMaterial = overlayMesh.material;
	                }
	                // overlay should be transparet if texture is not loaded yet.
	                overlayMesh.material.shader.enableTexture('diffuseMap');

	                var distance = layerModel.get('distance');
	                // Based on distance of last layer
	                var radius = lastDistance + (distance == null ? coordSys.radius / 100 : distance);
	                overlayMesh.scale.set(radius, radius, radius);

	                lastDistance = radius;

	                // FIXME Exists blink.
	                var blankTexture = this._blankTexture || (this._blankTexture = graphicGL.createBlankTexture('rgba(255, 255, 255, 0)'));
	                overlayMesh.material.set('diffuseMap', blankTexture);

	                graphicGL.loadTexture(layerModel.get('texture'), api, {
	                    flipY: false,
	                    anisotropic: 8
	                }, function (texture) {
	                    if (texture.surface) {
	                        texture.surface.attachToMesh(overlayMesh);
	                    }
	                    overlayMesh.material.set('diffuseMap', texture);
	                    api.getZr().refresh();
	                });

	                layerModel.get('show') ? this.groupGL.add(overlayMesh) : this.groupGL.remove(overlayMesh);
	            }
	        }, this);

	        var earthMaterial = this._earthMesh.material;
	        earthMaterial.shader.define('fragment', 'LAYER_DIFFUSEMAP_COUNT', layerDiffuseTextures.length);
	        earthMaterial.shader.define('fragment', 'LAYER_EMISSIVEMAP_COUNT', layerEmissiveTextures.length);

	        earthMaterial.set('layerDiffuseMap', layerDiffuseTextures);
	        earthMaterial.set('layerEmissiveMap', layerEmissiveTextures);
	    },

	    _updateViewControl: function (globeModel, api) {
	        var coordSys = globeModel.coordinateSystem;
	        // Update camera
	        var viewControlModel = globeModel.getModel('viewControl');

	        var camera = coordSys.viewGL.camera;

	        function makeAction() {
	            return {
	                type: 'globeChangeCamera',
	                alpha: control.getAlpha(),
	                beta: control.getBeta(),
	                distance: control.getDistance() - coordSys.radius,
	                from: this.uid,
	                globeId: globeModel.id
	            };
	        }

	        // Update control
	        var control = this._control;
	        control.setCamera(camera);
	        control.setViewGL(coordSys.viewGL);

	        control.setFromViewControlModel(viewControlModel, coordSys.radius);

	        control.off('update');
	        control.on('update', function () {
	            api.dispatchAction(makeAction());
	        });
	    },

	    _displaceVertices: function (globeModel, api) {
	        var displacementTextureValue = globeModel.get('displacementTexture') || globeModel.get('heightTexture');
	        var displacementScale = globeModel.get('displacementScale');
	        var displacementQuality = globeModel.get('displacementQuality');

	        if (!displacementTextureValue || displacementTextureValue === 'none') {
	            displacementScale = 0;
	        }
	        if (displacementScale === this._displacementScale
	            && displacementQuality === this._displacementQuality
	        ) {
	            return;
	        }

	        this._displacementScale = displacementScale;
	        this._displacementQuality = displacementQuality;

	        var geometry = this._sphereGeometry;

	        var widthSegments = ({
	            low: 100,
	            medium: 200,
	            high: 400,
	            ultra: 800
	        })[displacementQuality] || 200;
	        var heightSegments = widthSegments / 2;
	        if (geometry.widthSegments !== widthSegments) {
	            geometry.widthSegments = widthSegments;
	            geometry.heightSegments = heightSegments;
	            geometry.build();
	        }

	        var img;
	        if (graphicGL.isImage(displacementTextureValue)) {
	            img = displacementTextureValue;
	            this._doDisplaceVertices(geometry, img, displacementScale);
	        }
	        else {
	            img = new Image();
	            var self = this;
	            img.onload = function () {
	                self._doDisplaceVertices(geometry, img, displacementScale);
	            };
	            img.src = displacementTextureValue;
	        }
	    },

	    _doDisplaceVertices: function (geometry, img, displacementScale) {
	        var positionArr = geometry.attributes.position.value;
	        var uvArr = geometry.attributes.texcoord0.value;

	        var originalPositionArr = geometry.__originalPosition;
	        if (!originalPositionArr || originalPositionArr.length !== positionArr.length) {
	            originalPositionArr = new Float32Array(positionArr.length);
	            originalPositionArr.set(positionArr);
	            geometry.__originalPosition = originalPositionArr;
	        }

	        var canvas = document.createElement('canvas');
	        var ctx = canvas.getContext('2d');
	        var width = img.width;
	        var height = img.height;
	        canvas.width = width;
	        canvas.height = height;
	        ctx.drawImage(img, 0, 0, width, height);
	        var rgbaArr = ctx.getImageData(0, 0, width, height).data;

	        for (var i = 0; i < geometry.vertexCount; i++) {
	            var i3 = i * 3;
	            var i2 = i * 2;
	            var x = originalPositionArr[i3 + 1];
	            var y = originalPositionArr[i3 + 2];
	            var z = originalPositionArr[i3 + 3];

	            var u = uvArr[i2++];
	            var v = uvArr[i2++];

	            var j = Math.round(u * (width - 1));
	            var k = Math.round(v * (height - 1));
	            var idx = k * width + j;
	            var scale = rgbaArr[idx * 4] / 255 * displacementScale;

	            positionArr[i3 + 1] = x + x * scale;
	            positionArr[i3 + 2] = y + y * scale;
	            positionArr[i3 + 3] = z + z * scale;
	        }

	        geometry.generateVertexNormals();
	        geometry.dirty();

	        geometry.updateBoundingBox();
	    },

	    _updateLight: function (globeModel, api) {
	        var earthMesh = this._earthMesh;

	        this._lightHelper.updateLight(globeModel);
	        var mainLight = this._lightHelper.mainLight;

	        // Put sun in the right position
	        var time = globeModel.get('light.main.time') || new Date();

	        // http://en.wikipedia.org/wiki/Azimuth
	        var pos = sunCalc.getPosition(Date.parse(time), 0, 0);
	        var r0 = Math.cos(pos.altitude);
	        // FIXME How to calculate the y ?
	        mainLight.position.y = -r0 * Math.cos(pos.azimuth);
	        mainLight.position.x = Math.sin(pos.altitude);
	        mainLight.position.z = r0 * Math.sin(pos.azimuth);
	        mainLight.lookAt(earthMesh.getWorldPosition());

	        // Emission
	        earthMesh.material.set('emissionIntensity', globeModel.get('light.emission.intensity'));
	    },

	    dispose: function (ecModel, api) {
	        this.groupGL.removeAll();
	        this._control.dispose();
	    }
	});

/***/ },
/* 169 */
/***/ function(module, exports) {

	/*
	 (c) 2011-2014, Vladimir Agafonkin
	 SunCalc is a JavaScript library for calculating sun/mooon position and light phases.
	 https://github.com/mourner/suncalc
	*/

	// shortcuts for easier to read formulas

	var PI   = Math.PI,
	    sin  = Math.sin,
	    cos  = Math.cos,
	    tan  = Math.tan,
	    asin = Math.asin,
	    atan = Math.atan2,
	    rad  = PI / 180;

	// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


	// date/time constants and conversions

	var dayMs = 1000 * 60 * 60 * 24,
	    J1970 = 2440588,
	    J2000 = 2451545;

	function toJulian (date) { return date.valueOf() / dayMs - 0.5 + J1970; }
	function toDays (date)   { return toJulian(date) - J2000; }


	// general calculations for position

	var e = rad * 23.4397; // obliquity of the Earth

	function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
	function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }

	function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
	function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }

	function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }


	// general sun calculations

	function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }

	function eclipticLongitude(M) {

	    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
	        P = rad * 102.9372; // perihelion of the Earth

	    return M + C + P + PI;
	}

	function sunCoords(d) {

	    var M = solarMeanAnomaly(d),
	        L = eclipticLongitude(M);

	    return {
	        dec: declination(L, 0),
	        ra: rightAscension(L, 0)
	    };
	}

	var SunCalc = {};

	// calculates sun position for a given date and latitude/longitude

	SunCalc.getPosition = function (date, lat, lng) {

	    var lw  = rad * -lng,
	        phi = rad * lat,
	        d   = toDays(date),

	        c  = sunCoords(d),
	        H  = siderealTime(d, lw) - c.ra;

	    return {
	        azimuth: azimuth(H, phi, c.dec),
	        altitude: altitude(H, phi, c.dec)
	    };
	};

	module.exports = SunCalc;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var Globe = __webpack_require__(171);
	var echarts = __webpack_require__(2);
	var layoutUtil = __webpack_require__(115);
	var ViewGL = __webpack_require__(122);
	var retrieve = __webpack_require__(69);

	function resizeGlobe(globeModel, api) {
	    // Use left/top/width/height
	    var boxLayoutOption = globeModel.getBoxLayoutParams();

	    var viewport = layoutUtil.getLayoutRect(boxLayoutOption, {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });

	    // Flip Y
	    viewport.y = api.getHeight() - viewport.y - viewport.height;

	    this.viewGL.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, api.getDevicePixelRatio());

	    this.radius = globeModel.get('globeRadius');
	}

	var globeCreator = {

	    dimensions: Globe.prototype.dimensions,

	    create: function (ecModel, api) {

	        var globeList = [];

	        ecModel.eachComponent('globe', function (globeModel) {

	            // FIXME
	            globeModel.__viewGL = globeModel.__viewGL || new ViewGL();

	            var globe = new Globe();
	            globe.viewGL = globeModel.__viewGL;

	            globeModel.coordinateSystem = globe;
	            globe.model = globeModel;
	            globeList.push(globe);

	            // Inject resize
	            globe.resize = resizeGlobe;
	            globe.resize(globeModel, api);
	        });

	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'globe') {
	                var globeModel = seriesModel.getReferringComponents('globe')[0];
	                if (!globeModel) {
	                    globeModel = ecModel.getComponent('globe');
	                }

	                if (!globeModel) {
	                    throw new Error('globe "' + retrieve.firstNotNull(
	                        seriesModel.get('globe3DIndex'),
	                        seriesModel.get('globe3DId'),
	                        0
	                    ) + '" not found');
	                }

	                var coordSys = globeModel.coordinateSystem;

	                seriesModel.coordinateSystem = coordSys;
	            }
	        });

	        return globeList;
	    }
	};

	echarts.registerCoordinateSystem('globe', globeCreator);

	module.exports = globeCreator;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var glmatrix = __webpack_require__(15);
	var vec3 = glmatrix.vec3;


	function Globe(radius) {

	    this.radius = radius || 100;

	    this.viewGL = null;
	}

	Globe.prototype = {

	    constructor: Globe,

	    dimensions: ['lng', 'lat', 'alt'],

	    type: 'globe',

	    containPoint: function () {},

	    dataToPoint: function (data, out) {
	        var lng = data[0];
	        var lat = data[1];
	        // Default have 0 altitude
	        var alt = data[2] || 0;

	        lng = lng * Math.PI / 180;
	        lat = lat * Math.PI / 180;
	        var r = alt + this.radius;
	        var r0 = Math.cos(lat) * r;

	        out = out || [];
	        // PENDING
	        out[0] = -r0 * Math.cos(lng + Math.PI);
	        out[1] = Math.sin(lat) * r;
	        out[2] = r0 * Math.sin(lng + Math.PI);

	        return out;
	    },

	    pointToData: function (point, out) {
	        var x = point[0];
	        var y = point[1];
	        var z = point[2];
	        var len = vec3.len(point);
	        x /= len;
	        y /= len;
	        z /= len;

	        var theta = Math.asin(y);
	        var phi = Math.atan2(z, -x);
	        if (phi < 0) {
	            phi = Math.PI * 2  + phi;
	        }

	        var lat = theta * 180 / Math.PI;
	        var lng = phi * 180 / Math.PI - 180;

	        out = out || [];
	        out[0] = lng;
	        out[1] = lat;
	        out[2] = len - this.radius;

	        return out;
	    }
	};

	module.exports = Globe;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(173);

	__webpack_require__(175);
	__webpack_require__(177);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'bar3D'
	));

	echarts.registerProcessor(function (ecModel, api) {
	    ecModel.eachSeriesByType('bar3d', function (seriesModel) {
	        var data = seriesModel.getData();
	        data.filterSelf(function (idx) {
	            return data.hasValue(idx);
	        });
	    });
	});

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var Vector3 = __webpack_require__(14);
	var vec3 = __webpack_require__(15).vec3;
	var cartesian3DLayout = __webpack_require__(174);

	function globeLayout(seriesModel, coordSys) {
	    var data = seriesModel.getData();
	    var extent = data.getDataExtent('z', true);
	    var heightExtent = [seriesModel.get('minHeight'), seriesModel.get('maxHeight')];
	    var isZeroExtent = Math.abs(extent[1] - extent[0]) < 1e-10;
	    var barSize = seriesModel.get('barSize');
	    if (barSize == null) {
	        var perimeter = coordSys.radius * Math.PI * 2;
	        // PENDING, data density
	        barSize = [
	            perimeter / 720,
	            perimeter / 720
	        ];
	    }
	    else if (!echarts.util.isArray(barSize)) {
	        barSize = [barSize, barSize];
	    }
	    data.each(['x', 'y', 'z'], function (lng, lat, val, idx) {
	        var height = isZeroExtent ? heightExtent[1] : echarts.number.linearMap(val, extent, heightExtent);
	        var start = coordSys.dataToPoint([lng, lat, 0]);
	        var end = coordSys.dataToPoint([lng, lat, height]);
	        var dir = vec3.sub([], end, start);
	        var size = [barSize[0], height, barSize[1]];
	        data.setItemLayout(idx, [start, dir, size]);
	    });

	    data.setLayout('orient', Vector3.UP._array);
	}

	function geo3DLayout(seriesModel, coordSys) {
	    var data = seriesModel.getData();
	    var extent = data.getDataExtent('z', true);
	    var heightExtent = [seriesModel.get('minHeight'), seriesModel.get('maxHeight')];
	    var isZeroExtent = Math.abs(extent[1] - extent[0]) < 1e-10;
	    var barSize = seriesModel.get('barSize');
	    if (barSize == null) {
	        var size = Math.min(coordSys.size[0], coordSys.size[2]);
	        // PENDING, data density
	        barSize = [
	            size / Math.sqrt(data.count()),
	            size / Math.sqrt(data.count())
	        ];
	    }
	    else if (!echarts.util.isArray(barSize)) {
	        barSize = [barSize, barSize];
	    }
	    var dir = [0, 1, 0];
	    data.each(['x', 'y', 'z'], function (lng, lat, val, idx) {
	        var height = isZeroExtent ? heightExtent[1] : echarts.number.linearMap(val, extent, heightExtent);
	        var start = coordSys.dataToPoint([lng, lat, coordSys.size[1]]);
	        var size = [barSize[0], height, barSize[1]];
	        data.setItemLayout(idx, [start, dir, size]);
	    });

	    data.setLayout('orient', [1, 0, 0]);
	}

	echarts.registerLayout(function (ecModel, api) {
	    ecModel.eachSeriesByType('bar3D', function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var coordSysType = coordSys && coordSys.type;
	        if (coordSysType === 'globe') {
	            globeLayout(seriesModel, coordSys);
	        }
	        else if (coordSysType === 'cartesian3D') {
	            cartesian3DLayout(seriesModel, coordSys);
	        }
	        else if (coordSysType === 'geo3D') {
	            geo3DLayout(seriesModel, coordSys);
	        }
	        else {
	            if (true) {
	                if (!coordSys) {
	                    console.error('bar3D does\'nt have coordinate system.');
	                }
	                else {
	                    console.error('bar3D does\'nt support coordinate system ' + coordSys.type);
	                }
	            }
	        }
	    });
	});

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var vec3 = __webpack_require__(15).vec3;


	function cartesian3DLayout(seriesModel, coordSys) {

	    var data = seriesModel.getData();
	    var barOnPlane = seriesModel.get('onGridPlane');

	    var barSize = seriesModel.get('barSize');
	    if (barSize == null) {
	        var size = coordSys.size;
	        var barWidth;
	        var barDepth;
	        var xAxis = coordSys.getAxis('x');
	        var yAxis = coordSys.getAxis('y');
	        if (xAxis.type === 'category') {
	            barWidth = xAxis.getBandWidth() * 0.7;
	        }
	        else {
	            // PENDING
	            barWidth = Math.round(size[0] / Math.sqrt(data.count())) * 0.6;
	        }
	        if (yAxis.type === 'category') {
	            barDepth = yAxis.getBandWidth() * 0.7;
	        }
	        else {
	            barDepth = Math.round(size[1] / Math.sqrt(data.count())) * 0.6;
	        }
	        barSize = [barWidth, barDepth];
	    }
	    else if (!echarts.util.isArray(barSize)) {
	        barSize = [barSize, barSize];
	    }

	    var dir = [0, 1, 0];
	    data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	        // TODO On the face or on the zero barOnPlane
	        // TODO zAxis is inversed
	        // TODO On different plane.
	        var start = coordSys.dataToPoint([x, y, 0]);
	        var end = coordSys.dataToPoint([x, y, z]);
	        var height = vec3.dist(start, end);
	        if (Math.abs(height) === 0) {
	            // TODO
	            height = 0.1;
	        }
	        var size = [barSize[0], height, barSize[1]];
	        data.setItemLayout(idx, [start, dir, size]);
	    });


	    data.setLayout('orient', [1, 0, 0]);
	}

	module.exports = cartesian3DLayout;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var retrieve = __webpack_require__(69);
	var BarsGeometry = __webpack_require__(176);
	var LabelsBuilder = __webpack_require__(161);
	var vec3 = __webpack_require__(15).vec3;

	function getShader(shading) {
	    var shader = graphicGL.createShader('ecgl.' + shading);
	    shader.define('both', 'VERTEX_COLOR');
	    return shader;
	}

	module.exports = echarts.extendChartView({

	    type: 'bar3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this.groupGL = new graphicGL.Node();

	        var barMesh = new graphicGL.Mesh({
	            geometry: new BarsGeometry(),

	            // Render after axes
	            renderOrder: 10
	        });

	        var materials = {};
	        graphicGL.COMMON_SHADERS.forEach(function (shading) {
	            materials[shading] = new graphicGL.Material({
	                shader: getShader(shading)
	            });
	        });

	        this._materials = materials;
	        this._barMesh = barMesh;

	        this._api = api;

	        this._labelsBuilder = new LabelsBuilder(256, 256, api);
	        var self = this;
	        this._labelsBuilder.getLabelPosition = function (dataIndex, position, distance) {
	            if (self._data) {
	                var layout = self._data.getItemLayout(dataIndex);
	                var start = layout[0];
	                var dir = layout[1];
	                var height = layout[2][1];
	                return vec3.scaleAndAdd([], start, dir, distance + height);
	            }
	            else {
	                return [0, 0];
	            }
	        };

	        // Give a large render order.
	        this._labelsBuilder.getMesh().renderOrder = 100;
	    },

	    render: function (seriesModel, ecModel, api) {
	        this.groupGL.add(this._barMesh);
	        this.groupGL.add(this._labelsBuilder.getMesh());

	        var coordSys = seriesModel.coordinateSystem;
	        this._doRender(seriesModel, api);
	        if (coordSys && coordSys.viewGL) {
	            coordSys.viewGL.add(this.groupGL);

	            var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'unDefine';
	            this._barMesh.material.shader[methodName]('fragment', 'SRGB_DECODE');
	        }

	        this._data = seriesModel.getData();

	        this._labelsBuilder.updateData(this._data);

	        this._labelsBuilder.updateLabels();
	    },

	    _doRender: function (seriesModel, api) {
	        var data = seriesModel.getData();
	        var shading = seriesModel.get('shading');
	        var enableNormal = shading !== 'color';
	        var self = this;
	        var barMesh = this._barMesh;

	        if (this._materials[shading]) {
	            barMesh.material = this._materials[shading];
	        }
	        else {
	            if (true) {
	                console.warn('Unkown shading ' + shading);
	            }
	            barMesh.material = this._materials.lambert;
	        }
	        graphicGL.setMaterialFromModel(
	            shading, barMesh.material, seriesModel, api
	        );

	        barMesh.geometry.enableNormal = enableNormal;

	        barMesh.geometry.resetOffset();

	        // Bevel settings
	        var bevelSize = seriesModel.get('bevelSize');
	        var bevelSegments = seriesModel.get('bevelSmoothness');
	        barMesh.geometry.bevelSegments = bevelSegments;

	        barMesh.geometry.bevelSize = bevelSize;

	        var colorArr = [];
	        var vertexColors = new Float32Array(data.count() * 4);
	        var colorOffset = 0;
	        var barCount = 0;
	        var hasTransparent = false;

	        data.each(function (idx) {
	            if (!data.hasValue(idx)) {
	                return;
	            }
	            var color = data.getItemVisual(idx, 'color');

	            var opacity = data.getItemVisual(idx, 'opacity');
	            if (opacity == null) {
	                opacity = 1;
	            }

	            graphicGL.parseColor(color, colorArr);
	            colorArr[3] *= opacity;
	            vertexColors[colorOffset++] = colorArr[0];
	            vertexColors[colorOffset++] = colorArr[1];
	            vertexColors[colorOffset++] = colorArr[2];
	            vertexColors[colorOffset++] = colorArr[3];

	            if (colorArr[3] > 0) {
	                barCount++;
	            }
	            if (colorArr[3] < 0.99) {
	                hasTransparent = true;
	            }
	        });

	        barMesh.geometry.setBarCount(barCount);

	        var orient = data.getLayout('orient');

	        // Map of dataIndex and barIndex.
	        var barIndexOfData = this._barIndexOfData = new Int32Array(data.count());
	        var barCount = 0;
	        data.each(function (idx) {
	            if (!data.hasValue(idx)) {
	                barIndexOfData[idx] = -1;
	                return;
	            }
	            var layout = data.getItemLayout(idx);
	            var start = layout[0];
	            var dir = layout[1];
	            var size = layout[2];

	            var idx4 = idx * 4;
	            colorArr[0] = vertexColors[idx4++];
	            colorArr[1] = vertexColors[idx4++];
	            colorArr[2] = vertexColors[idx4++];
	            colorArr[3] = vertexColors[idx4++];
	            if (colorArr[3] > 0) {
	                self._barMesh.geometry.addBar(start, dir, orient, size, colorArr, idx);
	            }

	            barIndexOfData[idx] = barCount++;
	        });

	        barMesh.geometry.dirty();
	        barMesh.geometry.updateBoundingBox();

	        var material = barMesh.material;
	        material.transparent = hasTransparent;
	        material.depthMask = !hasTransparent;
	        barMesh.geometry.sortTriangles = hasTransparent;

	        this._initHandler(seriesModel, api);
	    },

	    _initHandler: function (seriesModel, api) {
	        var data = seriesModel.getData();
	        var barMesh = this._barMesh;
	        var isCartesian3D = seriesModel.coordinateSystem.type === 'cartesian3D';

	        var lastDataIndex = -1;
	        barMesh.off('mousemove');
	        barMesh.off('mouseout');
	        barMesh.on('mousemove', function (e) {
	            var dataIndex = barMesh.geometry.getDataIndexOfVertex(e.triangle[0]);
	            if (dataIndex !== lastDataIndex) {
	                this._downplay(lastDataIndex);
	                this._highlight(dataIndex);
	                this._labelsBuilder.updateLabels([dataIndex]);

	                if (isCartesian3D) {
	                    api.dispatchAction({
	                        type: 'grid3DShowAxisPointer',
	                        value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]
	                    });
	                }
	            }

	            lastDataIndex = dataIndex;
	        }, this);
	        barMesh.on('mouseout', function (e) {
	            this._downplay(lastDataIndex);
	            this._labelsBuilder.updateLabels();
	            lastDataIndex = -1;

	            if (isCartesian3D) {
	                api.dispatchAction({
	                    type: 'grid3DHideAxisPointer'
	                });
	            }
	        }, this);
	    },

	    _highlight: function (dataIndex) {
	        var data = this._data;
	        if (!data) {
	            return;
	        }
	        var barIndex = this._barIndexOfData[dataIndex];
	        if (barIndex < 0) {
	            return;
	        }

	        var itemModel = data.getItemModel(dataIndex);
	        var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
	        var emphasisColor = emphasisItemStyleModel.get('color');
	        var emphasisOpacity = emphasisItemStyleModel.get('opacity');
	        if (emphasisColor == null) {
	            var color = data.getItemVisual(dataIndex, 'color');
	            emphasisColor = echarts.color.lift(color, -0.4);
	        }
	        if (emphasisOpacity == null) {
	            emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
	        }
	        var colorArr = graphicGL.parseColor(emphasisColor);
	        colorArr[3] *= emphasisOpacity;

	        this._barMesh.geometry.setColor(barIndex, colorArr);

	        this._api.getZr().refresh();
	    },

	    _downplay: function (dataIndex) {
	        var data = this._data;
	        if (!data) {
	            return;
	        }
	        var barIndex = this._barIndexOfData[dataIndex];
	        if (barIndex < 0) {
	            return;
	        }

	        var color = data.getItemVisual(dataIndex, 'color');
	        var opacity = data.getItemVisual(dataIndex, 'opacity');

	        var colorArr = graphicGL.parseColor(color);
	        colorArr[3] *= opacity;

	        this._barMesh.geometry.setColor(barIndex, colorArr);

	        this._api.getZr().refresh();
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	    }
	});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Geometry collecting bars data
	 *
	 * @module echarts-gl/chart/bars/BarsGeometry
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var echarts = __webpack_require__(2);
	var dynamicConvertMixin = __webpack_require__(100);
	var trianglesSortMixin = __webpack_require__(159);
	var StaticGeometry = __webpack_require__(35);

	var glMatrix = __webpack_require__(15);
	var vec3 = glMatrix.vec3;
	var mat3 = glMatrix.mat3;

	/**
	 * @constructor
	 * @alias module:echarts-gl/chart/bars/BarsGeometry
	 * @extends qtek.StaticGeometry
	 */
	var BarsGeometry = StaticGeometry.extend(function () {
	    return {

	        attributes: {
	            position: new StaticGeometry.Attribute('position', 'float', 3, 'POSITION'),
	            normal: new StaticGeometry.Attribute('normal', 'float', 3, 'NORMAL'),
	            color: new StaticGeometry.Attribute('color', 'float', 4, 'COLOR')
	        },

	        dynamic: true,

	        enableNormal: false,

	        bevelSize: 1,
	        bevelSegments: 0,

	        // Map from vertexIndex to dataIndex.
	        _dataIndices: null,

	        _vertexOffset: 0,
	        _triangleOffset: 0
	    };
	},
	/** @lends module:echarts-gl/chart/bars/BarsGeometry.prototype */
	{

	    resetOffset: function () {
	        this._vertexOffset = 0;
	        this._triangleOffset = 0;
	    },

	    setBarCount: function (barCount) {
	        var enableNormal = this.enableNormal;
	        var vertexCount = this.getBarVertexCount() * barCount;
	        var triangleCount = this.getBarTriangleCount() * barCount;

	        if (this.vertexCount !== vertexCount) {
	            this.attributes.position.init(vertexCount);
	            if (enableNormal) {
	                this.attributes.normal.init(vertexCount);
	            }
	            else {
	                this.attributes.normal.value = null;
	            }
	            this.attributes.color.init(vertexCount);
	        }

	        if (this.triangleCount !== triangleCount) {
	            this.indices = vertexCount > 0xffff ? new Uint32Array(triangleCount * 3) : new Uint16Array(triangleCount * 3);

	            this._dataIndices = new Uint32Array(vertexCount);
	        }
	    },

	    getBarVertexCount: function () {
	        var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;
	        return bevelSegments > 0 ? this._getBevelBarVertexCount(bevelSegments)
	            : (this.enableNormal ? 24 : 8);
	    },

	    getBarTriangleCount: function () {
	        var bevelSegments = this.bevelSize > 0 ? this.bevelSegments : 0;
	        return bevelSegments > 0 ? this._getBevelBarTriangleCount(bevelSegments)
	            : 12;
	    },

	    _getBevelBarVertexCount: function (bevelSegments) {
	        return (bevelSegments + 1) * 4 * (bevelSegments + 1) * 2;
	    },

	    _getBevelBarTriangleCount: function (bevelSegments) {
	        var widthSegments = bevelSegments * 4 + 3;
	        var heightSegments = bevelSegments * 2 + 1;
	        return (widthSegments + 1) * heightSegments * 2 + 4;
	    },

	    setColor: function (idx, color) {
	        var vertexCount = this.getBarVertexCount();
	        var start = vertexCount * idx;
	        var end = vertexCount * (idx + 1);
	        for (var i = start; i < end; i++) {
	            this.attributes.color.set(i, color);
	        }
	        this.dirtyAttribute('color');
	    },

	    /**
	     * Get dataIndex of vertex.
	     * @param {number} vertexIndex
	     */
	    getDataIndexOfVertex: function (vertexIndex) {
	        return this._dataIndices ? this._dataIndices[vertexIndex] : null;
	    },

	    /**
	     * Add a bar
	     * @param {Array.<number>} start
	     * @param {Array.<number>} end
	     * @param {Array.<number>} orient  right direction
	     * @param {Array.<number>} size size on x and z
	     * @param {Array.<number>} color
	     */
	    addBar: (function () {
	        var v3Create = vec3.create;
	        var v3ScaleAndAdd = vec3.scaleAndAdd;

	        var end = v3Create();
	        var px = v3Create();
	        var py = v3Create();
	        var pz = v3Create();
	        var nx = v3Create();
	        var ny = v3Create();
	        var nz = v3Create();

	        var pts = [];
	        var normals = [];
	        for (var i = 0; i < 8; i++) {
	            pts[i] = v3Create();
	        }

	        var cubeFaces4 = [
	            // PX
	            [0, 1, 5, 4],
	            // NX
	            [2, 3, 7, 6],
	            // PY
	            [4, 5, 6, 7],
	            // NY
	            [3, 2, 1, 0],
	            // PZ
	            [0, 4, 7, 3],
	            // NZ
	            [1, 2, 6, 5]
	        ];
	        var face4To3 = [
	            0, 1, 2, 0, 2, 3
	        ];
	        var cubeFaces3 = [];
	        for (var i = 0; i < cubeFaces4.length; i++) {
	            var face4 = cubeFaces4[i];
	            for (var j = 0; j < 2; j++) {
	                var face = [];
	                for (var k = 0; k < 3; k++) {
	                    face.push(face4[face4To3[j * 3 + k]]);
	                }
	                cubeFaces3.push(face);
	            }
	        }
	        return function (start, dir, leftDir, size, color, dataIndex) {

	            // Use vertex, triangle maybe sorted.
	            var startVertex = this._vertexOffset;

	            if (this.bevelSize > 0 && this.bevelSegments > 0) {
	                this._addBevelBar(start, dir, leftDir, size, this.bevelSize, this.bevelSegments, color);
	            }
	            else {
	                vec3.copy(py, dir);
	                vec3.normalize(py, py);
	                // x * y => z
	                vec3.cross(pz, leftDir, py);
	                vec3.normalize(pz, pz);
	                // y * z => x
	                vec3.cross(px, py, pz);
	                vec3.normalize(pz, pz);

	                vec3.negate(nx, px);
	                vec3.negate(ny, py);
	                vec3.negate(nz, pz);

	                v3ScaleAndAdd(pts[0], start, px, size[0] / 2);
	                v3ScaleAndAdd(pts[0], pts[0], pz, size[2] / 2);
	                v3ScaleAndAdd(pts[1], start, px, size[0] / 2);
	                v3ScaleAndAdd(pts[1], pts[1], nz, size[2] / 2);
	                v3ScaleAndAdd(pts[2], start, nx, size[0] / 2);
	                v3ScaleAndAdd(pts[2], pts[2], nz, size[2] / 2);
	                v3ScaleAndAdd(pts[3], start, nx, size[0] / 2);
	                v3ScaleAndAdd(pts[3], pts[3], pz, size[2] / 2);

	                v3ScaleAndAdd(end, start, py, size[1]);

	                v3ScaleAndAdd(pts[4], end, px, size[0] / 2);
	                v3ScaleAndAdd(pts[4], pts[4], pz, size[2] / 2);
	                v3ScaleAndAdd(pts[5], end, px, size[0] / 2);
	                v3ScaleAndAdd(pts[5], pts[5], nz, size[2] / 2);
	                v3ScaleAndAdd(pts[6], end, nx, size[0] / 2);
	                v3ScaleAndAdd(pts[6], pts[6], nz, size[2] / 2);
	                v3ScaleAndAdd(pts[7], end, nx, size[0] / 2);
	                v3ScaleAndAdd(pts[7], pts[7], pz, size[2] / 2);

	                var attributes = this.attributes;
	                if (this.enableNormal) {
	                    normals[0] = px;
	                    normals[1] = nx;
	                    normals[2] = py;
	                    normals[3] = ny;
	                    normals[4] = pz;
	                    normals[5] = nz;

	                    var vertexOffset = this._vertexOffset;
	                    for (var i = 0; i < cubeFaces4.length; i++) {
	                        var idx3 = this._triangleOffset * 3;
	                        for (var k = 0; k < 6; k++) {
	                            this.indices[idx3++] = vertexOffset + face4To3[k];
	                        }
	                        vertexOffset += 4;
	                        this._triangleOffset += 2;
	                    }

	                    for (var i = 0; i < cubeFaces4.length; i++) {
	                        var normal = normals[i];
	                        for (var k = 0; k < 4; k++) {
	                            var idx = cubeFaces4[i][k];
	                            attributes.position.set(this._vertexOffset, pts[idx]);
	                            attributes.normal.set(this._vertexOffset, normal);
	                            attributes.color.set(this._vertexOffset++, color);
	                        }
	                    }
	                }
	                else {
	                    for (var i = 0; i < cubeFaces3.length; i++) {
	                        var idx3 = this._triangleOffset * 3;
	                        for (var k = 0; k < 3; k++) {
	                            this.indices[idx3 + k] = cubeFaces3[i][k] + this._vertexOffset;
	                        }
	                        this._triangleOffset++;
	                    }

	                    for (var i = 0; i < pts.length; i++) {
	                        attributes.position.set(this._vertexOffset, pts[i]);
	                        attributes.color.set(this._vertexOffset++, color);
	                    }
	                }
	            }

	            var endVerex = this._vertexOffset;

	            for (var i = startVertex; i < endVerex; i++) {
	                this._dataIndices[i] = dataIndex;
	            }
	        };
	    })(),

	    /**
	     * Add a bar with bevel
	     * @param {Array.<number>} start
	     * @param {Array.<number>} end
	     * @param {Array.<number>} orient  right direction
	     * @param {Array.<number>} size size on x and z
	     * @param {number} bevelSize
	     * @param {number} bevelSegments
	     * @param {Array.<number>} color
	     */
	    _addBevelBar: (function () {
	        var px = vec3.create();
	        var py = vec3.create();
	        var pz = vec3.create();

	        var rotateMat = mat3.create();

	        var bevelStartSize = [];

	        var xOffsets = [1, -1, -1, 1];
	        var zOffsets = [1, 1, -1, -1];
	        var yOffsets = [2, 0];

	        return function (start, dir, leftDir, size, bevelSize, bevelSegments, color) {
	            vec3.copy(py, dir);
	            vec3.normalize(py, py);
	            // x * y => z
	            vec3.cross(pz, leftDir, py);
	            vec3.normalize(pz, pz);
	            // y * z => x
	            vec3.cross(px, py, pz);
	            vec3.normalize(pz, pz);

	            rotateMat[0] = px[0]; rotateMat[1] = px[1]; rotateMat[2] = px[2];
	            rotateMat[3] = py[0]; rotateMat[4] = py[1]; rotateMat[5] = py[2];
	            rotateMat[6] = pz[0]; rotateMat[7] = pz[1]; rotateMat[8] = pz[2];

	            for (var i = 0; i < 3; i++) {
	                bevelStartSize[i] = Math.max(size[i] - bevelSize * 2, 0);
	            }
	            var rx = (size[0] - bevelStartSize[0]) / 2;
	            var ry = (size[1] - bevelStartSize[1]) / 2;
	            var rz = (size[2] - bevelStartSize[2]) / 2;

	            var pos = [];
	            var normal = [];
	            var vertexOffset = this._vertexOffset;

	            var endIndices = [];
	            for (var i = 0; i < 2; i++) {
	                endIndices[i] = endIndices[i] = [];

	                for (var m = 0; m <= bevelSegments; m++) {
	                    for (var j = 0; j < 4; j++) {
	                        if ((m === 0 && i === 0) || (i === 1 && m === bevelSegments)) {
	                            endIndices[i].push(vertexOffset);
	                        }
	                        for (var n = 0; n <= bevelSegments; n++) {

	                            var phi = n / bevelSegments * Math.PI / 2 + Math.PI / 2 * j;
	                            var theta = m / bevelSegments * Math.PI / 2 + Math.PI / 2 * i;
	                            // var r = rx < ry ? (rz < rx ? rz : rx) : (rz < ry ? rz : ry);
	                            normal[0] = rx * Math.cos(phi) * Math.sin(theta);
	                            normal[1] = ry * Math.cos(theta);
	                            normal[2] = rz * Math.sin(phi) * Math.sin(theta);
	                            pos[0] = normal[0] + xOffsets[j] * bevelStartSize[0] / 2;
	                            pos[1] = (normal[1] + ry) + yOffsets[i] * bevelStartSize[1] / 2;
	                            pos[2] = normal[2] + zOffsets[j] * bevelStartSize[2] / 2;

	                            // Normal is not right if rx, ry, rz not equal.
	                            if (!(Math.abs(rx - ry) < 1e-6 && Math.abs(ry - rz) < 1e-6)) {
	                                normal[0] /= rx * rx;
	                                normal[1] /= ry * ry;
	                                normal[2] /= rz * rz;
	                            }
	                            vec3.normalize(normal, normal);

	                            vec3.transformMat3(pos, pos, rotateMat);
	                            vec3.transformMat3(normal, normal, rotateMat);
	                            vec3.add(pos, pos, start);

	                            this.attributes.position.set(vertexOffset, pos);
	                            if (this.enableNormal) {
	                                this.attributes.normal.set(vertexOffset, normal);
	                            }
	                            this.attributes.color.set(vertexOffset, color);
	                            vertexOffset++;
	                        }
	                    }
	                }
	            }

	            var widthSegments = bevelSegments * 4 + 3;
	            var heightSegments = bevelSegments * 2 + 1;

	            var len = widthSegments + 1;

	            for (var j = 0; j < heightSegments; j ++) {
	                for (var i = 0; i <= widthSegments; i ++) {
	                    var i2 = j * len + i + this._vertexOffset;
	                    var i1 = (j * len + (i + 1) % len) + this._vertexOffset;
	                    var i4 = (j + 1) * len + (i + 1) % len + this._vertexOffset;
	                    var i3 = (j + 1) * len + i + this._vertexOffset;

	                    this.setTriangleIndices(this._triangleOffset++, [i4, i2, i1]);
	                    this.setTriangleIndices(this._triangleOffset++, [i4, i3, i2]);
	                }
	            }

	            // Close top and bottom
	            this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][2], endIndices[0][1]]);
	            this.setTriangleIndices(this._triangleOffset++, [endIndices[0][0], endIndices[0][3], endIndices[0][2]]);
	            this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][1], endIndices[1][2]]);
	            this.setTriangleIndices(this._triangleOffset++, [endIndices[1][0], endIndices[1][2], endIndices[1][3]]);

	            this._vertexOffset = vertexOffset;
	        };
	    })()
	});

	echarts.util.defaults(BarsGeometry.prototype, dynamicConvertMixin);
	echarts.util.defaults(BarsGeometry.prototype, trianglesSortMixin);

	module.exports = BarsGeometry;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var componentShadingMixin = __webpack_require__(153);
	var formatUtil = __webpack_require__(178);

	var Bar3DSeries = echarts.extendSeriesModel({

	    type: 'series.bar3D',

	    dependencies: ['globe'],

	    visualColorAccessPath: 'itemStyle.color',

	    getInitialData: function (option, ecModel) {
	        var dimensions = echarts.helper.completeDimensions(['x', 'y', 'z'], option.data);
	        var data = new echarts.List(dimensions, this);
	        data.initData(option.data);
	        return data;
	    },

	    getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
	        var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);
	        if (text == null) {
	            text = this.getData().get('z', dataIndex);
	        }
	        return text;
	    },

	    defaultOption: {

	        coordinateSystem: 'cartesian3D',

	        globeIndex: 0,

	        grid3DIndex: 0,

	        zlevel: -10,

	        // bevelSize, 0 has no bevel
	        bevelSize: 0,
	        // higher is smoother
	        bevelSmoothness: 2,

	        // Bar width and depth
	        // barSize: [1, 1],

	        // On grid plane when coordinateSystem is cartesian3D
	        onGridPlane: 'xy',

	        // Shading of globe
	        shading: 'color',

	        // If coordinateSystem is globe, value will be mapped
	        // from minHeight to maxHeight
	        minHeight: 0,
	        maxHeight: 100,

	        itemStyle: {
	            opacity: 1
	        },

	        label: {
	            show: false,
	            distance: 2,
	            textStyle: {
	                fontSize: 20,
	                borderWidth: 1,
	                borderColor: '#fff'
	            }
	        },

	        emphasis: {
	            label: {
	                show: true
	            }
	        }
	    }
	});

	echarts.util.merge(Bar3DSeries.prototype, componentShadingMixin);

	module.exports = Bar3DSeries;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	var formatUtil = {};
	formatUtil.getFormattedLabel = function (seriesModel, dataIndex, status, dataType, dimIndex) {
	    status = status || 'normal';
	    var data = seriesModel.getData(dataType);
	    var itemModel = data.getItemModel(dataIndex);

	    var params = seriesModel.getDataParams(dataIndex, dataType);
	    if (dimIndex != null && (params.value instanceof Array)) {
	        params.value = params.value[dimIndex];
	    }

	    var formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : ['emphasis', 'label', 'formatter']);
	    if (formatter == null) {
	        formatter = itemModel.get(['label', 'formatter']);
	    }
	    var text;
	    if (typeof formatter === 'function') {
	        params.status = status;
	        text = formatter(params);
	    }
	    else if (typeof formatter === 'string') {
	        text = echarts.format.formatTpl(formatter, params);
	    }
	    return text;
	};

	module.exports = formatUtil;

/***/ },
/* 179 */
/***/ function(module, exports) {

	module.exports = function (seriesType, ecModel, api) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();
	        var opacityAccessPath = seriesModel.visualColorAccessPath.split('.');
	        opacityAccessPath[opacityAccessPath.length - 1] ='opacity';

	        var opacity = seriesModel.get(opacityAccessPath);

	        data.setVisual('opacity', opacity == null ? 1 : opacity);

	        if (data.hasItemOption) {
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var opacity = itemModel.get(opacityAccessPath);
	                if (opacity != null) {
	                    data.setItemVisual(idx, opacity);
	                }
	            });
	        }
	    });
	};

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(181);
	__webpack_require__(182);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(184), 'line3D', 'circle', null
	));

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'line3D'
	));

	echarts.registerLayout(function (ecModel, api) {
	    ecModel.eachSeriesByType('line3D', function (seriesModel) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;

	        if (coordSys) {
	            if (coordSys.type !== 'cartesian3D') {
	                if (true) {
	                    console.error('line3D needs cartesian3D coordinateSystem');
	                }
	                return;
	            }
	            var points = new Float32Array(data.count() * 3);

	            var item = [];
	            var out = [];

	            if (coordSys) {
	                data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	                    item[0] = x;
	                    item[1] = y;
	                    item[2] = z;

	                    coordSys.dataToPoint(item, out);
	                    points[idx * 3] = out[0];
	                    points[idx * 3 + 1] = out[1];
	                    points[idx * 3 + 2] = out[2];
	                });
	            }
	            data.setLayout('points', points);
	        }
	    });
	});

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	var Line3DSeries = echarts.extendSeriesModel({

	    type: 'series.line3D',

	    dependencies: ['grid3D'],

	    visualColorAccessPath: 'lineStyle.color',

	    getInitialData: function (option, ecModel) {
	        var dimensions = echarts.helper.completeDimensions(['x', 'y', 'z'], option.data);
	        var data = new echarts.List(dimensions, this);
	        data.initData(option.data);
	        return data;
	    },

	    defaultOption: {
	        coordinateSystem: 'cartesian3D',
	        zlevel: -10,

	        // Cartesian coordinate system
	        grid3DIndex: 0,

	        lineStyle: {
	            width: 2
	        }
	    }
	});

	module.exports = Line3DSeries;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var retrieve = __webpack_require__(69);
	var Lines3DGeometry = __webpack_require__(99);
	var Matrix4 = __webpack_require__(16);
	var Vector3 = __webpack_require__(14);
	var vec3 = __webpack_require__(15).vec3;
	var lineContain = __webpack_require__(183);

	graphicGL.Shader.import(__webpack_require__(110));

	module.exports = echarts.extendChartView({

	    type: 'line3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this.groupGL = new graphicGL.Node();

	        var line3DMesh = new graphicGL.Mesh({
	            geometry: new Lines3DGeometry({
	                useNativeLine: false,
	                sortTriangles: true
	            }),
	            material: new graphicGL.Material({
	                shader: graphicGL.createShader('ecgl.meshLines3D')
	            }),
	            // Render after axes
	            renderOrder: 10
	        });

	        this._line3DMesh = line3DMesh;
	        this._line3DMesh.geometry.pick = this._pick.bind(this);

	        this._api = api;
	    },

	    render: function (seriesModel, ecModel, api) {
	        this.groupGL.add(this._line3DMesh);

	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.viewGL) {
	            coordSys.viewGL.add(this.groupGL);
	            // TODO
	            // var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'unDefine';
	            // this._line3DMesh.material.shader[methodName]('fragment', 'SRGB_DECODE');
	        }
	        this._doRender(seriesModel, api);

	        this._data = seriesModel.getData();

	        this._camera = coordSys.viewGL.camera;

	        this.updateCamera();
	    },

	    updateCamera: function () {
	        this._updateNDCPosition();
	    },

	    _doRender: function (seriesModel, api) {
	        var data = seriesModel.getData();
	        var lineMesh = this._line3DMesh;

	        lineMesh.geometry.resetOffset();

	        var points = data.getLayout('points');

	        var colorArr = [];
	        var vertexColors = new Float32Array(points.length / 3 * 4);
	        var colorOffset = 0;
	        var hasTransparent = false;

	        data.each(function (idx) {
	            // if (!data.hasValue(idx)) {
	            //     return;
	            // }
	            var color = data.getItemVisual(idx, 'color');
	            var opacity = data.getItemVisual(idx, 'opacity');
	            if (opacity == null) {
	                opacity = 1;
	            }

	            graphicGL.parseColor(color, colorArr);
	            colorArr[3] *= opacity;
	            vertexColors[colorOffset++] = colorArr[0];
	            vertexColors[colorOffset++] = colorArr[1];
	            vertexColors[colorOffset++] = colorArr[2];
	            vertexColors[colorOffset++] = colorArr[3];

	            if (colorArr[3] < 0.99) {
	                hasTransparent = true;
	            }
	        });

	        lineMesh.geometry.setVertexCount(
	            lineMesh.geometry.getPolylineVertexCount(points)
	        );
	        lineMesh.geometry.setTriangleCount(
	            lineMesh.geometry.getPolylineTriangleCount(points)
	        );

	        lineMesh.geometry.addPolyline(
	            points, vertexColors,
	            retrieve.firstNotNull(seriesModel.get('lineStyle.width'), 1),
	            true
	        );

	        lineMesh.geometry.dirty();
	        lineMesh.geometry.updateBoundingBox();

	        var material = lineMesh.material;
	        material.transparent = hasTransparent;
	        material.depthMask = !hasTransparent;

	        var debugWireframeModel = seriesModel.getModel('debug.wireframe');
	        if (debugWireframeModel.get('show')) {
	            lineMesh.geometry.createAttribute('barycentric', 'float', 3);
	            lineMesh.geometry.generateBarycentric();
	            lineMesh.material.shader.define('both', 'WIREFRAME_TRIANGLE');
	            lineMesh.material.set(
	                'wireframeLineColor', graphicGL.parseColor(
	                    debugWireframeModel.get('lineStyle.color')
	                )
	            );
	            lineMesh.material.material.set(
	                'wireframeLineWidth', retrieve.firstNotNull(
	                    debugWireframeModel.get('lineStyle.width'), 1
	                )
	            );
	        }
	        else {
	            lineMesh.material.shader.unDefine('both', 'WIREFRAME_TRIANGLE');
	        }

	        this._points = points;

	        this._initHandler(seriesModel, api);
	    },

	    _initHandler: function (seriesModel, api) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;
	        var lineMesh = this._line3DMesh;

	        var lastDataIndex = -1;
	        lineMesh.off('mousemove');
	        lineMesh.off('mouseout');
	        lineMesh.on('mousemove', function (e) {
	            var value = coordSys.pointToData(e.point._array);
	            var dataIndex = data.indexOfNearest('x', value[0]);
	            if (dataIndex !== lastDataIndex) {
	                this._downplay(lastDataIndex);
	                this._highlight(dataIndex);

	                api.dispatchAction({
	                    type: 'grid3DShowAxisPointer',
	                    value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)]
	                });
	            }

	            lastDataIndex = dataIndex;
	        }, this);
	        lineMesh.on('mouseout', function (e) {
	            this._downplay(lastDataIndex);
	            lastDataIndex = -1;
	            api.dispatchAction({
	                type: 'grid3DHideAxisPointer'
	            });
	        }, this);
	    },

	    _highlight: function (dataIndex) {
	        var data = this._data;
	        if (!data) {
	            return;
	        }
	        // var barIndex = this._barIndexOfData[dataIndex];
	        // if (barIndex < 0) {
	        //     return;
	        // }

	        // var itemModel = data.getItemModel(dataIndex);
	        // var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
	        // var emphasisColor = emphasisItemStyleModel.get('color');
	        // var emphasisOpacity = emphasisItemStyleModel.get('opacity');
	        // if (emphasisColor == null) {
	        //     var color = data.getItemVisual(dataIndex, 'color');
	        //     emphasisColor = echarts.color.lift(color, -0.4);
	        // }
	        // if (emphasisOpacity == null) {
	        //     emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
	        // }
	        // var colorArr = graphicGL.parseColor(emphasisColor);
	        // colorArr[3] *= emphasisOpacity;

	    },

	    _downplay: function (dataIndex) {
	        var data = this._data;
	        if (!data) {
	            return;
	        }
	        // var barIndex = this._barIndexOfData[dataIndex];
	        // if (barIndex < 0) {
	        //     return;
	        // }

	        // var color = data.getItemVisual(dataIndex, 'color');
	        // var opacity = data.getItemVisual(dataIndex, 'opacity');

	        // var colorArr = graphicGL.parseColor(color);
	        // colorArr[3] *= opacity;
	    },

	    _updateNDCPosition: function () {

	        var worldViewProjection = new Matrix4();
	        var camera = this._camera;
	        Matrix4.multiply(worldViewProjection, camera.projectionMatrix, camera.viewMatrix);

	        var positionNDC = this._positionNDC;
	        var points = this._points;
	        var nPoints = points.length / 3;
	        if (!positionNDC || positionNDC.length / 2 !== nPoints) {
	            positionNDC = this._positionNDC = new Float32Array(nPoints * 2);
	        }
	        var pos = [];
	        for (var i = 0; i < nPoints; i++) {
	            var i3 = i * 3;
	            var i2 = i * 2;
	            pos[0] = points[i3];
	            pos[1] = points[i3 + 1];
	            pos[2] = points[i3 + 2];
	            pos[3] = 1;

	            vec3.transformMat4(pos, pos, worldViewProjection._array);
	            positionNDC[i2] = pos[0] / pos[3];
	            positionNDC[i2 + 1] = pos[1] / pos[3];
	        }
	    },

	    _pick: function (x, y, renderer, camera, renderable, out) {
	        var positionNDC = this._positionNDC;
	        var seriesModel = this._data.hostModel;
	        var lineWidth = seriesModel.get('lineStyle.width');

	        var dataIndex = -1;
	        var width = renderer.viewport.width;
	        var height = renderer.viewport.height;

	        var halfWidth = width * 0.5;
	        var halfHeight = height * 0.5;
	        x = (x + 1) * halfWidth;
	        y = (y + 1) * halfHeight;

	        for (var i = 1; i < positionNDC.length / 2; i++) {
	            var x0 = (positionNDC[(i - 1) * 2] + 1) * halfWidth;
	            var y0 = (positionNDC[(i - 1) * 2 + 1] + 1) * halfHeight;
	            var x1 = (positionNDC[i * 2] + 1) * halfWidth;
	            var y1 = (positionNDC[i * 2 + 1] + 1) * halfHeight;

	            if (lineContain.containStroke(x0, y0, x1, y1, lineWidth, x, y)) {
	                var dist0 = (x0 - x) * (x0 - x) + (y0 - y) * (y0 - y);
	                var dist1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y);
	                // Nearest point.
	                dataIndex = dist0 < dist1 ? (i - 1) : i;
	            }
	        }

	        if (dataIndex >= 0) {
	            var i3 = dataIndex * 3;
	            var point = new Vector3(
	                this._points[i3],
	                this._points[i3 + 1],
	                this._points[i3 + 2]
	            );

	            out.push({
	                dataIndex: dataIndex,
	                point: point,
	                pointWorld: point.clone(),
	                target: this._line3DMesh,
	                distance: this._camera.getWorldPosition().dist(point)
	            });
	        }
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	    }
	});

/***/ },
/* 183 */
/***/ function(module, exports) {

	
	    module.exports = {
	        /**
	         * 线段包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l)
	                || (y < y0 - _l && y < y1 - _l)
	                || (x > x0 + _l && x > x1 + _l)
	                || (x < x0 - _l && x < x1 - _l)
	            ) {
	                return false;
	            }

	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
	            }
	            else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }
	    };


/***/ },
/* 184 */
/***/ function(module, exports) {

	

	    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {

	        // Encoding visual for all series include which is filtered for legend drawing
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();

	            var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	            var symbolSize = seriesModel.get('symbolSize');

	            data.setVisual({
	                legendSymbol: legendSymbol || symbolType,
	                symbol: symbolType,
	                symbolSize: symbolSize
	            });

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof symbolSize === 'function') {
	                    data.each(function (idx) {
	                        var rawValue = seriesModel.getRawValue(idx);
	                        // FIXME
	                        var params = seriesModel.getDataParams(idx);
	                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                    });
	                }
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var itemSymbolType = itemModel.getShallow('symbol', true);
	                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);
	                    // If has item symbol
	                    if (itemSymbolType != null) {
	                        data.setItemVisual(idx, 'symbol', itemSymbolType);
	                    }
	                    if (itemSymbolSize != null) {
	                        // PENDING Transform symbolSize ?
	                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(186);
	__webpack_require__(187);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(184), 'scatter3D', 'circle', null
	));

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'scatter3D'
	));

	echarts.registerLayout(function (ecModel, api) {
	    ecModel.eachSeriesByType('scatter3D', function (seriesModel) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;

	        if (coordSys) {
	            var dims = coordSys.dimensions;
	            if (dims.length < 3) {
	                if (true) {
	                    console.error('scatter3D needs 3D coordinateSystem');
	                }
	                return;
	            }
	            var points = new Float32Array(data.count() * 3);

	            var item = [];
	            var out = [];

	            var isGlobe = coordSys.type === 'globe';
	            var isGeo3D = coordSys.type === 'geo3D';
	            var distanceToGlobe = seriesModel.get('distanceToGlobe');
	            var distanceToGeo3D = seriesModel.get('distanceToGeo3D');
	            if (coordSys) {
	                data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	                    item[0] = x;
	                    item[1] = y;
	                    if (isGlobe) {
	                        // TODO Bump map
	                        item[2] = distanceToGlobe;
	                    }
	                    else if (isGeo3D) {
	                        // TODO Region height.
	                        item[2] = coordSys.size[1] + distanceToGeo3D;
	                    }
	                    else {
	                        item[2] = z;
	                    }
	                    coordSys.dataToPoint(item, out);
	                    points[idx * 3] = out[0];
	                    points[idx * 3 + 1] = out[1];
	                    points[idx * 3 + 2] = out[2];
	                });
	            }
	            data.setLayout('points', points);
	        }
	    });
	});

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var formatUtil = __webpack_require__(178);

	var Scatter3DSeries = echarts.extendSeriesModel({

	    type: 'series.scatter3D',

	    dependencies: ['globe', 'grid3D', 'geo3D'],

	    visualColorAccessPath: 'itemStyle.color',

	    getInitialData: function (option, ecModel) {
	        var dimensions = echarts.helper.completeDimensions(['x', 'y', 'z'], option.data);
	        var data = new echarts.List(dimensions, this);
	        data.initData(option.data);
	        return data;
	    },

	    getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
	        var text = formatUtil.getFormattedLabel(this, dataIndex, status, dataType, dimIndex);
	        if (text == null) {
	            var data = this.getData();
	            var lastDim = data.dimensions[data.dimensions.length - 1];
	            text = data.get(lastDim, dataIndex);
	        }
	        return text;
	    },

	    defaultOption: {
	        coordinateSystem: 'cartesian3D',
	        zlevel: -10,

	        // Cartesian coordinate system
	        grid3DIndex: 0,

	        globeIndex: 0,

	        symbol: 'circle',
	        symbolSize: 10,

	        // Distance to the globe, when coordinate system is globe
	        distanceToGlobe: 1.5,

	        // Distance to the geo3D, when coordinate system is geo3D
	        distanceToGeo3D: 0.5,

	        // Support source-over, lighter
	        blendMode: 'source-over',

	        label: {
	            show: false,
	            position: 'right',
	            // Screen space distance
	            distance: 5,

	            textStyle: {
	                fontSize: 14,
	                color: '#000',
	                borderColor: '#fff',
	                borderWidth: 1
	            }
	        },

	        itemStyle: {
	            opacity: 0.8
	        },

	        emphasis: {
	            label: {
	                show: true
	            }
	        }
	    }
	});

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);

	var PointsBuilder = __webpack_require__(188);

	echarts.extendChartView({

	    type: 'scatter3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this.groupGL = new graphicGL.Node();

	        var pointsBuilder = new PointsBuilder(false, api);
	        this._pointsBuilder = pointsBuilder;
	    },

	    render: function (seriesModel, ecModel, api) {
	        this.groupGL.add(this._pointsBuilder.rootNode);

	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.viewGL) {
	            coordSys.viewGL.add(this.groupGL);

	            this._pointsBuilder.update(seriesModel, ecModel, api);
	            this._pointsBuilder.updateView(coordSys.viewGL.camera);

	            this._camera = coordSys.viewGL.camera;
	        }
	        else {
	            if (true) {
	                throw new Error('Invalid coordinate system');
	            }
	        }
	    },

	    updateLayout: function (seriesModel, ecModel, api) {
	        this._pointsBuilder.updateLayout(seriesModel, ecModel, api);
	        this._pointsBuilder.updateView(this._camera);
	    },

	    updateCamera: function () {
	        this._pointsBuilder.updateView(this._camera);
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	    }
	});

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var spriteUtil = __webpack_require__(189);
	var PointsMesh = __webpack_require__(190);
	var LabelsBuilder = __webpack_require__(161);
	var Matrix4 = __webpack_require__(16);

	var SDF_RANGE = 20;
	// TODO gl_PointSize has max value.
	function PointsBuilder(is2D, api) {

	    this._mesh = new PointsMesh({
	        // Render after axes
	        renderOrder: 10
	    });

	    this.rootNode = new graphicGL.Node();
	    this.rootNode.add(this._mesh);

	    /**
	     * @type {boolean}
	     */
	    this.is2D = is2D;

	    this._labelsBuilder = new LabelsBuilder(256, 256, api);

	    // Give a large render order.
	    this._labelsBuilder.getMesh().renderOrder = 100;
	    this.rootNode.add(this._labelsBuilder.getMesh());

	    this._api = api;

	    this._spriteImageCanvas = document.createElement('canvas');
	}

	PointsBuilder.prototype = {

	    constructor: PointsBuilder,

	    update: function (seriesModel, ecModel, api) {
	        var data = seriesModel.getData();

	        var symbolInfo = this._getSymbolInfo(data);
	        var dpr = api.getDevicePixelRatio();

	        symbolInfo.maxSize = Math.min(symbolInfo.maxSize * 2, 200);

	        var symbolSize = [];
	        if (symbolInfo.aspect > 1) {
	            symbolSize[0] = symbolInfo.maxSize;
	            symbolSize[1] = symbolInfo.maxSize / symbolInfo.aspect;
	        }
	        else {
	            symbolSize[1] = symbolInfo.maxSize;
	            symbolSize[0] = symbolInfo.maxSize * symbolInfo.aspect;
	        }

	        // TODO image symbol
	        var itemStyle = seriesModel.getModel('itemStyle').getItemStyle();

	        // In case invalid data.
	        symbolSize[0] = symbolSize[0] || 1;
	        symbolSize[1] = symbolSize[1] || 1;

	        spriteUtil.createSymbolSprite(symbolInfo.type, symbolSize, {
	            fill: '#fff',
	            lineWidth: itemStyle.lineWidth,
	            stroke: 'transparent',
	            shadowColor: 'transparent',
	            marginBias: 10
	        }, this._spriteImageCanvas);

	        spriteUtil.createSDFFromCanvas(
	            this._spriteImageCanvas, 32, SDF_RANGE,
	            this._mesh.material.get('sprite').image
	        );

	        var geometry = this._mesh.geometry;
	        var points = data.getLayout('points');
	        var attributes = geometry.attributes;
	        attributes.position.init(data.count());
	        attributes.size.init(data.count());
	        attributes.color.init(data.count());
	        var positionArr = attributes.position.value;

	        var rgbaArr = [];
	        var is2D = this.is2D;

	        var pointSizeScale = this._spriteImageCanvas.width / symbolInfo.maxSize * dpr;

	        var hasTransparentPoint = false;
	        for (var i = 0; i < data.count(); i++) {
	            var i3 = i * 3;
	            var i2 = i * 2;
	            if (is2D) {
	                positionArr[i3] = points[i2];
	                positionArr[i3 + 1] = points[i2 + 1];
	                positionArr[i3 + 2] = -10;
	            }
	            else {
	                positionArr[i3] = points[i3];
	                positionArr[i3 + 1] = points[i3 + 1];
	                positionArr[i3 + 2] = points[i3 + 2];
	            }

	            var color = data.getItemVisual(i, 'color');
	            var opacity = data.getItemVisual(i, 'opacity');
	            graphicGL.parseColor(color, rgbaArr);
	            rgbaArr[3] *= opacity;
	            attributes.color.set(i, rgbaArr);
	            if (rgbaArr[3] < 0.99) {
	                hasTransparentPoint = true;
	            }

	            var symbolSize = data.getItemVisual(i, 'symbolSize');
	            symbolSize = (symbolSize instanceof Array
	                ? Math.max(symbolSize[0], symbolSize[1]) : symbolSize);

	            // NaN pointSize may have strange result.
	            if (isNaN(symbolSize)) {
	                symbolSize = 0;
	            }
	            // Scale point size because canvas has margin.
	            attributes.size.value[i] = symbolSize * pointSizeScale;
	        }

	        this._mesh.sizeScale = pointSizeScale;

	        geometry.dirty();

	        // Update material.
	        var blendFunc = seriesModel.get('blendMode') === 'lighter'
	            ? graphicGL.additiveBlend : null;
	        var material = this._mesh.material;
	        material.blend = blendFunc;

	        material.set('lineWidth', itemStyle.lineWidth / SDF_RANGE);

	        var strokeColor = graphicGL.parseColor(itemStyle.stroke);
	        material.set('color', [1, 1, 1, 1]);
	        material.set('strokeColor', strokeColor);

	        if (this.is2D) {
	            material.transparent = true;
	            material.depthMask = false;
	            material.depthTest = false;
	            geometry.sortVertices = false;
	        }
	        else {
	            // Because of symbol texture, we always needs it be transparent.
	            material.depthTest = true;
	            material.transparent = true;
	            material.depthMask = false;
	            geometry.sortVertices = true;
	        }

	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.viewGL) {
	            var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'unDefine';
	            this._mesh.material.shader[methodName]('fragment', 'SRGB_DECODE');
	        }

	        this._updateHandler(seriesModel, ecModel, api);

	        // TODO scatterGL
	        if (!is2D) {
	            this._labelsBuilder.updateData(data);

	            this._labelsBuilder.getLabelPosition = function (dataIndex, positionDesc, distance) {
	                var idx3 = dataIndex * 3;
	                var pos = [points[idx3], points[idx3 + 1], points[idx3 + 2]];
	                return pos;
	            };

	            this._labelsBuilder.getLabelDistance = function (dataIndex, positionDesc, distance) {
	                var size = geometry.attributes.size.get(dataIndex) / pointSizeScale;
	                return size / 2 + distance;
	            };
	            this._labelsBuilder.updateLabels();
	        }

	        this._api = api;
	    },

	    _updateHandler: function (seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var pointsMesh = this._mesh;

	        var lastDataIndex = -1;
	        var isCartesian3D = seriesModel.coordinateSystem
	            && seriesModel.coordinateSystem.type === 'cartesian3D';

	        var grid3DModel;
	        if (isCartesian3D) {
	            grid3DModel = seriesModel.coordinateSystem.model;
	        }

	        pointsMesh.off('mousemove');
	        pointsMesh.off('mouseout');
	        pointsMesh.on('mousemove', function (e) {
	            var dataIndex = e.vertexIndex;
	            this.highlight(data, dataIndex);
	            if (dataIndex !== lastDataIndex) {
	                this.downplay(data, lastDataIndex);
	                this.highlight(data, dataIndex);
	                this._labelsBuilder.updateLabels([dataIndex]);

	                if (isCartesian3D) {
	                    api.dispatchAction({
	                        type: 'grid3DShowAxisPointer',
	                        value: [data.get('x', dataIndex), data.get('y', dataIndex), data.get('z', dataIndex)],
	                        grid3DIndex: grid3DModel.componentIndex
	                    });
	                }
	            }
	            lastDataIndex = dataIndex;
	        }, this);
	        pointsMesh.on('mouseout', function (e) {
	            this.downplay(data, e.vertexIndex);
	            this._labelsBuilder.updateLabels();
	            lastDataIndex = -1;

	            if (isCartesian3D) {
	                api.dispatchAction({
	                    type: 'grid3DHideAxisPointer',
	                    grid3DIndex: grid3DModel.componentIndex
	                });
	            }
	        }, this);
	    },

	    updateView: function (camera) {
	        var worldViewProjection = new Matrix4();
	        Matrix4.mul(worldViewProjection, camera.viewMatrix, this._mesh.worldTransform);
	        Matrix4.mul(worldViewProjection, camera.projectionMatrix, worldViewProjection);

	        this._mesh.updateNDCPosition(worldViewProjection, this.is2D, this._api);
	    },

	    updateLayout: function (seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var positionArr = this._mesh.geometry.attributes.position.value;
	        var points = data.getLayout('points');
	        if (this.is2D) {
	            for (var i = 0; i < points.length / 2; i++) {
	                var i3 = i * 3;
	                var i2 = i * 2;
	                positionArr[i3] = points[i2];
	                positionArr[i3 + 1] = points[i2 + 1];
	            }
	        }
	        else {
	            for (var i = 0; i < points.length; i++) {
	                positionArr[i] = points[i];
	            }
	        }
	        this._mesh.geometry.dirty();
	    },

	    highlight: function (data, dataIndex) {
	        var itemModel = data.getItemModel(dataIndex);
	        var emphasisItemStyleModel = itemModel.getModel('emphasis.itemStyle');
	        var emphasisColor = emphasisItemStyleModel.get('color');
	        var emphasisOpacity = emphasisItemStyleModel.get('opacity');
	        if (emphasisColor == null) {
	            var color = data.getItemVisual(dataIndex, 'color');
	            emphasisColor = echarts.color.lift(color, -0.4);
	        }
	        if (emphasisOpacity == null) {
	            emphasisOpacity = data.getItemVisual(dataIndex, 'opacity');
	        }
	        var colorArr = graphicGL.parseColor(emphasisColor);
	        colorArr[3] *= emphasisOpacity;

	        this._mesh.geometry.attributes.color.set(dataIndex, colorArr);
	        this._mesh.geometry.dirtyAttribute('color');

	        this._api.getZr().refresh();
	    },

	    downplay: function (data, dataIndex) {
	        var color = data.getItemVisual(dataIndex, 'color');
	        var opacity = data.getItemVisual(dataIndex, 'opacity');

	        var colorArr = graphicGL.parseColor(color);
	        colorArr[3] *= opacity;

	        this._mesh.geometry.attributes.color.set(dataIndex, colorArr);
	        this._mesh.geometry.dirtyAttribute('color');

	        this._api.getZr().refresh();
	    },

	    setPositionTexture: function (texture) {
	        this._mesh.material.set('positionTexture', texture);
	        this._mesh.material.shader[
	            texture ? 'enableTexture' : 'disableTexture'
	        ]('positionTexture');
	    },

	    getPointsMesh: function () {
	        return this._mesh;
	    },

	    _getSymbolInfo: function (data) {
	        var symbolAspect;
	        var differentSymbolAspect = false;
	        var symbolType = data.getItemVisual(0, 'symbol') || 'circle';
	        var differentSymbolType = false;
	        var maxSymbolSize = 0;

	        data.each(function (idx) {
	            var symbolSize = data.getItemVisual(idx, 'symbolSize');
	            var currentSymbolType = data.getItemVisual(idx, 'symbol');
	            var currentSymbolAspect;
	            if (!(symbolSize instanceof Array)) {
	                // Ignore NaN value.
	                if (isNaN(symbolSize)) {
	                    return;
	                }

	                currentSymbolAspect = 1;
	                maxSymbolSize = Math.max(symbolSize, maxSymbolSize);
	            }
	            else {
	                currentSymbolAspect = symbolSize[0] / symbolSize[1];
	                maxSymbolSize = Math.max(Math.max(symbolSize[0], symbolSize[1]), maxSymbolSize);
	            }
	            if (true) {
	                if (symbolAspect != null && Math.abs(currentSymbolAspect - symbolAspect) > 0.05) {
	                    differentSymbolAspect = true;
	                }
	                if (currentSymbolType !== symbolType) {
	                    differentSymbolType = true;
	                }
	            }
	            symbolType = currentSymbolType;
	            symbolAspect = currentSymbolAspect;
	        });

	        if (true) {
	            if (differentSymbolAspect) {
	                console.warn('Different symbol width / height ratio will be ignored.');
	            }
	            if (differentSymbolType) {
	                console.warn('Different symbol type will be ignored.');
	            }
	        }

	        return {
	            maxSize: maxSymbolSize,
	            type: symbolType,
	            aspect: symbolAspect
	        };
	    }
	};

	module.exports = PointsBuilder;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	function makeSprite(size, canvas, draw) {
	    // http://simonsarris.com/blog/346-how-you-clear-your-canvas-matters
	    // http://jsperf.com/canvasclear
	    // Set width and height is fast
	    // And use the exist canvas if possible
	    // http://jsperf.com/create-canvas-vs-set-width-height/2
	    var canvas = canvas || document.createElement('canvas');
	    canvas.width = size;
	    canvas.height = size;
	    var ctx = canvas.getContext('2d');

	    draw && draw(ctx);

	    return canvas;
	}

	function makePath(symbol, symbolSize, style, marginBias) {
	    if (!echarts.util.isArray(symbolSize)) {
	        symbolSize = [symbolSize, symbolSize];
	    }
	    var margin = spriteUtil.getMarginByStyle(style, marginBias);
	    var width = symbolSize[0] + margin.left + margin.right;
	    var height = symbolSize[1] + margin.top + margin.bottom;
	    var path = echarts.helper.createSymbol(symbol, 0, 0, symbolSize[0], symbolSize[1]);

	    var size = Math.max(width, height);

	    path.position = [margin.left, margin.top];
	    if (width > height) {
	        path.position[1] += (size - height) / 2;
	    }
	    else {
	        path.position[0] += (size - width) / 2;
	    }

	    var rect = path.getBoundingRect();
	    path.position[0] -= rect.x;
	    path.position[1] -= rect.y;

	    path.setStyle(style);

	    path.update();

	    path.__size = size;

	    return path;
	}

	    // http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf
	function generateSDF(ctx, sourceImageData, range) {

	    var sourceWidth = sourceImageData.width;
	    var sourceHeight = sourceImageData.height;

	    var width = ctx.canvas.width;
	    var height = ctx.canvas.height;

	    var scaleX = sourceWidth / width;
	    var scaleY = sourceHeight / height;

	    function sign(r) {
	        return r < 128 ? 1 : -1;
	    }
	    function searchMinDistance(x, y) {
	        var minDistSqr = Infinity;
	        x = Math.floor(x * scaleX);
	        y = Math.floor(y * scaleY);
	        var i = y * sourceWidth + x;
	        var r = sourceImageData.data[i * 4];
	        var a = sign(r);
	        // Search for min distance
	        for (var y2 = Math.max(y - range, 0); y2 < Math.min(y + range, sourceHeight); y2++) {
	            for (var x2 = Math.max(x - range, 0); x2 < Math.min(x + range, sourceWidth); x2++) {
	                var i = y2 * sourceWidth + x2;
	                var r2 = sourceImageData.data[i * 4];
	                var b = sign(r2);
	                var dx = x2 - x;
	                var dy = y2 - y;
	                if (a !== b) {
	                    var distSqr = dx * dx + dy * dy;
	                    if (distSqr < minDistSqr) {
	                        minDistSqr = distSqr;
	                    }
	                }
	            }
	        }
	        return a * Math.sqrt(minDistSqr);
	    }

	    var sdfImageData = ctx.createImageData(width, height);
	    for (var y = 0; y < height; y++) {
	        for (var x = 0; x < width; x++) {
	            var dist = searchMinDistance(x, y);

	            var normalized = dist / range * 0.5 + 0.5;
	            var i = (y * width + x) * 4;
	            sdfImageData.data[i++] = (1.0 - normalized) * 255;
	            sdfImageData.data[i++] = (1.0 - normalized) * 255;
	            sdfImageData.data[i++] = (1.0 - normalized) * 255;
	            sdfImageData.data[i++] = 255;
	        }
	    }

	    return sdfImageData;
	}

	var spriteUtil = {

	    getMarginByStyle: function (style) {
	        var marginBias = style.marginBias || 0;

	        var lineWidth = 0;
	        if (style.stroke && style.stroke !== 'none') {
	            lineWidth = style.lineWidth == null ? 1 : style.lineWidth;
	        }
	        var shadowBlurSize = style.shadowBlur || 0;
	        var shadowOffsetX = style.shadowOffsetX || 0;
	        var shadowOffsetY = style.shadowOffsetY || 0;

	        var margin = {};
	        margin.left = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize) + marginBias;
	        margin.right = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize) + marginBias;
	        margin.top = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize) + marginBias;
	        margin.bottom = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize) + marginBias;

	        return margin;
	    },

	    // TODO Not consider shadowOffsetX, shadowOffsetY.
	    /**
	     * @param {string} symbol
	     * @param {number | Array.<number>} symbolSize
	     * @param {Object} style
	     * @param {number} marginBias
	     */
	    createSymbolSprite: function (symbol, symbolSize, style, canvas) {

	        // TODO marginBias can be set.
	        var path = makePath(symbol, symbolSize, style);

	        var margin = spriteUtil.getMarginByStyle(style);

	        return {
	            image: makeSprite(path.__size, canvas, function (ctx) {
	                path.brush(ctx);
	            }),
	            margin: margin
	        };
	    },

	    createSDFFromCanvas: function (canvas, size, range, outCanvas) {
	        // TODO Create a low resolution SDF from high resolution image.
	        return makeSprite(size, outCanvas, function (outCtx) {
	            var ctx = canvas.getContext('2d');
	            var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);

	            outCtx.putImageData(generateSDF(outCtx, imgData, range), 0, 0);
	        });
	    },

	    createSimpleSprite: function (size, canvas) {
	        return makeSprite(size, canvas, function (ctx) {
	            var halfSize = size / 2;
	            ctx.beginPath();
	            ctx.arc(halfSize, halfSize, 60, 0, Math.PI * 2, false) ;
	            ctx.closePath();

	            var gradient = ctx.createRadialGradient(
	                halfSize, halfSize, 0, halfSize, halfSize, halfSize
	            );
	            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
	            gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');
	            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
	            ctx.fillStyle = gradient;
	            ctx.fill();
	        });
	    }
	};

	module.exports = spriteUtil;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var graphicGL = __webpack_require__(31);
	var verticesSortMixin = __webpack_require__(191);
	var echarts = __webpack_require__(2);
	var glmatrix = __webpack_require__(15);
	var vec4 = glmatrix.vec4;

	graphicGL.Shader.import(__webpack_require__(192));

	var PointsMesh = graphicGL.Mesh.extend(function () {
	    var geometry = new graphicGL.Geometry({
	        dynamic: true
	    });
	    echarts.util.extend(geometry, verticesSortMixin);
	    geometry.createAttribute('color', 'float', 4, 'COLOR');
	    geometry.createAttribute('strokeColor', 'float', 4);
	    geometry.createAttribute('size', 'float', 1);

	    var material = new graphicGL.Material({
	        shader: graphicGL.createShader('ecgl.sdfSprite'),
	        transparent: true,
	        depthMask: false
	    });
	    material.shader.enableTexture('sprite');
	    material.shader.define('both', 'VERTEX_COLOR');

	    var sdfTexture = new graphicGL.Texture2D({
	        image: document.createElement('canvas'),
	        flipY: false
	    });

	    material.set('sprite', sdfTexture);

	    // Custom pick methods.
	    geometry.pick = this._pick.bind(this);

	    return {
	        geometry: geometry,
	        material: material,
	        mode: graphicGL.Mesh.POINTS,

	        sizeScale: 1
	    };
	}, {

	    _pick: function (x, y, renderer, camera, renderable, out) {
	        var positionNDC = this._positionNDC;
	        if (!positionNDC) {
	            return;
	        }

	        var viewport = renderer.viewport;
	        var ndcScaleX = 2 / viewport.width;
	        var ndcScaleY = 2 / viewport.height;
	        // From near to far. indices have been sorted.
	        for (var i = this.geometry.vertexCount - 1; i >= 0; i--) {
	            var idx;
	            if (!this.geometry.indices) {
	                idx = i;
	            }
	            else {
	                idx = this.geometry.indices[i];
	            }

	            var cx = positionNDC[idx * 2];
	            var cy = positionNDC[idx * 2 + 1];

	            var size = this.geometry.attributes.size.get(idx) / this.sizeScale;
	            var halfSize = size / 2;

	            if (
	                x > (cx - halfSize * ndcScaleX) && x < (cx + halfSize * ndcScaleX)
	                && y > (cy - halfSize * ndcScaleY) && y < (cy + halfSize * ndcScaleY)
	            ) {
	                var point = new graphicGL.Vector3();
	                var pointWorld = new graphicGL.Vector3();
	                this.geometry.attributes.position.get(idx, point._array);
	                graphicGL.Vector3.transformMat4(pointWorld, point, this.worldTransform);
	                out.push({
	                    vertexIndex: idx,
	                    point: point,
	                    pointWorld: pointWorld,
	                    target: this,
	                    distance: pointWorld.distance(camera.getWorldPosition())
	                });
	            }
	        }
	    },

	    updateNDCPosition: function (worldViewProjection, is2D, api) {
	        var positionNDC = this._positionNDC;
	        var geometry = this.geometry;
	        if (!positionNDC || positionNDC.length / 2 !== geometry.vertexCount) {
	            positionNDC = this._positionNDC = new Float32Array(geometry.vertexCount * 2);
	        }

	        if (!is2D) {
	            var pos = vec4.create();
	            for (var i = 0; i < geometry.vertexCount; i++) {
	                geometry.attributes.position.get(i, pos);
	                pos[3] = 1;
	                vec4.transformMat4(pos, pos, worldViewProjection._array);
	                vec4.scale(pos, pos, 1 / pos[3]);

	                positionNDC[i * 2] = pos[0];
	                positionNDC[i * 2 + 1] = pos[1];
	            }
	        }
	        else {
	            // TODO
	            // var width = api.getWidth();
	            // var height = api.getHeight();

	            // for (var i = 0; i < geometry.vertexCount; i++) {
	            //     positionNDC[i * 2] = geometry.attributes.position.value[i * 3];
	            //     positionNDC[i * 2 + 1] = geometry.attributes.position.value[i * 3 + 1];
	            // }
	        }
	    }
	});

	module.exports = PointsMesh;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var vec3 = __webpack_require__(15).vec3;
	var ProgressiveQuickSort = __webpack_require__(160);

	module.exports = {

	    needsSortVertices: function () {
	        return this.sortVertices;
	    },

	    needsSortVerticesProgressively: function () {
	        return this.needsSortVertices() && this.vertexCount >= 2e4;
	    },

	    doSortVertices: function (cameraPos, frame) {
	        var indices = this.indices;
	        var p = vec3.create();

	        if (!indices) {
	            indices = this.indices = this.vertexCount > 0xffff ? new Uint32Array(this.vertexCount) : new Uint16Array(this.vertexCount);
	            for (var i = 0; i < indices.length; i++) {
	                indices[i] = i;
	            }
	        }
	        // Do progressive quick sort.
	        if (frame === 0) {
	            var posAttr = this.attributes.position;
	            var cameraPos = cameraPos._array;
	            var noneCount = 0;
	            if (!this._zList || this._zList.length !== this.vertexCount) {
	                this._zList = new Float32Array(this.vertexCount);
	            }

	            for (var i = 0; i < this.vertexCount; i++) {
	                posAttr.get(i, p);
	                // Camera position is in object space
	                var z = vec3.sqrDist(p, cameraPos);
	                if (isNaN(z)) {
	                    // Put far away, NaN value may cause sort slow
	                    z = 1e7;
	                    noneCount++;
	                }
	                this._zList[i] = z;
	            }

	            this._noneCount = noneCount;
	        }

	        if (this.vertexCount < 2e4) {
	            // Use simple timsort for simple geometries.
	            if (frame === 0) {
	                this._simpleSort(this._noneCount / this.vertexCount > 0.05);
	            }
	        }
	        else {
	            for (var i = 0; i < 3; i++) {
	                this._progressiveQuickSort(frame * 3 + i);
	            }
	        }

	        this.dirtyIndices();
	    },

	    _simpleSort: function (useNativeQuickSort) {
	        var zList = this._zList;
	        var indices = this.indices;
	        function compare(a, b) {
	            // Sort from far to near. which is descending order
	            return zList[b] - zList[a];
	        }

	        // When too much value are equal, using native quick sort with three partition..
	        // or the simple quick sort will be nearly O(n*n)
	        // http://stackoverflow.com/questions/5126586/quicksort-complexity-when-all-the-elements-are-same

	        // Otherwise simple quicksort is more effecient than v8 native quick sort when data all different.
	        if (useNativeQuickSort) {
	            indices.sort(compare);
	        }
	        else {
	            ProgressiveQuickSort.sort(indices, compare, 0, indices.length - 1);
	        }
	    },

	    _progressiveQuickSort: function (frame) {
	        var zList = this._zList;
	        var indices = this.indices;

	        this._quickSort = this._quickSort || new ProgressiveQuickSort();

	        this._quickSort.step(indices, function (a, b) {
	            return zList[b] - zList[a];
	        }, frame);
	    }
	};

/***/ },
/* 192 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.sdfSprite.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform float elapsedTime : 0;\n\nattribute vec3 position : POSITION;\n\n#ifdef VERTEX_COLOR\nattribute vec4 a_FillColor: COLOR;\nvarying vec4 v_Color;\n#endif\n\nattribute float size;\n\n#ifdef ANIMATING\nattribute float delay;\n#endif\n\n#ifdef POSITIONTEXTURE_ENABLED\nuniform sampler2D positionTexture;\n#endif\n\nvarying float v_Size;\n\nvoid main()\n{\n\n#ifdef POSITIONTEXTURE_ENABLED\n    // Only 2d position texture supported\n    gl_Position = worldViewProjection * vec4(texture2D(positionTexture, position.xy).xy, -10.0, 1.0);\n#else\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n#endif\n\n#ifdef ANIMATING\n    gl_PointSize = size * (sin((elapsedTime + delay) * 3.14) * 0.5 + 1.0);\n#else\n    gl_PointSize = size;\n#endif\n\n#ifdef VERTEX_COLOR\n    v_Color = a_FillColor;\n    // v_StrokeColor = a_StrokeColor;\n#endif\n\n    v_Size = size;\n}\n\n@end\n\n@export ecgl.sdfSprite.fragment\n\nuniform vec4 color: [1, 1, 1, 1];\nuniform vec4 strokeColor: [1, 1, 1, 1];\nuniform float smoothing: 0.07;\n\nuniform float lineWidth: 0.0;\n\n#ifdef VERTEX_COLOR\nvarying vec4 v_Color;\n// varying vec4 v_StrokeColor;\n#endif\n\nvarying float v_Size;\n\nuniform sampler2D sprite;\n\n@import qtek.util.srgb\n\nvoid main()\n{\n    gl_FragColor = color;\n\n    vec4 _strokeColor = strokeColor;\n\n#ifdef VERTEX_COLOR\n    gl_FragColor *= v_Color;\n    // TODO\n    // _strokeColor *= v_StrokeColor;\n#endif\n\n#ifdef SPRITE_ENABLED\n    float d = texture2D(sprite, gl_PointCoord).r;\n    // Antialias\n    gl_FragColor.a *= smoothstep(0.5 - smoothing, 0.5 + smoothing, d);\n\n    if (lineWidth > 0.0) {\n        // TODO SCREEN SPACE OUTLINE\n        float sLineWidth = lineWidth / 2.0;\n\n        float outlineMaxValue0 = 0.5 + sLineWidth;\n        float outlineMaxValue1 = 0.5 + sLineWidth + smoothing;\n        float outlineMinValue0 = 0.5 - sLineWidth - smoothing;\n        float outlineMinValue1 = 0.5 - sLineWidth;\n\n        // FIXME Aliasing\n        if (d <= outlineMaxValue1 && d >= outlineMinValue0) {\n            float a = _strokeColor.a;\n            if (d <= outlineMinValue1) {\n                a = a * smoothstep(outlineMinValue0, outlineMinValue1, d);\n            }\n            else {\n                a = a * smoothstep(outlineMaxValue1, outlineMaxValue0, d);\n            }\n            gl_FragColor.rgb = mix(gl_FragColor.rgb * gl_FragColor.a, _strokeColor.rgb, a);\n            gl_FragColor.a = gl_FragColor.a * (1.0 - a) + a;\n        }\n    }\n#endif\n\n#ifdef SRGB_DECODE\n    gl_FragColor = sRGBToLinear(gl_FragColor);\n#endif\n\n    if (gl_FragColor.a == 0.0) {\n        discard;\n    }\n}\n@end"

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(194);

	__webpack_require__(195);
	__webpack_require__(199);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'lines3D'
	));


	echarts.registerAction({
	    type: 'lines3DPauseEffect',
	    event: 'lines3deffectpaused',
	    update: 'series.lines3D:pauseEffect'
	}, function () {});

	echarts.registerAction({
	    type: 'lines3DResumeEffect',
	    event: 'lines3deffectresumed',
	    update: 'series.lines3D:resumeEffect'
	}, function () {});

	echarts.registerAction({
	    type: 'lines3DToggleEffect',
	    event: 'lines3deffectchanged',
	    update: 'series.lines3D:toggleEffect'
	}, function () {});

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var glmatrix = __webpack_require__(15);
	var vec3 = glmatrix.vec3;

	function layoutGlobe(seriesModel, coordSys) {
	    var data = seriesModel.getData();
	    var isPolyline = seriesModel.get('polyline');

	    var normal = vec3.create();
	    var tangent = vec3.create();
	    var bitangent = vec3.create();
	    var halfVector = vec3.create();

	    data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');

	    data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var coords = (itemModel.option instanceof Array) ?
	            itemModel.option : itemModel.getShallow('coords', true);

	        if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
	            throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
	        }

	        var pts = [];
	        // if (isPolyline) {

	        // }
	        // else {
	            var p0 = pts[0] = vec3.create();
	            var p1 = pts[1] = vec3.create();
	            var p2 = pts[2] = vec3.create();
	            var p3 = pts[3] = vec3.create();
	            coordSys.dataToPoint(coords[0], p0);
	            coordSys.dataToPoint(coords[1], p3);
	            // Get p1
	            vec3.normalize(normal, p0);
	            // TODO p0-p3 is parallel with normal
	            vec3.sub(tangent, p3, p0);
	            vec3.normalize(tangent, tangent);
	            vec3.cross(bitangent, tangent, normal);
	            vec3.normalize(bitangent, bitangent);
	            vec3.cross(tangent, normal, bitangent);
	            // p1 is half vector of p0 and tangent on p0
	            vec3.add(p1, normal, tangent);
	            vec3.normalize(p1, p1);

	            // Get p2
	            vec3.normalize(normal, p3);
	            vec3.sub(tangent, p0, p3);
	            vec3.normalize(tangent, tangent);
	            vec3.cross(bitangent, tangent, normal);
	            vec3.normalize(bitangent, bitangent);
	            vec3.cross(tangent, normal, bitangent);
	            // p2 is half vector of p3 and tangent on p3
	            vec3.add(p2, normal, tangent);
	            vec3.normalize(p2, p2);

	            // Project distance of p0 on halfVector
	            vec3.add(halfVector, p0, p3);
	            vec3.normalize(halfVector, halfVector);
	            var projDist = vec3.dot(p0, halfVector);
	            // Angle of halfVector and p1
	            var cosTheta = vec3.dot(halfVector, p1);
	            var len = (coordSys.radius - projDist) / cosTheta * 2;

	            vec3.scaleAndAdd(p1, p0, p1, len);
	            vec3.scaleAndAdd(p2, p3, p2, len);
	        // }

	        data.setItemLayout(idx, pts);
	    });
	}

	function layoutGeo3D(seriesModel, coordSys) {
	    var data = seriesModel.getData();
	    var isPolyline = seriesModel.get('polyline');

	    data.setLayout('lineType', isPolyline ? 'polyline' : 'cubicBezier');

	    var normal = [];

	    // TODO, different region may have different height.
	    // var regionHeight = coordSys.size[1];

	    data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var coords = (itemModel.option instanceof Array) ?
	            itemModel.option : itemModel.getShallow('coords', true);

	        if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
	            throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
	        }

	        var pts = [];

	        var p0 = pts[0] = vec3.create();
	        var p1 = pts[1] = vec3.create();
	        var p2 = pts[2] = vec3.create();
	        var p3 = pts[3] = vec3.create();


	        coordSys.dataToPoint(coords[0], p0);
	        coordSys.dataToPoint(coords[1], p3);

	        var len = vec3.dist(p0, p3);
	        vec3.lerp(p1, p0, p3, 0.3);
	        vec3.lerp(p2, p0, p3, 0.3);
	        vec3.set(normal, 0, 1, 0);
	        vec3.scaleAndAdd(p1, p1, normal, Math.min(len * 0.1, 10));
	        vec3.scaleAndAdd(p2, p2, normal, Math.min(len * 0.1, 10));

	        data.setItemLayout(idx, pts);
	    });
	}

	echarts.registerLayout(function (ecModel, api) {
	    ecModel.eachSeriesByType('lines3D', function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys.type === 'globe') {
	            layoutGlobe(seriesModel, coordSys);
	        }
	        else if (coordSys.type === 'geo3D') {
	            layoutGeo3D(seriesModel, coordSys);
	        }
	    });
	});

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var LinesGeometry = __webpack_require__(99);
	var CurveAnimatingPointsMesh = __webpack_require__(196);

	graphicGL.Shader.import(__webpack_require__(110));

	function getCoordSysSize(coordSys) {
	    if (coordSys.radius != null) {
	        return coordSys.radius;
	    }
	    if (coordSys.size != null) {
	        return Math.max(coordSys.size[0], coordSys.size[1], coordSys.size[2]);
	    }
	    else {
	        return 100;
	    }
	}

	module.exports = echarts.extendChartView({

	    type: 'lines3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {
	        this.groupGL = new graphicGL.Node();

	        this._nativeLinesMaterial = new graphicGL.Material({
	            shader: graphicGL.createShader('ecgl.lines3D'),
	            transparent: true,
	            depthMask: false
	        });

	        this._projectedLinesMaterial = new graphicGL.Material({
	            shader: graphicGL.createShader('ecgl.meshLines3D'),
	            transparent: true,
	            depthMask: false
	        });
	        this._linesMesh = new graphicGL.Mesh({
	            geometry: new LinesGeometry()
	        });

	        this._curveAnimatingPointsMesh = new CurveAnimatingPointsMesh();
	    },

	    render: function (seriesModel, ecModel, api) {

	        this.groupGL.add(this._linesMesh);

	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();

	        if (coordSys && coordSys.viewGL) {
	            var viewGL = coordSys.viewGL;
	            viewGL.add(this.groupGL);

	            if (data.getLayout('lineType') === 'cubicBezier') {
	                this._generateBezierCurves(seriesModel, ecModel, api);
	            }

	            var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'unDefine';
	            this._linesMesh.material.shader[methodName]('fragment', 'SRGB_DECODE');
	        }

	        var curveAnimatingPointsMesh = this._curveAnimatingPointsMesh;
	        curveAnimatingPointsMesh.stopAnimation();

	        if (seriesModel.get('effect.show')) {
	            this.groupGL.add(curveAnimatingPointsMesh);

	            curveAnimatingPointsMesh.setScale(getCoordSysSize(coordSys));
	            curveAnimatingPointsMesh.setData(data, api);

	            var period = seriesModel.get('effect.period') * 1000;
	            var delay = curveAnimatingPointsMesh.__percent ? -(period * curveAnimatingPointsMesh.__percent) : 0;
	            curveAnimatingPointsMesh.__percent = 0;
	            this._curveEffectsAnimator = curveAnimatingPointsMesh.animate('', { loop: true })
	                .when(period, {
	                    __percent: 1
	                })
	                .delay(delay)
	                .during(function () {
	                    curveAnimatingPointsMesh.setAnimationPercent(curveAnimatingPointsMesh.__percent);
	                })
	                .start();
	        }
	        else {
	            this.groupGL.remove(curveAnimatingPointsMesh);
	            this._curveEffectsAnimator = null;
	        }

	        this._linesMesh.material.blend = this._curveAnimatingPointsMesh.material.blend
	            = seriesModel.get('blendMode') === 'lighter'
	            ? graphicGL.additiveBlend : null;
	    },

	    puaseEffect: function () {
	        if (this._curveEffectsAnimator) {
	            this._curveEffectsAnimator.pause();
	        }
	    },

	    resumeEffect: function () {
	        if (this._curveEffectsAnimator) {
	            this._curveEffectsAnimator.resume();
	        }
	    },

	    toggleEffect: function () {
	        var animator = this._curveEffectsAnimator;
	        if (animator) {
	            animator.isPaused() ? animator.resume() : animator.pause();
	        }
	    },

	    _generateBezierCurves: function (seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;
	        var geometry = this._linesMesh.geometry;

	        geometry.expandLine = true;

	        var size = getCoordSysSize(coordSys);
	        geometry.segmentScale = size / 20;

	        var lineWidthQueryPath = 'lineStyle.width'.split('.');
	        var dpr = api.getDevicePixelRatio();
	        var canUseNativeLine = true;
	        var maxLineWidth = 0;
	        data.each(function (idx) {
	            var itemModel = data.getItemModel(idx);
	            var lineWidth = itemModel.get(lineWidthQueryPath);
	            if (lineWidth == null) {
	                lineWidth = 1;
	            }
	            data.setItemVisual(idx, 'lineWidth', lineWidth);
	            maxLineWidth = Math.max(lineWidth, maxLineWidth);
	        });
	        var canUseNativeLine = maxLineWidth * dpr <= 1;
	        // Must set useNativeLine before calling any other methods
	        geometry.useNativeLine = canUseNativeLine;

	        var nVertex = 0;
	        var nTriangle = 0;
	        data.each(function (idx) {
	            var pts = data.getItemLayout(idx);
	            nVertex += geometry.getCubicCurveVertexCount(pts[0], pts[1], pts[2], pts[3]);
	            nTriangle += geometry.getCubicCurveTriangleCount(pts[0], pts[1], pts[2], pts[3]);
	        });

	        this._linesMesh.material = canUseNativeLine ? this._nativeLinesMaterial : this._projectedLinesMaterial;
	        this._linesMesh.mode = canUseNativeLine ? graphicGL.Mesh.LINES : graphicGL.Mesh.TRIANGLES;

	        geometry.setVertexCount(nVertex);
	        geometry.setTriangleCount(nTriangle);
	        geometry.resetOffset();

	        var colorArr = [];
	        data.each(function (idx) {
	            var pts = data.getItemLayout(idx);
	            var color = data.getItemVisual(idx, 'color');
	            var opacity = data.getItemVisual(idx, 'opacity');
	            var lineWidth = data.getItemVisual(idx, 'lineWidth') * dpr;
	            if (opacity == null) {
	                opacity = 1;
	            }

	            colorArr = graphicGL.parseColor(color, colorArr);
	            colorArr[3] *= opacity;

	            geometry.addCubicCurve(pts[0], pts[1], pts[2], pts[3], colorArr, lineWidth);
	        });

	        geometry.dirty();
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	    }
	});

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var spriteUtil = __webpack_require__(189);

	var CurveAnimatingPointsGeometry = __webpack_require__(197);

	graphicGL.Shader.import(__webpack_require__(198));

	module.exports = graphicGL.Mesh.extend(function () {

	    var material = new graphicGL.Material({
	        shader: new graphicGL.Shader({
	            vertex: graphicGL.Shader.source('ecgl.curveAnimatingPoints.vertex'),
	            fragment: graphicGL.Shader.source('ecgl.curveAnimatingPoints.fragment')
	        }),
	        transparent: true,
	        depthMask: false
	    });
	    material.shader.enableTexture('sprite');
	    var texture = new graphicGL.Texture2D({
	        image: document.createElement('canvas')
	    });
	    material.set('sprite', texture);

	    return {
	        geometry: new CurveAnimatingPointsGeometry({
	            dynamic: true
	        }),
	        material: material,

	        mode: graphicGL.Mesh.POINTS,

	        _spriteTexture: texture
	    };
	}, {

	    setData: function (data, api) {
	        var seriesModel = data.hostModel;
	        var geometry = this.geometry;

	        var effectModel = seriesModel.getModel('effect');
	        var symbolType = effectModel.get('symbol');
	        var size = effectModel.get('symbolSize') * api.getDevicePixelRatio();

	        spriteUtil.createSymbolSprite(symbolType, size, {
	            fill: '#fff'
	        }, this._spriteTexture.image);
	        this._spriteTexture.dirty();

	        geometry.reset();

	        var vertexCount = 0;
	        data.each(function (idx) {
	            var pts = data.getItemLayout(idx);
	            vertexCount += geometry.getPointVertexCount(pts[0], pts[1], pts[2], pts[3]);
	        });
	        geometry.setVertexCount(vertexCount);

	        var colorArr = [];
	        data.each(function (idx) {
	            var pts = data.getItemLayout(idx);
	            var opacity = data.getItemVisual(idx, 'opacity');
	            var color = data.getItemVisual(idx, 'color');

	            if (opacity == null) {
	                opacity = 1;
	            }
	            colorArr = graphicGL.parseColor(color, colorArr);
	            colorArr[3] *= opacity;

	            geometry.addPoint(pts[0], pts[1], pts[2], pts[3], size, colorArr);
	        });

	        geometry.dirty();
	    },

	    setScale: function (scale) {
	        this.geometry.scale = scale;
	    },

	    setAnimationPercent: function (percent) {
	        this.material.set('percent', percent);
	    }
	});

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Geometry colleting cloud points data
	 * Points will move on a cubic curve path
	 *
	 * @module echarts-gl/chart/lines3D/CurveAnimatingPointsGeometry
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var StaticGeometry = __webpack_require__(35);
	var vec3 = __webpack_require__(15).vec3;

	/**
	 * @constructor
	 * @alias module:echarts-gl/chart/lines3D/CurveAnimatingPointsGeometry
	 * @extends qtek.StaticGeometry
	 */
	var CurveAnimatingPointsGeometry = StaticGeometry.derive(function () {
	    return {
	        attributes: {
	            p0: new StaticGeometry.Attribute('p0', 'float', 3, ''),
	            p1: new StaticGeometry.Attribute('p1', 'float', 3, ''),
	            p2: new StaticGeometry.Attribute('p2', 'float', 3, ''),
	            p3: new StaticGeometry.Attribute('p3', 'float', 3, ''),
	            offset: new StaticGeometry.Attribute('offset', 'float', 1, ''),
	            size: new StaticGeometry.Attribute('size', 'float', 1, ''),
	            color: new StaticGeometry.Attribute('color', 'float', 4, 'COLOR')
	        },
	        mainAttribute: 'p0',

	        scale: 1,

	        _offset: 0
	    };
	},
	/** @lends module:echarts-gl/chart/lines3D/CurveAnimatingPointsGeometry.prototype */
	{

	    reset: function () {
	        this._offset = 0;
	    },

	    setVertexCount: function (vertexCount) {
	        if (this.vertexCount !== vertexCount) {
	            for (var name in this.attributes) {
	                this.attributes[name].init(vertexCount);
	            }
	        }
	    },

	    /**
	     * Get vertex count of cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @return number
	     */
	    getPointVertexCount: function (p0, p1, p2, p3) {
	        var len = vec3.dist(p0, p1) + vec3.dist(p2, p1) + vec3.dist(p3, p2);
	        // TODO Consider time
	        var count = Math.max(Math.min(Math.round((len + 1) / this.scale * 40), 15), 5);
	        return count;
	    },
	    /**
	     * Add a point
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @param {number} size
	     * @param {Array.<number>} color
	     */
	    addPoint: function (p0, p1, p2, p3, size, color) {
	        var attributes = this.attributes;
	        var offset = Math.random();
	        var count = this.getPointVertexCount(p0, p1, p2, p3);
	        for (var i = 0; i < count; i++) {
	            attributes.p0.set(this._offset, p0);
	            attributes.p1.set(this._offset, p1);
	            attributes.p2.set(this._offset, p2);
	            attributes.p3.set(this._offset, p3);
	            attributes.offset.set(this._offset, offset);
	            attributes.size.set(this._offset, size * i / count);
	            attributes.color.set(this._offset++, color);
	            // PENDING
	            offset += 0.004;
	        }
	    }
	});

	module.exports = CurveAnimatingPointsGeometry;

/***/ },
/* 198 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.curveAnimatingPoints.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform float percent : 0.0;\n\nattribute vec3 p0;\nattribute vec3 p1;\nattribute vec3 p2;\nattribute vec3 p3;\nattribute vec4 color : COLOR;\n\nattribute float offset;\nattribute float size;\n\nvarying vec4 v_Color;\n\nvoid main()\n{\n    float t = mod(offset + percent, 1.0);\n    float onet = 1.0 - t;\n    vec3 position = onet * onet * (onet * p0 + 3.0 * t * p1)\n        + t * t * (t * p3 + 3.0 * onet * p2);\n\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n\n    gl_PointSize = size;\n\n    v_Color = color;\n}\n\n@end\n\n@export ecgl.curveAnimatingPoints.fragment\n\nvarying vec4 v_Color;\n\nuniform sampler2D sprite;\n\nvoid main()\n{\n    gl_FragColor = v_Color;\n\n#ifdef SPRITE_ENABLED\n    gl_FragColor *= texture2D(sprite, gl_PointCoord);\n#endif\n\n}\n@end"

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	echarts.extendSeriesModel({

	    type: 'series.lines3D',

	    dependencies: ['globe'],

	    visualColorAccessPath: 'lineStyle.color',

	    getInitialData: function (option, ecModel) {
	        var lineData = new echarts.List(['value'], this);
	        lineData.hasItemOption = false;
	        lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
	            // dataItem is simply coords
	            if (dataItem instanceof Array) {
	                return NaN;
	            }
	            else {
	                lineData.hasItemOption = true;
	                var value = dataItem.value;
	                if (value != null) {
	                    return value instanceof Array ? value[dimIndex] : value;
	                }
	            }
	        });

	        return lineData;
	    },

	    defaultOption: {

	        coordinateSystem: 'globe',

	        globeIndex: 0,

	        geo3DIndex: 0,

	        zlevel: -10,

	        polyline: false,

	        effect: {
	            symbol: 'circle',
	            show: false,
	            period: 4,
	            symbolSize: 4
	        },

	        silent: true,

	        // Support source-over, lighter
	        blendMode: 'source-over',

	        lineStyle: {
	            width: 1,
	            opacity: 0.5
	            // color
	        }
	    }
	});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(201);
	__webpack_require__(202);
	__webpack_require__(203);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'surface'
	));


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var componentShadingMixin = __webpack_require__(153);

	var SurfaceSeries = echarts.extendSeriesModel({

	    type: 'series.surface',

	    dependencies: ['globe', 'grid3D', 'geo3D'],

	    visualColorAccessPath: 'areaStyle.color',

	    getInitialData: function (option, ecModel) {
	        var data = option.data;

	        function validateDimension(dimOpts) {
	            return !(isNaN(dimOpts.min) || isNaN(dimOpts.max) || isNaN(dimOpts.step));
	        }

	        function getPrecision(dimOpts) {
	            var getPrecision = echarts.number.getPrecisionSafe;
	            return Math.max(
	                getPrecision(dimOpts.min), getPrecision(dimOpts.max), getPrecision(dimOpts.step)
	            ) + 1;
	        }

	        if (!data) {
	            data = [];

	            if (!option.parametric) {
	                // From surface equation
	                var surfaceEquation = option.surfaceEquation || {};
	                var xOpts = surfaceEquation.x || {};
	                var yOpts = surfaceEquation.y || {};

	                ['x', 'y'].forEach(function (dim) {
	                    if (!validateDimension(surfaceEquation[dim])) {
	                        if (true) {
	                            console.error('Invalid surfaceEquation.%s', dim);
	                        }
	                        return;
	                    }
	                });
	                if (typeof surfaceEquation.z !== 'function') {
	                    if (true) {
	                        console.error('surfaceEquation.z needs to be function');
	                    }
	                    return;
	                }
	                var xPrecision = getPrecision(xOpts);
	                var yPrecision = getPrecision(yOpts);
	                for (var y = yOpts.min; y < yOpts.max + yOpts.step * 0.999; y += yOpts.step) {
	                    for (var x = xOpts.min; x < xOpts.max + xOpts.step * 0.999; x += xOpts.step) {
	                        var x2 = echarts.number.round(Math.min(x, xOpts.max), xPrecision);
	                        var y2 = echarts.number.round(Math.min(y, yOpts.max), yPrecision);
	                        var z = surfaceEquation.z(x2, y2);
	                        data.push([x2, y2, z]);
	                    }
	                }
	            }
	            else {
	                var parametricSurfaceEquation = option.parametricSurfaceEquation || {};
	                var uOpts = parametricSurfaceEquation.u || {};
	                var vOpts = parametricSurfaceEquation.v || {};

	                ['u', 'v'].forEach(function (dim) {
	                    if (!validateDimension(parametricSurfaceEquation[dim])) {
	                        if (true) {
	                            console.error('Invalid parametricSurfaceEquation.%s', dim);
	                        }
	                        return;
	                    }
	                });
	                ['x', 'y', 'z'].forEach(function (dim) {
	                    if (typeof parametricSurfaceEquation[dim] !== 'function') {
	                        if (true) {
	                            console.error('parametricSurfaceEquation.%s needs to be function', dim);
	                        }
	                        return;
	                    }
	                });

	                var uPrecision = getPrecision(uOpts);
	                var vPrecision = getPrecision(vOpts);
	                // TODO array intermediate storage is needless.
	                for (var v = vOpts.min; v < vOpts.max + vOpts.step * 0.999; v += vOpts.step) {
	                    for (var u = uOpts.min; u < uOpts.max + uOpts.step * 0.999; u += uOpts.step) {
	                        var u2 = echarts.number.round(Math.min(u, uOpts.max), uPrecision);
	                        var v2 = echarts.number.round(Math.min(v, vOpts.max), vPrecision);
	                        var x = parametricSurfaceEquation.x(u2, v2);
	                        var y = parametricSurfaceEquation.y(u2, v2);
	                        var z = parametricSurfaceEquation.z(u2, v2);
	                        data.push([x, y, z, u2, v2]);
	                    }
	                }
	            }
	        }

	        var dims = ['x', 'y', 'z'];
	        if (option.parametric) {
	            dims.push('u', 'v');
	        }
	        dims = echarts.helper.completeDimensions(dims, option.data);

	        var list = new echarts.List(dims, this);
	        list.initData(data);

	        return list;
	    },

	    defaultOption: {
	        coordinateSystem: 'cartesian3D',
	        zlevel: -10,

	        // Cartesian coordinate system
	        grid3DIndex: 0,

	        // Surface needs lambert shading to show the difference
	        shading: 'lambert',

	        // If parametric surface
	        parametric: false,

	        wireframe: {
	            show: true,

	            lineStyle: {
	                color: '#222',
	                width: 1
	            }
	        },
	        /**
	         * Generate surface data from z = f(x, y) equation
	         */
	        surfaceEquation: {
	            // [min, max, step]
	            x: {
	                min: -1,
	                max: 1,
	                step: 0.1
	            },
	            y: {
	                min: -1,
	                max: 1,
	                step: 0.1
	            },
	            z: null
	        },

	        parametricSurfaceEquation: {
	            // [min, max, step]
	            u: {
	                min: -1,
	                max: 1,
	                step: 0.1
	            },
	            v: {
	                min: -1,
	                max: 1,
	                step: 0.1
	            },
	            // [x, y, z] = f(x, y)
	            x: null,
	            y: null,
	            z: null
	        },

	        areaStyle: {
	            // Color
	        }
	    }
	});

	echarts.util.merge(SurfaceSeries.prototype, componentShadingMixin);

	module.exports = SurfaceSeries;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var retrieve = __webpack_require__(69);
	var vec3 = __webpack_require__(15).vec3;
	var trianglesSortMixin = __webpack_require__(159);

	function isPointsNaN(pt) {
	    return isNaN(pt[0]) || isNaN(pt[1]) || isNaN(pt[2]);
	}

	echarts.extendChartView({

	    type: 'surface',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this.groupGL = new graphicGL.Node();

	        var materials = {};
	        graphicGL.COMMON_SHADERS.forEach(function (shading) {
	            materials[shading] = new graphicGL.Material({
	                shader: graphicGL.createShader('ecgl.' + shading)
	            });
	            materials[shading].shader.define('both', 'VERTEX_COLOR');
	            materials[shading].shader.define('fragment', 'DOUBLE_SIDE');
	        });

	        this._materials = materials;

	        var mesh = new graphicGL.Mesh({
	            geometry: new graphicGL.Geometry({
	                dynamic: true,
	                sortTriangles: true
	            }),
	            material: materials.lambert,
	            culling: false,

	            // Render after axes
	            renderOrder: 10
	        });
	        mesh.geometry.createAttribute('barycentric', 'float', 4, null),

	        echarts.util.extend(mesh.geometry, trianglesSortMixin);

	        this._surfaceMesh = mesh;

	        // TODO Cross mesh.
	        // this._pointerMesh = new graphicGL.Mesh({
	        // });
	    },

	    render: function (seriesModel, ecModel, api) {
	        this.groupGL.add(this._surfaceMesh);

	        var coordSys = seriesModel.coordinateSystem;
	        var shading = seriesModel.get('shading');
	        var data = seriesModel.getData();

	        if (this._materials[shading]) {
	            this._surfaceMesh.material = this._materials[shading];
	        }
	        else {
	            if (true) {
	                console.error('Unkown shading %s', shading);
	            }
	            this._surfaceMesh.material = this._materials.lambert;
	        }

	        graphicGL.setMaterialFromModel(
	            shading, this._surfaceMesh.material, seriesModel, api
	        );

	        if (coordSys && coordSys.viewGL) {
	            coordSys.viewGL.add(this.groupGL);
	            var methodName = coordSys.viewGL.isLinearSpace() ? 'define' : 'unDefine';
	            this._surfaceMesh.material.shader[methodName]('fragment', 'SRGB_DECODE');
	        }

	        var isParametric = seriesModel.get('parametric');

	        var dataShape = this._getDataShape(data, isParametric);

	        var wireframeModel = seriesModel.getModel('wireframe');
	        var wireframeLineWidth = wireframeModel.get('lineStyle.width');
	        var showWireframe = wireframeModel.get('show') && wireframeLineWidth > 0;
	        this._updateSurfaceMesh(this._surfaceMesh, seriesModel, dataShape, showWireframe);

	        var material = this._surfaceMesh.material;
	        if (showWireframe) {
	            material.shader.define('WIREFRAME_QUAD');
	            material.set('wireframeLineWidth', wireframeLineWidth);
	            material.set('wireframeLineColor', graphicGL.parseColor(wireframeModel.get('lineStyle.color')).slice(0, 3));
	        }
	        else {
	            material.shader.unDefine('WIREFRAME_QUAD');
	        }

	        this._initHandler(seriesModel, api);
	    },

	    _initHandler: function (seriesModel, api) {
	        var data = seriesModel.getData();
	        var surfaceMesh = this._surfaceMesh;

	        var coordSys = seriesModel.coordinateSystem;
	        var isCartesian3D = coordSys.type === 'cartesian3D';

	        function getNearestPointIdx(triangle, point) {
	            var nearestDist = Infinity;
	            var nearestIdx = -1;
	            var pos = [];
	            for (var i = 0; i < triangle.length; i++) {
	                surfaceMesh.geometry.attributes.position.get(triangle[i], pos);
	                var dist = vec3.dist(point._array, pos);
	                if (dist < nearestDist) {
	                    nearestDist = dist;
	                    nearestIdx = triangle[i];
	                }
	            }
	            return nearestIdx;
	        }

	        var lastDataIndex = -1;

	        surfaceMesh.off('mousemove');
	        surfaceMesh.off('mouseout');
	        surfaceMesh.on('mousemove', function (e) {
	            if (isCartesian3D) {
	                var idx = getNearestPointIdx(e.triangle, e.point);
	                if (idx >= 0) {
	                    var point = [];
	                    surfaceMesh.geometry.attributes.position.get(idx, point);
	                    var value = coordSys.pointToData(point);
	                    api.dispatchAction({
	                        type: 'grid3DShowAxisPointer',
	                        value: value
	                    });
	                    var dataIdx = data.indexOfNearest('z', value[2]);
	                }
	            }
	        });
	        surfaceMesh.on('mouseout', function (e) {
	            lastDataIndex = -1;

	            if (isCartesian3D) {
	                api.dispatchAction({
	                    type: 'grid3DHideAxisPointer'
	                });
	            }
	        });
	    },

	    _updateSurfaceMesh: function (surfaceMesh, seriesModel, dataShape, showWireframe) {

	        var geometry = surfaceMesh.geometry;
	        var data = seriesModel.getData();
	        var pointsArr = data.getLayout('points');

	        var invalidDataCount = 0;
	        data.each(function (idx) {
	            if (!data.hasValue(idx)) {
	                invalidDataCount++;
	            }
	        });
	        var needsSplitQuad = invalidDataCount || showWireframe;

	        var positionAttr = geometry.attributes.position;
	        var normalAttr = geometry.attributes.normal;
	        var texcoordAttr = geometry.attributes.texcoord0;
	        var barycentricAttr = geometry.attributes.barycentric;
	        var colorAttr = geometry.attributes.color;
	        var row = dataShape.row;
	        var column = dataShape.column;
	        var shading = seriesModel.get('shading');
	        var needsNormal = shading !== 'color';

	        if (needsSplitQuad) {
	            // TODO, If needs remove the invalid points, or set color transparent.
	            var vertexCount = (row - 1) * (column - 1) * 4;
	            positionAttr.init(vertexCount);
	            if (showWireframe) {
	                barycentricAttr.init(vertexCount);
	            }
	        }
	        else {
	            positionAttr.value = new Float32Array(pointsArr);
	        }
	        colorAttr.init(geometry.vertexCount);
	        texcoordAttr.init(geometry.vertexCount);

	        var quadToTriangle = [0, 3, 1, 1, 3, 2];
	        // 3----2
	        // 0----1
	        // Make sure pixels on 1---3 edge will not have all channel 0.
	        // And pixels on four edges have at least one channel 0.
	        var quadBarycentric = [
	            [1, 1, 0, 0],
	            [0, 0, 1, 1],
	            [1, 0, 0, 1],
	            [1, 1, 0, 0]
	        ];

	        var indices = geometry.indices = new (geometry.vertexCount > 0xffff ? Uint32Array : Uint16Array)((row - 1) * (column - 1) * 6);
	        var getQuadIndices = function (i, j, out) {
	            out[1] = i * column + j;
	            out[0] = i * column + j + 1;
	            out[3] = (i + 1) * column + j + 1;
	            out[2] = (i + 1) * column + j;
	        };

	        var isTransparent = false;

	        if (needsSplitQuad) {
	            var quadIndices = [];
	            var pos = [];
	            var faceOffset = 0;

	            if (needsNormal) {
	                normalAttr.init(geometry.vertexCount);
	            }
	            else {
	                normalAttr.value = null;
	            }

	            var pts = [[], [], []];
	            var v21 = [], v32 = [];
	            var normal = vec3.create();

	            var getFromArray = function (arr, idx, out) {
	                var idx3 = idx * 3;
	                out[0] = arr[idx3];
	                out[1] = arr[idx3 + 1];
	                out[2] = arr[idx3 + 2];
	                return out;
	            };
	            var vertexNormals = new Float32Array(pointsArr.length);
	            var vertexColors = new Float32Array(pointsArr.length / 3 * 4);

	            for (var i = 0; i < data.count(); i++) {
	                if (data.hasValue(i)) {
	                    var rgbaArr = graphicGL.parseColor(data.getItemVisual(i, 'color'));
	                    var opacity = data.getItemVisual(i, 'opacity');
	                    rgbaArr[3] *= opacity;
	                    if (rgbaArr[3] < 0.99) {
	                        isTransparent = true;
	                    }
	                    for (var k = 0; k < 4; k++) {
	                        vertexColors[i * 4 + k] = rgbaArr[k];
	                    }
	                }
	            }
	            var farPoints = [1e7, 1e7, 1e7];
	            for (var i = 0; i < row - 1; i++) {
	                for (var j = 0; j < column - 1; j++) {
	                    var dataIndex = i * (column - 1) + j;
	                    var vertexOffset = dataIndex * 4;

	                    getQuadIndices(i, j, quadIndices);

	                    var invisibleQuad = false;
	                    for (var k = 0; k < 4; k++) {
	                        getFromArray(pointsArr, quadIndices[k], pos);
	                        if (isPointsNaN(pos)) {
	                            // Quad is invisible if any point is NaN
	                            invisibleQuad = true;
	                        }
	                    }

	                    for (var k = 0; k < 4; k++) {
	                        if (invisibleQuad) {
	                            // Move point far away
	                            positionAttr.set(vertexOffset + k, farPoints);
	                        }
	                        else {
	                            getFromArray(pointsArr, quadIndices[k], pos);
	                            positionAttr.set(vertexOffset + k, pos);
	                        }
	                        if (showWireframe) {
	                            barycentricAttr.set(vertexOffset + k, quadBarycentric[k]);
	                        }
	                    }
	                    for (var k = 0; k < 6; k++) {
	                        indices[faceOffset++] = quadToTriangle[k] + vertexOffset;
	                    }
	                    // Vertex normals
	                    if (needsNormal && !invisibleQuad) {
	                        for (var k = 0; k < 2; k++) {
	                            var k3 = k * 3;

	                            for (var m = 0; m < 3; m++) {
	                                var idx = quadIndices[quadToTriangle[k3] + m];
	                                getFromArray(pointsArr, idx, pts[m]);
	                            }

	                            vec3.sub(v21, pts[0], pts[1]);
	                            vec3.sub(v32, pts[1], pts[2]);
	                            vec3.cross(normal, v21, v32);
	                            // Weighted by the triangle area
	                            for (var m = 0; m < 3; m++) {
	                                var idx3 = quadIndices[quadToTriangle[k3] + m] * 3;
	                                vertexNormals[idx3] = vertexNormals[idx3] + normal[0];
	                                vertexNormals[idx3 + 1] = vertexNormals[idx3 + 1] + normal[1];
	                                vertexNormals[idx3 + 2] = vertexNormals[idx3 + 2] + normal[2];
	                            }
	                        }
	                    }

	                }
	            }
	            if (needsNormal) {
	                for (var i = 0; i < vertexNormals.length / 3; i++) {
	                    getFromArray(vertexNormals, i, normal);
	                    vec3.normalize(normal, normal);
	                    vertexNormals[i * 3] = normal[0];
	                    vertexNormals[i * 3 + 1] = normal[1];
	                    vertexNormals[i * 3 + 2] = normal[2];
	                }
	            }
	            // Split normal and colors, write to the attributes.
	            var rgbaArr = [];
	            var uvArr = [];
	            for (var i = 0; i < row - 1; i++) {
	                for (var j = 0; j < column - 1; j++) {
	                    var dataIndex = i * (column - 1) + j;
	                    var vertexOffset = dataIndex * 4;

	                    getQuadIndices(i, j, quadIndices);
	                    for (var k = 0; k < 4; k++) {
	                        for (var m = 0; m < 4; m++) {
	                            rgbaArr[m] = vertexColors[quadIndices[k] * 4 + m];
	                        }
	                        colorAttr.set(vertexOffset + k, rgbaArr);

	                        if (needsNormal) {
	                            getFromArray(vertexNormals, quadIndices[k], normal);
	                            normalAttr.set(vertexOffset + k, normal);
	                        }

	                        var idx = quadIndices[k];
	                        uvArr[0] = (idx % row) / (row - 1);
	                        uvArr[1] = Math.floor(idx / column) / (column - 1);
	                        texcoordAttr.set(vertexOffset + k, uvArr);
	                    }
	                    dataIndex++;
	                }
	            }
	        }
	        else {
	            var uvArr = [];
	            for (var i = 0; i < data.count(); i++) {
	                uvArr[0] = (i % row) / (row - 1);
	                uvArr[1] = Math.floor(i / column) / (column - 1);
	                var rgbaArr = graphicGL.parseColor(data.getItemVisual(i, 'color'));
	                var opacity = data.getItemVisual(i, 'opacity');
	                rgbaArr[3] *= opacity;
	                if (rgbaArr[3] < 0.99) {
	                    isTransparent = true;
	                }
	                colorAttr.set(i, rgbaArr);
	                texcoordAttr.set(i, uvArr);
	            }
	            var quadIndices = [];
	            // Triangles
	            var cursor = 0;
	            for (var i = 0; i < row - 1; i++) {
	                for (var j = 0; j < column - 1; j++) {

	                    getQuadIndices(i, j, quadIndices);

	                    for (var k = 0; k < 6; k++) {
	                        indices[cursor++] = quadIndices[quadToTriangle[k]];
	                    }
	                }
	            }
	            if (needsNormal) {
	                geometry.generateVertexNormals();
	            }
	            else {
	                normalAttr.value = null;
	            }
	        }


	        geometry.updateBoundingBox();
	        geometry.dirty();

	        surfaceMesh.material.transparent = isTransparent;
	        surfaceMesh.material.depthMask = !isTransparent;
	    },

	    _getDataShape: function (data, isParametric) {

	        var prevX = -Infinity;
	        var rowCount = 0;
	        var columnCount = 0;
	        var prevColumnCount = 0;

	        var rowDim = isParametric ? 'u' : 'x';

	        // Check data format
	        for (var i = 0; i < data.count(); i++) {
	            var x = data.get(rowDim, i);
	            if (x < prevX) {
	                if (prevColumnCount && prevColumnCount !== columnCount) {
	                    if (true) {
	                        throw new Error('Invalid data. data should be a row major 2d array.')
	                    }
	                }
	                // A new row.
	                prevColumnCount = columnCount;
	                columnCount = 0;
	                rowCount++;
	            }
	            prevX = x;
	            columnCount++;
	        }

	        return {
	            row: rowCount + 1,
	            column: columnCount
	        };
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	    }
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	echarts.registerLayout(function (ecModel, api) {
	    ecModel.eachSeriesByType('surface', function (surfaceModel) {
	        var cartesian = surfaceModel.coordinateSystem;
	        if (!cartesian || cartesian.type !== 'cartesian3D') {
	            if (true) {
	                console.error('Surface chart only support cartesian3D coordinateSystem');
	            }
	        }
	        var data = surfaceModel.getData();
	        var points = new Float32Array(3 * data.count());
	        var nanPoint = [NaN, NaN, NaN];
	        if (cartesian && cartesian.type === 'cartesian3D') {
	            data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	                var pt;
	                if (!data.hasValue(idx)) {
	                    pt = nanPoint;
	                }
	                else {
	                    pt = cartesian.dataToPoint([x, y, z]);
	                }
	                points[idx * 3] = pt[0];
	                points[idx * 3 + 1] = pt[1];
	                points[idx * 3 + 2] = pt[2];
	            });
	        }
	        data.setLayout('points', points);
	    });
	});

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(205);
	__webpack_require__(206);

	__webpack_require__(162);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'map3D'
	));

	echarts.registerAction({
	    type: 'map3DChangeCamera',
	    event: 'map3dcamerachanged',
	    update: 'series:updateCamera'
	}, function (payload, ecModel) {
	    ecModel.eachComponent({
	        mainType: 'series', subType: 'map3D', query: payload
	    }, function (componentModel) {
	        componentModel.setView(payload);
	    });
	});

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var componentViewControlMixin = __webpack_require__(94);
	var componentPostEffectMixin = __webpack_require__(95);
	var componentLightMixin = __webpack_require__(96);
	var componentShadingMixin = __webpack_require__(153);
	var geo3DModelMixin = __webpack_require__(154);
	var formatUtil = __webpack_require__(178);

	var Map3DModel = echarts.extendSeriesModel({

	    type: 'series.map3D',

	    layoutMode: 'box',

	    coordinateSystem: null,

	    getInitialData: function (option) {
	        option.data = this.getFilledRegions(option.data, option.map);

	        var dimensions = echarts.helper.completeDimensions(['value'], option.data);
	        var list = new echarts.List(dimensions, this);
	        list.initData(option.data);

	        var regionModelMap = {};
	        list.each(function (idx) {
	            var name = list.getName(idx);
	            var itemModel = list.getItemModel(idx);
	            regionModelMap[name] = itemModel;
	        });

	        this._regionModelMap = regionModelMap;

	        return list;
	    },

	    getRegionModel: function (name) {
	        return this._regionModelMap[name] || new echarts.Model(null, this);
	    },

	    /**
	     * Format label
	     * @param {string} name Region name
	     * @param {string} [status='normal'] 'normal' or 'emphasis'
	     * @return {string}
	     */
	    getFormattedLabel: function (dataIndex, status) {
	        var text = formatUtil.getFormattedLabel(this, dataIndex, status);
	        if (text == null) {
	            text = this.getData().getName(dataIndex);
	        }
	        return text;
	    },

	    defaultOption: {

	        // itemStyle: {},
	        // height,
	        // label: {}
	        data: null
	    }
	});

	echarts.util.merge(Map3DModel.prototype, geo3DModelMixin);

	echarts.util.merge(Map3DModel.prototype, componentViewControlMixin);
	echarts.util.merge(Map3DModel.prototype, componentPostEffectMixin);
	echarts.util.merge(Map3DModel.prototype, componentLightMixin);
	echarts.util.merge(Map3DModel.prototype, componentShadingMixin);

	module.exports = Map3DModel;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	var graphicGL = __webpack_require__(31);
	var OrbitControl = __webpack_require__(98);
	var LightHelper = __webpack_require__(102);
	var Geo3DBuilder = __webpack_require__(156);

	module.exports = echarts.extendChartView({

	    type: 'map3D',

	    __ecgl__: true,

	    init: function (ecModel, api) {
	        this._geo3DBuilder = new Geo3DBuilder(api);
	        this.groupGL = new graphicGL.Node();

	        this._lightHelper = new LightHelper(this.groupGL);

	        this._control = new OrbitControl({
	            zr: api.getZr()
	        });
	        this._control.init();
	    },

	    render: function (map3DModel, ecModel, api) {
	        this.groupGL.add(this._geo3DBuilder.rootNode);

	        var geo3D = map3DModel.coordinateSystem;

	        if (!geo3D || !geo3D.viewGL) {
	            return;
	        }
	        geo3D.viewGL.add(this.groupGL);

	        var control = this._control;
	        control.setCamera(geo3D.viewGL.camera);

	        var viewControlModel = map3DModel.getModel('viewControl');
	        control.setFromViewControlModel(viewControlModel, 0);

	        this._lightHelper.updateLight(map3DModel);

	        // Set post effect
	        geo3D.viewGL.setPostEffect(map3DModel.getModel('postEffect'));
	        geo3D.viewGL.setTemporalSuperSampling(map3DModel.getModel('temporalSuperSampling'));

	        // Must update after geo3D.viewGL.setPostEffect
	        this._geo3DBuilder.update(map3DModel, ecModel, api);

	        control.off('update');
	        control.on('update', function () {
	                api.dispatchAction({
	                    type: 'map3DChangeCamera',
	                    alpha: control.getAlpha(),
	                    beta: control.getBeta(),
	                    distance: control.getDistance(),
	                    from: this.uid,
	                    map3DId: map3DModel.id
	                });
	            });
	    },

	    afterRender: function (map3DModel, ecModel, api, layerGL) {
	        var renderer = layerGL.renderer;
	        this._lightHelper.updateAmbientCubemap(renderer, map3DModel, api);
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	        this._control.dispose();
	    }
	});

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(208);
	__webpack_require__(209);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(184), 'scatterGL', 'circle', null
	));

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'scatterGL'
	));

	echarts.registerLayout(function (ecModel, api) {
	    ecModel.eachSeriesByType('scatterGL', function (seriesModel) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;

	        if (coordSys) {
	            var dims = coordSys.dimensions;
	            var points = new Float32Array(data.count() * 2);
	            if (dims.length === 1) {
	                data.each(dims[0], function (x, idx) {
	                    var pt = coordSys.dataToPoint(x);
	                    points[idx * 2] = pt[0];
	                    points[idx * 2 + 1] = pt[1];
	                });
	            }
	            else if (dims.length === 2) {
	                var item = [];
	                data.each(dims, function (x, y, idx) {
	                    item[0] = x;
	                    item[1] = y;

	                    var pt = coordSys.dataToPoint(item);
	                    points[idx * 2] = pt[0];
	                    points[idx * 2 + 1] = pt[1];
	                });
	            }

	            data.setLayout('points', points);
	        }
	    });
	});

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	echarts.extendSeriesModel({

	    type: 'series.scatterGL',

	    dependencies: ['grid', 'polar', 'geo', 'singleAxis'],

	    visualColorAccessPath: 'itemStyle.color',

	    getInitialData: function () {
	        return echarts.helper.createList(this);
	    },

	    defaultOption: {
	        coordinateSystem: 'cartesian2d',
	        zlevel: 10,

	        // Cartesian coordinate system
	        // xAxisIndex: 0,
	        // yAxisIndex: 0,

	        // Polar coordinate system
	        // polarIndex: 0,

	        // Geo coordinate system
	        // geoIndex: 0,

	        symbol: 'circle',
	        symbolSize: 10,

	        // Support source-over, lighter
	        blendMode: 'source-over',

	        itemStyle: {
	            opacity: 0.8
	        }

	    }
	});

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var ViewGL = __webpack_require__(122);

	var PointsBuilder = __webpack_require__(188);

	echarts.extendChartView({

	    type: 'scatterGL',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this.groupGL = new graphicGL.Node();
	        this.viewGL = new ViewGL('orthographic');

	        this.viewGL.add(this.groupGL);

	        this._pointsBuilder = new PointsBuilder(true, api);
	    },

	    render: function (seriesModel, ecModel, api) {
	        this.groupGL.add(this._pointsBuilder.rootNode);

	        this._updateCamera(api.getWidth(), api.getHeight(), api.getDevicePixelRatio());

	        this._pointsBuilder.update(seriesModel, ecModel, api);
	    },

	    updateLayout: function (seriesModel, ecModel, api) {
	        this._pointsBuilder.updateLayout(seriesModel, ecModel, api);
	    },

	    _updateCamera: function (width, height, dpr) {
	        this.viewGL.setViewport(0, 0, width, height, dpr);
	        var camera = this.viewGL.camera;
	        camera.left = camera.top = 0;
	        camera.bottom = height;
	        camera.right = width;
	        camera.near = 0;
	        camera.far = 100;
	    },

	    dispose: function () {
	        this.groupGL.removeAll();
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	    }
	});

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);

	__webpack_require__(211);
	__webpack_require__(215);

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(184), 'graphGL', 'circle', null
	));

	echarts.registerVisual(echarts.util.curry(
	    __webpack_require__(179), 'graphGL'
	));

	echarts.registerVisual(function (ecModel) {
	    var paletteScope = {};
	    ecModel.eachSeriesByType('graphGL', function (seriesModel) {
	        var categoriesData = seriesModel.getCategoriesData();
	        var data = seriesModel.getData();

	        var categoryNameIdxMap = {};

	        categoriesData.each(function (idx) {
	            var name = categoriesData.getName(idx);
	            categoryNameIdxMap[name] = idx;

	            var itemModel = categoriesData.getItemModel(idx);
	            var color = itemModel.get('itemStyle.color')
	                || seriesModel.getColorFromPalette(name, paletteScope);
	            categoriesData.setItemVisual(idx, 'color', color);
	        });

	        // Assign category color to visual
	        if (categoriesData.count()) {
	            data.each(function (idx) {
	                var model = data.getItemModel(idx);
	                var category = model.getShallow('category');
	                if (category != null) {
	                    if (typeof category === 'string') {
	                        category = categoryNameIdxMap[category];
	                    }
	                    if (!data.getItemVisual(idx, 'color', true)) {
	                        data.setItemVisual(
	                            idx, 'color',
	                            categoriesData.getItemVisual(category, 'color')
	                        );
	                    }
	                }
	            });
	        }
	    });
	});

	echarts.registerVisual(function (ecModel) {
	    ecModel.eachSeriesByType('graphGL', function (seriesModel) {
	        var graph = seriesModel.getGraph();
	        var edgeData = seriesModel.getEdgeData();

	        var colorQuery = 'lineStyle.color'.split('.');
	        var opacityQuery = 'lineStyle.opacity'.split('.');

	        edgeData.setVisual('color', seriesModel.get(colorQuery));
	        edgeData.setVisual('opacity', seriesModel.get(opacityQuery));

	        edgeData.each(function (idx) {
	            var itemModel = edgeData.getItemModel(idx);
	            var edge = graph.getEdgeByIndex(idx);
	            // Edge visual must after node visual
	            var color = itemModel.get(colorQuery);
	            var opacity = itemModel.get(opacityQuery);
	            switch (color) {
	                case 'source':
	                    color = edge.node1.getVisual('color');
	                    break;
	                case 'target':
	                    color = edge.node2.getVisual('color');
	                    break;
	            }

	            edge.setVisual('color', color);
	            edge.setVisual('opacity', opacity);
	        });
	    });
	});

	echarts.registerAction({
	    type: 'graphGLRoam',
	    event: 'graphglroam',
	    update: 'series.graphGL:roam'
	}, function (payload, ecModel) {
	    ecModel.eachComponent({
	        mainType: 'series', query: payload
	    }, function (componentModel) {
	        componentModel.setView(payload);
	    });
	});

	echarts.registerAction({
	    type: 'graphGLStartLayout',
	    event: 'graphgllayoutstarted',
	    update: 'series.graphGL:startLayout'
	}, function () {});

	echarts.registerAction({
	    type: 'graphGLStopLayout',
	    event: 'graphgllayoutstopped',
	    update: 'series.graphGL:stopLayout'
	}, function () {});

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var createGraphFromNodeEdge = __webpack_require__(212);

	var GraphSeries = echarts.extendSeriesModel({

	    type: 'series.graphGL',

	    visualColorAccessPath: 'itemStyle.color',

	    init: function (option) {
	        GraphSeries.superApply(this, 'init', arguments);

	        // Provide data for legend select
	        this.legendDataProvider = function () {
	            return this._categoriesData;
	        };

	        this._updateCategoriesData();
	    },

	    mergeOption: function (option) {
	        GraphSeries.superApply(this, 'mergeOption', arguments);

	        this._updateCategoriesData();
	    },

	    getInitialData: function (option, ecModel) {
	        var edges = option.edges || option.links || [];
	        var nodes = option.data || option.nodes || [];
	        var self = this;

	        if (nodes && edges) {
	            return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;
	        }

	        function beforeLink(nodeData, edgeData) {
	            // Overwrite nodeData.getItemModel to
	            nodeData.wrapMethod('getItemModel', function (model) {
	                var categoriesModels = self._categoriesModels;
	                var categoryIdx = model.getShallow('category');
	                var categoryModel = categoriesModels[categoryIdx];
	                if (categoryModel) {
	                    categoryModel.parentModel = model.parentModel;
	                    model.parentModel = categoryModel;
	                }
	                return model;
	            });

	            var edgeLabelModel = self.getModel('edgeLabel');
	            // For option `edgeLabel` can be found by label.xxx.xxx on item mode.
	            var fakeSeriesModel = new echarts.Model(
	                { label: edgeLabelModel.option },
	                edgeLabelModel.parentModel,
	                ecModel
	            );

	            edgeData.wrapMethod('getItemModel', function (model) {
	                model.customizeGetParent(edgeGetParent);
	                return model;
	            });

	            function edgeGetParent(path) {
	                path = this.parsePath(path);
	                return (path && path[0] === 'label')
	                    ? fakeSeriesModel
	                    : this.parentModel;
	            }
	        }
	    },

	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    getGraph: function () {
	        return this.getData().graph;
	    },

	    /**
	     * @return {module:echarts/data/List}
	     */
	    getEdgeData: function () {
	        return this.getGraph().edgeData;
	    },

	    /**
	     * @return {module:echarts/data/List}
	     */
	    getCategoriesData: function () {
	        return this._categoriesData;
	    },

	    /**
	     * @override
	     */
	    formatTooltip: function (dataIndex, multipleSeries, dataType) {
	        if (dataType === 'edge') {
	            var nodeData = this.getData();
	            var params = this.getDataParams(dataIndex, dataType);
	            var edge = nodeData.graph.getEdgeByIndex(dataIndex);
	            var sourceName = nodeData.getName(edge.node1.dataIndex);
	            var targetName = nodeData.getName(edge.node2.dataIndex);

	            var html = [];
	            sourceName != null && html.push(sourceName);
	            targetName != null && html.push(targetName);
	            html = echarts.format.encodeHTML(html.join(' > '));

	            if (params.value) {
	                html += ' : ' + echarts.format.encodeHTML(params.value);
	            }
	            return html;
	        }
	        else { // dataType === 'node' or empty
	            return GraphSeries.superApply(this, 'formatTooltip', arguments);
	        }
	    },

	    _updateCategoriesData: function () {
	        var categories = (this.option.categories || []).map(function (category) {
	            // Data must has value
	            return category.value != null ? category : echarts.util.extend({
	                value: 0
	            }, category);
	        });
	        var categoriesData = new echarts.List(['value'], this);
	        categoriesData.initData(categories);

	        this._categoriesData = categoriesData;

	        this._categoriesModels = categoriesData.mapArray(function (idx) {
	            return categoriesData.getItemModel(idx, true);
	        });
	    },

	    setView: function (payload) {
	        if (payload.zoom != null) {
	            this.option.zoom = payload.zoom;
	        }
	        if (payload.offset != null) {
	            this.option.offset = payload.offset;
	        }
	    },

	    isAnimationEnabled: function () {
	        return GraphSeries.superCall(this, 'isAnimationEnabled')
	            // Not enable animation when do force layout
	            && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));
	    },

	    defaultOption: {
	        zlevel: 0,
	        z: 2,

	        legendHoverLink: true,

	        // Only support forceAtlas2
	        layout: 'forceAtlas2',

	        // Configuration of force directed layout
	        forceAtlas2: {
	            initLayout: null,

	            steps: 1,

	            // Stop threshold, 0 never stop.
	            stopThreshold: 2,

	            repulsionByDegree: true,
	            linLogMode: false,
	            strongGravityMode: false,
	            gravity: 1.0,
	            scaling: 1.0,

	            edgeWeightInfluence: 1.0,

	            // Edge weight range.
	            edgeWeight: [1, 4],
	            // Node weight range.
	            nodeWeight: [1, 4],

	            jitterTolerence: 0.1,
	            preventOverlap: false,
	            gravityCenter: null
	        },

	        focusNodeAdjacency: false,

	        left: 'center',
	        top: 'center',
	        // right: null,
	        // bottom: null,
	        // width: '80%',
	        // height: '80%',

	        symbol: 'circle',
	        symbolSize: 5,

	        roam: false,

	        // Default on center of graph
	        center: null,

	        zoom: 1,

	        // categories: [],

	        // data: []
	        // Or
	        // nodes: []
	        //
	        // links: []
	        // Or
	        // edges: []

	        label: {
	            show: false,
	            formatter: '{b}',
	            position: 'right'
	        },

	        itemStyle: {},

	        lineStyle: {
	            color: '#aaa',
	            width: 1,
	            opacity: 0.5
	        },

	        emphasis: {
	            label: {
	                show: true
	            }
	        }
	    }
	});

	module.exports = GraphSeries;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var Graph = __webpack_require__(213);
	var linkList = __webpack_require__(214);
	var retrieve = __webpack_require__(69);

	module.exports = function (nodes, edges, hostModel, directed, beforeLink) {
	    var graph = new Graph(directed);
	    for (var i = 0; i < nodes.length; i++) {
	        graph.addNode(retrieve.firstNotNull(
	            // Id, name, dataIndex
	            nodes[i].id, nodes[i].name, i
	        ), i);
	    }

	    var linkNameList = [];
	    var validEdges = [];
	    var linkCount = 0;
	    for (var i = 0; i < edges.length; i++) {
	        var link = edges[i];
	        var source = link.source;
	        var target = link.target;
	        // addEdge may fail when source or target not exists
	        if (graph.addEdge(source, target, linkCount)) {
	            validEdges.push(link);
	            linkNameList.push(retrieve.firstNotNull(link.id, source + ' > ' + target));
	            linkCount++;
	        }
	    }

	    var nodeData;

	    // FIXME, support more coordinate systems.
	    var dimensionNames = echarts.helper.completeDimensions(
	        ['value'], nodes
	    );
	    nodeData = new echarts.List(dimensionNames, hostModel);
	    nodeData.initData(nodes);

	    var edgeData = new echarts.List(['value'], hostModel);
	    edgeData.initData(validEdges, linkNameList);

	    beforeLink && beforeLink(nodeData, edgeData);

	    linkList({
	        mainData: nodeData,
	        struct: graph,
	        structAttr: 'graph',
	        datas: {node: nodeData, edge: edgeData},
	        datasAttr: {node: 'data', edge: 'edgeData'}
	    });

	    // Update dataIndex of nodes and edges because invalid edge may be removed
	    graph.update();

	    return graph;
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Graph data structure
	 *
	 * @module echarts/data/Graph
	 * @author Yi Shen(https://www.github.com/pissang)
	 */


	    var zrUtil = __webpack_require__(75);

	    /**
	     * @alias module:echarts/data/Graph
	     * @constructor
	     * @param {boolean} directed
	     */
	    var Graph = function(directed) {
	        /**
	         * 是否是有向图
	         * @type {boolean}
	         * @private
	         */
	        this._directed = directed || false;

	        /**
	         * @type {Array.<module:echarts/data/Graph.Node>}
	         * @readOnly
	         */
	        this.nodes = [];

	        /**
	         * @type {Array.<module:echarts/data/Graph.Edge>}
	         * @readOnly
	         */
	        this.edges = [];

	        /**
	         * @type {Object.<string, module:echarts/data/Graph.Node>}
	         * @private
	         */
	        this._nodesMap = {};
	        /**
	         * @type {Object.<string, module:echarts/data/Graph.Edge>}
	         * @private
	         */
	        this._edgesMap = {};

	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.data;

	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.edgeData;
	    };

	    var graphProto = Graph.prototype;
	    /**
	     * @type {string}
	     */
	    graphProto.type = 'graph';

	    /**
	     * If is directed graph
	     * @return {boolean}
	     */
	    graphProto.isDirected = function () {
	        return this._directed;
	    };

	    /**
	     * Add a new node
	     * @param {string} id
	     * @param {number} [dataIndex]
	     */
	    graphProto.addNode = function (id, dataIndex) {
	        id = id || ('' + dataIndex);

	        var nodesMap = this._nodesMap;

	        if (nodesMap[id]) {
	            return;
	        }

	        var node = new Node(id, dataIndex);
	        node.hostGraph = this;

	        this.nodes.push(node);

	        nodesMap[id] = node;
	        return node;
	    };

	    /**
	     * Get node by data index
	     * @param  {number} dataIndex
	     * @return {module:echarts/data/Graph~Node}
	     */
	    graphProto.getNodeByIndex = function (dataIndex) {
	        var rawIdx = this.data.getRawIndex(dataIndex);
	        return this.nodes[rawIdx];
	    };
	    /**
	     * Get node by id
	     * @param  {string} id
	     * @return {module:echarts/data/Graph.Node}
	     */
	    graphProto.getNodeById = function (id) {
	        return this._nodesMap[id];
	    };

	    /**
	     * Add a new edge
	     * @param {number|string|module:echarts/data/Graph.Node} n1
	     * @param {number|string|module:echarts/data/Graph.Node} n2
	     * @param {number} [dataIndex=-1]
	     * @return {module:echarts/data/Graph.Edge}
	     */
	    graphProto.addEdge = function (n1, n2, dataIndex) {
	        var nodesMap = this._nodesMap;
	        var edgesMap = this._edgesMap;

	        // PNEDING
	        if (typeof n1 === 'number') {
	            n1 = this.nodes[n1];
	        }
	        if (typeof n2 === 'number') {
	            n2 = this.nodes[n2];
	        }

	        if (!(n1 instanceof Node)) {
	            n1 = nodesMap[n1];
	        }
	        if (!(n2 instanceof Node)) {
	            n2 = nodesMap[n2];
	        }
	        if (!n1 || !n2) {
	            return;
	        }

	        var key = n1.id + '-' + n2.id;
	        // PENDING
	        if (edgesMap[key]) {
	            return;
	        }

	        var edge = new Edge(n1, n2, dataIndex);
	        edge.hostGraph = this;

	        if (this._directed) {
	            n1.outEdges.push(edge);
	            n2.inEdges.push(edge);
	        }
	        n1.edges.push(edge);
	        if (n1 !== n2) {
	            n2.edges.push(edge);
	        }

	        this.edges.push(edge);
	        edgesMap[key] = edge;

	        return edge;
	    };

	    /**
	     * Get edge by data index
	     * @param  {number} dataIndex
	     * @return {module:echarts/data/Graph~Node}
	     */
	    graphProto.getEdgeByIndex = function (dataIndex) {
	        var rawIdx = this.edgeData.getRawIndex(dataIndex);
	        return this.edges[rawIdx];
	    };
	    /**
	     * Get edge by two linked nodes
	     * @param  {module:echarts/data/Graph.Node|string} n1
	     * @param  {module:echarts/data/Graph.Node|string} n2
	     * @return {module:echarts/data/Graph.Edge}
	     */
	    graphProto.getEdge = function (n1, n2) {
	        if (n1 instanceof Node) {
	            n1 = n1.id;
	        }
	        if (n2 instanceof Node) {
	            n2 = n2.id;
	        }

	        var edgesMap = this._edgesMap;

	        if (this._directed) {
	            return edgesMap[n1 + '-' + n2];
	        } else {
	            return edgesMap[n1 + '-' + n2]
	                || edgesMap[n2 + '-' + n1];
	        }
	    };

	    /**
	     * Iterate all nodes
	     * @param  {Function} cb
	     * @param  {*} [context]
	     */
	    graphProto.eachNode = function (cb, context) {
	        var nodes = this.nodes;
	        var len = nodes.length;
	        for (var i = 0; i < len; i++) {
	            if (nodes[i].dataIndex >= 0) {
	                cb.call(context, nodes[i], i);
	            }
	        }
	    };

	    /**
	     * Iterate all edges
	     * @param  {Function} cb
	     * @param  {*} [context]
	     */
	    graphProto.eachEdge = function (cb, context) {
	        var edges = this.edges;
	        var len = edges.length;
	        for (var i = 0; i < len; i++) {
	            if (edges[i].dataIndex >= 0
	                && edges[i].node1.dataIndex >= 0
	                && edges[i].node2.dataIndex >= 0
	            ) {
	                cb.call(context, edges[i], i);
	            }
	        }
	    };

	    /**
	     * Breadth first traverse
	     * @param {Function} cb
	     * @param {module:echarts/data/Graph.Node} startNode
	     * @param {string} [direction='none'] 'none'|'in'|'out'
	     * @param {*} [context]
	     */
	    graphProto.breadthFirstTraverse = function (
	        cb, startNode, direction, context
	    ) {
	        if (!(startNode instanceof Node)) {
	            startNode = this._nodesMap[startNode];
	        }
	        if (!startNode) {
	            return;
	        }

	        var edgeType = direction === 'out'
	            ? 'outEdges' : (direction === 'in' ? 'inEdges' : 'edges');

	        for (var i = 0; i < this.nodes.length; i++) {
	            this.nodes[i].__visited = false;
	        }

	        if (cb.call(context, startNode, null)) {
	            return;
	        }

	        var queue = [startNode];
	        while (queue.length) {
	            var currentNode = queue.shift();
	            var edges = currentNode[edgeType];

	            for (var i = 0; i < edges.length; i++) {
	                var e = edges[i];
	                var otherNode = e.node1 === currentNode
	                    ? e.node2 : e.node1;
	                if (!otherNode.__visited) {
	                    if (cb.call(otherNode, otherNode, currentNode)) {
	                        // Stop traversing
	                        return;
	                    }
	                    queue.push(otherNode);
	                    otherNode.__visited = true;
	                }
	            }
	        }
	    };

	    // TODO
	    // graphProto.depthFirstTraverse = function (
	    //     cb, startNode, direction, context
	    // ) {

	    // };

	    // Filter update
	    graphProto.update = function () {
	        var data = this.data;
	        var edgeData = this.edgeData;
	        var nodes = this.nodes;
	        var edges = this.edges;

	        for (var i = 0, len = nodes.length; i < len; i++) {
	            nodes[i].dataIndex = -1;
	        }
	        for (var i = 0, len = data.count(); i < len; i++) {
	            nodes[data.getRawIndex(i)].dataIndex = i;
	        }

	        edgeData.filterSelf(function (idx) {
	            var edge = edges[edgeData.getRawIndex(idx)];
	            return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
	        });

	        // Update edge
	        for (var i = 0, len = edges.length; i < len; i++) {
	            edges[i].dataIndex = -1;
	        }
	        for (var i = 0, len = edgeData.count(); i < len; i++) {
	            edges[edgeData.getRawIndex(i)].dataIndex = i;
	        }
	    };

	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    graphProto.clone = function () {
	        var graph = new Graph(this._directed);
	        var nodes = this.nodes;
	        var edges = this.edges;
	        for (var i = 0; i < nodes.length; i++) {
	            graph.addNode(nodes[i].id, nodes[i].dataIndex);
	        }
	        for (var i = 0; i < edges.length; i++) {
	            var e = edges[i];
	            graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
	        }
	        return graph;
	    };


	    /**
	     * @alias module:echarts/data/Graph.Node
	     */
	    function Node(id, dataIndex) {
	        /**
	        * @type {string}
	        */
	        this.id = id == null ? '' : id;

	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.inEdges = [];
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.outEdges = [];
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.edges = [];
	        /**
	         * @type {module:echarts/data/Graph}
	         */
	        this.hostGraph;

	        /**
	         * @type {number}
	         */
	        this.dataIndex = dataIndex == null ? -1 : dataIndex;
	    }

	    Node.prototype = {

	        constructor: Node,

	        /**
	         * @return {number}
	         */
	        degree: function () {
	            return this.edges.length;
	        },

	        /**
	         * @return {number}
	         */
	        inDegree: function () {
	            return this.inEdges.length;
	        },

	        /**
	        * @return {number}
	        */
	        outDegree: function () {
	            return this.outEdges.length;
	        },

	        /**
	         * @param {string} [path]
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path) {
	            if (this.dataIndex < 0) {
	                return;
	            }
	            var graph = this.hostGraph;
	            var itemModel = graph.data.getItemModel(this.dataIndex);

	            return itemModel.getModel(path);
	        }
	    };

	    /**
	     * 图边
	     * @alias module:echarts/data/Graph.Edge
	     * @param {module:echarts/data/Graph.Node} n1
	     * @param {module:echarts/data/Graph.Node} n2
	     * @param {number} [dataIndex=-1]
	     */
	    function Edge(n1, n2, dataIndex) {

	        /**
	         * 节点1，如果是有向图则为源节点
	         * @type {module:echarts/data/Graph.Node}
	         */
	        this.node1 = n1;

	        /**
	         * 节点2，如果是有向图则为目标节点
	         * @type {module:echarts/data/Graph.Node}
	         */
	        this.node2 = n2;

	        this.dataIndex = dataIndex == null ? -1 : dataIndex;
	    }

	    /**
	     * @param {string} [path]
	     * @return {module:echarts/model/Model}
	     */
	     Edge.prototype.getModel = function (path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var graph = this.hostGraph;
	        var itemModel = graph.edgeData.getItemModel(this.dataIndex);

	        return itemModel.getModel(path);
	    };

	    var createGraphDataProxyMixin = function (hostName, dataName) {
	        return {
	            /**
	             * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
	             * @return {number}
	             */
	            getValue: function (dimension) {
	                var data = this[hostName][dataName];
	                return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	            },

	            /**
	             * @param {Object|string} key
	             * @param {*} [value]
	             */
	            setVisual: function (key, value) {
	                this.dataIndex >= 0
	                    && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
	            },

	            /**
	             * @param {string} key
	             * @return {boolean}
	             */
	            getVisual: function (key, ignoreParent) {
	                return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
	            },

	            /**
	             * @param {Object} layout
	             * @return {boolean} [merge=false]
	             */
	            setLayout: function (layout, merge) {
	                this.dataIndex >= 0
	                    && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
	            },

	            /**
	             * @return {Object}
	             */
	            getLayout: function () {
	                return this[hostName][dataName].getItemLayout(this.dataIndex);
	            },

	            /**
	             * @return {module:zrender/Element}
	             */
	            getGraphicEl: function () {
	                return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
	            },

	            /**
	             * @return {number}
	             */
	            getRawIndex: function () {
	                return this[hostName][dataName].getRawIndex(this.dataIndex);
	            }
	        };
	    };

	    zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
	    zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));

	    Graph.Node = Node;
	    Graph.Edge = Edge;

	    module.exports = Graph;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Link lists and struct (graph or tree)
	 */


	    var zrUtil = __webpack_require__(75);
	    var each = zrUtil.each;

	    var DATAS = '\0__link_datas';
	    var MAIN_DATA = '\0__link_mainData';

	    // Caution:
	    // In most case, either list or its shallow clones (see list.cloneShallow)
	    // is active in echarts process. So considering heap memory consumption,
	    // we do not clone tree or graph, but share them among list and its shallow clones.
	    // But in some rare case, we have to keep old list (like do animation in chart). So
	    // please take care that both the old list and the new list share the same tree/graph.

	    /**
	     * @param {Object} opt
	     * @param {module:echarts/data/List} opt.mainData
	     * @param {Object} [opt.struct] For example, instance of Graph or Tree.
	     * @param {string} [opt.structAttr] designation: list[structAttr] = struct;
	     * @param {Object} [opt.datas] {dataType: data},
	     *                 like: {node: nodeList, edge: edgeList}.
	     *                 Should contain mainData.
	     * @param {Object} [opt.datasAttr] {dataType: attr},
	     *                 designation: struct[datasAttr[dataType]] = list;
	     */
	    function linkList(opt) {
	        var mainData = opt.mainData;
	        var datas = opt.datas;

	        if (!datas) {
	            datas = {main: mainData};
	            opt.datasAttr = {main: 'data'};
	        }
	        opt.datas = opt.mainData = null;

	        linkAll(mainData, datas, opt);

	        // Porxy data original methods.
	        each(datas, function (data) {
	            each(mainData.TRANSFERABLE_METHODS, function (methodName) {
	                data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));
	            });

	        });

	        // Beyond transfer, additional features should be added to `cloneShallow`.
	        mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt));

	        // Only mainData trigger change, because struct.update may trigger
	        // another changable methods, which may bring about dead lock.
	        each(mainData.CHANGABLE_METHODS, function (methodName) {
	            mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));
	        });

	        // Make sure datas contains mainData.
	        zrUtil.assert(datas[mainData.dataType] === mainData);
	    }

	    function transferInjection(opt, res) {
	        if (isMainData(this)) {
	            // Transfer datas to new main data.
	            var datas = zrUtil.extend({}, this[DATAS]);
	            datas[this.dataType] = res;
	            linkAll(res, datas, opt);
	        }
	        else {
	            // Modify the reference in main data to point newData.
	            linkSingle(res, this.dataType, this[MAIN_DATA], opt);
	        }
	        return res;
	    }

	    function changeInjection(opt, res) {
	        opt.struct && opt.struct.update(this);
	        return res;
	    }

	    function cloneShallowInjection(opt, res) {
	        // cloneShallow, which brings about some fragilities, may be inappropriate
	        // to be exposed as an API. So for implementation simplicity we can make
	        // the restriction that cloneShallow of not-mainData should not be invoked
	        // outside, but only be invoked here.
	        each(res[DATAS], function (data, dataType) {
	            data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
	        });
	        return res;
	    }

	    /**
	     * Supplement method to List.
	     *
	     * @public
	     * @param {string} [dataType] If not specified, return mainData.
	     * @return {module:echarts/data/List}
	     */
	    function getLinkedData(dataType) {
	        var mainData = this[MAIN_DATA];
	        return (dataType == null || mainData == null)
	            ? mainData
	            : mainData[DATAS][dataType];
	    }

	    function isMainData(data) {
	        return data[MAIN_DATA] === data;
	    }

	    function linkAll(mainData, datas, opt) {
	        mainData[DATAS] = {};
	        each(datas, function (data, dataType) {
	            linkSingle(data, dataType, mainData, opt);
	        });
	    }

	    function linkSingle(data, dataType, mainData, opt) {
	        mainData[DATAS][dataType] = data;
	        data[MAIN_DATA] = mainData;
	        data.dataType = dataType;

	        if (opt.struct) {
	            data[opt.structAttr] = opt.struct;
	            opt.struct[opt.datasAttr[dataType]] = data;
	        }

	        // Supplement method.
	        data.getLinkedData = getLinkedData;
	    }

	    module.exports = linkList;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var layoutUtil = __webpack_require__(115);
	var graphicGL = __webpack_require__(31);
	var ViewGL = __webpack_require__(122);
	var Lines2DGeometry = __webpack_require__(216);
	var retrieve = __webpack_require__(69);
	var ForceAtlas2GPU = __webpack_require__(217);
	var requestAnimationFrame = __webpack_require__(30);
	var vec2 = __webpack_require__(15).vec2;

	var Roam2DControl = __webpack_require__(219);

	var PointsBuilder = __webpack_require__(188);

	graphicGL.Shader.import(__webpack_require__(220));

	var globalLayoutId = 1;

	echarts.extendChartView({

	    type: 'graphGL',

	    __ecgl__: true,

	    init: function (ecModel, api) {

	        this.groupGL = new graphicGL.Node();
	        this.viewGL = new ViewGL('orthographic');

	        this.viewGL.add(this.groupGL);

	        this._pointsBuilder = new PointsBuilder(true, api);

	        // Mesh used during force directed layout.
	        this._forceEdgesMesh = new graphicGL.Mesh({
	            material: new graphicGL.Material({
	                shader: graphicGL.createShader('ecgl.forceAtlas2.edges'),
	                transparent: true,
	                depthMask: false,
	                depthTest: false
	            }),
	            geometry: new graphicGL.Geometry({
	                attributes: {
	                    node: new graphicGL.Geometry.Attribute('node', 'float', 2),
	                    color: new graphicGL.Geometry.Attribute('color', 'float', 4, 'COLOR')
	                },
	                dynamic: true,
	                mainAttribute: 'node'
	            }),
	            renderOrder: -1,
	            mode: graphicGL.Mesh.LINES
	        });

	        // Mesh used after force directed layout.
	        this._edgesMesh = new graphicGL.Mesh({
	            material: new graphicGL.Material({
	                shader: graphicGL.createShader('ecgl.meshLines2D'),
	                transparent: true,
	                depthMask: false,
	                depthTest: false
	            }),
	            geometry: new Lines2DGeometry({
	                useNativeLine: false,
	                dynamic: true
	            }),
	            culling: false
	        });

	        this._layoutId = 0;

	        this._control = new Roam2DControl({
	            zr: api.getZr(),
	            viewGL: this.viewGL
	        });
	        this._control.setTarget(this.groupGL);
	        this._control.init();
	    },

	    render: function (seriesModel, ecModel, api) {
	        this.groupGL.add(this._pointsBuilder.rootNode);

	        this._model = seriesModel;
	        this._api = api;

	        this._initLayout(seriesModel, ecModel, api);

	        this._pointsBuilder.update(seriesModel, ecModel, api);

	        this._updateForceNodesGeometry(seriesModel.getData());

	        if (!(this._forceLayoutInstance instanceof ForceAtlas2GPU)) {
	            this.groupGL.remove(this._forceEdgesMesh);
	        }

	        this._updateCamera(seriesModel, api);

	        this._control.off('update');
	        this._control.on('update', function () {
	                api.dispatchAction({
	                    type: 'graphGLRoam',
	                    seriesId: seriesModel.id,
	                    zoom: this._control.getZoom(),
	                    offset: this._control.getOffset()
	                });
	            }, this);

	        this._control.setZoom(retrieve.firstNotNull(seriesModel.get('zoom'), 1));
	        this._control.setOffset(seriesModel.get('offset') || [0, 0]);
	    },

	    _updateForceEdgesGeometry: function (edges, seriesModel) {
	        var geometry = this._forceEdgesMesh.geometry;

	        var edgeData = seriesModel.getEdgeData();
	        var offset = 0;
	        var layoutInstance = this._forceLayoutInstance;
	        var vertexCount = edgeData.count() * 2;
	        geometry.attributes.node.init(vertexCount);
	        geometry.attributes.color.init(vertexCount);
	        edgeData.each(function (idx) {
	            var edge = edges[idx];
	            geometry.attributes.node.set(offset, layoutInstance.getNodeUV(edge.node1));
	            geometry.attributes.node.set(offset + 1, layoutInstance.getNodeUV(edge.node2));

	            var color = edgeData.getItemVisual(edge.dataIndex, 'color');
	            var colorArr = graphicGL.parseColor(color);
	            colorArr[3] *= retrieve.firstNotNull(
	                edgeData.getItemVisual(edge.dataIndex, 'opacity'), 1
	            );
	            geometry.attributes.color.set(offset, colorArr);
	            geometry.attributes.color.set(offset + 1, colorArr);

	            offset += 2;
	        });
	        geometry.dirty();
	    },

	    _updateEdgesGeometry: function (edges) {

	        var geometry = this._edgesMesh.geometry;
	        var edgeData = this._model.getEdgeData();
	        var points = this._model.getData().getLayout('points');

	        geometry.resetOffset();
	        geometry.setVertexCount(edges.length * geometry.getLineVertexCount());
	        geometry.setTriangleCount(edges.length * geometry.getLineTriangleCount());

	        var p0 = [];
	        var p1 = [];

	        var lineWidthQuery = ['lineStyle', 'width'];
	        for (var i = 0; i < edges.length; i++) {
	            var edge = edges[i];
	            var idx1 = edge.node1 * 2;
	            var idx2 = edge.node2 * 2;
	            p0[0] = points[idx1];
	            p0[1] = points[idx1 + 1];
	            p1[0] = points[idx2];
	            p1[1] = points[idx2 + 1];

	            var color = edgeData.getItemVisual(i, 'color');
	            var colorArr = graphicGL.parseColor(color);
	            colorArr[3] *= retrieve.firstNotNull(
	                edgeData.getItemVisual(i, 'opacity'), 1
	            );
	            var itemModel = edgeData.getItemModel(i);
	            var lineWidth = retrieve.firstNotNull(itemModel.get(lineWidthQuery), 1) * this._api.getDevicePixelRatio();

	            geometry.addLine(p0, p1, colorArr, lineWidth);
	        }

	        geometry.dirty();
	    },

	    _updateForceNodesGeometry: function (nodeData) {
	        var pointsMesh = this._pointsBuilder.getPointsMesh();
	        var pos = [];
	        for (var i = 0; i < nodeData.count(); i++) {
	            pointsMesh.geometry.attributes.position.get(i, pos);
	            this._forceLayoutInstance.getNodeUV(i, pos);
	            pointsMesh.geometry.attributes.position.set(i, pos);
	        }
	        pointsMesh.geometry.dirty();
	    },

	    _initLayout: function (seriesModel, ecModel, api) {
	        var layout = seriesModel.get('layout');
	        var graph = seriesModel.getGraph();

	        var boxLayoutOption = seriesModel.getBoxLayoutParams();
	        var viewport = layoutUtil.getLayoutRect(boxLayoutOption, {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });

	        if (layout === 'force') {
	            if (true) {
	                console.warn('Currently only forceAtlas2 layout supported.');
	            }
	            layout = 'forceAtlas2';
	        }
	        // Stop previous layout
	        this.stopLayout();

	        var nodeData = seriesModel.getData();
	        var edgeData = seriesModel.getData();
	        if (layout === 'forceAtlas2') {
	            var layoutModel = seriesModel.getModel('forceAtlas2');
	            var layoutInstance = this._forceLayoutInstance;
	            var nodes = [];
	            var edges = [];

	            var nodeDataExtent = nodeData.getDataExtent('value');
	            var edgeDataExtent = edgeData.getDataExtent('value');

	            var edgeWeightRange = retrieve.firstNotNull(layoutModel.get('edgeWeight'), 1.0);
	            var nodeWeightRange = retrieve.firstNotNull(layoutModel.get('nodeWeight'), 1.0);
	            if (typeof edgeWeightRange === 'number') {
	                edgeWeightRange = [edgeWeightRange, edgeWeightRange];
	            }
	            if (typeof nodeWeightRange === 'number') {
	                nodeWeightRange = [nodeWeightRange, nodeWeightRange];
	            }

	            var offset = 0;
	            var nodesIndicesMap = {};

	            var layoutPoints = new Float32Array(nodeData.count() * 2);
	            graph.eachNode(function (node) {
	                var dataIndex = node.dataIndex;
	                var value = nodeData.get('value', dataIndex);
	                var x;
	                var y;
	                if (nodeData.hasItemOption) {
	                    var itemModel = nodeData.getItemModel(dataIndex);
	                    x = itemModel.get('x');
	                    y = itemModel.get('y');
	                }
	                if (x == null) {
	                    // Random in rectangle
	                    x = viewport.x + Math.random() * viewport.width;
	                    y = viewport.y + Math.random() * viewport.height;
	                }
	                layoutPoints[offset * 2] = x;
	                layoutPoints[offset * 2 + 1] = y;

	                nodesIndicesMap[node.id] = offset++;
	                var mass = echarts.number.linearMap(value, nodeDataExtent, nodeWeightRange);
	                if (isNaN(mass)) {
	                    mass = 1;
	                }
	                nodes.push({
	                    x: x, y: y, mass: mass
	                });
	            });
	            nodeData.setLayout('points', layoutPoints);

	            graph.eachEdge(function (edge) {
	                var dataIndex = edge.dataIndex;
	                var value = nodeData.get('value', dataIndex);
	                var weight = echarts.number.linearMap(value, edgeDataExtent, edgeWeightRange);
	                if (isNaN(weight)) {
	                    weight = 1;
	                }
	                edges.push({
	                    node1: nodesIndicesMap[edge.node1.id],
	                    node2: nodesIndicesMap[edge.node2.id],
	                    weight: weight
	                });
	            });
	            if (!layoutInstance) {
	                layoutInstance = this._forceLayoutInstance = new ForceAtlas2GPU();
	            }
	            layoutInstance.initData(nodes, edges);
	            layoutInstance.updateOption(layoutModel.option);

	            // Update lines geometry after first layout;
	            this._updateForceEdgesGeometry(layoutInstance.getEdges(), seriesModel);
	            this._updatePositionTexture();

	            api.dispatchAction({
	                type: 'graphGLStartLayout'
	            });
	        }
	        else {
	            var layoutPoints = new Float32Array(nodeData.count() * 2);
	            graph.eachNode(function (node) {
	                var dataIndex = node.dataIndex;
	                var x;
	                var y;
	                if (nodeData.hasItemOption) {
	                    var itemModel = nodeData.getItemModel(dataIndex);
	                    x = itemModel.get('x');
	                    y = itemModel.get('y');
	                }
	                layoutPoints[offset * 2] = x;
	                layoutPoints[offset * 2 + 1] = y;
	            });
	            nodeData.setLayout('points', layoutPoints);

	            // TODO
	        }
	    },

	    startLayout: function () {
	        var viewGL = this.viewGL;
	        var api = this._api;
	        var layoutInstance = this._forceLayoutInstance;
	        var layoutModel = this._model.getModel('forceAtlas2');

	        this.groupGL.remove(this._edgesMesh);
	        this.groupGL.add(this._forceEdgesMesh);

	        if (!this._forceLayoutInstance) {
	            return;
	        }

	        var self = this;
	        var layoutId = this._layoutId = globalLayoutId++;
	        var stopThreshold = layoutModel.getShallow('stopThreshold');
	        var steps = layoutModel.getShallow('steps');
	        var doLayout = function (layoutId) {
	            if (layoutId !== self._layoutId) {
	                return;
	            }
	            if (layoutInstance.isFinished(viewGL.layer.renderer, stopThreshold)) {
	                api.dispatchAction({
	                    type: 'graphGLStopLayout'
	                });
	                return;
	            }

	            for (var i = 0; i < steps; i++) {
	                layoutInstance.step(viewGL.layer.renderer);
	            }
	            self._updatePositionTexture();
	            // Position texture will been swapped. set every time.
	            api.getZr().refresh();

	            requestAnimationFrame(function () {
	                doLayout(layoutId);
	            });
	        };

	        requestAnimationFrame(function () {
	            doLayout(layoutId);
	        });
	    },

	    _updatePositionTexture: function () {
	        var positionTex = this._forceLayoutInstance.getNodePositionTexture();
	        this._pointsBuilder.setPositionTexture(positionTex);
	        this._forceEdgesMesh.material.set('positionTex', positionTex);
	    },

	    stopLayout: function () {
	        this._layoutId = 0;
	        this.groupGL.remove(this._forceEdgesMesh);
	        this.groupGL.add(this._edgesMesh);

	        if (!this._forceLayoutInstance) {
	            return;
	        }
	        var points = this._forceLayoutInstance.getNodePosition(this.viewGL.layer.renderer);

	        this._model.getData().setLayout('points', points);

	        this._updateEdgesGeometry(this._forceLayoutInstance.getEdges());
	    },

	    _updateCamera: function (seriesModel, api) {
	        this.viewGL.setViewport(0, 0, api.getWidth(), api.getHeight(), api.getDevicePixelRatio());
	        var camera = this.viewGL.camera;
	        var nodeData = seriesModel.getData();
	        var points = nodeData.getLayout('points');
	        var min = vec2.create(Infinity, Infinity);
	        var max = vec2.create(-Infinity, -Infinity);
	        var pt = [];
	        for (var i = 0; i < points.length;) {
	            pt[0] = points[i++];
	            pt[1] = points[i++];
	            vec2.min(min, min, pt);
	            vec2.max(max, max, pt);
	        }
	        // Scale a bit
	        var width = max[0] - min[0];
	        var height = max[1] - min[1];
	        width *= 1.4;
	        height *= 1.4;
	        min[0] -= width * 0.2;
	        min[1] -= height * 0.2;

	        camera.left = min[0];
	        camera.top = min[1];
	        camera.bottom = height + min[1];
	        camera.right = width + min[0];
	        camera.near = 0;
	        camera.far = 100;
	    },

	    dispose: function () {
	        var renderer = this.viewGL.layer.renderer;
	        if (this._forceLayoutInstance) {
	            this._forceLayoutInstance.dispose(renderer);
	        }
	        this.groupGL.removeAll();

	        this.stopLayout();
	    },

	    remove: function () {
	        this.groupGL.removeAll();
	        this._control.dispose();
	    }
	});

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Lines geometry
	 * Use screen space projected lines lineWidth > MAX_LINE_WIDTH
	 * https://mattdesl.svbtle.com/drawing-lines-is-hard
	 * @module echarts-gl/util/geometry/LinesGeometry
	 * @author Yi Shen(http://github.com/pissang)
	 */

	var StaticGeometry = __webpack_require__(35);
	var vec2 = __webpack_require__(15).vec2;
	var echarts = __webpack_require__(2);
	var dynamicConvertMixin = __webpack_require__(100);

	// var CURVE_RECURSION_LIMIT = 8;
	// var CURVE_COLLINEAR_EPSILON = 40;

	var sampleLinePoints = [[0, 0], [1, 1]];
	/**
	 * @constructor
	 * @alias module:echarts-gl/util/geometry/LinesGeometry
	 * @extends qtek.StaticGeometry
	 */

	var LinesGeometry = StaticGeometry.extend(function () {
	    return {

	        segmentScale: 4,

	        dynamic: true,
	        /**
	         * Need to use mesh to expand lines if lineWidth > MAX_LINE_WIDTH
	         */
	        useNativeLine: true,

	        attributes: {
	            position: new StaticGeometry.Attribute('position', 'float', 2, 'POSITION'),
	            normal: new StaticGeometry.Attribute('normal', 'float', 2),
	            offset: new StaticGeometry.Attribute('offset', 'float', 1),
	            color: new StaticGeometry.Attribute('color', 'float', 4, 'COLOR')
	        }
	    };
	},
	/** @lends module: echarts-gl/util/geometry/LinesGeometry.prototype */
	{

	    /**
	     * Reset offset
	     */
	    resetOffset: function () {
	        this._vertexOffset = 0;
	        this._faceOffset = 0;
	    },

	    /**
	     * @param {number} nVertex
	     */
	    setVertexCount: function (nVertex) {
	        var attributes = this.attributes;
	        if (this.vertexCount !== nVertex) {
	            attributes.position.init(nVertex);
	            attributes.color.init(nVertex);

	            if (!this.useNativeLine) {
	                attributes.offset.init(nVertex);
	                attributes.normal.init(nVertex);
	            }

	            if (nVertex > 0xffff) {
	                if (this.indices instanceof Uint16Array) {
	                    this.indices = new Uint32Array(this.indices);
	                }
	            }
	            else {
	                if (this.indices instanceof Uint32Array) {
	                    this.indices = new Uint16Array(this.indices);
	                }
	            }
	        }
	    },

	    /**
	     * @param {number} nTriangle
	     */
	    setTriangleCount: function (nTriangle) {
	        if (this.triangleCount !== nTriangle) {
	            if (nTriangle === 0) {
	                this.indices = null;
	            }
	            else {
	                this.indices = this.vertexCount > 0xffff ? new Uint32Array(nTriangle * 3) : new Uint16Array(nTriangle * 3);
	            }
	        }
	    },

	    _getCubicCurveApproxStep: function (p0, p1, p2, p3) {
	        var len = vec2.dist(p0, p1) + vec2.dist(p2, p1) + vec2.dist(p3, p2);
	        var step = 1 / (len + 1) * this.segmentScale;
	        return step;
	    },

	    /**
	     * Get vertex count of cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @return number
	     */
	    getCubicCurveVertexCount: function (p0, p1, p2, p3) {
	        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
	        var segCount = Math.ceil(1 / step);
	        if (!this.useNativeLine) {
	            return segCount * 2 + 2;
	        }
	        else {
	            return segCount * 2;
	        }
	    },

	    /**
	     * Get face count of cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @return number
	     */
	    getCubicCurveTriangleCount: function (p0, p1, p2, p3) {
	        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);
	        var segCount = Math.ceil(1 / step);
	        if (!this.useNativeLine) {
	            return segCount * 2;
	        }
	        else {
	            return 0;
	        }
	    },

	    /**
	     * Get vertex count of line
	     * @return {number}
	     */
	    getLineVertexCount: function () {
	        return this.getPolylineVertexCount(sampleLinePoints);
	    },

	    /**
	     * Get face count of line
	     * @return {number}
	     */
	    getLineTriangleCount: function () {
	        return this.getPolylineTriangleCount(sampleLinePoints);
	    },

	    getPolylineVertexCount: function (points) {
	        var is2DArray = typeof points[0] !== 'number';
	        var pointsLen = is2DArray ? points.length : (points.length / 2);
	        return !this.useNativeLine ? ((pointsLen - 1) * 2 + 2) : (pointsLen - 1) * 2;
	    },

	    getPolylineTriangleCount: function (points) {
	        var is2DArray = typeof points[0] !== 'number';
	        var pointsLen = is2DArray ? points.length : (points.length / 2);
	        return !this.useNativeLine ? (pointsLen - 1) * 2 : 0;
	    },

	    /**
	     * Add a cubic curve
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} p2
	     * @param {Array.<number>} p3
	     * @param {Array.<number>} color
	     * @param {number} [lineWidth=1]
	     */
	    addCubicCurve: function (p0, p1, p2, p3, color, lineWidth) {
	        if (lineWidth == null) {
	            lineWidth = 1;
	        }
	        // incremental interpolation
	        // http://antigrain.com/research/bezier_interpolation/index.html#PAGE_BEZIER_INTERPOLATION
	        var x0 = p0[0], y0 = p0[1];
	        var x1 = p1[0], y1 = p1[1];
	        var x2 = p2[0], y2 = p2[1];
	        var x3 = p3[0], y3 = p3[1];

	        var step = this._getCubicCurveApproxStep(p0, p1, p2, p3);

	        var step2 = step * step;
	        var step3 = step2 * step;

	        var pre1 = 3.0 * step;
	        var pre2 = 3.0 * step2;
	        var pre4 = 6.0 * step2;
	        var pre5 = 6.0 * step3;

	        var tmp1x = x0 - x1 * 2.0 + x2;
	        var tmp1y = y0 - y1 * 2.0 + y2;

	        var tmp2x = (x1 - x2) * 3.0 - x0 + x3;
	        var tmp2y = (y1 - y2) * 3.0 - y0 + y3;

	        var fx = x0;
	        var fy = y0;

	        var dfx = (x1 - x0) * pre1 + tmp1x * pre2 + tmp2x * step3;
	        var dfy = (y1 - y0) * pre1 + tmp1y * pre2 + tmp2y * step3;

	        var ddfx = tmp1x * pre4 + tmp2x * pre5;
	        var ddfy = tmp1y * pre4 + tmp2y * pre5;

	        var dddfx = tmp2x * pre5;
	        var dddfy = tmp2y * pre5;

	        var t = 0;

	        var k = 0;
	        var segCount = Math.ceil(1 / step);

	        var points = new Float32Array((segCount + 1) * 3);
	        var points = [];
	        var offset = 0;
	        for (var k = 0; k < segCount + 1; k++) {
	            points[offset++] = fx;
	            points[offset++] = fy;

	            fx += dfx; fy += dfy;
	            dfx += ddfx; dfy += ddfy;
	            ddfx += dddfx; ddfy += dddfy;
	            t += step;

	            if (t > 1) {
	                fx = dfx > 0 ? Math.min(fx, x3) : Math.max(fx, x3);
	                fy = dfy > 0 ? Math.min(fy, y3) : Math.max(fy, y3);
	            }
	        }

	        this.addPolyline(points, color, lineWidth, false);
	    },

	    /**
	     * Add a straight line
	     * @param {Array.<number>} p0
	     * @param {Array.<number>} p1
	     * @param {Array.<number>} color
	     * @param {number} [lineWidth=1]
	     */
	    addLine: function (p0, p1, color, lineWidth) {
	        this.addPolyline([p0, p1], color, lineWidth, false);
	    },

	    /**
	     * Add a straight line
	     * @param {Array.<Array> | Array.<number>} points
	     * @param {Array.<number> | Array.<Array>} color
	     * @param {number} [lineWidth=1]
	     * @param {boolean} [notSharingColor=false]
	     */
	    addPolyline: function (points, color, lineWidth, notSharingColor) {
	        if (!points.length) {
	            return;
	        }

	        var is2DArray = typeof points[0] !== 'number';
	        var positionAttr = this.attributes.position;
	        var colorAttr = this.attributes.color;
	        var offsetAttr = this.attributes.offset;
	        var normalAttr = this.attributes.normal;
	        var indices = this.indices;

	        if (lineWidth == null) {
	            lineWidth = 1;
	        }

	        var vertexOffset = this._vertexOffset;
	        var pointCount = is2DArray ? points.length : points.length / 2;
	        var iterCount = pointCount;
	        var point = [], nextPoint = [], prevPoint = [];
	        var pointColor;
	        var dirA = vec2.create();
	        var dirB = vec2.create();
	        var normal = vec2.create();
	        var tangent = vec2.create();
	        for (var k = 0; k < iterCount; k++) {
	            if (is2DArray) {
	                point = points[k];
	                if (notSharingColor) {
	                    pointColor = color[k];
	                }
	                else {
	                    pointColor = color;
	                }
	            }
	            else {
	                var k2 = k * 2;
	                point = point || [];
	                point[0] = points[k2];
	                point[1] = points[k2 + 1];

	                if (notSharingColor) {
	                    var k4 = k * 4;
	                    pointColor = pointColor || [];
	                    pointColor[0] = color[k4];
	                    pointColor[1] = color[k4 + 1];
	                    pointColor[2] = color[k4 + 2];
	                    pointColor[3] = color[k4 + 3];
	                }
	                else {
	                    pointColor = color;
	                }
	            }
	            if (!this.useNativeLine) {
	                var offset;
	                if (k < iterCount - 1) {
	                    if (is2DArray) {
	                        vec2.copy(nextPoint, points[k + 1]);
	                    }
	                    else {
	                        var k2 = (k + 1) * 2;
	                        nextPoint = nextPoint || [];
	                        nextPoint[0] = points[k2];
	                        nextPoint[1] = points[k2 + 1];
	                    }
	                    // TODO In case dir is (0, 0)
	                    // TODO miterLimit
	                    if (k > 0) {
	                        vec2.sub(dirA, point, prevPoint);
	                        vec2.sub(dirB, nextPoint, point);
	                        vec2.normalize(dirA, dirA);
	                        vec2.normalize(dirB, dirB);
	                        vec2.add(tangent, dirA, dirB);
	                        vec2.normalize(tangent, tangent);
	                        var miter = lineWidth / 2 * Math.min(1 / vec2.dot(dirA, tangent), 2);
	                        normal[0] = -tangent[1];
	                        normal[1] = tangent[0];

	                        offset = miter;
	                    }
	                    else {
	                        vec2.sub(dirA, nextPoint, point);
	                        vec2.normalize(dirA, dirA);

	                        normal[0] = -dirA[1];
	                        normal[1] = dirA[0];

	                        offset = lineWidth / 2;
	                    }

	                }
	                else {
	                    vec2.sub(dirA, point, prevPoint);
	                    vec2.normalize(dirA, dirA);

	                    normal[0] = -dirA[1];
	                    normal[1] = dirA[0];

	                    offset = lineWidth / 2;
	                }
	                normalAttr.set(vertexOffset, normal);
	                normalAttr.set(vertexOffset + 1, normal);
	                offsetAttr.set(vertexOffset, offset);
	                offsetAttr.set(vertexOffset + 1, -offset);

	                vec2.copy(prevPoint, point);

	                positionAttr.set(vertexOffset, point);
	                positionAttr.set(vertexOffset + 1, point);

	                colorAttr.set(vertexOffset, pointColor);
	                colorAttr.set(vertexOffset + 1, pointColor);

	                vertexOffset += 2;
	            }
	            else {
	                if (k > 1) {
	                    positionAttr.copy(vertexOffset, vertexOffset - 1);
	                    colorAttr.copy(vertexOffset, vertexOffset - 1);
	                    vertexOffset++;
	                }
	            }

	            if (!this.useNativeLine) {
	                if (k > 0) {
	                    var idx3 = this._faceOffset * 3;
	                    var indices = this.indices;
	                    // 0-----2
	                    // 1-----3
	                    // 0->1->2, 1->3->2
	                    indices[idx3] = vertexOffset - 4;
	                    indices[idx3 + 1] = vertexOffset - 3;
	                    indices[idx3 + 2] = vertexOffset - 2;

	                    indices[idx3 + 3] = vertexOffset - 3;
	                    indices[idx3 + 4] = vertexOffset - 1;
	                    indices[idx3 + 5] = vertexOffset - 2;

	                    this._faceOffset += 2;
	                }
	            }
	            else {
	                colorAttr.set(vertexOffset, pointColor);
	                positionAttr.set(vertexOffset, point);
	                vertexOffset++;
	            }
	        }

	        this._vertexOffset = vertexOffset;
	    }
	});

	echarts.util.defaults(LinesGeometry.prototype, dynamicConvertMixin);

	module.exports = LinesGeometry;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var echarts = __webpack_require__(2);
	var graphicGL = __webpack_require__(31);
	var Pass = __webpack_require__(57);
	var FrameBuffer = __webpack_require__(48);

	graphicGL.Shader.import(__webpack_require__(218));

	var defaultConfigs = {
	    repulsionByDegree: true,
	    linLogMode: false,

	    strongGravityMode: false,
	    gravity: 1.0,

	    scaling: 1.0,

	    edgeWeightInfluence: 1.0,

	    jitterTolerence: 0.1,

	    preventOverlap: false,

	    dissuadeHubs: false,

	    gravityCenter: null
	};

	function ForceAtlas2GPU(options) {

	    var textureOpt = {
	        type: graphicGL.Texture.FLOAT,
	        minFilter: graphicGL.Texture.NEAREST,
	        magFilter: graphicGL.Texture.NEAREST
	    };

	    this._positionSourceTex = new graphicGL.Texture2D(textureOpt);
	    this._positionSourceTex.flipY = false;

	    this._positionTex = new graphicGL.Texture2D(textureOpt);
	    this._positionPrevTex = new graphicGL.Texture2D(textureOpt);
	    this._forceTex = new graphicGL.Texture2D(textureOpt);
	    this._forcePrevTex = new graphicGL.Texture2D(textureOpt);

	    this._weightedSumTex = new graphicGL.Texture2D(textureOpt);
	    this._weightedSumTex.width = this._weightedSumTex.height = 1;

	    this._globalSpeedTex = new graphicGL.Texture2D(textureOpt);
	    this._globalSpeedPrevTex = new graphicGL.Texture2D(textureOpt);
	    this._globalSpeedTex.width = this._globalSpeedTex.height = 1;
	    this._globalSpeedPrevTex.width = this._globalSpeedPrevTex.height = 1;

	    this._nodeRepulsionPass = new Pass({
	        fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updateNodeRepulsion')
	    });
	    this._positionPass = new Pass({
	        fragment: graphicGL.Shader.source('ecgl.forceAtlas2.updatePosition')
	    });
	    this._globalSpeedPass = new Pass({
	        fragment: graphicGL.Shader.source('ecgl.forceAtlas2.calcGlobalSpeed')
	    });
	    this._copyPass = new Pass({
	        fragment: graphicGL.Shader.source('qtek.compositor.output')
	    });

	    var additiveBlend = function (gl) {
	        gl.blendEquation(gl.FUNC_ADD);
	        gl.blendFunc(gl.ONE, gl.ONE);
	    };
	    this._edgeForceMesh = new graphicGL.Mesh({
	        geometry: new graphicGL.Geometry({
	            attributes: {
	                node1: new graphicGL.Geometry.Attribute('node1', 'float', 2),
	                node2: new graphicGL.Geometry.Attribute('node2', 'float', 2),
	                weight: new graphicGL.Geometry.Attribute('weight', 'float', 1)
	            },
	            dynamic: true,
	            mainAttribute: 'node1'
	        }),
	        material: new graphicGL.Material({
	            transparent: true,
	            shader: graphicGL.createShader('ecgl.forceAtlas2.updateEdgeAttraction'),
	            blend: additiveBlend,
	            depthMask: false,
	            depthText: false
	        }),
	        mode: graphicGL.Mesh.POINTS
	    });
	    this._weightedSumMesh = new graphicGL.Mesh({
	        geometry: new graphicGL.Geometry({
	            attributes: {
	                node: new graphicGL.Geometry.Attribute('node', 'float', 2)
	            },
	            dynamic: true,
	            mainAttribute: 'node'
	        }),
	        material: new graphicGL.Material({
	            transparent: true,
	            shader: graphicGL.createShader('ecgl.forceAtlas2.calcWeightedSum'),
	            blend: additiveBlend,
	            depthMask: false,
	            depthText: false
	        }),
	        mode: graphicGL.Mesh.POINTS
	    });

	    this._framebuffer = new FrameBuffer({
	        depthBuffer: false
	    });

	    this._dummyCamera = new graphicGL.OrthographicCamera({
	        left: -1, right: 1,
	        top: 1, bottom: -1,
	        near: 0, far: 100
	    });

	    this._globalSpeed = 0;
	}

	ForceAtlas2GPU.prototype.updateOption = function (options) {

	    // Default config
	    for (var name in defaultConfigs) {
	        this[name] = defaultConfigs[name];
	    }

	    // Config according to data scale
	    var nNodes = this._nodes.length;
	    if (nNodes > 50000) {
	        this.jitterTolerence = 10;
	    }
	    else if (nNodes > 5000) {
	        this.jitterTolerence = 1;
	    }
	    else {
	        this.jitterTolerence = 0.1;
	    }

	    if (nNodes > 100) {
	        this.scaling = 2.0;
	    }
	    else {
	        this.scaling = 10.0;
	    }

	    // this.edgeWeightInfluence = 1;
	    // this.gravity = 1;
	    // this.strongGravityMode = false;
	    if (options) {
	        for (var name in defaultConfigs) {
	            if (options[name] != null) {
	                this[name] = options[name];
	            }
	        }
	    }

	};

	ForceAtlas2GPU.prototype._updateSettings = function (options) {
	    var nodes = this._nodes;
	    var edges = this._edges;

	    if (!this.gravityCenter) {
	        var min = [Infinity, Infinity];
	        var max = [-Infinity, -Infinity];
	        for (var i = 0; i < nodes.length; i++) {
	            min[0] = Math.min(nodes[i].x, min[0]);
	            min[1] = Math.min(nodes[i].y, min[1]);
	            max[0] = Math.max(nodes[i].x, max[0]);
	            max[1] = Math.max(nodes[i].y, max[1]);
	        }

	        this._gravityCenter = [(min[0] + max[0]) * 0.5, (min[1] + max[1]) * 0.5];
	    }
	    else {
	        this._gravityCenter = this.gravityCenter;
	    }
	    // Update inDegree, outDegree
	    for (var i = 0; i < edges.length; i++) {
	        var node1 = edges[i].node1;
	        var node2 = edges[i].node2;

	        nodes[node1].degree = (nodes[node1].degree || 0) + 1;
	        nodes[node2].degree = (nodes[node2].degree || 0) + 1;
	    }
	};
	/**
	 * @param {Array.<Object>} [{ x, y, mass }] nodes
	 * @param {Array.<Object>} [{ node1, node2, weight }] edges
	 */
	ForceAtlas2GPU.prototype.initData = function (nodes, edges) {

	    this._nodes = nodes;
	    this._edges = edges;

	    this._updateSettings();

	    var textureWidth = Math.ceil(Math.sqrt(nodes.length));
	    var textureHeight = textureWidth;
	    var positionBuffer = new Float32Array(textureWidth * textureHeight * 4);

	    this._resize(textureWidth, textureHeight);

	    var offset = 0;
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        positionBuffer[offset++] = node.x || 0;
	        positionBuffer[offset++] = node.y || 0;

	        if (this.repulsionByDegree) {
	            positionBuffer[offset++] = (node.degree || 0) + 1;
	        }
	        else {
	            positionBuffer[offset++] = node.mass || 1;
	        }
	        positionBuffer[offset++] = node.size || 1;
	    }
	    this._positionSourceTex.pixels = positionBuffer;

	    var edgeGeometry = this._edgeForceMesh.geometry;
	    var edgeLen = edges.length;
	    edgeGeometry.attributes.node1.init(edgeLen * 2);
	    edgeGeometry.attributes.node2.init(edgeLen * 2);
	    edgeGeometry.attributes.weight.init(edgeLen * 2);

	    var uv = [];

	    for (var i = 0; i < edges.length; i++) {
	        var attributes = edgeGeometry.attributes;
	        var weight = edges[i].weight;
	        if (weight == null) {
	            weight = 1;
	        }
	        // Two way.
	        attributes.node1.set(i, this.getNodeUV(edges[i].node1, uv));
	        attributes.node2.set(i, this.getNodeUV(edges[i].node2, uv));
	        attributes.weight.set(i, weight);

	        attributes.node1.set(i + edgeLen, this.getNodeUV(edges[i].node2, uv));
	        attributes.node2.set(i + edgeLen, this.getNodeUV(edges[i].node1, uv));
	        attributes.weight.set(i + edgeLen, weight);
	    }

	    var weigtedSumGeo = this._weightedSumMesh.geometry;
	    weigtedSumGeo.attributes.node.init(nodes.length);
	    for (var i = 0; i < nodes.length; i++) {
	        weigtedSumGeo.attributes.node.set(i, this.getNodeUV(i, uv));
	    }

	    edgeGeometry.dirty();
	    weigtedSumGeo.dirty();

	    this._nodeRepulsionPass.material.shader.define('fragment', 'NODE_COUNT', nodes.length);
	    this._nodeRepulsionPass.material.setUniform('textureSize', [textureWidth, textureHeight]);

	    this._inited = false;

	    this._frame = 0;
	};

	ForceAtlas2GPU.prototype.getNodes = function () {
	    return this._nodes;
	};
	ForceAtlas2GPU.prototype.getEdges = function () {
	    return this._edges;
	};

	ForceAtlas2GPU.prototype.step = function (renderer) {
	    if (!this._inited) {
	        this._initFromSource(renderer);
	        this._inited = true;
	    }

	    this._frame++;

	    this._framebuffer.attach(this._forceTex);
	    this._framebuffer.bind(renderer);
	    var nodeRepulsionPass = this._nodeRepulsionPass;
	    // Calc node repulsion, gravity
	    nodeRepulsionPass.setUniform('strongGravityMode', this.strongGravityMode);
	    nodeRepulsionPass.setUniform('gravity', this.gravity);
	    nodeRepulsionPass.setUniform('gravityCenter', this._gravityCenter);
	    nodeRepulsionPass.setUniform('scaling', this.scaling);
	    nodeRepulsionPass.setUniform('preventOverlap', this.preventOverlap);
	    nodeRepulsionPass.setUniform('positionTex', this._positionPrevTex);
	    nodeRepulsionPass.render(renderer);

	    // Calc edge attraction force
	    var edgeForceMesh = this._edgeForceMesh;
	    edgeForceMesh.material.set('linLogMode', this.linLogMode);
	    edgeForceMesh.material.set('edgeWeightInfluence', this.edgeWeightInfluence);
	    edgeForceMesh.material.set('preventOverlap', this.preventOverlap);
	    edgeForceMesh.material.set('positionTex', this._positionPrevTex);
	    renderer.gl.enable(renderer.gl.BLEND);
	    renderer.renderQueue([edgeForceMesh], this._dummyCamera);

	    // Calc weighted sum.
	    this._framebuffer.attach(this._weightedSumTex);
	    renderer.gl.clearColor(0, 0, 0, 0);
	    renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
	    renderer.gl.enable(renderer.gl.BLEND);
	    var weightedSumMesh = this._weightedSumMesh;
	    weightedSumMesh.material.set('positionTex', this._positionPrevTex);
	    weightedSumMesh.material.set('forceTex', this._forceTex);
	    weightedSumMesh.material.set('forcePrevTex', this._forcePrevTex);
	    renderer.renderQueue([weightedSumMesh], this._dummyCamera);

	    // Calc global speed.
	    this._framebuffer.attach(this._globalSpeedTex);
	    var globalSpeedPass = this._globalSpeedPass;
	    globalSpeedPass.setUniform('globalSpeedPrevTex', this._globalSpeedPrevTex);
	    globalSpeedPass.setUniform('weightedSumTex', this._weightedSumTex);
	    globalSpeedPass.setUniform('jitterTolerence', this.jitterTolerence);
	    renderer.gl.disable(renderer.gl.BLEND);
	    globalSpeedPass.render(renderer);

	    // Update position.
	    var positionPass = this._positionPass;
	    this._framebuffer.attach(this._positionTex);
	    positionPass.setUniform('globalSpeedTex', this._globalSpeedTex);
	    positionPass.setUniform('positionTex', this._positionPrevTex);
	    positionPass.setUniform('forceTex', this._forceTex);
	    positionPass.setUniform('forcePrevTex', this._forcePrevTex);
	    positionPass.render(renderer);

	    this._framebuffer.unbind(renderer);

	    this._swapTexture();
	};

	ForceAtlas2GPU.prototype.getNodePositionTexture = function () {
	    return this._inited
	        // Texture already been swapped.
	        ? this._positionPrevTex
	        : this._positionSourceTex;
	};

	ForceAtlas2GPU.prototype.getNodeUV = function (nodeIndex, uv) {
	    uv = uv || [];
	    var textureWidth = this._positionTex.width;
	    var textureHeight = this._positionTex.height;
	    uv[0] = (nodeIndex % textureWidth) / (textureWidth - 1);
	    uv[1] = Math.floor(nodeIndex / textureWidth) / (textureHeight - 1);
	    return uv;
	};

	ForceAtlas2GPU.prototype.getNodePosition = function (renderer, out) {
	    var positionArr = this._positionArr;
	    var width = this._positionTex.width;
	    var height = this._positionTex.height;
	    var size = width * height;
	    if (!positionArr || positionArr.length !== size * 4) {
	        positionArr = this._positionArr = new Float32Array(size * 4);
	    }
	    this._framebuffer.bind(renderer);
	    this._framebuffer.attach(this._positionPrevTex);
	    renderer.gl.readPixels(
	        0, 0, width, height,
	        renderer.gl.RGBA, renderer.gl.FLOAT,
	        positionArr
	    );
	    this._framebuffer.unbind(renderer);
	    if (!out) {
	        out = new Float32Array(this._nodes.length * 2);
	    }
	    for (var i = 0; i < this._nodes.length; i++) {
	        out[i * 2] = positionArr[i * 4];
	        out[i * 2 + 1] = positionArr[i * 4 + 1];
	    }
	    return out;
	};

	ForceAtlas2GPU.prototype.getTextureData = function (renderer, textureName) {
	    var tex = this['_' + textureName + 'Tex'];
	    var width = tex.width;
	    var height = tex.height;
	    this._framebuffer.bind(renderer);
	    this._framebuffer.attach(tex);
	    var arr = new Float32Array(width * height * 4);
	    renderer.gl.readPixels(0, 0, width, height, renderer.gl.RGBA, renderer.gl.FLOAT, arr);
	    this._framebuffer.unbind(renderer);
	    return arr;
	};

	ForceAtlas2GPU.prototype.isFinished = function (renderer, threshold) {
	    var globalSpeedData = this.getTextureData(renderer, 'globalSpeed');
	    // console.log(globalSpeedData[0]);
	    // PENDING
	    return this._inited && globalSpeedData[0] < threshold && this._frame > 10;
	};

	ForceAtlas2GPU.prototype._swapTexture = function () {
	    var tmp = this._positionPrevTex;
	    this._positionPrevTex = this._positionTex;
	    this._positionTex = tmp;

	    var tmp = this._forcePrevTex;
	    this._forcePrevTex = this._forceTex;
	    this._forceTex = tmp;

	    var tmp = this._globalSpeedPrevTex;
	    this._globalSpeedPrevTex = this._globalSpeedTex;
	    this._globalSpeedTex = tmp;
	};

	ForceAtlas2GPU.prototype._initFromSource = function (renderer) {
	    this._framebuffer.attach(this._positionPrevTex);
	    this._framebuffer.bind(renderer);
	    this._copyPass.setUniform('texture', this._positionSourceTex);
	    this._copyPass.render(renderer);

	    renderer.gl.clearColor(0, 0, 0, 0);
	    this._framebuffer.attach(this._forcePrevTex);
	    renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);
	    this._framebuffer.attach(this._globalSpeedPrevTex);
	    renderer.gl.clear(renderer.gl.COLOR_BUFFER_BIT);

	    this._framebuffer.unbind(renderer);
	};

	ForceAtlas2GPU.prototype._resize = function (width, height) {
	    ['_positionSourceTex', '_positionTex', '_positionPrevTex', '_forceTex', '_forcePrevTex'].forEach(function (texName) {
	        this[texName].width = width;
	        this[texName].height = height;
	        this[texName].dirty();
	    }, this);
	};

	ForceAtlas2GPU.prototype.dispose = function (renderer) {
	    var gl = renderer.gl;
	    this._framebuffer.dispose(gl);

	    this._copyPass.dispose(gl);
	    this._nodeRepulsionPass.dispose(gl);
	    this._positionPass.disable(gl);
	    this._globalSpeedPass.dispose(gl);

	    this._edgeForceMesh.material.shader.dispose(gl);
	    this._edgeForceMesh.geometry.dispose(gl);
	    this._weightedSumMesh.material.shader.dispose(gl);
	    this._weightedSumMesh.geometry.dispose(gl);

	    this._positionSourceTex.dispose(gl);
	    this._positionTex.dispose(gl);
	    this._positionPrevTex.dispose(gl);
	    this._forceTex.dispose(gl);
	    this._forcePrevTex.dispose(gl);
	    this._weightedSumTex.dispose(gl);
	    this._globalSpeedTex.disable(gl);
	    this._globalSpeedPrevTex.disable(gl);
	};

	echarts.ForceAtlas2GPU = ForceAtlas2GPU;

	module.exports = ForceAtlas2GPU;

/***/ },
/* 218 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.forceAtlas2.updateNodeRepulsion\n\n#define NODE_COUNT 0\n\nuniform sampler2D positionTex;\n\nuniform vec2 textureSize;\nuniform float gravity;\nuniform float scaling;\nuniform vec2 gravityCenter;\n\nuniform bool strongGravityMode;\nuniform bool preventOverlap;\n\nvarying vec2 v_Texcoord;\n\nvoid main() {\n\n    vec4 n0 = texture2D(positionTex, v_Texcoord);\n\n    vec2 force = vec2(0.0);\n    for (int i = 0; i < NODE_COUNT; i++) {\n        vec2 uv = vec2(\n            mod(float(i), textureSize.x) / (textureSize.x - 1.0),\n            floor(float(i) / textureSize.x) / (textureSize.y - 1.0)\n        );\n        vec4 n1 = texture2D(positionTex, uv);\n\n        vec2 dir = n0.xy - n1.xy;\n        float d2 = dot(dir, dir);\n\n        if (d2 > 0.0) {\n            float factor = 0.0;\n            if (preventOverlap) {\n                float d = sqrt(d2);\n                d = d - n0.w - n1.w;\n                if (d > 0.0) {\n                    factor = scaling * n0.z * n1.z / (d * d);\n                }\n                else if (d < 0.0) {\n                    // A stronger repulsion if overlap\n                    factor = scaling * 100.0 * n0.z * n1.z;\n                }\n            }\n            else {\n                // Divide factor by an extra `d` to normalize the `v`\n                factor = scaling * n0.z * n1.z / d2;\n            }\n            force += dir * factor;\n        }\n    }\n\n    // Gravity\n    vec2 dir = gravityCenter - n0.xy;\n    float d = 1.0;\n    if (!strongGravityMode) {\n        d = length(dir);\n    }\n\n    force += dir * n0.z * gravity / (d + 1.0);\n\n    gl_FragColor = vec4(force, 0.0, 1.0);\n}\n@end\n\n@export ecgl.forceAtlas2.updateEdgeAttraction.vertex\n\nattribute vec2 node1;\nattribute vec2 node2;\nattribute float weight;\n\nuniform sampler2D positionTex;\nuniform float edgeWeightInfluence;\nuniform bool preventOverlap;\nuniform bool linLogMode;\n\nuniform vec2 windowSize: WINDOW_SIZE;\n\nvarying vec2 v_Force;\n\nvoid main() {\n\n    vec4 n0 = texture2D(positionTex, node1);\n    vec4 n1 = texture2D(positionTex, node2);\n\n    vec2 dir = n1.xy - n0.xy;\n    float d = length(dir);\n    float w;\n    if (edgeWeightInfluence == 0.0) {\n        w = 1.0;\n    }\n    else if (edgeWeightInfluence == 1.0) {\n        w = weight;\n    }\n    else {\n        w = pow(weight, edgeWeightInfluence);\n    }\n    // Add 0.5 offset.\n    // PENDING.\n    vec2 offset = vec2(1.0 / windowSize.x, 1.0 / windowSize.y);\n    vec2 scale = vec2((windowSize.x - 1.0) / windowSize.x, (windowSize.y - 1.0) / windowSize.y);\n    vec2 pos = node1 * scale * 2.0 - 1.0;\n    gl_Position = vec4(pos + offset, 0.0, 1.0);\n    gl_PointSize = 1.0;\n\n    float factor;\n    if (preventOverlap) {\n        d = d - n1.w - n0.w;\n    }\n    if (d <= 0.0) {\n        v_Force = vec2(0.0);\n        return;\n    }\n\n    if (linLogMode) {\n        // Divide factor by an extra `d` to normalize the `v`\n        factor = w * log(d) / d;\n    }\n    else {\n        factor = w;\n    }\n    v_Force = dir * factor;\n}\n@end\n\n@export ecgl.forceAtlas2.updateEdgeAttraction.fragment\n\nvarying vec2 v_Force;\n\nvoid main() {\n    gl_FragColor = vec4(v_Force, 0.0, 0.0);\n}\n@end\n\n@export ecgl.forceAtlas2.calcWeightedSum.vertex\n\nattribute vec2 node;\n\nvarying vec2 v_NodeUv;\n\nvoid main() {\n\n    v_NodeUv = node;\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    gl_PointSize = 1.0;\n}\n@end\n\n@export ecgl.forceAtlas2.calcWeightedSum.fragment\n\nvarying vec2 v_NodeUv;\n\nuniform sampler2D positionTex;\nuniform sampler2D forceTex;\nuniform sampler2D forcePrevTex;\n\nvoid main() {\n    vec2 force = texture2D(forceTex, v_NodeUv).rg;\n    vec2 forcePrev = texture2D(forcePrevTex, v_NodeUv).rg;\n\n    float mass = texture2D(positionTex, v_NodeUv).z;\n    float swing = length(force - forcePrev) * mass;\n    float traction = length(force + forcePrev) * 0.5 * mass;\n\n    gl_FragColor = vec4(swing, traction, 0.0, 0.0);\n}\n@end\n\n@export ecgl.forceAtlas2.calcGlobalSpeed\n\nuniform sampler2D globalSpeedPrevTex;\nuniform sampler2D weightedSumTex;\nuniform float jitterTolerence;\n\nvoid main() {\n    vec2 weightedSum = texture2D(weightedSumTex, vec2(0.5)).xy;\n    float prevGlobalSpeed = texture2D(globalSpeedPrevTex, vec2(0.5)).x;\n    float globalSpeed = jitterTolerence * jitterTolerence\n        // traction / swing\n        * weightedSum.y / weightedSum.x;\n    if (prevGlobalSpeed > 0.0) {\n        globalSpeed = min(globalSpeed / prevGlobalSpeed, 1.5) * prevGlobalSpeed;\n    }\n    gl_FragColor = vec4(globalSpeed, 0.0, 0.0, 1.0);\n}\n@end\n\n@export ecgl.forceAtlas2.updatePosition\n\nuniform sampler2D forceTex;\nuniform sampler2D forcePrevTex;\nuniform sampler2D positionTex;\nuniform sampler2D globalSpeedTex;\n\nvarying vec2 v_Texcoord;\n\nvoid main() {\n    vec2 force = texture2D(forceTex, v_Texcoord).xy;\n    vec2 forcePrev = texture2D(forcePrevTex, v_Texcoord).xy;\n    vec4 node = texture2D(positionTex, v_Texcoord);\n\n    float globalSpeed = texture2D(globalSpeedTex, vec2(0.5)).r;\n    float swing = length(force - forcePrev);\n    float speed = 0.1 * globalSpeed / (0.1 + globalSpeed * sqrt(swing));\n\n    // Additional constraint to prevent local speed gets too high\n    float df = length(force);\n    if (df > 0.0) {\n        speed = min(df * speed, 10.0) / df;\n\n        gl_FragColor = vec4(node.xy + speed * force, node.zw);\n    }\n    else {\n        gl_FragColor = node;\n    }\n}\n@end\n\n// For edge draw\n@export ecgl.forceAtlas2.edges.vertex\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec2 node;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\nuniform sampler2D positionTex;\n\nvoid main()\n{\n    gl_Position = worldViewProjection * vec4(\n        texture2D(positionTex, node).xy, -10.0, 1.0\n    );\n    v_Color = a_Color;\n}\n@end\n\n@export ecgl.forceAtlas2.edges.fragment\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\nvarying vec4 v_Color;\nvoid main() {\n    gl_FragColor = color * v_Color;\n}\n@end"

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	
	var Base = __webpack_require__(6);
	var retrieve = __webpack_require__(69);

	/**
	 * @alias module:echarts-gl/util/Roam2DControl
	 */
	var Roam2DControl = Base.extend(function () {

	    return {
	        /**
	         * @type {module:zrender~ZRender}
	         */
	        zr: null,

	        /**
	         * @type {module:echarts-gl/core/ViewGL}
	         */
	        viewGL: null,

	        minZoom: 0.2,

	        maxZoom: 5,

	        _needsUpdate: false,

	        _dx: 0,
	        _dy: 0,

	        _zoom: 1
	    };
	}, function () {
	    // Each Roam2DControl has it's own handler
	    this._mouseDownHandler = this._mouseDownHandler.bind(this);
	    this._mouseWheelHandler = this._mouseWheelHandler.bind(this);
	    this._mouseMoveHandler = this._mouseMoveHandler.bind(this);
	    this._mouseUpHandler = this._mouseUpHandler.bind(this);
	    this._update = this._update.bind(this);
	}, {

	    init: function () {
	        var zr = this.zr;

	        zr.on('mousedown', this._mouseDownHandler);
	        zr.on('mousewheel', this._mouseWheelHandler);
	        zr.on('globalout', this._mouseUpHandler);

	        zr.animation.on('frame', this._update);
	    },

	    setTarget: function (target) {
	        this._target = target;
	    },

	    setZoom: function (zoom) {
	        this._zoom = Math.max(Math.min(
	            zoom, this.maxZoom
	        ), this.minZoom);
	        this._needsUpdate = true;
	    },

	    setOffset: function (offset) {
	        this._dx = offset[0];
	        this._dy = offset[1];

	        this._needsUpdate = true;
	    },

	    getZoom: function () {
	        return this._zoom;
	    },

	    getOffset: function () {
	        return [this._dx, this._dy];
	    },

	    _update: function () {
	        if (!this._target) {
	            return;
	        }
	        if (!this._needsUpdate) {
	            return;
	        }

	        var target = this._target;

	        var scale = this._zoom;

	        target.position.x = this._dx;
	        target.position.y = this._dy;

	        target.scale.set(scale, scale, scale);

	        this.zr.refresh();

	        this._needsUpdate = false;

	        this.trigger('update');
	    },

	    _mouseDownHandler: function (e) {
	        if (e.target) {
	            return;
	        }

	        var x = e.offsetX;
	        var y = e.offsetY;
	        if (this.viewGL && !this.viewGL.containPoint(x, y)) {
	            return;
	        }

	        this.zr.on('mousemove', this._mouseMoveHandler);
	        this.zr.on('mouseup', this._mouseUpHandler);

	        var pos = this._convertPos(x, y);

	        this._x = pos.x;
	        this._y = pos.y;
	    },

	    // Convert pos from screen space to viewspace.
	    _convertPos: function (x, y) {

	        var camera = this.viewGL.camera;
	        var viewport = this.viewGL.viewport;
	        // PENDING
	        return {
	            x: (x - viewport.x) / viewport.width * (camera.right - camera.left) + camera.left,
	            y: (y - viewport.y) / viewport.height * (camera.bottom - camera.top) + camera.top
	        };
	    },

	    _mouseMoveHandler: function (e) {

	        var pos = this._convertPos(e.offsetX, e.offsetY);

	        this._dx += pos.x - this._x;
	        this._dy += pos.y - this._y;

	        this._x = pos.x;
	        this._y = pos.y;

	        this._needsUpdate = true;
	    },

	    _mouseUpHandler: function (e) {
	        this.zr.off('mousemove', this._mouseMoveHandler);
	        this.zr.off('mouseup', this._mouseUpHandler);
	    },

	    _mouseWheelHandler: function (e) {
	        e = e.event;
	        var delta = e.wheelDelta // Webkit
	                || -e.detail; // Firefox
	        if (delta === 0) {
	            return;
	        }

	        var x = e.offsetX;
	        var y = e.offsetY;
	        if (this.viewGL && !this.viewGL.containPoint(x, y)) {
	            return;
	        }

	        var zoomScale = delta > 0 ? 1.1 : 0.9;
	        var newZoom = Math.max(Math.min(
	            this._zoom * zoomScale, this.maxZoom
	        ), this.minZoom);
	        zoomScale = newZoom / this._zoom;

	        var pos = this._convertPos(x, y);

	        var fixX = (pos.x - this._dx) * (zoomScale - 1);
	        var fixY = (pos.y - this._dy) * (zoomScale - 1);

	        this._dx -= fixX;
	        this._dy -= fixY;

	        this._zoom = newZoom;

	        this._needsUpdate = true;
	    },

	    dispose: function () {

	        var zr = this.zr;
	        zr.off('mousedown', this._mouseDownHandler);
	        zr.off('mousemove', this._mouseMoveHandler);
	        zr.off('mouseup', this._mouseUpHandler);
	        zr.off('mousewheel', this._mouseWheelHandler);
	        zr.off('globalout', this._mouseUpHandler);

	        zr.animation.off('frame', this._update);
	    }
	});

	module.exports = Roam2DControl;

/***/ },
/* 220 */
/***/ function(module, exports) {

	module.exports = "@export ecgl.lines2D.vertex\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\n\nattribute vec2 position: POSITION;\nattribute vec4 a_Color : COLOR;\nvarying vec4 v_Color;\n\n#ifdef POSITIONTEXTURE_ENABLED\nuniform sampler2D positionTexture;\n#endif\n\nvoid main()\n{\n    gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\n\n    v_Color = a_Color;\n}\n\n@end\n\n@export ecgl.lines2D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\n\nvoid main()\n{\n    gl_FragColor = color * v_Color;\n}\n@end\n\n\n@export ecgl.meshLines2D.vertex\n\n// https://mattdesl.svbtle.com/drawing-lines-is-hard\nattribute vec2 position: POSITION;\nattribute vec2 normal;\nattribute float offset;\nattribute vec4 a_Color : COLOR;\n\nuniform mat4 worldViewProjection : WORLDVIEWPROJECTION;\nuniform vec4 viewport : VIEWPORT;\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvoid main()\n{\n    vec4 p2 = worldViewProjection * vec4(position + normal, -10.0, 1.0);\n    gl_Position = worldViewProjection * vec4(position, -10.0, 1.0);\n\n    p2.xy /= p2.w;\n    gl_Position.xy /= gl_Position.w;\n\n    // Get normal on projection space.\n    vec2 N = normalize(p2.xy - gl_Position.xy);\n    gl_Position.xy += N * offset / viewport.zw * 2.0;\n\n    gl_Position.xy *= gl_Position.w;\n\n    v_Color = a_Color;\n}\n@end\n\n\n@export ecgl.meshLines2D.fragment\n\nuniform vec4 color : [1.0, 1.0, 1.0, 1.0];\n\nvarying vec4 v_Color;\nvarying float v_Miter;\n\nvoid main()\n{\n    // TODO Fadeout pixels v_Miter > 1\n    gl_FragColor = color * v_Color;\n}\n\n@end"

/***/ }
/******/ ])
});
;